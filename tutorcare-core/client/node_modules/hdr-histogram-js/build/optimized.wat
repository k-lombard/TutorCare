(module
 (type $i32_i32_=>_none (func (param i32 i32)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $i32_=>_f64 (func (param i32) (result f64)))
 (type $i32_=>_none (func (param i32)))
 (type $i32_i64_=>_none (func (param i32 i64)))
 (type $i32_i32_i64_=>_none (func (param i32 i32 i64)))
 (type $i32_i32_=>_i32 (func (param i32 i32) (result i32)))
 (type $i32_f64_=>_i32 (func (param i32 f64) (result i32)))
 (type $i32_i64_i64_=>_none (func (param i32 i64 i64)))
 (type $i32_f64_f64_=>_none (func (param i32 f64 f64)))
 (type $i32_f64_f64_f64_i32_i32_=>_i32 (func (param i32 f64 f64 f64 i32 i32) (result i32)))
 (type $i32_f64_=>_f64 (func (param i32 f64) (result f64)))
 (type $i32_i32_i32_=>_none (func (param i32 i32 i32)))
 (type $i32_f64_=>_none (func (param i32 f64)))
 (type $i32_i32_i32_=>_i32 (func (param i32 i32 i32) (result i32)))
 (type $i32_i64_=>_i32 (func (param i32 i64) (result i32)))
 (type $i32_i64_i64_i32_=>_none (func (param i32 i64 i64 i32)))
 (type $i32_i32_f64_=>_i32 (func (param i32 i32 f64) (result i32)))
 (type $i32_f64_f64_=>_i32 (func (param i32 f64 f64) (result i32)))
 (type $i64_i64_i32_=>_i32 (func (param i64 i64 i32) (result i32)))
 (type $i32_i64_=>_i64 (func (param i32 i64) (result i64)))
 (type $i32_f64_=>_i64 (func (param i32 f64) (result i64)))
 (type $none_=>_none (func))
 (type $none_=>_i32 (func (result i32)))
 (type $i32_i32_i32_i32_=>_none (func (param i32 i32 i32 i32)))
 (type $i64_=>_i32 (func (param i64) (result i32)))
 (type $i32_=>_i64 (func (param i32) (result i64)))
 (type $i32_i32_=>_i64 (func (param i32 i32) (result i64)))
 (type $i32_i32_i32_i32_i32_=>_none (func (param i32 i32 i32 i32 i32)))
 (type $i32_i64_i32_=>_none (func (param i32 i64 i32)))
 (type $i32_i32_i32_i32_=>_i32 (func (param i32 i32 i32 i32) (result i32)))
 (type $i32_i32_i32_i32_i32_i32_=>_i32 (func (param i32 i32 i32 i32 i32 i32) (result i32)))
 (type $f64_=>_f64 (func (param f64) (result f64)))
 (type $f64_f64_=>_f64 (func (param f64 f64) (result f64)))
 (import "env" "abort" (func $~lib/builtins/abort (param i32 i32 i32 i32)))
 (memory $0 1)
 (data (i32.const 1024) "(\00\00\00\01\00\00\00\01\00\00\00(\00\00\00a\00l\00l\00o\00c\00a\00t\00i\00o\00n\00 \00t\00o\00o\00 \00l\00a\00r\00g\00e")
 (data (i32.const 1088) "\1e\00\00\00\01\00\00\00\01\00\00\00\1e\00\00\00~\00l\00i\00b\00/\00r\00t\00/\00t\00l\00s\00f\00.\00t\00s")
 (data (i32.const 1136) "\0c\00\00\00\01\00\00\00\01\00\00\00\0c\00\00\00N\00O\00 \00T\00A\00G")
 (data (i32.const 1168) "\02\00\00\00\01\00\00\00\01\00\00\00\02\00\00\00 ")
 (data (i32.const 1200) "\1c\00\00\00\01\00\00\00\01\00\00\00\1c\00\00\00I\00n\00v\00a\00l\00i\00d\00 \00l\00e\00n\00g\00t\00h")
 (data (i32.const 1248) "\1c\00\00\00\01\00\00\00\01\00\00\00\1c\00\00\00~\00l\00i\00b\00/\00s\00t\00r\00i\00n\00g\00.\00t\00s")
 (data (i32.const 1300) "\01\00\00\00\01")
 (data (i32.const 1312) "\08\00\00\00\01\00\00\00\01\00\00\00\08\00\00\00n\00u\00l\00l")
 (data (i32.const 1344) "d\00\00\00\01\00\00\00\01\00\00\00d\00\00\00t\00o\00S\00t\00r\00i\00n\00g\00(\00)\00 \00r\00a\00d\00i\00x\00 \00a\00r\00g\00u\00m\00e\00n\00t\00 \00m\00u\00s\00t\00 \00b\00e\00 \00b\00e\00t\00w\00e\00e\00n\00 \002\00 \00a\00n\00d\00 \003\006")
 (data (i32.const 1472) "&\00\00\00\01\00\00\00\01\00\00\00&\00\00\00~\00l\00i\00b\00/\00u\00t\00i\00l\00/\00n\00u\00m\00b\00e\00r\00.\00t\00s")
 (data (i32.const 1536) "\02\00\00\00\01\00\00\00\01\00\00\00\02\00\00\000")
 (data (i32.const
 (data (i32.const 1969) "\04\00\00\01\00\00\00\01\00\00\00\00\04\00\000\000\000\001\000\002\000\003\000\004\000\005\000\006\000\007\000\008\000\009\000\00a\000\00b\000\00c\000\00d\000\00e\000\00f\001\000\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\008\001\009\001\00a\001\00b\001\00c\001\00d\001\00e\001\00f\002\000\002\001\002\002\002\003\002\004\002\005\002\006\002\007\002\008\002\009\002\00a\002\00b\002\00c\002\00d\002\00e\002\00f\003\000\003\001\003\002\003\003\003\004\003\005\003\006\003\007\003\008\003\009\003\00a\003\00b\003\00c\003\00d\003\00e\003\00f\004\000\004\001\004\002\004\003\004\004\004\005\004\006\004\007\004\008\004\009\004\00a\004\00b\004\00c\004\00d\004\00e\004\00f\005\000\005\001\005\002\005\003\005\004\005\005\005\006\005\007\005\008\005\009\005\00a\005\00b\005\00c\005\00d\005\00e\005\00f\006\000\006\001\006\002\006\003\006\004\006\005\006\006\006\007\006\008\006\009\006\00a\006\00b\006\00c\006\00d\006\00e\006\00f\007\000\007\001\007\002\007\003\007\004\007\005\007\006\007\007\007\008\007\009\007\00a\007\00b\007\00c\007\00d\007\00e\007\00f\008\000\008\001\008\002\008\003\008\004\008\005\008\006\008\007\008\008\008\009\008\00a\008\00b\008\00c\008\00d\008\00e\008\00f\009\000\009\001\009\002\009\003\009\004\009\005\009\006\009\007\009\008\009\009\009\00a\009\00b\009\00c\009\00d\009\00e\009\00f\00a\000\00a\001\00a\002\00a\003\00a\004\00a\005\00a\006\00a\007\00a\008\00a\009\00a\00a\00a\00b\00a\00c\00a\00d\00a\00e\00a\00f\00b\000\00b\001\00b\002\00b\003\00b\004\00b\005\00b\006\00b\007\00b\008\00b\009\00b\00a\00b\00b\00b\00c\00b\00d\00b\00e\00b\00f\00c\000\00c\001\00c\002\00c\003\00c\004\00c\005\00c\006\00c\007\00c\008\00c\009\00c\00a\00c\00b\00c\00c\00c\00d\00c\00e\00c\00f\00d\000\00d\001\00d\002\00d\003\00d\004\00d\005\00d\006\00d\007\00d\008\00d\009\00d\00a\00d\00b\00d\00c\00d\00d\00d\00e\00d\00f\00e\000\00e\001\00e\002\00e\003\00e\004\00e\005\00e\006\00e\007\00e\008\00e\009\00e\00a\00e\00b\00e\00c\00e\00d\00e\00e\00e\00f\00f\000\00f\001\00f\002\00f\003\00f\004\00f\005\00f\006\00f\007\00f\008\00f\009\00f\00a\00f\00b\00f\00c\00f\00d\00f\00e\00f\00f")
 (data (i32.const 3008) "H\00\00\00\01\00\00\00\01\00\00\00H\00\00\000\001\002\003\004\005\006\007\008\009\00a\00b\00c\00d\00e\00f\00g\00h\00i\00j\00k\00l\00m\00n\00o\00p\00q\00r\00s\00t\00u\00v\00w\00x\00y\00z")
 (data (i32.const 3101) "\a0\f6?")
 (data (i32.const 3113) "\c8\b9\f2\82,\d6\bf\80V7($\b4\fa<\00\00\00\00\00\80\f6?")
 (data (i32.const 3145) "\08X\bf\bd\d1\d5\bf \f7\e0\d8\08\a5\1c\bd\00\00\00\00\00`\f6?")
 (data (i32.const 3177) "XE\17wv\d5\bfmP\b6\d5\a4b#\bd\00\00\00\00\00@\f6?")
 (data (i32.const 3209) "\f8-\87\ad\1a\d5\bf\d5g\b0\9e\e4\84\e6\bc\00\00\00\00\00 \f6?")
 (data (i32.const 3241) "xw\95_\be\d4\bf\e0>)\93i\1b\04\bd\00\00\00\00\00\00\f6?")
 (data (i32.const 3273) "`\1c\c2\8ba\d4\bf\cc\84LH/\d8\13=\00\00\00\00\00\e0\f5?")
 (data (i32.const 3305) "\a8\86\860\04\d4\bf:\0b\82\ed\f3B\dc<\00\00\00\00\00\c0\f5?")
 (data (i32.const 3337) "HiUL\a6\d3\bf`\94Q\86\c6\b1 =\00\00\00\00\00\a0\f5?")
 (data (i32.const 3369) "\80\98\9a\ddG\d3\bf\92\80\c5\d4MY%=\00\00\00\00\00\80\f5?")
 (data (i32.const 3401) " \e1\ba\e2\e8\d2\bf\d8+\b7\99\1e{&=\00\00\00\00\00`\f5?")
 (data (i32.const 3433) "\88\de\13Z\89\d2\bf?\b0\cf\b6\14\ca\15=\00\00\00\00\00`\f5?")
 (data (i32.const 3465) "\88\de\13Z\89\d2\bf?\b0\cf\b6\14\ca\15=\00\00\00\00\00@\f5?")
 (data (i32.const 3497) "x\cf\fbA)\d2\bfv\daS($Z\16\bd\00\00\00\00\00 \f5?")
 (data (i32.const 3529) "\98i\c1\98\c8\d1\bf\04T\e7h\bc\af\1f\bd\00\00\00\00\00\00\f5?")
 (data (i32.const 3561) "\a8\ab\ab\\g\d1\bf\f0\a8\823\c6\1f\1f=\00\00\00\00\00\e0\f4?")
 (data (i32.const 3593) "H\ae\f9\8b\05\d1\bffZ\05\fd\c4\a8&\bd\00\00\00\00\00\c0\f4?")
 (data (i32.const 3625) "\90s\e2$\a3\d0\bf\0e\03\f4~\eek\0c\bd\00\00\00\00\00\a0\f4?")
 (data (i32.const 3657) "\d0\b4\94%@\d0\bf\7f-\f4\9e\b86\f0\bc\00\00\00\00\00\a0\f4?")
 (data (i32.const 3689) "\d0\b4\94%@\d0\bf\7f-\f4\9e\b86\f0\bc\00\00\00\00\00\80\f4?")
 (data (i32.const 3721) "@^m\18\b9\cf\bf\87<\99\ab*W\0d=\00\00\00\00\00`\f4?")
 (data (i32.const 3753) "`\dc\cb\ad\f0\ce\bf$\af\86\9c\b7&+=\00\00\00\00\00@\f4?")
 (data (i32.const 3785) "\f0*n\07\'\ce\bf\10\ff?TO/\17\bd\00\00\00\00\00 \f4?")
 (data (i32.const 3817) "\c0Ok!\\\cd\bf\1bh\ca\bb\91\ba!=\00\00\00\00\00\00\f4?")
 (data (i32.const 3849) "\a0\9a\c7\f7\8f\cc\bf4\84\9fhOy\'=\00\00\00\00\00\00\f4?")
 (data (i32.const 3881) "\a0\9a\c7\f7\8f\cc\bf4\84\9fhOy\'=\00\00\00\00\00\e0\f3?")
 (data (i32.const 3913) "\90-t\86\c2\cb\bf\8f\b7\8b1\b0N\19=\00\00\00\00\00\c0\f3?")
 (data (i32.const 3945) "\c0\80N\c9\f3\ca\bff\90\cd?cN\ba<\00\00\00\00\00\a0\f3?")
 (data (i32.const 3977) "\b0\e2\1f\bc#\ca\bf\ea\c1F\dcd\8c%\bd\00\00\00\00\00\a0\f3?")
 (data (i32.const 4009) "\b0\e2\1f\bc#\ca\bf\ea\c1F\dcd\8c%\bd\00\00\00\00\00\80\f3?")
 (data (i32.const 4041) "P\f4\9cZR\c9\bf\e3\d4\c1\04\d9\d1*\bd\00\00\00\00\00`\f3?")
 (data (i32.const 4073) "\d0 e\a0\7f\c8\bf\t\fa\db\7f\bf\bd+=\00\00\00\00\00@\f3?")
 (data (i32.const 4105) "\e0\10\02\89\ab\c7\bfXJSr\90\db+=\00\00\00\00\00@\f3?")
 (data (i32.const 4137) "\e0\10\02\89\ab\c7\bfXJSr\90\db+=\00\00\00\00\00 \f3?")
 (data (i32.const 4169) "\d0\19\e7\0f\d6\c6\bff\e2\b2\a3j\e4\10\bd\00\00\00\00\00\00\f3?")
 (data (i32.const 4201) "\90\a7p0\ff\c5\bf9P\10\9fC\9e\1e\bd\00\00\00\00\00\00\f3?")
 (data (i32.const 4233) "\90\a7p0\ff\c5\bf9P\10\9fC\9e\1e\bd\00\00\00\00\00\e0\f2?")
 (data (i32.const 4265) "\b0\a1\e3\e5&\c5\bf\8f[\07\90\8b\de \bd\00\00\00\00\00\c0\f2?")
 (data (i32.const 4297) "\80\cbl+M\c4\bf<x5a\c1\0c\17=\00\00\00\00\00\c0\f2?")
 (data (i32.const 4329) "\80\cbl+M\c4\bf<x5a\c1\0c\17=\00\00\00\00\00\a0\f2?")
 (data (i32.const 4361) "\90\1e \fcq\c3\bf:T\'M\86x\f1<\00\00\00\00\00\80\f2?")
 (data (i32.const 4393) "\f0\1f\f8R\95\c2\bf\08\c4q\170\8d$\bd\00\00\00\00\00`\f2?")
 (data (i32.const 4425) "`/\d5*\b7\c1\bf\96\a3\11\18\a4\80.\bd\00\00\00\00\00`\f2?")
 (data (i32.const 4457) "`/\d5*\b7\c1\bf\96\a3\11\18\a4\80.\bd\00\00\00\00\00@\f2?")
 (data (i32.const 4489) "\90\d0|~\d7\c0\bf\f4[\e8\88\96i\n=\00\00\00\00\00@\f2?")
 (data (i32.const 4521) "\90\d0|~\d7\c0\bf\f4[\e8\88\96i\n=\00\00\00\00\00 \f2?")
 (data (i32.const 4553) "\e0\db1\91\ec\bf\bf\f23\a3\\Tu%\bd\00\00\00\00\00\00\f2?")
 (data (i32.const 4586) "+n\07\'\be\bf<\00\f0*,4*=\00\00\00\00\00\00\f2?")
 (data (i32.const 4618) "+n\07\'\be\bf<\00\f0*,4*=\00\00\00\00\00\e0\f1?")
 (data (i32.const 4649) "\c0[\8fT^\bc\bf\06\be_XW\0c\1d\bd\00\00\00\00\00\c0\f1?")
 (data (i32.const 4681) "\e0J:m\92\ba\bf\c8\aa[\e859%=\00\00\00\00\00\c0\f1?")
 (data (i32.const 4713) "\e0J:m\92\ba\bf\c8\aa[\e859%=\00\00\00\00\00\a0\f1?")
 (data (i32.const 4745) "\a01\d6E\c3\b8\bfhV/M)|\13=\00\00\00\00\00\a0\f1?")
 (data (i32.const 4777) "\a01\d6E\c3\b8\bfhV/M)|\13=\00\00\00\00\00\80\f1?")
 (data (i32.const 4809) "`\e5\8a\d2\f0\b6\bf\das3\c97\97&\bd\00\00\00\00\00`\f1?")
 (data (i32.const 4841) " \06?\07\1b\b5\bfW^\c6a[\02\1f=\00\00\00\00\00`\f1?")
 (data (i32.const 4873) " \06?\07\1b\b5\bfW^\c6a[\02\1f=\00\00\00\00\00@\f1?")
 (data (i32.const 4905) "\e0\1b\96\d7A\b3\bf\df\13\f9\cc\da^,=\00\00\00\00\00@\f1?")
 (data (i32.const 4937) "\e0\1b\96\d7A\b3\bf\df\13\f9\cc\da^,=\00\00\00\00\00 \f1?")
 (data (i32.const 4969) "\80\a3\ee6e\b1\bf\t\a3\8fv^|\14=\00\00\00\00\00\00\f1?")
 (data (i32.const 5001) "\80\11\c00\n\af\bf\91\8e6\83\9eY-=\00\00\00\00\00\00\f1?")
 (data (i32.const 5033) "\80\11\c00\n\af\bf\91\8e6\83\9eY-=\00\00\00\00\00\e0\f0?")
 (data (i32.const 5065) "\80\19q\ddB\ab\bfLp\d6\e5z\82\1c=\00\00\00\00\00\e0\f0?")
 (data (i32.const 5097) "\80\19q\ddB\ab\bfLp\d6\e5z\82\1c=\00\00\00\00\00\c0\f0?")
 (data (i32.const 5129) "\c02\f6Xt\a7\bf\ee\a1\f24F\fc,\bd\00\00\00\00\00\c0\f0?")
 (data (i32.const 5161) "\c02\f6Xt\a7\bf\ee\a1\f24F\fc,\bd\00\00\00\00\00\a0\f0?")
 (data (i32.const 5193) "\c0\fe\b9\87\9e\a3\bf\aa\fe&\f5\b7\02\f5<\00\00\00\00\00\a0\f0?")
 (data (i32.const 5225) "\c0\fe\b9\87\9e\a3\bf\aa\fe&\f5\b7\02\f5<\00\00\00\00\00\80\f0?")
 (data (i32.const 5258) "x\0e\9b\82\9f\bf\e4\t~|&\80)\bd\00\00\00\00\00\80\f0?")
 (data (i32.const 5290) "x\0e\9b\82\9f\bf\e4\t~|&\80)\bd\00\00\00\00\00`\f0?")
 (data (i32.const 5321) "\80\d5\07\1b\b9\97\bf9\a6\fa\93T\8d(\bd\00\00\00\00\00@\f0?")
 (data (i32.const 5354) "\fc\b0\a8\c0\8f\bf\9c\a6\d3\f6|\1e\df\bc\00\00\00\00\00@\f0?")
 (data (i32.const 5386) "\fc\b0\a8\c0\8f\bf\9c\a6\d3\f6|\1e\df\bc\00\00\00\00\00 \f0?")
 (data (i32.const 5418) "\10k*\e0\7f\bf\e4@\da\0d?\e2\19\bd\00\00\00\00\00 \f0?")
 (data (i32.const 5450) "\10k*\e0\7f\bf\e4@\da\0d?\e2\19\bd\00\00\00\00\00\00\f0?")
 (data (i32.const 5502) "\f0?")
 (data (i32.const 5533) "\c0\ef?")
 (data (i32.const 5546) "\89u\15\10\80?\e8+\9d\99k\c7\10\bd\00\00\00\00\00\80\ef?")
 (data (i32.const 5577) "\80\93XV \90?\d2\f7\e2\06[\dc#\bd\00\00\00\00\00@\ef?")
 (data (i32.const 5610) "\c9(%I\98?4\0cZ2\ba\a0*\bd\00\00\00\00\00\00\ef?")
 (data (i32.const 5641) "@\e7\89]A\a0?S\d7\f1\\\c0\11\01=\00\00\00\00\00\c0\ee?")
 (data (i32.const 5674) ".\d4\aef\a4?(\fd\bdus\16,\bd\00\00\00\00\00\80\ee?")
 (data (i32.const 5705) "\c0\9f\14\aa\94\a8?}&Z\d0\95y\19\bd\00\00\00\00\00@\ee?")
 (data (i32.const 5737) "\c0\dd\cds\cb\ac?\07(\d8G\f2h\1a\bd\00\00\00\00\00 \ee?")
 (data (i32.const 5769) "\c0\06\c01\ea\ae?{;\c9O>\11\0e\bd\00\00\00\00\00\e0\ed?")
 (data (i32.const 5801) "`F\d1;\97\b1?\9b\9e\0dV]2%\bd\00\00\00\00\00\a0\ed?")
 (data (i32.const 5833) "\e0\d1\a7\f5\bd\b3?\d7N\db\a5^\c8,=\00\00\00\00\00`\ed?")
 (data (i32.const 5865) "\a0\97MZ\e9\b5?\1e\1d]<\06i,\bd\00\00\00\00\00@\ed?")
 (data (i32.const 5897) "\c0\ea\n\d3\00\b7?2\ed\9d\a9\8d\1e\ec<\00\00\00\00\00\00\ed?")
 (data (i32.const 5929) "@Y]^3\b9?\daG\bd:\\\11#=\00\00\00\00\00\c0\ec?")
 (data (i32.const 5961) "`\ad\8d\c8j\bb?\e5h\f7+\80\90\13\bd\00\00\00\00\00\a0\ec?")
 (data (i32.const 5993) "@\bc\01X\88\bc?\d3\acZ\c6\d1F&=\00\00\00\00\00`\ec?")
 (data (i32.const 6025) " \n\839\c7\be?\e0E\e6\afh\c0-\bd\00\00\00\00\00@\ec?")
 (data (i32.const 6057) "\e0\db9\91\e8\bf?\fd\n\a1O\d64%\bd\00\00\00\00\00\00\ec?")
 (data (i32.const 6089) "\e0\'\82\8e\17\c1?\f2\07-\cex\ef!=\00\00\00\00\00\e0\eb?")
 (data (i32.const 6121) "\f0#~+\aa\c1?4\998D\8e\a7,=\00\00\00\00\00\a0\eb?")
 (data (i32.const 6153) "\80\86\0ca\d1\c2?\a1\b4\81\cbl\9d\03=\00\00\00\00\00\80\eb?")
 (data (i32.const 6185) "\90\15\b0\fce\c3?\89rK#\a8/\c6<\00\00\00\00\00@\eb?")
 (data (i32.const 6217) "\b03\83=\91\c4?x\b6\fdTy\83%=\00\00\00\00\00 \eb?")
 (data (i32.const 6249) "\b0\a1\e4\e5\'\c5?\c7}i\e5\e83&=\00\00\00\00\00\e0\ea?")
 (data (i32.const 6281) "\10\8c\beNW\c6?x.<,\8b\cf\19=\00\00\00\00\00\c0\ea?")
 (data (i32.const 6313) "pu\8b\12\f0\c6?\e1!\9c\e5\8d\11%\bd\00\00\00\00\00\a0\ea?")
 (data (i32.const 6345) "PD\85\8d\89\c7?\05C\91p\10f\1c\bd\00\00\00\00\00`\ea?")
 (data (i32.const 6378) "9\eb\af\be\c8?\d1,\e9\aaT=\07\bd\00\00\00\00\00@\ea?")
 (data (i32.const 6410) "\f7\dcZZ\c9?o\ff\a0X(\f2\07=\00\00\00\00\00\00\ea?")
 (data (i32.const 6441) "\e0\8a<\ed\93\ca?i!VPCr(\bd\00\00\00\00\00\e0\e9?")
 (data (i32.const 6473) "\d0[W\d81\cb?\aa\e1\acN\8d5\0c\bd\00\00\00\00\00\c0\e9?")
 (data (i32.const 6505) "\e0;8\87\d0\cb?\b6\12TY\c4K-\bd\00\00\00\00\00\a0\e9?")
 (data (i32.const 6537) "\10\f0\c6\fbo\cc?\d2+\96\c5r\ec\f1\bc\00\00\00\00\00`\e9?")
 (data (i32.const 6569) "\90\d4\b0=\b1\cd?5\b0\15\f7*\ff*\bd\00\00\00\00\00@\e9?")
 (data (i32.const 6601) "\10\e7\ff\0eS\ce?0\f4A`\'\12\c2<\00\00\00\00\00 \e9?")
 (data (i32.const 6634) "\dd\e4\ad\f5\ce?\11\8e\bbe\15!\ca\bc\00\00\00\00\00\00\e9?")
 (data (i32.const 6665) "\b0\b3l\1c\99\cf?0\df\0c\ca\ec\cb\1b=\00\00\00\00\00\c0\e8?")
 (data (i32.const 6697) "XM`8q\d0?\91N\ed\16\db\9c\f8<\00\00\00\00\00\a0\e8?")
 (data (i32.const 6729) "`ag-\c4\d0?\e9\ea<\16\8b\18\'=\00\00\00\00\00\80\e8?")
 (data (i32.const 6761) "\e8\'\82\8e\17\d1?\1c\f0\a5c\0e!,\bd\00\00\00\00\00`\e8?")
 (data (i32.const 6793) "\f8\ac\cb\\k\d1?\81\16\a5\f7\cd\9a+=\00\00\00\00\00@\e8?")
 (data (i32.const 6825) "hZc\99\bf\d1?\b7\bdGQ\ed\a6,=\00\00\00\00\00 \e8?")
 (data (i32.const 6857) "\b8\0emE\14\d2?\ea\baF\ba\de\87\n=\00\00\00\00\00\e0\e7?")
 (data (i32.const 6889) "\90\dc|\f0\be\d2?\f4\04PJ\fa\9c*=\00\00\00\00\00\c0\e7?")
 (data (i32.const 6921) "`\d3\e1\f1\14\d3?\b8<!\d3z\e2(\bd\00\00\00\00\00\a0\e7?")
 (data (i32.const 6953) "\10\bevgk\d3?\c8w\f1\b0\cdn\11=\00\00\00\00\00\80\e7?")
 (data (i32.const 6985) "03wR\c2\d3?\\\bd\06\b6T;\18=\00\00\00\00\00`\e7?")
 (data (i32.const 7017) "\e8\d5#\b4\19\d4?\9d\e0\90\ec6\e4\08=\00\00\00\00\00@\e7?")
 (data (i32.const 7049) "\c8q\c2\8dq\d4?u\d6g\t\ce\'/\bd\00\00\00\00\00 \e7?")
 (data (i32.const 7081) "0\17\9e\e0\c9\d4?\a4\d8\n\1b\89 .\bd\00\00\00\00\00\00\e7?")
 (data (i32.const 7113) "\a08\07\ae\"\d5?Y\c7d\81p\be.=\00\00\00\00\00\e0\e6?")
 (data (i32.const 7145) "\d0\c8S\f7{\d5?\ef@]\ee\ed\ad\1f=\00\00\00\00\00\c0\e6?")
 (data (i32.const 7177) "`Y\df\bd\d5\d5?\dce\a4\08*\0b\n\bd")
 (data (i32.const 7206) "\f0?n\bf\88\1aO;\9b<53\fb\a9=\f6\ef?]\dc\d8\9c\13`q\bca\80w>\9a\ec\ef?\d1f\87\10z^\90\bc\85\7fn\e8\15\e3\ef?\13\f6g5R\d2\8c<t\85\15\d3\b0\d9\ef?\fa\8e\f9#\80\ce\8b\bc\de\f6\dd)k\d0\ef?a\c8\e6aN\f7`<\c8\9bu\18E\c7\ef?\99\d33[\e4\a3\90<\83\f3\c6\ca>\be\ef?m{\83]\a6\9a\97<\0f\89\f9lX\b5\ef?\fc\ef\fd\92\1a\b5\8e<\f7Gr+\92\ac\ef?\d1\9c/p=\be><\a2\d1\d32\ec\a3\ef?\0bn\90\894\03j\bc\1b\d3\fe\aff\9b\ef?\0e\bd/*RV\95\bcQ[\12\d0\01\93\ef?U\eaN\8c\ef\80P\bc\cc1l\c0\bd\8a\ef?\16\f4\d5\b9#\c9\91\bc\e0-\a9\ae\9a\82\ef?\afU\\\e9\e3\d3\80<Q\8e\a5\c8\98z\ef?H\93\a5\ea\15\1b\80\bc{Q}<\b8r\ef?=2\deU\f0\1f\8f\bc\ea\8d\8c8\f9j\ef?\bfS\13?\8c\89\8b<u\cbo\eb[c\ef?&\eb\11v\9c\d9\96\bc\d4\\\04\84\e0[\ef?`/:>\f7\ec\9a<\aa\b9h1\87T\ef?\9d8\86\cb\82\e7\8f\bc\1d\d9\fc\"PM\ef?\8d\c3\a6DAo\8a<\d6\8cb\88;F\ef?}\04\e4\b0\05z\80<\96\dc}\91I?\ef?\94\a8\a8\e3\fd\8e\96<8bunz8\ef?}Ht\f2\18^\87<?\a6\b2O\ce1\ef?\f2\e7\1f\98+G\80<\dd|\e2eE+\ef?^\08q?{\b8\96\bc\81c\f5\e1\df$\ef?1\ab\tm\e1\f7\82<\e1\de\1f\f5\9d\1e\ef?\fa\bfo\1a\9b!=\bc\90\d9\da\d0\7f\18\ef?\b4\n\0cr\827\8b<\0b\03\e4\a6\85\12\ef?\8f\cb\ce\89\92\14n<V/>\a9\af\0c\ef?\b6\ab\b0MuM\83<\15\b71\n\fe\06\ef?Lt\ac\e2\01B\86<1\d8L\fcp\01\ef?J\f8\d3]9\dd\8f<\ff\16d\b2\08\fc\ee?\04[\8e;\80\a3\86\bc\f1\9f\92_\c5\f6\ee?hPK\cc\edJ\92\bc\cb\a9:7\a7\f1\ee?\8e-Q\1b\f8\07\99\bcf\d8\05m\ae\ec\ee?\d26\94>\e8\d1q\bc\f7\9f\e54\db\e7\ee?\15\1b\ce\b3\19\19\99\bc\e5\a8\13\c3-\e3\ee?mL*\a7H\9f\85<\"4\12L\a6\de\ee?\8ai(z`\12\93\bc\1c\80\ac\04E\da\ee?[\89\17H\8f\a7X\bc*.\f7!\n\d6\ee?\1b\9aIg\9b,|\bc\97\a8P\d9\f5\d1\ee?\11\ac\c2`\edcC<-\89a`\08\ce\ee?\efd\06;\tf\96<W\00\1d\edA\ca\ee?y\03\a1\da\e1\ccn<\d0<\c1\b5\a2\c6\ee?0\12\0f?\8e\ff\93<\de\d3\d7\f0*\c3\ee?\b0\afz\bb\ce\90v<\'*6\d5\da\bf\ee?w\e0T\eb\bd\1d\93<\0d\dd\fd\99\b2\bc\ee?\8e\a3q\004\94\8f\bc\a7,\9dv\b2\b9\ee?I\a3\93\dc\cc\de\87\bcBf\cf\a2\da\b6\ee?_8\0f\bd\c6\dex\bc\82O\9dV+\b4\ee?\f6\\{\ecF\12\86\bc\0f\92]\ca\a4\b1\ee?\8e\d7\fd\18\055\93<\da\'\b56G\af\ee?\05\9b\8a/\b7\98{<\fd\c7\97\d4\12\ad\ee?\tT\1c\e2\e1c\90<)TH\dd\07\ab\ee?\ea\c6\19P\85\c74<\b7FY\8a&\a9\ee?5\c0d+\e62\94<H!\ad\15o\a7\ee?\9fv\99aJ\e4\8c\bc\t\dcv\b9\e1\a5\ee?\a8M\ef;\c53\8c\bc\85U:\b0~\a4\ee?\ae\e9+\89xS\84\bc \c3\cc4F\a3\ee?XXVx\dd\ce\93\bc%\"U\828\a2\ee?d\19~\80\aa\10W<s\a9L\d4U\a1\ee?(\"^\bf\ef\b3\93\bc\cd;\7ff\9e\a0\ee?\82\b94\87\ad\12j\bc\bf\da\0bu\12\a0\ee?\ee\a9m\b8\efgc\bc/\1ae<\b2\9f\ee?Q\88\e0T=\dc\80\bc\84\94Q\f9}\9f\ee?\cf>Z~d\1fx\bct_\ec\e8u\9f\ee?\b0}\8b\c0J\ee\86\bct\81\a5H\9a\9f\ee?\8a\e6U\1e2\19\86\bc\c9gBV\eb\9f\ee?\d3\d4\t^\cb\9c\90<?]\deOi\a0\ee?\1d\a5M\b9\dc2{\bc\87\01\ebs\14\a1\ee?k\c0gT\fd\ec\94<2\c10\01\ed\a1\ee?Ul\d6\ab\e1\ebe<bN\cf6\f3\a2\ee?B\cf\b3/\c5\a1\88\bc\12\1a>T\'\a4\ee?47;\f1\b6i\93\bc\13\ceL\99\89\a5\ee?\1e\ff\19:\84^\80\bc\ad\c7#F\1a\a7\ee?nWr\d8P\d4\94\bc\ed\92D\9b\d9\a8\ee?\00\8a\0e[g\ad\90<\99f\8a\d9\c7\aa\ee?\b4\ea\f0\c1/\b7\8d<\db\a0*B\e5\ac\ee?\ff\e7\c5\9c`\b6e\bc\8cD\b5\162\af\ee?D_\f3Y\83\f6{<6w\15\99\ae\b1\ee?\83=\1e\a7\1f\t\93\bc\c6\ff\91\0b[\b4\ee?)\1el\8b\b8\a9]\bc\e5\c5\cd\b07\b7\ee?Y\b9\90|\f9#l\bc\0fR\c8\cbD\ba\ee?\aa\f9\f4\"CC\92\bcPN\de\9f\82\bd\ee?K\8ef\d7l\ca\85\bc\ba\07\cap\f1\c0\ee?\'\ce\91+\fc\afq<\90\f0\a3\82\91\c4\ee?\bbs\n\e15\d2m<##\e3\19c\c8\ee?c\"b\"\04\c5\87\bce\e5]{f\cc\ee?\d51\e2\e3\86\1c\8b<3-J\ec\9b\d0\ee?\15\bb\bc\d3\d1\bb\91\bc]%>\b2\03\d5\ee?\d21\ee\9c1\cc\90<X\b30\13\9e\d9\ee?\b3Zsn\84i\84<\bf\fdyUk\de\ee?\b4\9d\8e\97\cd\df\82\bcz\f3\d3\bfk\e3\ee?\873\cb\92w\1a\8c<\ad\d3Z\99\9f\e8\ee?\fa\d9\d1J\8f{\90\bcf\b6\8d)\07\ee\ee?\ba\ae\dcV\d9\c3U\bc\fb\15O\b8\a2\f3\ee?@\f6\a6=\0e\a4\90\bc:Y\e5\8dr\f9\ee?4\93\ad8\f4\d6h\bcG^\fb\f2v\ff\ee?5\8aXk\e2\ee\91\bcJ\06\a10\b0\05\ef?\cd\dd_\n\d7\fft<\d2\c1K\90\1e\0c\ef?\ac\98\92\fa\fb\bd\91\bc\t\1e\d7[\c2\12\ef?\b3\0c\af0\aens<\9cR\85\dd\9b\19\ef?\94\fd\9f\\2\e3\8e<z\d0\ff_\ab \ef?\acY\t\d1\8f\e0\84<K\d1W.\f1\'\ef?g\1aN8\af\cdc<\b5\e7\06\94m/\ef?h\19\92l,kg<i\90\ef\dc 7\ef?\d2\b5\cc\83\18\8a\80\bc\fa\c3]U\0b?\ef?o\fa\ff?]\ad\8f\bc|\89\07J-G\ef?I\a9u8\ae\0d\90\bc\f2\89\0d\08\87O\ef?\a7\07=\a6\85\a3t<\87\a4\fb\dc\18X\ef?\0f\"@ \9e\91\82\bc\98\83\c9\16\e3`\ef?\ac\92\c1\d5PZ\8e<\852\db\03\e6i\ef?Kk\01\acY:\84<`\b4\01\f3!s\ef?\1f>\b4\07!\d5\82\bc_\9b{3\97|\ef?\c9\0dG;\b9*\89\bc)\a1\f5\14F\86\ef?\d3\88:`\04\b6t<\f6?\8b\e7.\90\ef?qr\9dQ\ec\c5\83<\83L\c7\fbQ\9a\ef?\f0\91\d3\8f\12\f7\8f\bc\da\90\a4\a2\af\a4\ef?}t#\e2\98\ae\8d\bc\f1g\8e-H\af\ef?\08 \aaA\bc\c3\8e<\'Za\ee\1b\ba\ef?2\eb\a9\c3\94+\84<\97\bak7+\c5\ef?\ee\85\d11\a9d\8a<@En[v\d0\ef?\ed\e3;\e4\ba7\8e\bc\14\be\9c\ad\fd\db\ef?\9d\cd\91M;\89w<\d8\90\9e\81\c1\e7\ef?\89\cc`A\c1\05S<\f1q\8f+\c2\f3\ef?")
 (data (i32.const 9248) "\02\00\00\00\01\00\00\00\01\00\00\00\02\00\00\001")
 (data (i32.const 9280) "\02\00\00\00\01\00\00\00\01\00\00\00\02\00\00\002")
 (data (i32.const 9312) "\02\00\00\00\01\00\00\00\01\00\00\00\02\00\00\003")
 (data (i32.const 9344) "\02\00\00\00\01\00\00\00\01\00\00\00\02\00\00\004")
 (data (i32.const 9376) "\02\00\00\00\01\00\00\00\01\00\00\00\02\00\00\005")
 (data (i32.const 9408) "\02\00\00\00\01\00\00\00\01\00\00\00\02\00\00\006")
 (data (i32.const 9440) "\02\00\00\00\01\00\00\00\01\00\00\00\02\00\00\007")
 (data (i32.const 9472) "\02\00\00\00\01\00\00\00\01\00\00\00\02\00\00\008")
 (data (i32.const 9504) "\02\00\00\00\01\00\00\00\01\00\00\00\02\00\00\009")
 (data (i32.const 9536) "\02\00\00\00\01\00\00\00\01\00\00\00\02\00\00\00a")
 (data (i32.const 9568) "\02\00\00\00\01\00\00\00\01\00\00\00\02\00\00\00b")
 (data (i32.const 9600) "\02\00\00\00\01\00\00\00\01\00\00\00\02\00\00\00c")
 (data (i32.const 9632) "\02\00\00\00\01\00\00\00\01\00\00\00\02\00\00\00d")
 (data (i32.const 9664) "\02\00\00\00\01\00\00\00\01\00\00\00\02\00\00\00e")
 (data (i32.const 9696) "\02\00\00\00\01\00\00\00\01\00\00\00\02\00\00\00f")
 (data (i32.const 9728) "@\00\00\00\01\00\00\00\00\00\00\00@\00\00\00\10\06\00\000$\00\00P$\00\00p$\00\00\90$\00\00\b0$\00\00\d0$\00\00\f0$\00\00\10%\00\000%\00\00P%\00\00p%\00\00\90%\00\00\b0%\00\00\d0%\00\00\f0%")
 (data (i32.const 9808) "\10\00\00\00\01\00\00\00\03\00\00\00\10\00\00\00\10&\00\00\10&\00\00@\00\00\00\10")
 (data (i32.const 9840) "F\00\00\00\01\00\00\00\01\00\00\00F\00\00\00l\00o\00w\00e\00s\00t\00D\00i\00s\00c\00e\00r\00n\00i\00b\00l\00e\00V\00a\00l\00u\00e\00 \00m\00u\00s\00t\00 \00b\00e\00 \00>\00=\00 \001")
 (data (i32.const 9936) "*\00\00\00\01\00\00\00\01\00\00\00*\00\00\00a\00s\00s\00e\00m\00b\00l\00y\00/\00H\00i\00s\00t\00o\00g\00r\00a\00m\00.\00t\00s")
 (data (i32.const 10000) "\ba\00\00\00\01\00\00\00\01\00\00\00\ba\00\00\00h\00i\00g\00h\00e\00s\00t\00T\00r\00a\00c\00k\00a\00b\00l\00e\00V\00a\00l\00u\00e\00 \00m\00u\00s\00t\00 \00b\00e\00 \00>\00=\00 \002\00 \00*\00 \00l\00o\00w\00e\00s\00t\00D\00i\00s\00c\00e\00r\00n\00i\00b\00l\00e\00V\00a\00l\00u\00e\00 \00(\00 \002\00 \00*\00 \00$\00{\00l\00o\00w\00e\00s\00t\00D\00i\00s\00c\00e\00r\00n\00i\00b\00l\00e\00V\00a\00l\00u\00e\00}\00 \00)")
 (data (i32.const 10208) "l\00\00\00\01\00\00\00\01\00\00\00l\00\00\00n\00u\00m\00b\00e\00r\00O\00f\00S\00i\00g\00n\00i\00f\00i\00c\00a\00n\00t\00V\00a\00l\00u\00e\00D\00i\00g\00i\00t\00s\00 \00m\00u\00s\00t\00 \00b\00e\00 \00b\00e\00t\00w\00e\00e\00n\00 \000\00 \00a\00n\00d\00 \005")
 (data (i32.const 10336) "\f8\ac\b1k($\f7?\00\b0\cd\ee_\t\e1\bf\a1\cc\d2f\f7\e1\f6?\00\d0v\bd\94\84\e0\bf\8a\d40\0e=\a1\f6?\00\f8\e8\aeC\01\e0\bf\85l\d02\eca\f6?\00@\0b6\c5\fe\de\bf\f8\98\11\95\fa#\f6?\00\e0\b7\1a\d9\fd\dd\bfl\02\cf\a4[\e7\f5?\00\90\c7\0c\ae\ff\dc\bf\b8O!Z\05\ac\f5?\00\a0\fd\118\04\dc\bf\1en\16\0f\edq\f5?\00\e0:2g\0b\db\bf5\f8\0bY\t9\f5?\00\b0-Z/\15\da\bf\dd\ada\edO\01\f5?\00`\f8Z\7f!\d9\bf\d0{H\8e\b8\ca\f4?\00\90q\b0M0\d8\bf\eeO3\b49\95\f4?\00\e0\a9\f9\89A\d7\bfi\d5\af\df\cb`\f4?\00\90\19\b5+U\d6\bfS\b9\e4Nf-\f4?\00\10\9b\a2#k\d5\bf\a6\d8\1d\11\01\fb\f3?\00\a0_\0fe\83\d4\bf6X\0c\b7\95\c9\f3?\00\a0\f67\e9\9d\d3\bfJ\fd\b6J\1c\99\f3?\00`\8dS\a1\ba\d2\bf\b5\99\e0\0c\8ei\f3?\00@\ca@\83\d9\d1\bf\b2\e7\13\82\e4:\f3?\00\e0@:\85\fa\d0\bf\b1\bd\85\19\19\0d\f3?\000\e72\9c\1d\d0\bf\d7q\b2\ca%\e0\f2?\00`\fa\a2}\85\ce\bf\82\cd\13\cf\04\b4\f2?\00\80=c\c8\d3\cc\bfP\cb|,\b0\88\f2?\00\a0\14L\03&\cb\bf\e5M\94c\"^\f2?\00\e0O/\1c|\c9\bf\b1\15\86=V4\f2?\00\00\80?\02\d6\c7\bf8\af>\e3F\0b\f2?\00\e0\05\1a\a73\c6\bf\dd\a3\cd\fd\ee\e2\f1?\00\00W\e9\f5\94\c4\bf09\0bXJ\bb\f1?\00\a0\e0$\e4\f9\c2\bf\00\"\7f\84S\94\f1?\00\c0\fdZYb\c1\bf<\d7\d5\c0\06n\f1?\00\80\bdu\9a\9c\bf\bf\c2\e4\b7G_H\f1?\00\c0\f9[W{\bc\bf\d1\85\00\adX#\f1?\00\80\f4\0f\c6`\b9\bf\'\"S\0f\f0\fe\f0?\00\00\b6G\e2L\b6\bf\8f:\d0w \db\f0?\00@\01\b2x?\b3\bf\d9\80Y\d6\e6\b7\f0?\00\c0B\1a}8\b0\bf\8d@{\fe>\95\f0?\00\00\b5\08\92o\aa\bf\83;\c5\ca%s\f0?\00\00wO\95z\a4\bf\\\1b\0d\e4\97Q\f0?\00\00\0c\c5\a8#\9d\bf\a2\8e \c1\910\f0?\00\00x)&j\91\bf!~\b3%\10\10\f0?\00\00\e8\d8\f8 w\bfk\a7\ca\f9~\c0\ef?\00\00P\b1S\fe\86?\84\f1\f6\d3eD\ef?\00\80\0f\e1\cc\1c\a1?\7f\10\84\9f\07\cc\ee?\00\80\8b\8c\fcM\ac?\e8Z\97\99:W\ee?\00@W\1e2\aa\b3?\e6=\bd\f0\d6\e5\ed?\00\80\8b\d0\a0\18\b9?\b38\ff\81\b6w\ed?\00@\04\da\e9r\be?C\e9Mr\b5\0c\ed?\00`\7fP\d2\dc\c1?cu\0e\dc\b2\a4\ec?\00\a0\de\03\abv\c4?Q\cb\d6\e8\8e?\ec?\00 \e2wC\07\c7?L\0c\02O+\dd\eb?\00@\a9\8b\de\8e\c9?\ca\15`\00l}\eb?\00\e0\d2j\b8\0d\cc?\8f3.n6 \eb?\00\e0\ce\af\n\84\ce?9P)&p\c5\ea?\00\80g\b4\ny\d0?\dd1\'\bc\01m\ea?\00\c0\01h\05\ac\d1?\8b\f1?\bc\d3\16\ea?\00\e0\fe\d4\11\db\d2?\ad\fegI\d1\c2\e9?\00\80\c5NF\06\d4?\02\99|\f4\e4p\e9?\00\f0:\t\be-\d5?\f2\bc\829\fb \e9?\00\d0P \90Q\d6?\f1Y\f7\87\01\d3\e8?\00\f0\ea\cd\d2q\d7?m\f6\b9\eb\e5\86\e8?\00\90}\85\9c\8e\d8?\94\b9X\b6\97<\e8?\00`\e1U\01\a8\d9?\"\10\c6\ff\05\f4\e7?\00\d0\d3n\18\be\da?\ca\15\14\18\"\ad\e7?\00\e0\a0\ae\f2\d0\db?\8c\ff\9e\f9\dcg\e7?\00@\bf=\a4\e0\dc?")
 (data (i32.const 11360) "\8e\n\b9\12\00 \e6?\05\b6D\06\ab\04\89<\a64W\04\00`\e6?\a9\f7b\ea\9b\ffa<\c5\f2%\c3\ff\9f\e6?\ba\90<\cb\cf~\82<\04Z\b98\00\e0\e6?&\93sV\88\ff\88<\e3\94\99\e0\ff\1f\e7?\b1\82_\'@\fd\8a<\10\0eY\15\00`\e7?A\83#\b4u\fdr\bc\d5[e\12\00\a0\e7?v+$|\e6\08x<\a6\e9Y2\00\e0\e7?\b7\"\f6&\e4\08b\bc\d2\b2\b4\ed\ff\1f\e8?/\c9\a5\1eF\02\84\bc\c3\fc\fa-\00`\e8?\1f\9a\f2\a2\f4\f7m<Pk\8c\f7\ff\9f\e8?\fd\95I\tS\04\8e\bcf\15g9\00\e0\e8?E{\c7\be\f3\04\8a\bcE\17\bf\e2\ff\1f\e9?< \0e@4\faw\bc\d1\9f\\\cc\ff_\e9?]i\a0\05\80\ffv\bcgG\ba;\00\a0\e9?\03~\ec\c4\c4\f8p<\a5-\b9\e7\ff\df\e9?\02F\8cG\d9\7f\8e<\af\fd.\d7\ff\1f\ea?~\ae\cdMU\0cj\bc\95\ff\04\de\ff_\ea?k\b2\e9\8c\a9}\86<+\8d^\ca\ff\9f\ea?\de\13L\b5\c9\84\82\bc\ea\03\ad\dd\ff\df\ea?<.`\ea\c8\12X<M=\0d\f1\ff\1f\eb?\9cx\'\ad\dd\fa\8e\bcZ\16!\ce\ff_\eb?7\12\c6\19\17\cbS<t\e6P\d9\ff\9f\eb?\00\ce\94A\d9\f7s<\af\a8\9c\13\00\e0\eb?\c0\9b]!\c4\nu<\99\dfF[\00 \ec?\c9\c1\e9S\a6\eek<\ae\f7\b9@\00`\ec?\d6pJ\'\9f\07|\bc\8a\fdUb\00\a0\ec?\1fL\e8v@\0bz\bc]\tL\d9\ff\df\ec?\d7\b5\9a\f93\f9\88<\cf\d6u\f9\ff\1f\ed?\be\e1_f\08,X\bc\93\1cV\a2\ff_\ed?\f3\95\d2\9b(\04{\bc\0c\8b\"\9d\ff\9f\ed?6\a2\0f4Q\02\87<\16~\bce\00\e0\ed?\0c\d8\a4\16\1e\01u\bc\91G\f6\02\00 \ee?\e0b\ef\t/\80\89<\d8\a6\d7W\00`\ee?\fa\f7\0cXu\0b~\bc\0c\c0\ed\'\00\a0\ee?\11\98E\t\83\84\8c\bc|\cb\f5l\00\e0\ee?\f4v\15\95\'\80\8f\bc\cc}+x\00 \ef?\8fStr\d9\81\8f\bc\nE\0c&\00`\ef?\dc\ff\'\'\00q@\bc3\d5\8c\e8\ff\9f\ef?\b0\a8\fd\e1\dc\1bX\bc\89\86\0f\d5\ff\df\ef?n\8e\91\cb\1a\f9\87<g#)\04\00 \f0?\81F2e\f3\7f\9b<h\d6\e3\e3\ff_\f0?{\95\ae\dd\08\fa\86<W\a7\85\n\00\a0\f0?\91\fb\d3\80\de\e2W\bc\cc?_\1a\00\e0\f0?\14\f0\c5\053\82\91\bc\f5\ba\af\f8\ff\1f\f1?\c2\ba\80f\bb\fa\8b\bc\ad\91M\e5\ff_\f1?\ef\e77\17\12\7f\9d\bc\e16\ac\11\00\a0\f1?\ff\f5\16\05\n\00\9c<HB\c8\19\00\e0\f1?\a0]\da\e4\fb\82\90\bcn^\fe\0f\00 \f2?C\fb\9cL\d0\fd\88\bc\91\d8\9f&\00`\f2?\82\d1\94y*\fe\8c<\da\e6\a6)\00\a0\f2?\c5\8b^qs\02p\bc9>)\e0\ff\df\f2?\f9\a6\b2\da9|\9b<\82\f0\dc\f7\ff\1f\f3?TR\dcn3\f1}<`\8bZ\f0\ff_\f3?\eb1\cdLV\03\9e\bc\cc\ae\0e.\00\a0\f3?w\a4\d3K\e7\f0u<6\b2;\04\00\e0\f3?3\88\9d\14\cb}\9c<\ff\87\d1\02\00 \f4?(=-\cf\af\08~<\b1|8\0d\00`\f4?\a6\99e\857\08\82<\89\9fV\04\00\a0\f4?\d2\bcO\90\\\fa\89\bc\f3C5\04\00\e0\f4?)S\17\ed%\11x\bc\0f\7f\02\cc\ff\1f\f5?\dcTw\84\d8\83\98<o\b3\87\fd\ff_\f5?\07(\d01\e7\t\87\bc\ba\f7\1d\f2\ff\9f\f5?\02{rh\9f\f7\87<\814\fc\eb\ff\df\f5?>\e90.\90\80\91\bc")
 (data (i32.const 12384) "|\00\00\00\01\00\00\00\01\00\00\00|\00\00\00h\00i\00g\00h\00e\00s\00t\00T\00r\00a\00c\00k\00a\00b\00l\00e\00V\00a\00l\00u\00e\00 \00c\00a\00n\00n\00o\00t\00 \00b\00e\00 \00<\00 \00(\002\00 \00*\00 \00l\00o\00w\00e\00s\00t\00D\00i\00s\00c\00e\00r\00n\00i\00b\00l\00e\00V\00a\00l\00u\00e\00)")
 (data (i32.const 12528) "&\00\00\00\01\00\00\00\01\00\00\00&\00\00\00~\00l\00i\00b\00/\00a\00r\00r\00a\00y\00b\00u\00f\00f\00e\00r\00.\00t\00s")
 (data (i32.const 12592) "D\00\00\00\01\00\00\00\01\00\00\00D\00\00\00a\00s\00s\00e\00m\00b\00l\00y\00/\00R\00e\00c\00o\00r\00d\00e\00d\00V\00a\00l\00u\00e\00s\00I\00t\00e\00r\00a\00t\00o\00r\00.\00t\00s")
 (data (i32.const 12688) "B\00\00\00\01\00\00\00\01\00\00\00B\00\00\00C\00o\00n\00c\00u\00r\00r\00e\00n\00t\00 \00M\00o\00d\00i\00f\00i\00c\00a\00t\00i\00o\00n\00 \00E\00x\00c\00e\00p\00t\00i\00o\00n")
 (data (i32.const 12784) ":\00\00\00\01\00\00\00\01\00\00\00:\00\00\00I\00n\00d\00e\00x\00 \00O\00u\00t\00 \00O\00f\00 \00B\00o\00u\00n\00d\00s\00 \00E\00x\00c\00e\00p\00t\00i\00o\00n")
 (data (i32.const 12864) "X\00\00\00\01\00\00\00\01\00\00\00X\00\00\00H\00i\00s\00t\00o\00g\00r\00a\00m\00 \00r\00e\00c\00o\00r\00d\00e\00d\00 \00v\00a\00l\00u\00e\00 \00c\00a\00n\00n\00o\00t\00 \00b\00e\00 \00n\00e\00g\00a\00t\00i\00v\00e\00.")
 (data (i32.const 12976) "\0c\00\00\00\01\00\00\00\01\00\00\00\0c\00\00\00V\00a\00l\00u\00e\00 ")
 (data (i32.const 13008) "L\00\00\00\01\00\00\00\01\00\00\00L\00\00\00 \00i\00s\00 \00o\00u\00t\00s\00i\00d\00e\00 \00o\00f\00 \00h\00i\00s\00t\00o\00g\00r\00a\00m\00 \00c\00o\00v\00e\00r\00e\00d\00 \00r\00a\00n\00g\00e")
 (data (i32.const 13104) "$\00\00\00\01\00\00\00\01\00\00\00$\00\00\00I\00n\00d\00e\00x\00 \00o\00u\00t\00 \00o\00f\00 \00r\00a\00n\00g\00e")
 (data (i32.const 13168) "$\00\00\00\01\00\00\00\01\00\00\00$\00\00\00~\00l\00i\00b\00/\00t\00y\00p\00e\00d\00a\00r\00r\00a\00y\00.\00t\00s")
 (data (i32.const 13232) "F\00\00\00\01\00\00\00\01\00\00\00F\00\00\00 \00w\00o\00u\00l\00d\00 \00o\00v\00e\00r\00f\00l\00o\00w\00 \00s\00h\00o\00r\00t\00 \00i\00n\00t\00e\00g\00e\00r\00 \00c\00o\00u\00n\00t")
 (data (i32.const 13328) "r\00\00\00\01\00\00\00\01\00\00\00r\00\00\00 \00 \00 \00 \00 \00 \00 \00V\00a\00l\00u\00e\00 \00 \00 \00 \00 \00P\00e\00r\00c\00e\00n\00t\00i\00l\00e\00 \00T\00o\00t\00a\00l\00C\00o\00u\00n\00t\00 \001\00/\00(\001\00-\00P\00e\00r\00c\00e\00n\00t\00i\00l\00e\00)\00\n\00\n")
 (data (i32.const 13472) "<\00\00\00\01\00\00\00\01\00\00\00<\00\00\00a\00s\00s\00e\00m\00b\00l\00y\00/\00P\00e\00r\00c\00e\00n\00t\00i\00l\00e\00I\00t\00e\00r\00a\00t\00o\00r\00.\00t\00s")
 (data (i32.const 13552) "\02\00\00\00\01\00\00\00\01\00\00\00\02\00\00\00.")
 (data (i32.const 13584) "\02\00\00\00\01\00\00\00\01\00\00\00\02\00\00\00\n")
 (data (i32.const 13616) "\18\00\00\00\01\00\00\00\01\00\00\00\18\00\00\00#\00[\00M\00e\00a\00n\00 \00 \00 \00 \00=\00 ")
 (data (i32.const 13664) "&\00\00\00\01\00\00\00\01\00\00\00&\00\00\00,\00 \00S\00t\00d\00D\00e\00v\00i\00a\00t\00i\00o\00n\00 \00 \00 \00=\00 ")
 (data (i32.const 13728) "\1c\00\00\00\01\00\00\00\01\00\00\00\1c\00\00\00]\00\n\00#\00[\00M\00a\00x\00 \00 \00 \00 \00 \00=\00 ")
 (data (i32.const 13776) "&\00\00\00\01\00\00\00\01\00\00\00&\00\00\00,\00 \00T\00o\00t\00a\00l\00 \00c\00o\00u\00n\00t\00 \00 \00 \00 \00=\00 ")
 (data (i32.const 13840) "\1c\00\00\00\01\00\00\00\01\00\00\00\1c\00\00\00]\00\n\00#\00[\00B\00u\00c\00k\00e\00t\00s\00 \00=\00 ")
 (data (i32.const 13888) "&\00\00\00\01\00\00\00\01\00\00\00&\00\00\00,\00 \00S\00u\00b\00B\00u\00c\00k\00e\00t\00s\00 \00 \00 \00 \00 \00=\00 ")
 (data (i32.const 13952) "\04\00\00\00\01\00\00\00\01\00\00\00\04\00\00\00]\00\n")
 (data (i32.const 13984) "\9c\00\00\00\01\00\00\00\01\00\00\00\9c\00\00\00T\00h\00e\00 \00o\00t\00h\00e\00r\00 \00h\00i\00s\00t\00o\00g\00r\00a\00m\00 \00i\00n\00c\00l\00u\00d\00e\00s\00 \00v\00a\00l\00u\00e\00s\00 \00t\00h\00a\00t\00 \00d\00o\00 \00n\00o\00t\00 \00f\00i\00t\00 \00i\00n\00 \00t\00h\00i\00s\00 \00h\00i\00s\00t\00o\00g\00r\00a\00m\00\'\00s\00 \00r\00a\00n\00g\00e\00.")
 (data (i32.const 14160) "\ac\00\00\00\01\00\00\00\01\00\00\00\ac\00\00\00A\00t\00t\00e\00m\00p\00t\00i\00n\00g\00 \00a\00c\00c\00e\00s\00s\00 \00a\00t\00 \00i\00n\00d\00e\00x\00 \00$\00{\00v\00i\00r\00t\00u\00a\00l\00I\00n\00d\00e\00x\00}\00,\00 \00b\00e\00y\00o\00n\00d\00 \00v\00i\00r\00t\00u\00a\00l\00L\00e\00n\00g\00t\00h\00 \00$\00{\00t\00h\00i\00s\00.\00v\00i\00r\00t\00u\00a\00l\00L\00e\00n\00g\00t\00h\00}")
 (data (i32.const 14352) "T\00\00\00\01\00\00\00\01\00\00\00T\00\00\00a\00s\00s\00e\00m\00b\00l\00y\00/\00p\00a\00c\00k\00e\00d\00a\00r\00r\00a\00y\00/\00P\00a\00c\00k\00e\00d\00A\00r\00r\00a\00y\00C\00o\00n\00t\00e\00x\00t\00.\00t\00s")
 (data (i32.const 14464) "p\00\00\00\01\00\00\00\01\00\00\00p\00\00\00i\00n\00s\00e\00r\00t\00e\00d\00 \00s\00l\00o\00t\00 \00i\00n\00d\00e\00x\00 \00i\00s\00 \00o\00u\00t\00 \00o\00f\00 \00r\00a\00n\00g\00e\00 \00g\00i\00v\00e\00n\00 \00p\00r\00o\00v\00i\00d\00e\00d\00 \00m\00a\00s\00k\00s")
 (data (i32.const 14592) ",\00\00\00\01\00\00\00\01\00\00\00,\00\00\00o\00t\00h\00e\00r\00H\00i\00s\00t\00o\00g\00r\00a\00m\00 \00c\00o\00u\00n\00t\00 \00(")
 (data (i32.const 14656) "\16\00\00\00\01\00\00\00\01\00\00\00\16\00\00\00)\00 \00a\00t\00 \00v\00a\00l\00u\00e\00 ")
 (data (i32.const 14704) "8\00\00\00\01\00\00\00\01\00\00\008\00\00\00 \00i\00s\00 \00l\00a\00r\00g\00e\00r\00 \00t\00h\00a\00n\00 \00t\00h\00i\00s\00 \00o\00n\00e\00\'\00s\00 \00(")
 (data (i32.const 14784) "\02\00\00\00\01\00\00\00\01\00\00\00\02\00\00\00)")
 (data (i32.const 14816) "h\00\00\00\01\00\00\00\01\00\00\00h\00\00\00C\00a\00n\00n\00o\00t\00 \00e\00n\00c\00o\00d\00e\00 \00h\00i\00s\00t\00o\00g\00r\00a\00m\00 \00c\00o\00n\00t\00a\00i\00n\00i\00n\00g\00 \00n\00e\00g\00a\00t\00i\00v\00e\00 \00c\00o\00u\00n\00t\00s\00 \00(")
 (data (i32.const 14944) "\16\00\00\00\01\00\00\00\01\00\00\00\16\00\00\00)\00 \00a\00t\00 \00i\00n\00d\00e\00x\00 ")
 (data (i32.const 14992) "B\00\00\00\01\00\00\00\01\00\00\00B\00\00\00,\00 \00c\00o\00r\00r\00e\00s\00p\00o\00n\00d\00i\00n\00g\00 \00t\00h\00e\00 \00v\00a\00l\00u\00e\00 \00r\00a\00n\00g\00e\00 \00[")
 (data (i32.const 15088) "\02\00\00\00\01\00\00\00\01\00\00\00\02\00\00\00,")
 (data (i32.const 15120) "(\00\00\00\01\00\00\00\01\00\00\00(\00\00\00a\00s\00s\00e\00m\00b\00l\00y\00/\00e\00n\00c\00o\00d\00i\00n\00g\00.\00t\00s")
 (data (i32.const 15184) "\84\00\00\00\01\00\00\00\01\00\00\00\84\00\00\00S\00h\00o\00u\00l\00d\00 \00n\00e\00v\00e\00r\00 \00b\00e\00 \00a\00d\00j\00u\00s\00t\00i\00n\00g\00 \00t\00h\00e\00 \00v\00i\00r\00t\00u\00a\00l\00 \00s\00i\00z\00e\00 \00o\00f\00 \00a\00 \00n\00o\00n\00-\00p\00a\00c\00k\00e\00d\00 \00c\00o\00n\00t\00e\00x\00t")
 (data (i32.const 15344) "^\00\00\00\01\00\00\00\01\00\00\00^\00\00\00C\00a\00n\00n\00o\00t\00 \00s\00e\00t\00 \00v\00i\00r\00t\00u\00a\00l\00 \00l\00e\00n\00g\00t\00h\00,\00 \00a\00s\00 \00r\00e\00q\00u\00e\00s\00t\00e\00d\00 \00l\00e\00n\00g\00t\00h\00 ")
 (data (i32.const 15456) "X\00\00\00\01\00\00\00\01\00\00\00X\00\00\00 \00i\00s\00 \00s\00m\00a\00l\00l\00e\00r\00 \00t\00h\00a\00n\00 \00t\00h\00e\00 \00c\00u\00r\00r\00e\00n\00t\00 \00v\00i\00r\00t\00u\00a\00l\00 \00l\00e\00n\00g\00t\00h\00 ")
 (data (i32.const 15568) "F\00\00\00\01\00\00\00\01\00\00\00F\00\00\00a\00s\00s\00e\00m\00b\00l\00y\00/\00p\00a\00c\00k\00e\00d\00a\00r\00r\00a\00y\00/\00P\00a\00c\00k\00e\00d\00A\00r\00r\00a\00y\00.\00t\00s")
 (data (i32.const 15664) "^\00\00\00\01\00\00\00\01\00\00\00^\00\00\00C\00a\00n\00n\00o\00t\00 \00p\00o\00p\00u\00l\00a\00t\00e\00 \00a\00r\00r\00a\00y\00 \00o\00f\00 \00s\00m\00a\00l\00l\00e\00r\00 \00v\00i\00r\00t\00u\00a\00l\00 \00l\00e\00n\00g\00t\00h")
 (data (i32.const 15776) "~\00\00\00\01\00\00\00\01\00\00\00~\00\00\00T\00h\00e\00 \00b\00u\00f\00f\00e\00r\00 \00d\00o\00e\00s\00 \00n\00o\00t\00 \00c\00o\00n\00t\00a\00i\00n\00 \00a\00 \00H\00i\00s\00t\00o\00g\00r\00a\00m\00 \00(\00n\00o\00 \00v\00a\00l\00i\00d\00 \00c\00o\00o\00k\00i\00e\00 \00f\00o\00u\00n\00d\00)")
 (data (i32.const 15920) "\96\00\00\00\01\00\00\00\01\00\00\00\96\00\00\00T\00h\00e\00 \00b\00u\00f\00f\00e\00r\00 \00d\00o\00e\00s\00 \00n\00o\00t\00 \00c\00o\00n\00t\00a\00i\00n\00 \00a\00 \00H\00i\00s\00t\00o\00g\00r\00a\00m\00 \00(\00n\00o\00 \00v\00a\00l\00i\00d\00 \00V\002\00 \00e\00n\00c\00o\00d\00i\00n\00g\00 \00c\00o\00o\00k\00i\00e\00 \00f\00o\00u\00n\00d\00)")
 (data (i32.const 16096) "h\00\00\00\01\00\00\00\01\00\00\00h\00\00\00w\00o\00r\00d\00 \00s\00i\00z\00e\00 \00m\00u\00s\00t\00 \00b\00e\00 \002\00,\00 \004\00,\00 \008\00,\00 \00o\00r\00 \00V\002\00m\00a\00x\00W\00o\00r\00d\00S\00i\00z\00e\00I\00n\00B\00y\00t\00e\00s\00 \00(")
 (data (i32.const 16224) "\0e\00\00\00\01\00\00\00\01\00\00\00\0e\00\00\00)\00 \00b\00y\00t\00e\00s")
 (data (i32.const 16256) "\14\00\00\00\01\00\00\00\01\00\00\00\14\00\00\00~\00l\00i\00b\00/\00r\00t\00.\00t\00s")
 (data (i32.const 16304) "1\00\00\00 \00\00\00\00\00\00\00 \00\00\00\00\00\00\00 \00\00\00\00\00\00\00\"A\00\00\00\00\00\00a\00\00\00\02\00\00\00 \00\00\00\07\00\00\00 \00\00\00\00\00\00\00 ")
 (data (i32.const 16376) "\t\00\00\00 ")
 (data (i32.const 16396) " ")
 (data (i32.const 16412) "a\00\00\00\02\00\00\00 \00\00\00\00\00\00\00 \00\00\00\00\00\00\00 \00\00\00\13\00\00\00\a1\00\00\00\02\00\00\00 \00\00\00\00\00\00\00 ")
 (data (i32.const 16472) "\15\00\00\00 ")
 (data (i32.const 16500) " \00\00\00\1b\00\00\00!\01\00\00\02\00\00\00 \00\00\00\00\00\00\00 ")
 (data (i32.const 16536) "\1d\00\00\00 ")
 (data (i32.const 16564) " \00\00\00#\00\00\00!\02\00\00\02\00\00\00 \00\00\00\00\00\00\00 ")
 (data (i32.const 16600) "%\00\00\00 ")
 (data (i32.const 16628) " \00\00\00+\00\00\00 \00\00\00\00\00\00\00 \00\00\00\00\00\00\00 ")
 (data (i32.const 16664) "-\00\00\00 ")
 (data (i32.const 16692) " ")
 (global $~lib/rt/tlsf/ROOT (mut i32) (i32.const 0))
 (global $assembly/AbstractHistogramBase/AbstractHistogramBase.identityBuilder (mut f64) (f64.const 0))
 (global $~argumentsLength (mut i32) (i32.const 0))
 (global $~lib/util/math/log_tail (mut f64) (f64.const 0))
 (global $assembly/packedarray/PackedArrayContext/MAX_SUPPORTED_PACKED_COUNTS_ARRAY_LENGTH (mut f64) (f64.const 0))
 (global $assembly/index/UINT8ARRAY_ID i32 (i32.const 4))
 (global $~lib/rt/pure/ROOTS (mut i32) (i32.const 0))
 (global $~lib/rt/pure/CUR (mut i32) (i32.const 0))
 (global $~lib/rt/pure/END (mut i32) (i32.const 0))
 (global $~lib/rt/__rtti_base i32 (i32.const 16304))
 (global $assembly/index/Histogram8 i32 (i32.const 5))
 (global $assembly/index/Histogram16 i32 (i32.const 16))
 (global $assembly/index/Histogram32 i32 (i32.const 24))
 (global $assembly/index/Histogram64 i32 (i32.const 32))
 (global $assembly/index/PackedHistogram i32 (i32.const 40))
 (export "memory" (memory $0))
 (export "__alloc" (func $~lib/rt/tlsf/__alloc))
 (export "__retain" (func $~lib/rt/pure/__retain))
 (export "__release" (func $~lib/rt/pure/__release))
 (export "__collect" (func $~lib/rt/pure/__collect))
 (export "__rtti_base" (global $~lib/rt/__rtti_base))
 (export "UINT8ARRAY_ID" (global $assembly/index/UINT8ARRAY_ID))
 (export "Histogram8" (global $assembly/index/Histogram8))
 (export "Histogram8#constructor" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#constructor@varargs))
 (export "Histogram8#get:autoResize" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:autoResize))
 (export "Histogram8#set:autoResize" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#set:autoResize))
 (export "Histogram8#get:highestTrackableValue" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:highestTrackableValue))
 (export "Histogram8#set:highestTrackableValue" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#set:highestTrackableValue))
 (export "Histogram8#get:startTimeStampMsec" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:startTimeStampMsec))
 (export "Histogram8#set:startTimeStampMsec" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#set:startTimeStampMsec))
 (export "Histogram8#get:endTimeStampMsec" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:endTimeStampMsec))
 (export "Histogram8#set:endTimeStampMsec" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#set:endTimeStampMsec))
 (export "Histogram8#get:minNonZeroValue" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:minNonZeroValue))
 (export "Histogram8#get:maxValue" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:maxValue))
 (export "Histogram8#get:totalCount" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:totalCount))
 (export "Histogram8#get:stdDeviation" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:stdDeviation))
 (export "Histogram8#get:mean" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:mean))
 (export "Histogram8#get:estimatedFootprintInBytes" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:estimatedFootprintInBytes))
 (export "Histogram8#recordValue" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordValue))
 (export "Histogram8#recordValueWithCount" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordValueWithCount))
 (export "Histogram8#recordValueWithExpectedInterval" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordValueWithExpectedInterval))
 (export "Histogram8#getValueAtPercentile" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getValueAtPercentile))
 (export "Histogram8#outputPercentileDistribution" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#outputPercentileDistribution))
 (export "Histogram8#copyCorrectedForCoordinatedOmission" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#copyCorrectedForCoordinatedOmission))
 (export "Histogram8#addHistogram8" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#addHistogram8))
 (export "Histogram8#addHistogram16" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#addHistogram16))
 (export "Histogram8#addHistogram32" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#addHistogram32))
 (export "Histogram8#addHistogram64" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#addHistogram64))
 (export "Histogram8#addPackedHistogram" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#addPackedHistogram))
 (export "Histogram8#subtractHistogram8" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#subtractHistogram8))
 (export "Histogram8#subtractHistogram16" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#subtractHistogram16))
 (export "Histogram8#subtractHistogram32" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#subtractHistogram32))
 (export "Histogram8#subtractHistogram64" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#subtractHistogram64))
 (export "Histogram8#subtractPackedHistogram" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#subtractPackedHistogram))
 (export "Histogram8#encode" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#encode))
 (export "Histogram8#reset" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#reset))
 (export "Histogram16" (global $assembly/index/Histogram16))
 (export "Histogram16#constructor" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#constructor@varargs))
 (export "Histogram16#get:autoResize" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:autoResize))
 (export "Histogram16#set:autoResize" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#set:autoResize))
 (export "Histogram16#get:highestTrackableValue" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:highestTrackableValue))
 (export "Histogram16#set:highestTrackableValue" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#set:highestTrackableValue))
 (export "Histogram16#get:startTimeStampMsec" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:startTimeStampMsec))
 (export "Histogram16#set:startTimeStampMsec" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#set:startTimeStampMsec))
 (export "Histogram16#get:endTimeStampMsec" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:endTimeStampMsec))
 (export "Histogram16#set:endTimeStampMsec" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#set:endTimeStampMsec))
 (export "Histogram16#get:minNonZeroValue" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:minNonZeroValue))
 (export "Histogram16#get:maxValue" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:maxValue))
 (export "Histogram16#get:totalCount" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:totalCount))
 (export "Histogram16#get:stdDeviation" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#get:stdDeviation))
 (export "Histogram16#get:mean" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#get:mean))
 (export "Histogram16#get:estimatedFootprintInBytes" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:estimatedFootprintInBytes))
 (export "Histogram16#recordValue" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordValue))
 (export "Histogram16#recordValueWithCount" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordValueWithCount))
 (export "Histogram16#recordValueWithExpectedInterval" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordValueWithExpectedInterval))
 (export "Histogram16#getValueAtPercentile" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getValueAtPercentile))
 (export "Histogram16#outputPercentileDistribution" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#outputPercentileDistribution))
 (export "Histogram16#copyCorrectedForCoordinatedOmission" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#copyCorrectedForCoordinatedOmission))
 (export "Histogram16#addHistogram8" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#addHistogram8))
 (export "Histogram16#addHistogram16" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#addHistogram16))
 (export "Histogram16#addHistogram32" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#addHistogram32))
 (export "Histogram16#addHistogram64" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#addHistogram64))
 (export "Histogram16#addPackedHistogram" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#addPackedHistogram))
 (export "Histogram16#subtractHistogram8" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#subtractHistogram8))
 (export "Histogram16#subtractHistogram16" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#subtractHistogram16))
 (export "Histogram16#subtractHistogram32" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#subtractHistogram32))
 (export "Histogram16#subtractHistogram64" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#subtractHistogram64))
 (export "Histogram16#subtractPackedHistogram" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#subtractPackedHistogram))
 (export "Histogram16#encode" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#encode))
 (export "Histogram16#reset" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#reset))
 (export "Histogram32" (global $assembly/index/Histogram32))
 (export "Histogram32#constructor" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#constructor@varargs))
 (export "Histogram32#get:autoResize" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:autoResize))
 (export "Histogram32#set:autoResize" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#set:autoResize))
 (export "Histogram32#get:highestTrackableValue" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:highestTrackableValue))
 (export "Histogram32#set:highestTrackableValue" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#set:highestTrackableValue))
 (export "Histogram32#get:startTimeStampMsec" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:startTimeStampMsec))
 (export "Histogram32#set:startTimeStampMsec" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#set:startTimeStampMsec))
 (export "Histogram32#get:endTimeStampMsec" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:endTimeStampMsec))
 (export "Histogram32#set:endTimeStampMsec" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#set:endTimeStampMsec))
 (export "Histogram32#get:minNonZeroValue" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:minNonZeroValue))
 (export "Histogram32#get:maxValue" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:maxValue))
 (export "Histogram32#get:totalCount" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:totalCount))
 (export "Histogram32#get:stdDeviation" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#get:stdDeviation))
 (export "Histogram32#get:mean" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#get:mean))
 (export "Histogram32#get:estimatedFootprintInBytes" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:estimatedFootprintInBytes))
 (export "Histogram32#recordValue" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordValue))
 (export "Histogram32#recordValueWithCount" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordValueWithCount))
 (export "Histogram32#recordValueWithExpectedInterval" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordValueWithExpectedInterval))
 (export "Histogram32#getValueAtPercentile" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getValueAtPercentile))
 (export "Histogram32#outputPercentileDistribution" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#outputPercentileDistribution))
 (export "Histogram32#copyCorrectedForCoordinatedOmission" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#copyCorrectedForCoordinatedOmission))
 (export "Histogram32#addHistogram8" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#addHistogram8))
 (export "Histogram32#addHistogram16" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#addHistogram16))
 (export "Histogram32#addHistogram32" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#addHistogram32))
 (export "Histogram32#addHistogram64" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#addHistogram64))
 (export "Histogram32#addPackedHistogram" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#addPackedHistogram))
 (export "Histogram32#subtractHistogram8" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#subtractHistogram8))
 (export "Histogram32#subtractHistogram16" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#subtractHistogram16))
 (export "Histogram32#subtractHistogram32" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#subtractHistogram32))
 (export "Histogram32#subtractHistogram64" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#subtractHistogram64))
 (export "Histogram32#subtractPackedHistogram" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#subtractPackedHistogram))
 (export "Histogram32#encode" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#encode))
 (export "Histogram32#reset" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#reset))
 (export "Histogram64" (global $assembly/index/Histogram64))
 (export "Histogram64#constructor" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#constructor@varargs))
 (export "Histogram64#get:autoResize" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:autoResize))
 (export "Histogram64#set:autoResize" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#set:autoResize))
 (export "Histogram64#get:highestTrackableValue" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:highestTrackableValue))
 (export "Histogram64#set:highestTrackableValue" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#set:highestTrackableValue))
 (export "Histogram64#get:startTimeStampMsec" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:startTimeStampMsec))
 (export "Histogram64#set:startTimeStampMsec" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#set:startTimeStampMsec))
 (export "Histogram64#get:endTimeStampMsec" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:endTimeStampMsec))
 (export "Histogram64#set:endTimeStampMsec" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#set:endTimeStampMsec))
 (export "Histogram64#get:minNonZeroValue" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:minNonZeroValue))
 (export "Histogram64#get:maxValue" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:maxValue))
 (export "Histogram64#get:totalCount" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:totalCount))
 (export "Histogram64#get:stdDeviation" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#get:stdDeviation))
 (export "Histogram64#get:mean" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#get:mean))
 (export "Histogram64#get:estimatedFootprintInBytes" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:estimatedFootprintInBytes))
 (export "Histogram64#recordValue" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordValue))
 (export "Histogram64#recordValueWithCount" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordValueWithCount))
 (export "Histogram64#recordValueWithExpectedInterval" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordValueWithExpectedInterval))
 (export "Histogram64#getValueAtPercentile" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getValueAtPercentile))
 (export "Histogram64#outputPercentileDistribution" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#outputPercentileDistribution))
 (export "Histogram64#copyCorrectedForCoordinatedOmission" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#copyCorrectedForCoordinatedOmission))
 (export "Histogram64#addHistogram8" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#addHistogram8))
 (export "Histogram64#addHistogram16" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#addHistogram16))
 (export "Histogram64#addHistogram32" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#addHistogram32))
 (export "Histogram64#addHistogram64" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#addHistogram64))
 (export "Histogram64#addPackedHistogram" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#addPackedHistogram))
 (export "Histogram64#subtractHistogram8" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#subtractHistogram8))
 (export "Histogram64#subtractHistogram16" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#subtractHistogram16))
 (export "Histogram64#subtractHistogram32" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#subtractHistogram32))
 (export "Histogram64#subtractHistogram64" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#subtractHistogram64))
 (export "Histogram64#subtractPackedHistogram" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#subtractPackedHistogram))
 (export "Histogram64#encode" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#encode))
 (export "Histogram64#reset" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#reset))
 (export "PackedHistogram" (global $assembly/index/PackedHistogram))
 (export "PackedHistogram#constructor" (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#constructor@varargs))
 (export "PackedHistogram#get:autoResize" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:autoResize))
 (export "PackedHistogram#set:autoResize" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#set:autoResize))
 (export "PackedHistogram#get:highestTrackableValue" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:highestTrackableValue))
 (export "PackedHistogram#set:highestTrackableValue" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#set:highestTrackableValue))
 (export "PackedHistogram#get:startTimeStampMsec" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:startTimeStampMsec))
 (export "PackedHistogram#set:startTimeStampMsec" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#set:startTimeStampMsec))
 (export "PackedHistogram#get:endTimeStampMsec" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:endTimeStampMsec))
 (export "PackedHistogram#set:endTimeStampMsec" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#set:endTimeStampMsec))
 (export "PackedHistogram#get:minNonZeroValue" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:minNonZeroValue))
 (export "PackedHistogram#get:maxValue" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:maxValue))
 (export "PackedHistogram#get:totalCount" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:totalCount))
 (export "PackedHistogram#get:stdDeviation" (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#get:stdDeviation))
 (export "PackedHistogram#get:mean" (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#get:mean))
 (export "PackedHistogram#get:estimatedFootprintInBytes" (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#get:estimatedFootprintInBytes))
 (export "PackedHistogram#recordValue" (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#recordValue))
 (export "PackedHistogram#recordValueWithCount" (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#recordValueWithCount))
 (export "PackedHistogram#recordValueWithExpectedInterval" (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#recordValueWithExpectedInterval))
 (export "PackedHistogram#getValueAtPercentile" (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#getValueAtPercentile))
 (export "PackedHistogram#outputPercentileDistribution" (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#outputPercentileDistribution))
 (export "PackedHistogram#copyCorrectedForCoordinatedOmission" (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#copyCorrectedForCoordinatedOmission))
 (export "PackedHistogram#addHistogram8" (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#addHistogram8))
 (export "PackedHistogram#addHistogram16" (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#addHistogram16))
 (export "PackedHistogram#addHistogram32" (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#addHistogram32))
 (export "PackedHistogram#addHistogram64" (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#addHistogram64))
 (export "PackedHistogram#addPackedHistogram" (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#addPackedHistogram))
 (export "PackedHistogram#subtractHistogram8" (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#subtractHistogram8))
 (export "PackedHistogram#subtractHistogram16" (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#subtractHistogram16))
 (export "PackedHistogram#subtractHistogram32" (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#subtractHistogram32))
 (export "PackedHistogram#subtractHistogram64" (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#subtractHistogram64))
 (export "PackedHistogram#subtractPackedHistogram" (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#subtractPackedHistogram))
 (export "PackedHistogram#encode" (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#encode))
 (export "PackedHistogram#reset" (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#reset))
 (export "decodeHistogram8" (func $assembly/index/decodeHistogram8))
 (export "decodeHistogram16" (func $assembly/index/decodeHistogram16))
 (export "decodeHistogram32" (func $assembly/index/decodeHistogram32))
 (export "decodeHistogram64" (func $assembly/index/decodeHistogram64))
 (export "decodePackedHistogram" (func $assembly/index/decodePackedHistogram))
 (export "__setArgumentsLength" (func $~setArgumentsLength))
 (start $~start)
 (func $~lib/rt/tlsf/removeBlock (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  local.get $1
  i32.load
  i32.const -4
  i32.and
  local.tee $2
  i32.const 256
  i32.lt_u
  if
   local.get $2
   i32.const 4
   i32.shr_u
   local.set $3
  else
   local.get $2
   i32.const 31
   local.get $2
   i32.clz
   i32.sub
   local.tee $2
   i32.const 4
   i32.sub
   i32.shr_u
   i32.const 16
   i32.xor
   local.set $3
   local.get $2
   i32.const 7
   i32.sub
   local.set $4
  end
  local.get $1
  i32.load offset=20
  local.set $2
  local.get $1
  i32.load offset=16
  local.tee $5
  if
   local.get $5
   local.get $2
   i32.store offset=20
  end
  local.get $2
  if
   local.get $2
   local.get $5
   i32.store offset=16
  end
  local.get $1
  local.get $0
  local.get $3
  local.get $4
  i32.const 4
  i32.shl
  i32.add
  i32.const 2
  i32.shl
  i32.add
  i32.load offset=96
  i32.eq
  if
   local.get $0
   local.get $3
   local.get $4
   i32.const 4
   i32.shl
   i32.add
   i32.const 2
   i32.shl
   i32.add
   local.get $2
   i32.store offset=96
   local.get $2
   i32.eqz
   if
    local.get $0
    local.get $4
    i32.const 2
    i32.shl
    i32.add
    local.tee $2
    i32.load offset=4
    i32.const 1
    local.get $3
    i32.shl
    i32.const -1
    i32.xor
    i32.and
    local.set $1
    local.get $2
    local.get $1
    i32.store offset=4
    local.get $1
    i32.eqz
    if
     local.get $0
     local.get $0
     i32.load
     i32.const 1
     local.get $4
     i32.shl
     i32.const -1
     i32.xor
     i32.and
     i32.store
    end
   end
  end
 )
 (func $~lib/rt/tlsf/insertBlock (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  local.get $1
  i32.load
  local.set $3
  local.get $1
  i32.const 16
  i32.add
  local.get $1
  i32.load
  i32.const -4
  i32.and
  i32.add
  local.tee $5
  i32.load
  local.tee $4
  i32.const 1
  i32.and
  if
   local.get $3
   i32.const -4
   i32.and
   i32.const 16
   i32.add
   local.get $4
   i32.const -4
   i32.and
   i32.add
   local.tee $2
   i32.const 1073741808
   i32.lt_u
   if
    local.get $0
    local.get $5
    call $~lib/rt/tlsf/removeBlock
    local.get $1
    local.get $2
    local.get $3
    i32.const 3
    i32.and
    i32.or
    local.tee $3
    i32.store
    local.get $1
    i32.const 16
    i32.add
    local.get $1
    i32.load
    i32.const -4
    i32.and
    i32.add
    local.tee $5
    i32.load
    local.set $4
   end
  end
  local.get $3
  i32.const 2
  i32.and
  if
   local.get $1
   i32.const 4
   i32.sub
   i32.load
   local.tee $2
   i32.load
   local.tee $7
   i32.const -4
   i32.and
   i32.const 16
   i32.add
   local.get $3
   i32.const -4
   i32.and
   i32.add
   local.tee $8
   i32.const 1073741808
   i32.lt_u
   if
    local.get $0
    local.get $2
    call $~lib/rt/tlsf/removeBlock
    local.get $2
    local.get $8
    local.get $7
    i32.const 3
    i32.and
    i32.or
    local.tee $3
    i32.store
    local.get $2
    local.set $1
   end
  end
  local.get $5
  local.get $4
  i32.const 2
  i32.or
  i32.store
  local.get $5
  i32.const 4
  i32.sub
  local.get $1
  i32.store
  local.get $3
  i32.const -4
  i32.and
  local.tee $2
  i32.const 256
  i32.lt_u
  if
   local.get $2
   i32.const 4
   i32.shr_u
   local.set $2
  else
   local.get $2
   i32.const 31
   local.get $2
   i32.clz
   i32.sub
   local.tee $3
   i32.const 4
   i32.sub
   i32.shr_u
   i32.const 16
   i32.xor
   local.set $2
   local.get $3
   i32.const 7
   i32.sub
   local.set $6
  end
  local.get $0
  local.get $2
  local.get $6
  i32.const 4
  i32.shl
  i32.add
  i32.const 2
  i32.shl
  i32.add
  i32.load offset=96
  local.set $3
  local.get $1
  i32.const 0
  i32.store offset=16
  local.get $1
  local.get $3
  i32.store offset=20
  local.get $3
  if
   local.get $3
   local.get $1
   i32.store offset=16
  end
  local.get $0
  local.get $2
  local.get $6
  i32.const 4
  i32.shl
  i32.add
  i32.const 2
  i32.shl
  i32.add
  local.get $1
  i32.store offset=96
  local.get $0
  local.get $0
  i32.load
  i32.const 1
  local.get $6
  i32.shl
  i32.or
  i32.store
  local.get $0
  local.get $6
  i32.const 2
  i32.shl
  i32.add
  local.tee $0
  local.get $0
  i32.load offset=4
  i32.const 1
  local.get $2
  i32.shl
  i32.or
  i32.store offset=4
 )
 (func $~lib/rt/tlsf/addMemory (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  local.get $2
  local.get $0
  i32.load offset=1568
  local.tee $2
  if
   local.get $2
   local.get $1
   i32.const 16
   i32.sub
   i32.eq
   if
    local.get $2
    i32.load
    local.set $3
    local.get $1
    i32.const 16
    i32.sub
    local.set $1
   end
  end
  local.get $1
  i32.sub
  local.tee $2
  i32.const 48
  i32.lt_u
  if
   return
  end
  local.get $1
  local.get $3
  i32.const 2
  i32.and
  local.get $2
  i32.const 32
  i32.sub
  i32.const 1
  i32.or
  i32.or
  i32.store
  local.get $1
  i32.const 0
  i32.store offset=16
  local.get $1
  i32.const 0
  i32.store offset=20
  local.get $1
  local.get $2
  i32.add
  i32.const 16
  i32.sub
  local.tee $2
  i32.const 2
  i32.store
  local.get $0
  local.get $2
  i32.store offset=1568
  local.get $0
  local.get $1
  call $~lib/rt/tlsf/insertBlock
 )
 (func $~lib/rt/tlsf/maybeInitialize (result i32)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  global.get $~lib/rt/tlsf/ROOT
  local.tee $0
  i32.eqz
  if
   i32.const 1
   memory.size
   local.tee $0
   i32.gt_s
   if (result i32)
    i32.const 1
    local.get $0
    i32.sub
    memory.grow
    i32.const 0
    i32.lt_s
   else
    i32.const 0
   end
   if
    unreachable
   end
   i32.const 16704
   local.tee $0
   i32.const 0
   i32.store
   i32.const 18272
   i32.const 0
   i32.store
   loop $for-loop|0
    local.get $1
    i32.const 23
    i32.lt_u
    if
     local.get $1
     i32.const 2
     i32.shl
     i32.const 16704
     i32.add
     i32.const 0
     i32.store offset=4
     i32.const 0
     local.set $2
     loop $for-loop|1
      local.get $2
      i32.const 16
      i32.lt_u
      if
       local.get $1
       i32.const 4
       i32.shl
       local.get $2
       i32.add
       i32.const 2
       i32.shl
       i32.const 16704
       i32.add
       i32.const 0
       i32.store offset=96
       local.get $2
       i32.const 1
       i32.add
       local.set $2
       br $for-loop|1
      end
     end
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0
    end
   end
   i32.const 16704
   i32.const 18288
   memory.size
   i32.const 16
   i32.shl
   call $~lib/rt/tlsf/addMemory
   i32.const 16704
   global.set $~lib/rt/tlsf/ROOT
  end
  local.get $0
 )
 (func $~lib/rt/tlsf/searchBlock (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  local.get $1
  i32.const 256
  i32.lt_u
  if
   local.get $1
   i32.const 4
   i32.shr_u
   local.set $1
  else
   local.get $1
   i32.const 536870904
   i32.lt_u
   if
    local.get $1
    i32.const 1
    i32.const 27
    local.get $1
    i32.clz
    i32.sub
    i32.shl
    i32.add
    i32.const 1
    i32.sub
    local.set $1
   end
   local.get $1
   i32.const 31
   local.get $1
   i32.clz
   i32.sub
   local.tee $2
   i32.const 4
   i32.sub
   i32.shr_u
   i32.const 16
   i32.xor
   local.set $1
   local.get $2
   i32.const 7
   i32.sub
   local.set $2
  end
  local.get $0
  local.get $2
  i32.const 2
  i32.shl
  i32.add
  i32.load offset=4
  i32.const -1
  local.get $1
  i32.shl
  i32.and
  local.tee $1
  if (result i32)
   local.get $0
   local.get $1
   i32.ctz
   local.get $2
   i32.const 4
   i32.shl
   i32.add
   i32.const 2
   i32.shl
   i32.add
   i32.load offset=96
  else
   local.get $0
   i32.load
   i32.const -1
   local.get $2
   i32.const 1
   i32.add
   i32.shl
   i32.and
   local.tee $1
   if (result i32)
    local.get $0
    local.get $0
    local.get $1
    i32.ctz
    local.tee $1
    i32.const 2
    i32.shl
    i32.add
    i32.load offset=4
    local.tee $2
    i32.ctz
    local.get $1
    i32.const 4
    i32.shl
    i32.add
    i32.const 2
    i32.shl
    i32.add
    i32.load offset=96
   else
    i32.const 0
   end
  end
 )
 (func $~lib/rt/tlsf/allocateBlock (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  local.get $1
  local.tee $3
  i32.const 1073741808
  i32.ge_u
  if
   i32.const 1040
   i32.const 1104
   i32.const 461
   i32.const 30
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  local.get $3
  i32.const 15
  i32.add
  i32.const -16
  i32.and
  local.tee $1
  i32.const 16
  local.get $1
  i32.const 16
  i32.gt_u
  select
  local.tee $1
  call $~lib/rt/tlsf/searchBlock
  local.tee $4
  i32.eqz
  if
   call $~lib/rt/pure/__collect
   local.get $0
   local.get $1
   call $~lib/rt/tlsf/searchBlock
   local.tee $4
   i32.eqz
   if
    local.get $1
    i32.const 536870904
    i32.lt_u
    if (result i32)
     local.get $1
     i32.const 1
     i32.const 27
     local.get $1
     i32.clz
     i32.sub
     i32.shl
     i32.const 1
     i32.sub
     i32.add
    else
     local.get $1
    end
    i32.const 16
    memory.size
    local.tee $5
    i32.const 16
    i32.shl
    i32.const 16
    i32.sub
    local.get $0
    i32.load offset=1568
    i32.ne
    i32.shl
    i32.add
    i32.const 65535
    i32.add
    i32.const -65536
    i32.and
    i32.const 16
    i32.shr_u
    local.set $4
    local.get $5
    local.get $4
    local.get $5
    local.get $4
    i32.gt_s
    select
    memory.grow
    i32.const 0
    i32.lt_s
    if
     local.get $4
     memory.grow
     i32.const 0
     i32.lt_s
     if
      unreachable
     end
    end
    local.get $0
    local.get $5
    i32.const 16
    i32.shl
    memory.size
    i32.const 16
    i32.shl
    call $~lib/rt/tlsf/addMemory
    local.get $0
    local.get $1
    call $~lib/rt/tlsf/searchBlock
    local.set $4
   end
  end
  local.get $4
  i32.load
  drop
  local.get $4
  i32.const 0
  i32.store offset=4
  local.get $4
  local.get $2
  i32.store offset=8
  local.get $4
  local.get $3
  i32.store offset=12
  local.get $0
  local.get $4
  call $~lib/rt/tlsf/removeBlock
  local.get $4
  i32.load
  local.tee $3
  i32.const -4
  i32.and
  local.get $1
  i32.sub
  local.tee $2
  i32.const 32
  i32.ge_u
  if
   local.get $4
   local.get $1
   local.get $3
   i32.const 2
   i32.and
   i32.or
   i32.store
   local.get $1
   local.get $4
   i32.const 16
   i32.add
   i32.add
   local.tee $1
   local.get $2
   i32.const 16
   i32.sub
   i32.const 1
   i32.or
   i32.store
   local.get $0
   local.get $1
   call $~lib/rt/tlsf/insertBlock
  else
   local.get $4
   local.get $3
   i32.const -2
   i32.and
   i32.store
   local.get $4
   i32.const 16
   i32.add
   local.tee $0
   local.get $4
   i32.load
   i32.const -4
   i32.and
   i32.add
   local.get $0
   local.get $4
   i32.load
   i32.const -4
   i32.and
   i32.add
   i32.load
   i32.const -3
   i32.and
   i32.store
  end
  local.get $4
 )
 (func $~lib/rt/tlsf/__alloc (param $0 i32) (param $1 i32) (result i32)
  call $~lib/rt/tlsf/maybeInitialize
  local.get $0
  local.get $1
  call $~lib/rt/tlsf/allocateBlock
  i32.const 16
  i32.add
 )
 (func $~lib/rt/pure/__retain (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $1
   i32.load offset=4
   local.set $2
   local.get $1
   local.get $2
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $1
   i32.load
   drop
  end
  local.get $0
 )
 (func $~lib/rt/pure/__release (param $0 i32)
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $~lib/util/memory/memcpy (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  loop $while-continue|0
   local.get $1
   i32.const 3
   i32.and
   i32.const 0
   local.get $2
   select
   if
    local.get $0
    local.tee $3
    i32.const 1
    i32.add
    local.set $0
    local.get $1
    local.tee $4
    i32.const 1
    i32.add
    local.set $1
    local.get $3
    local.get $4
    i32.load8_u
    i32.store8
    local.get $2
    i32.const 1
    i32.sub
    local.set $2
    br $while-continue|0
   end
  end
  local.get $0
  i32.const 3
  i32.and
  i32.eqz
  if
   loop $while-continue|1
    local.get $2
    i32.const 16
    i32.ge_u
    if
     local.get $0
     local.get $1
     i32.load
     i32.store
     local.get $0
     local.get $1
     i32.load offset=4
     i32.store offset=4
     local.get $0
     local.get $1
     i32.load offset=8
     i32.store offset=8
     local.get $0
     local.get $1
     i32.load offset=12
     i32.store offset=12
     local.get $1
     i32.const 16
     i32.add
     local.set $1
     local.get $0
     i32.const 16
     i32.add
     local.set $0
     local.get $2
     i32.const 16
     i32.sub
     local.set $2
     br $while-continue|1
    end
   end
   local.get $2
   i32.const 8
   i32.and
   if
    local.get $0
    local.get $1
    i32.load
    i32.store
    local.get $0
    local.get $1
    i32.load offset=4
    i32.store offset=4
    local.get $1
    i32.const 8
    i32.add
    local.set $1
    local.get $0
    i32.const 8
    i32.add
    local.set $0
   end
   local.get $2
   i32.const 4
   i32.and
   if
    local.get $0
    local.get $1
    i32.load
    i32.store
    local.get $1
    i32.const 4
    i32.add
    local.set $1
    local.get $0
    i32.const 4
    i32.add
    local.set $0
   end
   local.get $2
   i32.const 2
   i32.and
   if
    local.get $0
    local.get $1
    i32.load16_u
    i32.store16
    local.get $1
    i32.const 2
    i32.add
    local.set $1
    local.get $0
    i32.const 2
    i32.add
    local.set $0
   end
   local.get $2
   i32.const 1
   i32.and
   if
    local.get $0
    local.get $1
    i32.load8_u
    i32.store8
   end
   return
  end
  local.get $2
  i32.const 32
  i32.ge_u
  if
   block $break|2
    block $case2|2
     block $case1|2
      local.get $0
      i32.const 3
      i32.and
      local.tee $3
      i32.const 1
      i32.ne
      if
       local.get $3
       i32.const 2
       i32.eq
       br_if $case1|2
       local.get $3
       i32.const 3
       i32.eq
       br_if $case2|2
       br $break|2
      end
      local.get $1
      i32.load
      local.set $5
      local.get $0
      local.get $1
      i32.load8_u
      i32.store8
      local.get $0
      i32.const 1
      i32.add
      local.tee $0
      local.get $1
      i32.const 1
      i32.add
      local.tee $1
      i32.load8_u
      i32.store8
      local.get $0
      local.tee $4
      i32.const 2
      i32.add
      local.set $0
      local.get $1
      local.tee $3
      i32.const 2
      i32.add
      local.set $1
      local.get $4
      local.get $3
      i32.load8_u offset=1
      i32.store8 offset=1
      local.get $2
      i32.const 3
      i32.sub
      local.set $2
      loop $while-continue|3
       local.get $2
       i32.const 17
       i32.ge_u
       if
        local.get $0
        local.get $1
        i32.load offset=1
        local.tee $3
        i32.const 8
        i32.shl
        local.get $5
        i32.const 24
        i32.shr_u
        i32.or
        i32.store
        local.get $0
        local.get $3
        i32.const 24
        i32.shr_u
        local.get $1
        i32.load offset=5
        local.tee $3
        i32.const 8
        i32.shl
        i32.or
        i32.store offset=4
        local.get $0
        local.get $3
        i32.const 24
        i32.shr_u
        local.get $1
        i32.load offset=9
        local.tee $3
        i32.const 8
        i32.shl
        i32.or
        i32.store offset=8
        local.get $0
        local.get $1
        i32.load offset=13
        local.tee $5
        i32.const 8
        i32.shl
        local.get $3
        i32.const 24
        i32.shr_u
        i32.or
        i32.store offset=12
        local.get $1
        i32.const 16
        i32.add
        local.set $1
        local.get $0
        i32.const 16
        i32.add
        local.set $0
        local.get $2
        i32.const 16
        i32.sub
        local.set $2
        br $while-continue|3
       end
      end
      br $break|2
     end
     local.get $1
     i32.load
     local.set $5
     local.get $0
     local.get $1
     i32.load8_u
     i32.store8
     local.get $0
     local.tee $4
     i32.const 2
     i32.add
     local.set $0
     local.get $1
     local.tee $3
     i32.const 2
     i32.add
     local.set $1
     local.get $4
     local.get $3
     i32.load8_u offset=1
     i32.store8 offset=1
     local.get $2
     i32.const 2
     i32.sub
     local.set $2
     loop $while-continue|4
      local.get $2
      i32.const 18
      i32.ge_u
      if
       local.get $0
       local.get $1
       i32.load offset=2
       local.tee $3
       i32.const 16
       i32.shl
       local.get $5
       i32.const 16
       i32.shr_u
       i32.or
       i32.store
       local.get $0
       local.get $3
       i32.const 16
       i32.shr_u
       local.get $1
       i32.load offset=6
       local.tee $3
       i32.const 16
       i32.shl
       i32.or
       i32.store offset=4
       local.get $0
       local.get $3
       i32.const 16
       i32.shr_u
       local.get $1
       i32.load offset=10
       local.tee $3
       i32.const 16
       i32.shl
       i32.or
       i32.store offset=8
       local.get $0
       local.get $1
       i32.load offset=14
       local.tee $5
       i32.const 16
       i32.shl
       local.get $3
       i32.const 16
       i32.shr_u
       i32.or
       i32.store offset=12
       local.get $1
       i32.const 16
       i32.add
       local.set $1
       local.get $0
       i32.const 16
       i32.add
       local.set $0
       local.get $2
       i32.const 16
       i32.sub
       local.set $2
       br $while-continue|4
      end
     end
     br $break|2
    end
    local.get $1
    i32.load
    local.set $5
    local.get $0
    local.tee $3
    i32.const 1
    i32.add
    local.set $0
    local.get $1
    local.tee $4
    i32.const 1
    i32.add
    local.set $1
    local.get $3
    local.get $4
    i32.load8_u
    i32.store8
    local.get $2
    i32.const 1
    i32.sub
    local.set $2
    loop $while-continue|5
     local.get $2
     i32.const 19
     i32.ge_u
     if
      local.get $0
      local.get $1
      i32.load offset=3
      local.tee $3
      i32.const 24
      i32.shl
      local.get $5
      i32.const 8
      i32.shr_u
      i32.or
      i32.store
      local.get $0
      local.get $3
      i32.const 8
      i32.shr_u
      local.get $1
      i32.load offset=7
      local.tee $3
      i32.const 24
      i32.shl
      i32.or
      i32.store offset=4
      local.get $0
      local.get $3
      i32.const 8
      i32.shr_u
      local.get $1
      i32.load offset=11
      local.tee $3
      i32.const 24
      i32.shl
      i32.or
      i32.store offset=8
      local.get $0
      local.get $1
      i32.load offset=15
      local.tee $5
      i32.const 24
      i32.shl
      local.get $3
      i32.const 8
      i32.shr_u
      i32.or
      i32.store offset=12
      local.get $1
      i32.const 16
      i32.add
      local.set $1
      local.get $0
      i32.const 16
      i32.add
      local.set $0
      local.get $2
      i32.const 16
      i32.sub
      local.set $2
      br $while-continue|5
     end
    end
   end
  end
  local.get $2
  i32.const 16
  i32.and
  if
   local.get $0
   local.get $1
   i32.load8_u
   i32.store8
   local.get $0
   i32.const 1
   i32.add
   local.tee $0
   local.get $1
   i32.const 1
   i32.add
   local.tee $1
   i32.load8_u
   i32.store8
   local.get $0
   i32.const 1
   i32.add
   local.tee $0
   local.get $1
   i32.const 1
   i32.add
   local.tee $1
   i32.load8_u
   i32.store8
   local.get $0
   i32.const 1
   i32.add
   local.tee $0
   local.get $1
   i32.const 1
   i32.add
   local.tee $1
   i32.load8_u
   i32.store8
   local.get $0
   i32.const 1
   i32.add
   local.tee $0
   local.get $1
   i32.const 1
   i32.add
   local.tee $1
   i32.load8_u
   i32.store8
   local.get $0
   i32.const 1
   i32.add
   local.tee $0
   local.get $1
   i32.const 1
   i32.add
   local.tee $1
   i32.load8_u
   i32.store8
   local.get $0
   i32.const 1
   i32.add
   local.tee $0
   local.get $1
   i32.const 1
   i32.add
   local.tee $1
   i32.load8_u
   i32.store8
   local.get $0
   i32.const 1
   i32.add
   local.tee $0
   local.get $1
   i32.const 1
   i32.add
   local.tee $1
   i32.load8_u
   i32.store8
   local.get $0
   i32.const 1
   i32.add
   local.tee $0
   local.get $1
   i32.const 1
   i32.add
   local.tee $1
   i32.load8_u
   i32.store8
   local.get $0
   i32.const 1
   i32.add
   local.tee $0
   local.get $1
   i32.const 1
   i32.add
   local.tee $1
   i32.load8_u
   i32.store8
   local.get $0
   i32.const 1
   i32.add
   local.tee $0
   local.get $1
   i32.const 1
   i32.add
   local.tee $1
   i32.load8_u
   i32.store8
   local.get $0
   i32.const 1
   i32.add
   local.tee $0
   local.get $1
   i32.const 1
   i32.add
   local.tee $1
   i32.load8_u
   i32.store8
   local.get $0
   i32.const 1
   i32.add
   local.tee $0
   local.get $1
   i32.const 1
   i32.add
   local.tee $1
   i32.load8_u
   i32.store8
   local.get $0
   i32.const 1
   i32.add
   local.tee $0
   local.get $1
   i32.const 1
   i32.add
   local.tee $1
   i32.load8_u
   i32.store8
   local.get $0
   i32.const 1
   i32.add
   local.tee $0
   local.get $1
   i32.const 1
   i32.add
   local.tee $1
   i32.load8_u
   i32.store8
   local.get $0
   local.tee $4
   i32.const 2
   i32.add
   local.set $0
   local.get $1
   local.tee $3
   i32.const 2
   i32.add
   local.set $1
   local.get $4
   local.get $3
   i32.load8_u offset=1
   i32.store8 offset=1
  end
  local.get $2
  i32.const 8
  i32.and
  if
   local.get $0
   local.get $1
   i32.load8_u
   i32.store8
   local.get $0
   i32.const 1
   i32.add
   local.tee $0
   local.get $1
   i32.const 1
   i32.add
   local.tee $1
   i32.load8_u
   i32.store8
   local.get $0
   i32.const 1
   i32.add
   local.tee $0
   local.get $1
   i32.const 1
   i32.add
   local.tee $1
   i32.load8_u
   i32.store8
   local.get $0
   i32.const 1
   i32.add
   local.tee $0
   local.get $1
   i32.const 1
   i32.add
   local.tee $1
   i32.load8_u
   i32.store8
   local.get $0
   i32.const 1
   i32.add
   local.tee $0
   local.get $1
   i32.const 1
   i32.add
   local.tee $1
   i32.load8_u
   i32.store8
   local.get $0
   i32.const 1
   i32.add
   local.tee $0
   local.get $1
   i32.const 1
   i32.add
   local.tee $1
   i32.load8_u
   i32.store8
   local.get $0
   i32.const 1
   i32.add
   local.tee $0
   local.get $1
   i32.const 1
   i32.add
   local.tee $1
   i32.load8_u
   i32.store8
   local.get $0
   local.tee $4
   i32.const 2
   i32.add
   local.set $0
   local.get $1
   local.tee $3
   i32.const 2
   i32.add
   local.set $1
   local.get $4
   local.get $3
   i32.load8_u offset=1
   i32.store8 offset=1
  end
  local.get $2
  i32.const 4
  i32.and
  if
   local.get $0
   local.get $1
   i32.load8_u
   i32.store8
   local.get $0
   i32.const 1
   i32.add
   local.tee $0
   local.get $1
   i32.const 1
   i32.add
   local.tee $1
   i32.load8_u
   i32.store8
   local.get $0
   i32.const 1
   i32.add
   local.tee $0
   local.get $1
   i32.const 1
   i32.add
   local.tee $1
   i32.load8_u
   i32.store8
   local.get $0
   local.tee $4
   i32.const 2
   i32.add
   local.set $0
   local.get $1
   local.tee $3
   i32.const 2
   i32.add
   local.set $1
   local.get $4
   local.get $3
   i32.load8_u offset=1
   i32.store8 offset=1
  end
  local.get $2
  i32.const 2
  i32.and
  if
   local.get $0
   local.get $1
   i32.load8_u
   i32.store8
   local.get $0
   local.tee $4
   i32.const 2
   i32.add
   local.set $0
   local.get $1
   local.tee $3
   i32.const 2
   i32.add
   local.set $1
   local.get $4
   local.get $3
   i32.load8_u offset=1
   i32.store8 offset=1
  end
  local.get $2
  i32.const 1
  i32.and
  if
   local.get $0
   local.get $1
   i32.load8_u
   i32.store8
  end
 )
 (func $~lib/memory/memory.copy (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  (local $4 i32)
  block $~lib/util/memory/memmove|inlined.0
   local.get $2
   local.set $4
   local.get $0
   local.get $1
   i32.eq
   br_if $~lib/util/memory/memmove|inlined.0
   i32.const 1
   local.get $0
   local.get $4
   i32.add
   local.get $1
   i32.le_u
   local.get $1
   local.get $4
   i32.add
   local.get $0
   i32.le_u
   select
   if
    local.get $0
    local.get $1
    local.get $4
    call $~lib/util/memory/memcpy
    br $~lib/util/memory/memmove|inlined.0
   end
   local.get $0
   local.get $1
   i32.lt_u
   if
    local.get $1
    i32.const 7
    i32.and
    local.get $0
    i32.const 7
    i32.and
    i32.eq
    if
     loop $while-continue|0
      local.get $0
      i32.const 7
      i32.and
      if
       local.get $4
       i32.eqz
       br_if $~lib/util/memory/memmove|inlined.0
       local.get $4
       i32.const 1
       i32.sub
       local.set $4
       local.get $0
       local.tee $2
       i32.const 1
       i32.add
       local.set $0
       local.get $1
       local.tee $3
       i32.const 1
       i32.add
       local.set $1
       local.get $2
       local.get $3
       i32.load8_u
       i32.store8
       br $while-continue|0
      end
     end
     loop $while-continue|1
      local.get $4
      i32.const 8
      i32.ge_u
      if
       local.get $0
       local.get $1
       i64.load
       i64.store
       local.get $4
       i32.const 8
       i32.sub
       local.set $4
       local.get $0
       i32.const 8
       i32.add
       local.set $0
       local.get $1
       i32.const 8
       i32.add
       local.set $1
       br $while-continue|1
      end
     end
    end
    loop $while-continue|2
     local.get $4
     if
      local.get $0
      local.tee $2
      i32.const 1
      i32.add
      local.set $0
      local.get $1
      local.tee $3
      i32.const 1
      i32.add
      local.set $1
      local.get $2
      local.get $3
      i32.load8_u
      i32.store8
      local.get $4
      i32.const 1
      i32.sub
      local.set $4
      br $while-continue|2
     end
    end
   else
    local.get $1
    i32.const 7
    i32.and
    local.get $0
    i32.const 7
    i32.and
    i32.eq
    if
     loop $while-continue|3
      local.get $0
      local.get $4
      i32.add
      i32.const 7
      i32.and
      if
       local.get $4
       i32.eqz
       br_if $~lib/util/memory/memmove|inlined.0
       local.get $4
       i32.const 1
       i32.sub
       local.tee $4
       local.get $0
       i32.add
       local.get $1
       local.get $4
       i32.add
       i32.load8_u
       i32.store8
       br $while-continue|3
      end
     end
     loop $while-continue|4
      local.get $4
      i32.const 8
      i32.ge_u
      if
       local.get $4
       i32.const 8
       i32.sub
       local.tee $4
       local.get $0
       i32.add
       local.get $1
       local.get $4
       i32.add
       i64.load
       i64.store
       br $while-continue|4
      end
     end
    end
    loop $while-continue|5
     local.get $4
     if
      local.get $4
      i32.const 1
      i32.sub
      local.tee $4
      local.get $0
      i32.add
      local.get $1
      local.get $4
      i32.add
      i32.load8_u
      i32.store8
      br $while-continue|5
     end
    end
   end
  end
 )
 (func $~lib/memory/memory.repeat (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32)
  (local $4 i32)
  local.get $2
  local.get $3
  i32.mul
  local.set $3
  loop $while-continue|0
   local.get $4
   local.get $3
   i32.lt_u
   if
    local.get $0
    local.get $4
    i32.add
    local.get $1
    local.get $2
    call $~lib/memory/memory.copy
    local.get $2
    local.get $4
    i32.add
    local.set $4
    br $while-continue|0
   end
  end
 )
 (func $~lib/string/String#padStart (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  i32.const 1180
  i32.load
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.shl
  local.set $2
  local.get $1
  i32.const 1
  i32.shl
  local.tee $3
  local.get $0
  i32.const 16
  i32.sub
  i32.load offset=12
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.shl
  local.tee $4
  i32.lt_u
  if (result i32)
   i32.const 1
  else
   local.get $2
   i32.eqz
  end
  if
   local.get $0
   i32.const 16700
   i32.gt_u
   if
    local.get $0
    i32.const 16
    i32.sub
    local.tee $1
    i32.load offset=4
    local.set $2
    local.get $1
    local.get $2
    i32.const 1
    i32.add
    i32.store offset=4
    local.get $1
    i32.load
    drop
   end
   local.get $0
   return
  end
  call $~lib/rt/tlsf/maybeInitialize
  local.get $3
  i32.const 1
  call $~lib/rt/tlsf/allocateBlock
  i32.const 16
  i32.add
  local.set $1
  local.get $3
  local.get $4
  i32.sub
  local.tee $3
  local.get $2
  i32.gt_u
  if
   local.get $1
   i32.const 1184
   local.get $2
   local.get $3
   i32.const 2
   i32.sub
   local.get $2
   i32.div_u
   local.tee $5
   call $~lib/memory/memory.repeat
   local.get $1
   local.get $2
   local.get $5
   i32.mul
   local.tee $2
   i32.add
   i32.const 1184
   local.get $3
   local.get $2
   i32.sub
   call $~lib/memory/memory.copy
  else
   local.get $1
   i32.const 1184
   local.get $3
   call $~lib/memory/memory.copy
  end
  local.get $1
  local.get $3
  i32.add
  local.get $0
  local.get $4
  call $~lib/memory/memory.copy
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $0
   i32.load offset=4
   local.set $2
   local.get $0
   local.get $2
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $0
   i32.load
   drop
  end
  local.get $1
 )
 (func $~lib/string/String#repeat (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  i32.const 16
  i32.sub
  i32.load offset=12
  i32.const 1
  i32.shr_u
  local.set $2
  local.get $1
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $2
   i64.extend_i32_s
   local.get $1
   i64.extend_i32_s
   i64.mul
   i64.const 268435456
   i64.gt_u
  end
  if
   i32.const 1216
   i32.const 1264
   i32.const 322
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $2
  i32.eqz
  i32.const 1
  local.get $1
  select
  if
   i32.const 1312
   return
  end
  local.get $1
  i32.const 1
  i32.eq
  if
   local.get $0
   i32.const 16700
   i32.gt_u
   if
    local.get $0
    i32.const 16
    i32.sub
    local.tee $1
    i32.load offset=4
    local.set $2
    local.get $1
    local.get $2
    i32.const 1
    i32.add
    i32.store offset=4
    local.get $1
    i32.load
    drop
   end
   local.get $0
   return
  end
  call $~lib/rt/tlsf/maybeInitialize
  local.get $1
  local.get $2
  i32.mul
  i32.const 1
  i32.shl
  i32.const 1
  call $~lib/rt/tlsf/allocateBlock
  i32.const 16
  i32.add
  local.tee $3
  local.get $0
  local.get $2
  i32.const 1
  i32.shl
  local.get $1
  call $~lib/memory/memory.repeat
  local.get $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   local.tee $0
   i32.load offset=4
   local.set $1
   local.get $0
   local.get $1
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $0
   i32.load
   drop
  end
  local.get $3
 )
 (func $~lib/string/String#concat (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $2
   local.get $3
   local.get $2
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $1
  i32.eqz
  if
   local.get $1
   i32.const 1328
   i32.ne
   if
    local.get $1
    i32.const 16700
    i32.gt_u
    if
     local.get $1
     i32.const 16
     i32.sub
     call $~lib/rt/pure/decrement
    end
   end
   i32.const 1328
   local.set $1
  end
  local.get $1
  i32.const 16
  i32.sub
  i32.load offset=12
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.shl
  local.tee $6
  local.get $0
  i32.const 16
  i32.sub
  i32.load offset=12
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.shl
  local.tee $4
  i32.add
  local.tee $2
  i32.eqz
  if
   local.get $1
   i32.const 16700
   i32.gt_u
   if
    local.get $1
    i32.const 16
    i32.sub
    call $~lib/rt/pure/decrement
   end
   i32.const 1312
   return
  end
  call $~lib/rt/tlsf/maybeInitialize
  local.get $2
  i32.const 1
  call $~lib/rt/tlsf/allocateBlock
  i32.const 16
  i32.add
  local.tee $2
  i32.const 16700
  i32.gt_u
  if
   local.get $2
   i32.const 16
   i32.sub
   local.tee $5
   i32.load offset=4
   local.set $3
   local.get $5
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $5
   i32.load
   drop
  end
  local.get $2
  local.get $0
  local.get $4
  call $~lib/memory/memory.copy
  local.get $2
  local.get $4
  i32.add
  local.get $1
  local.get $6
  call $~lib/memory/memory.copy
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $2
 )
 (func $~lib/string/String.__concat (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  i32.const 1328
  local.get $0
  select
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $4
   local.get $2
   local.get $4
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $1
  call $~lib/string/String#concat
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $start:assembly/formatters~anonymous|0 (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $1
  i32.const 16
  i32.sub
  i32.load offset=12
  i32.const 1
  i32.shr_u
  local.get $0
  i32.lt_s
  if
   local.get $1
   local.get $0
   local.get $1
   i32.const 16
   i32.sub
   i32.load offset=12
   i32.const 1
   i32.shr_u
   i32.sub
   call $~lib/string/String#padStart
   local.tee $2
   i32.const 16700
   i32.gt_u
   if
    local.get $2
    i32.const 16
    i32.sub
    call $~lib/rt/pure/decrement
   end
   i32.const 1184
   local.get $0
   local.get $1
   i32.const 16
   i32.sub
   i32.load offset=12
   i32.const 1
   i32.shr_u
   i32.sub
   call $~lib/string/String#repeat
   local.tee $0
   local.get $1
   call $~lib/string/String.__concat
   local.get $0
   i32.const 16700
   i32.gt_u
   if
    local.get $0
    i32.const 16
    i32.sub
    call $~lib/rt/pure/decrement
   end
   local.get $1
   i32.const 16700
   i32.gt_u
   if
    local.get $1
    i32.const 16
    i32.sub
    call $~lib/rt/pure/decrement
   end
   return
  end
  local.get $1
 )
 (func $~lib/util/number/utoa32_dec_lut (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  loop $while-continue|0
   local.get $1
   i32.const 10000
   i32.ge_u
   if
    local.get $1
    i32.const 10000
    i32.rem_u
    local.set $3
    local.get $1
    i32.const 10000
    i32.div_u
    local.set $1
    local.get $0
    local.get $2
    i32.const 4
    i32.sub
    local.tee $2
    i32.const 1
    i32.shl
    i32.add
    local.get $3
    i32.const 100
    i32.div_u
    i32.const 2
    i32.shl
    i32.const 1556
    i32.add
    i64.load32_u
    local.get $3
    i32.const 100
    i32.rem_u
    i32.const 2
    i32.shl
    i32.const 1556
    i32.add
    i64.load32_u
    i64.const 32
    i64.shl
    i64.or
    i64.store
    br $while-continue|0
   end
  end
  local.get $1
  i32.const 100
  i32.ge_u
  if
   local.get $1
   i32.const 100
   i32.rem_u
   local.set $3
   local.get $1
   i32.const 100
   i32.div_u
   local.set $1
   local.get $0
   local.get $2
   i32.const 2
   i32.sub
   local.tee $2
   i32.const 1
   i32.shl
   i32.add
   local.get $3
   i32.const 2
   i32.shl
   i32.const 1556
   i32.add
   i32.load
   i32.store
  end
  local.get $1
  i32.const 10
  i32.ge_u
  if
   local.get $0
   local.get $2
   i32.const 2
   i32.sub
   i32.const 1
   i32.shl
   i32.add
   local.get $1
   i32.const 2
   i32.shl
   i32.const 1556
   i32.add
   i32.load
   i32.store
  else
   local.get $0
   local.get $2
   i32.const 1
   i32.sub
   i32.const 1
   i32.shl
   i32.add
   local.get $1
   i32.const 48
   i32.add
   i32.store16
  end
 )
 (func $~lib/util/number/utoa64_dec_lut (param $0 i32) (param $1 i64) (param $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  loop $while-continue|0
   local.get $1
   i64.const 100000000
   i64.ge_u
   if
    local.get $1
    local.get $1
    i64.const 100000000
    i64.div_u
    local.tee $1
    i64.const 100000000
    i64.mul
    i64.sub
    i32.wrap_i64
    local.tee $3
    i32.const 10000
    i32.div_u
    local.tee $4
    i32.const 100
    i32.div_u
    local.set $5
    local.get $4
    i32.const 100
    i32.rem_u
    local.set $4
    local.get $0
    local.get $2
    i32.const 4
    i32.sub
    local.tee $2
    i32.const 1
    i32.shl
    i32.add
    local.get $3
    i32.const 10000
    i32.rem_u
    local.tee $3
    i32.const 100
    i32.div_u
    i32.const 2
    i32.shl
    i32.const 1556
    i32.add
    i64.load32_u
    local.get $3
    i32.const 100
    i32.rem_u
    i32.const 2
    i32.shl
    i32.const 1556
    i32.add
    i64.load32_u
    i64.const 32
    i64.shl
    i64.or
    i64.store
    local.get $0
    local.get $2
    i32.const 4
    i32.sub
    local.tee $2
    i32.const 1
    i32.shl
    i32.add
    local.get $5
    i32.const 2
    i32.shl
    i32.const 1556
    i32.add
    i64.load32_u
    local.get $4
    i32.const 2
    i32.shl
    i32.const 1556
    i32.add
    i64.load32_u
    i64.const 32
    i64.shl
    i64.or
    i64.store
    br $while-continue|0
   end
  end
  local.get $0
  local.get $1
  i32.wrap_i64
  local.get $2
  call $~lib/util/number/utoa32_dec_lut
 )
 (func $~lib/util/number/utoa64 (param $0 i64) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  i64.eqz
  if
   i32.const 1552
   return
  end
  local.get $0
  i64.const 4294967295
  i64.le_u
  if
   call $~lib/rt/tlsf/maybeInitialize
   local.get $0
   i32.wrap_i64
   local.tee $3
   local.tee $1
   i32.const 100000
   i32.lt_u
   if (result i32)
    local.get $1
    i32.const 100
    i32.lt_u
    if (result i32)
     local.get $1
     i32.const 10
     i32.ge_u
     i32.const 1
     i32.add
    else
     local.get $1
     i32.const 10000
     i32.ge_u
     i32.const 3
     i32.add
     local.get $1
     i32.const 1000
     i32.ge_u
     i32.add
    end
   else
    local.get $1
    i32.const 10000000
    i32.lt_u
    if (result i32)
     local.get $1
     i32.const 1000000
     i32.ge_u
     i32.const 6
     i32.add
    else
     local.get $1
     i32.const 1000000000
     i32.ge_u
     i32.const 8
     i32.add
     local.get $1
     i32.const 100000000
     i32.ge_u
     i32.add
    end
   end
   local.tee $1
   i32.const 1
   i32.shl
   i32.const 1
   call $~lib/rt/tlsf/allocateBlock
   i32.const 16
   i32.add
   local.tee $2
   local.get $3
   local.get $1
   call $~lib/util/number/utoa32_dec_lut
  else
   call $~lib/rt/tlsf/maybeInitialize
   local.get $0
   i64.const 1000000000000000
   i64.lt_u
   if (result i32)
    local.get $0
    i64.const 1000000000000
    i64.lt_u
    if (result i32)
     local.get $0
     i64.const 100000000000
     i64.ge_u
     i32.const 10
     i32.add
     local.get $0
     i64.const 10000000000
     i64.ge_u
     i32.add
    else
     local.get $0
     i64.const 100000000000000
     i64.ge_u
     i32.const 13
     i32.add
     local.get $0
     i64.const 10000000000000
     i64.ge_u
     i32.add
    end
   else
    local.get $0
    i64.const 100000000000000000
    i64.lt_u
    if (result i32)
     local.get $0
     i64.const 10000000000000000
     i64.ge_u
     i32.const 16
     i32.add
    else
     local.get $0
     i64.const -8446744073709551616
     i64.ge_u
     i32.const 18
     i32.add
     local.get $0
     i64.const 1000000000000000000
     i64.ge_u
     i32.add
    end
   end
   local.tee $1
   i32.const 1
   i32.shl
   i32.const 1
   call $~lib/rt/tlsf/allocateBlock
   i32.const 16
   i32.add
   local.tee $2
   local.get $0
   local.get $1
   call $~lib/util/number/utoa64_dec_lut
  end
  local.get $2
  i32.const 16700
  i32.gt_u
  if
   local.get $2
   i32.const 16
   i32.sub
   local.tee $1
   i32.load offset=4
   local.set $3
   local.get $1
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $1
   i32.load
   drop
  end
  local.get $2
 )
 (func $start:assembly/packedarray/bitcount~anonymous|0 (param $0 i64) (result i32)
  (local $1 i32)
  loop $while-continue|1
   local.get $0
   i64.const 0
   i64.ne
   if
    local.get $1
    local.get $0
    i64.const 4294967295
    i64.and
    i32.wrap_i64
    local.tee $1
    local.get $1
    i32.const 1
    i32.shr_u
    i32.const 1431655765
    i32.and
    i32.sub
    local.tee $1
    i32.const 858993459
    i32.and
    local.get $1
    i32.const 2
    i32.shr_u
    i32.const 858993459
    i32.and
    i32.add
    local.tee $1
    local.get $1
    i32.const 4
    i32.shr_u
    i32.add
    i32.const 252645135
    i32.and
    i32.const 16843009
    i32.mul
    i32.const 24
    i32.shr_u
    i32.add
    local.set $1
    local.get $0
    i64.const 4294967296
    i64.div_u
    local.set $0
    br $while-continue|1
   end
  end
  local.get $1
 )
 (func $~lib/math/NativeMath.pow (param $0 f64) (param $1 f64) (result f64)
  (local $2 i64)
  (local $3 i64)
  (local $4 i64)
  (local $5 f64)
  (local $6 i32)
  (local $7 i32)
  (local $8 f64)
  (local $9 f64)
  (local $10 i32)
  (local $11 i64)
  (local $12 i64)
  (local $13 f64)
  (local $14 f64)
  (local $15 f64)
  (local $16 f64)
  (local $17 f64)
  local.get $1
  f64.abs
  f64.const 2
  f64.le
  if
   local.get $1
   f64.const 2
   f64.eq
   if
    local.get $0
    local.get $0
    f64.mul
    return
   end
   local.get $1
   f64.const 0.5
   f64.eq
   if
    local.get $0
    f64.sqrt
    f64.abs
    f64.const inf
    local.get $0
    f64.const -inf
    f64.ne
    select
    return
   end
   local.get $1
   f64.const -1
   f64.eq
   if
    f64.const 1
    local.get $0
    f64.div
    return
   end
   local.get $1
   f64.const 1
   f64.eq
   if
    local.get $0
    return
   end
   local.get $1
   f64.const 0
   f64.eq
   if
    f64.const 1
    return
   end
  end
  local.get $1
  local.tee $8
  i64.reinterpret_f64
  local.tee $3
  i64.const 52
  i64.shr_u
  local.set $4
  block $~lib/util/math/pow_lut|inlined.0
   local.get $0
   local.tee $5
   i64.reinterpret_f64
   local.tee $2
   i64.const 52
   i64.shr_u
   local.tee $12
   i64.const 1
   i64.sub
   i64.const 2046
   i64.ge_u
   if (result i32)
    i32.const 1
   else
    local.get $4
    i64.const 2047
    i64.and
    i64.const 958
    i64.sub
    i64.const 128
    i64.ge_u
   end
   if
    local.get $3
    i64.const 1
    i64.shl
    i64.const 1
    i64.sub
    i64.const -9007199254740993
    i64.ge_u
    if
     local.get $3
     i64.const 1
     i64.shl
     i64.eqz
     if
      f64.const 1
      local.set $9
      br $~lib/util/math/pow_lut|inlined.0
     end
     local.get $2
     i64.const 4607182418800017408
     i64.eq
     if
      f64.const nan:0x8000000000000
      local.set $9
      br $~lib/util/math/pow_lut|inlined.0
     end
     i32.const 1
     local.get $3
     i64.const 1
     i64.shl
     i64.const -9007199254740992
     i64.gt_u
     local.get $2
     i64.const 1
     i64.shl
     i64.const -9007199254740992
     i64.gt_u
     select
     if
      local.get $5
      local.get $8
      f64.add
      local.set $9
      br $~lib/util/math/pow_lut|inlined.0
     end
     local.get $2
     i64.const 1
     i64.shl
     i64.const 9214364837600034816
     i64.eq
     if
      f64.const nan:0x8000000000000
      local.set $9
      br $~lib/util/math/pow_lut|inlined.0
     end
     local.get $3
     i64.const 63
     i64.shr_u
     i64.eqz
     local.get $2
     i64.const 1
     i64.shl
     i64.const 9214364837600034816
     i64.lt_u
     i32.eq
     br_if $~lib/util/math/pow_lut|inlined.0
     local.get $8
     local.get $8
     f64.mul
     local.set $9
     br $~lib/util/math/pow_lut|inlined.0
    end
    local.get $2
    i64.const 1
    i64.shl
    i64.const 1
    i64.sub
    i64.const -9007199254740993
    i64.ge_u
    if
     local.get $5
     local.get $5
     f64.mul
     local.set $9
     local.get $2
     i64.const 63
     i64.shr_u
     i32.wrap_i64
     if (result i32)
      block $~lib/util/math/checkint|inlined.0
       local.get $3
       i64.const 52
       i64.shr_u
       i64.const 2047
       i64.and
       local.tee $2
       i64.const 1023
       i64.lt_u
       br_if $~lib/util/math/checkint|inlined.0
       local.get $2
       i64.const 1075
       i64.gt_u
       if
        i32.const 2
        local.set $10
        br $~lib/util/math/checkint|inlined.0
       end
       local.get $3
       i64.const 1
       i64.const 1075
       local.get $2
       i64.sub
       i64.shl
       local.tee $2
       i64.const 1
       i64.sub
       i64.and
       i64.const 0
       i64.ne
       br_if $~lib/util/math/checkint|inlined.0
       local.get $2
       local.get $3
       i64.and
       i64.const 0
       i64.ne
       if
        i32.const 1
        local.set $10
        br $~lib/util/math/checkint|inlined.0
       end
       i32.const 2
       local.set $10
      end
      local.get $10
      i32.const 1
      i32.eq
     else
      i32.const 0
     end
     if
      local.get $9
      f64.neg
      local.set $9
     end
     local.get $3
     i64.const 63
     i64.shr_u
     i64.const 0
     i64.ne
     if
      f64.const 1
      local.get $9
      f64.div
      local.set $9
     end
     br $~lib/util/math/pow_lut|inlined.0
    end
    local.get $2
    i64.const 63
    i64.shr_u
    i64.const 0
    i64.ne
    if
     block $~lib/util/math/checkint|inlined.1
      local.get $3
      i64.const 52
      i64.shr_u
      i64.const 2047
      i64.and
      local.tee $11
      i64.const 1023
      i64.lt_u
      br_if $~lib/util/math/checkint|inlined.1
      local.get $11
      i64.const 1075
      i64.gt_u
      if
       i32.const 2
       local.set $6
       br $~lib/util/math/checkint|inlined.1
      end
      local.get $3
      i64.const 1
      i64.const 1075
      local.get $11
      i64.sub
      i64.shl
      local.tee $11
      i64.const 1
      i64.sub
      i64.and
      i64.const 0
      i64.ne
      br_if $~lib/util/math/checkint|inlined.1
      local.get $3
      local.get $11
      i64.and
      i64.const 0
      i64.ne
      if
       i32.const 1
       local.set $6
       br $~lib/util/math/checkint|inlined.1
      end
      i32.const 2
      local.set $6
     end
     local.get $6
     i32.eqz
     if
      local.get $5
      local.get $5
      f64.sub
      local.tee $0
      local.get $0
      f64.div
      local.set $9
      br $~lib/util/math/pow_lut|inlined.0
     end
     local.get $2
     i64.const 9223372036854775807
     i64.and
     local.set $2
     local.get $12
     i64.const 2047
     i64.and
     local.set $12
     i32.const 262144
     i32.const 0
     local.get $6
     i32.const 1
     i32.eq
     select
     local.set $7
    end
    local.get $4
    i64.const 2047
    i64.and
    i64.const 958
    i64.sub
    i64.const 128
    i64.ge_u
    if
     local.get $2
     i64.const 4607182418800017408
     i64.eq
     if
      f64.const 1
      local.set $9
      br $~lib/util/math/pow_lut|inlined.0
     end
     local.get $4
     i64.const 2047
     i64.and
     i64.const 958
     i64.lt_u
     if
      f64.const 1
      local.set $9
      br $~lib/util/math/pow_lut|inlined.0
     end
     f64.const inf
     f64.const 0
     local.get $4
     i64.const 2048
     i64.lt_u
     local.get $2
     i64.const 4607182418800017408
     i64.gt_u
     i32.eq
     select
     local.set $9
     br $~lib/util/math/pow_lut|inlined.0
    end
    local.get $12
    i64.eqz
    if
     local.get $5
     f64.const 4503599627370496
     f64.mul
     i64.reinterpret_f64
     i64.const 9223372036854775807
     i64.and
     i64.const 234187180623265792
     i64.sub
     local.set $2
    end
   end
   local.get $2
   i64.const 4604531861337669632
   i64.sub
   local.tee $4
   i64.const 45
   i64.shr_u
   i64.const 127
   i64.and
   i32.wrap_i64
   local.set $6
   f64.const -0.5
   local.get $2
   local.get $4
   i64.const -4503599627370496
   i64.and
   i64.sub
   local.tee $2
   i64.const 2147483648
   i64.add
   i64.const -4294967296
   i64.and
   f64.reinterpret_i64
   local.tee $0
   local.get $6
   i32.const 5
   i32.shl
   i32.const 3096
   i32.add
   local.tee $6
   f64.load
   local.tee $9
   f64.mul
   f64.const 1
   f64.sub
   local.tee $1
   local.get $2
   f64.reinterpret_i64
   local.get $0
   f64.sub
   local.get $9
   f64.mul
   local.tee $13
   f64.add
   local.tee $0
   f64.mul
   local.set $9
   local.get $4
   i64.const 52
   i64.shr_s
   f64.convert_i64_s
   local.tee $14
   f64.const 0.6931471805598903
   f64.mul
   local.get $6
   f64.load offset=16
   f64.add
   local.tee $15
   local.get $0
   f64.add
   local.tee $5
   local.get $1
   f64.const -0.5
   local.get $1
   f64.mul
   local.tee $16
   f64.mul
   local.tee $17
   f64.add
   local.tee $1
   local.get $1
   local.get $14
   f64.const 5.497923018708371e-14
   f64.mul
   local.get $6
   f64.load offset=24
   f64.add
   local.get $15
   local.get $5
   f64.sub
   local.get $0
   f64.add
   f64.add
   local.get $13
   local.get $9
   local.get $16
   f64.add
   f64.mul
   f64.add
   local.get $5
   local.get $1
   f64.sub
   local.get $17
   f64.add
   f64.add
   local.get $0
   local.get $0
   local.get $9
   f64.mul
   local.tee $1
   f64.mul
   f64.const -0.6666666666666679
   local.get $0
   f64.const 0.5000000000000007
   f64.mul
   f64.add
   local.get $1
   f64.const 0.7999999995323976
   local.get $0
   f64.const -0.6666666663487739
   f64.mul
   f64.add
   local.get $1
   f64.const -1.142909628459501
   local.get $0
   f64.const 1.0000415263675542
   f64.mul
   f64.add
   f64.mul
   f64.add
   f64.mul
   f64.add
   f64.mul
   f64.add
   local.tee $1
   f64.add
   local.tee $0
   f64.sub
   local.get $1
   f64.add
   global.set $~lib/util/math/log_tail
   block $~lib/util/math/exp_inline|inlined.0 (result f64)
    local.get $8
    local.get $3
    i64.const -134217728
    i64.and
    f64.reinterpret_i64
    local.tee $9
    f64.sub
    local.get $0
    i64.reinterpret_f64
    i64.const -134217728
    i64.and
    f64.reinterpret_i64
    local.tee $1
    f64.mul
    local.get $8
    local.get $0
    local.get $1
    f64.sub
    global.get $~lib/util/math/log_tail
    f64.add
    f64.mul
    f64.add
    local.set $5
    local.get $7
    local.set $6
    local.get $9
    local.get $1
    f64.mul
    local.tee $0
    i64.reinterpret_f64
    local.tee $3
    i64.const 52
    i64.shr_u
    i32.wrap_i64
    i32.const 2047
    i32.and
    local.tee $7
    i32.const 969
    i32.sub
    i32.const 63
    i32.ge_u
    if
     f64.const -1
     f64.const 1
     local.get $6
     select
     local.get $7
     i32.const 969
     i32.sub
     i32.const -2147483648
     i32.ge_u
     br_if $~lib/util/math/exp_inline|inlined.0
     drop
     local.get $3
     i64.const 63
     i64.shr_u
     i64.const 0
     i64.ne
     if (result f64)
      f64.const -1.2882297539194267e-231
      f64.const 1.2882297539194267e-231
      local.get $6
      select
      f64.const 1.2882297539194267e-231
      f64.mul
     else
      f64.const -3105036184601417870297958e207
      f64.const 3105036184601417870297958e207
      local.get $6
      select
      f64.const 3105036184601417870297958e207
      f64.mul
     end
     local.get $7
     i32.const 1033
     i32.ge_u
     br_if $~lib/util/math/exp_inline|inlined.0
     drop
     i32.const 0
     local.set $7
    end
    f64.const 184.6649652337873
    local.get $0
    f64.mul
    f64.const 6755399441055744
    f64.add
    local.tee $9
    f64.const 6755399441055744
    f64.sub
    local.set $1
    local.get $9
    i64.reinterpret_f64
    local.tee $4
    i64.const 127
    i64.and
    i64.const 1
    i64.shl
    i32.wrap_i64
    i32.const 3
    i32.shl
    i32.const 7192
    i32.add
    local.tee $10
    i64.load offset=8
    local.get $4
    local.get $6
    i64.extend_i32_u
    i64.add
    i64.const 45
    i64.shl
    i64.add
    local.set $3
    local.get $0
    local.get $1
    f64.const -0.005415212348111709
    f64.mul
    f64.add
    local.get $1
    f64.const -1.2864023111638346e-14
    f64.mul
    f64.add
    local.get $5
    f64.add
    local.tee $0
    local.get $0
    f64.mul
    local.set $1
    local.get $10
    i64.load
    f64.reinterpret_i64
    local.get $0
    f64.add
    local.get $1
    f64.const 0.49999999999996786
    local.get $0
    f64.const 0.16666666666665886
    f64.mul
    f64.add
    f64.mul
    f64.add
    local.get $1
    local.get $1
    f64.mul
    f64.const 0.0416666808410674
    local.get $0
    f64.const 0.008333335853059549
    f64.mul
    f64.add
    f64.mul
    f64.add
    local.set $0
    local.get $7
    i32.eqz
    if
     block $~lib/util/math/specialcase|inlined.0 (result f64)
      local.get $4
      i64.const 2147483648
      i64.and
      i64.eqz
      if
       f64.const 5486124068793688683255936e279
       local.get $3
       i64.const 4544132024016830464
       i64.sub
       f64.reinterpret_i64
       local.tee $1
       local.get $1
       local.get $0
       f64.mul
       f64.add
       f64.mul
       br $~lib/util/math/specialcase|inlined.0
      end
      local.get $3
      i64.const 4602678819172646912
      i64.add
      local.tee $3
      f64.reinterpret_i64
      local.tee $9
      local.get $9
      local.get $0
      f64.mul
      f64.add
      local.tee $1
      f64.abs
      f64.const 1
      f64.lt
      if (result f64)
       f64.const 1
       local.get $1
       f64.copysign
       local.tee $5
       local.get $1
       f64.add
       local.tee $8
       local.get $5
       local.get $8
       f64.sub
       local.get $1
       f64.add
       local.get $9
       local.get $1
       f64.sub
       local.get $9
       local.get $0
       f64.mul
       f64.add
       f64.add
       f64.add
       local.get $5
       f64.sub
       local.tee $1
       f64.const 0
       f64.eq
       if (result f64)
        local.get $3
        i64.const -9223372036854775808
        i64.and
        f64.reinterpret_i64
       else
        local.get $1
       end
      else
       local.get $1
      end
      f64.const 2.2250738585072014e-308
      f64.mul
     end
     br $~lib/util/math/exp_inline|inlined.0
    end
    local.get $3
    f64.reinterpret_i64
    local.tee $1
    local.get $1
    local.get $0
    f64.mul
    f64.add
   end
   local.set $9
  end
  local.get $9
 )
 (func $assembly/AbstractHistogramBase/AbstractHistogramBase<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#constructor (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.eqz
  if
   call $~lib/rt/tlsf/maybeInitialize
   i32.const 104
   i32.const 9
   call $~lib/rt/tlsf/allocateBlock
   i32.const 16
   i32.add
   local.tee $0
   i32.const 16700
   i32.gt_u
   if
    local.get $0
    i32.const 16
    i32.sub
    local.tee $1
    i32.load offset=4
    local.set $2
    local.get $1
    local.get $2
    i32.const 1
    i32.add
    i32.store offset=4
    local.get $1
    i32.load
    drop
   end
  end
  local.get $0
  f64.const 0
  f64.store
  local.get $0
  i32.const 0
  i32.store8 offset=8
  local.get $0
  i64.const 0
  i64.store offset=16
  local.get $0
  i64.const 0
  i64.store offset=24
  local.get $0
  i32.const 0
  i32.store8 offset=32
  local.get $0
  i64.const 0
  i64.store offset=40
  local.get $0
  i32.const 0
  i32.store offset=48
  local.get $0
  i32.const 0
  i32.store offset=52
  local.get $0
  i64.const 0
  i64.store offset=56
  local.get $0
  i64.const -1
  i64.store offset=64
  local.get $0
  i64.const 0
  i64.store offset=72
  local.get $0
  i32.const 1152
  i32.store offset=80
  local.get $0
  f64.const 1
  f64.store offset=88
  local.get $0
  i32.const 0
  i32.store offset=96
  local.get $0
  i32.const 0
  i32.store offset=100
  local.get $0
  f64.const 0
  f64.store
  local.get $0
  i64.const 0
  i64.store offset=16
  local.get $0
  i64.const 0
  i64.store offset=24
  local.get $0
  i32.const 0
  i32.store8 offset=32
  local.get $0
  i64.const 0
  i64.store offset=40
  local.get $0
  i32.const 0
  i32.store offset=48
  local.get $0
  i32.const 0
  i32.store offset=52
  local.get $0
  i64.const 0
  i64.store offset=56
  local.get $0
 )
 (func $~lib/math/NativeMath.log2 (param $0 f64) (result f64)
  (local $1 f64)
  (local $2 i32)
  (local $3 i64)
  (local $4 f64)
  (local $5 f64)
  (local $6 f64)
  (local $7 i64)
  (local $8 f64)
  (local $9 i32)
  block $~lib/util/math/log2_lut|inlined.0
   local.get $0
   i64.reinterpret_f64
   local.tee $3
   i64.const 4606800540372828160
   i64.sub
   i64.const 581272283906048
   i64.lt_u
   if
    local.get $0
    f64.const 1
    f64.sub
    local.tee $0
    i64.reinterpret_f64
    i64.const -4294967296
    i64.and
    f64.reinterpret_i64
    local.tee $4
    f64.const 1.4426950407214463
    f64.mul
    local.tee $5
    local.get $0
    local.get $0
    f64.mul
    local.tee $1
    f64.const -0.7213475204444817
    local.get $0
    f64.const 0.48089834696298744
    f64.mul
    f64.add
    f64.mul
    local.tee $6
    f64.add
    local.tee $8
    local.get $0
    local.get $4
    f64.sub
    f64.const 1.4426950407214463
    f64.mul
    local.get $0
    f64.const 1.6751713164886512e-10
    f64.mul
    f64.add
    local.get $5
    local.get $8
    f64.sub
    local.get $6
    f64.add
    f64.add
    local.get $1
    local.get $1
    f64.mul
    local.tee $4
    f64.const -0.360673760222145
    local.get $0
    f64.const 0.2885390081805197
    f64.mul
    f64.add
    local.get $1
    f64.const -0.24044917405728863
    local.get $0
    f64.const 0.2060992861022954
    f64.mul
    f64.add
    f64.mul
    f64.add
    local.get $4
    f64.const -0.18033596705327856
    local.get $0
    f64.const 0.1603032746063156
    f64.mul
    f64.add
    local.get $1
    f64.const -0.14483316576701266
    local.get $0
    f64.const 0.13046826811283835
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.add
    local.set $0
    br $~lib/util/math/log2_lut|inlined.0
   end
   local.get $3
   i64.const 48
   i64.shr_u
   i32.wrap_i64
   local.tee $2
   i32.const 16
   i32.sub
   i32.const 32736
   i32.ge_u
   if
    local.get $3
    i64.const 1
    i64.shl
    i64.eqz
    if
     f64.const -1
     local.get $0
     local.get $0
     f64.mul
     f64.div
     local.set $0
     br $~lib/util/math/log2_lut|inlined.0
    end
    local.get $3
    i64.const 9218868437227405312
    i64.eq
    br_if $~lib/util/math/log2_lut|inlined.0
    i32.const 1
    local.get $2
    i32.const 32752
    i32.and
    i32.const 32752
    i32.eq
    local.get $2
    i32.const 32768
    i32.and
    select
    if
     local.get $0
     local.get $0
     f64.sub
     local.tee $0
     local.get $0
     f64.div
     local.set $0
     br $~lib/util/math/log2_lut|inlined.0
    end
    local.get $0
    f64.const 4503599627370496
    f64.mul
    i64.reinterpret_f64
    i64.const 234187180623265792
    i64.sub
    local.set $3
   end
   local.get $3
   i64.const 4604367669032910848
   i64.sub
   local.tee $7
   i64.const 46
   i64.shr_u
   i64.const 63
   i64.and
   i32.wrap_i64
   i32.const 4
   i32.shl
   local.tee $9
   i32.const 11360
   i32.add
   local.set $2
   local.get $3
   local.get $7
   i64.const -4503599627370496
   i64.and
   i64.sub
   f64.reinterpret_i64
   local.get $2
   f64.load
   f64.sub
   local.get $2
   f64.load offset=8
   f64.sub
   local.get $9
   i32.const 10336
   i32.add
   local.tee $2
   f64.load
   f64.mul
   local.tee $0
   i64.reinterpret_f64
   i64.const -4294967296
   i64.and
   f64.reinterpret_i64
   local.set $1
   local.get $7
   i64.const 52
   i64.shr_s
   f64.convert_i64_s
   local.get $2
   f64.load offset=8
   f64.add
   local.tee $5
   local.get $1
   f64.const 1.4426950407214463
   f64.mul
   local.tee $6
   f64.add
   local.set $4
   local.get $5
   local.get $4
   f64.sub
   local.get $6
   f64.add
   local.get $0
   local.get $1
   f64.sub
   f64.const 1.4426950407214463
   f64.mul
   local.get $0
   f64.const 1.6751713164886512e-10
   f64.mul
   f64.add
   f64.add
   local.get $0
   local.get $0
   f64.mul
   local.tee $1
   f64.const -0.7213475204444882
   local.get $0
   f64.const 0.4808983469629985
   f64.mul
   f64.add
   local.get $1
   f64.const -0.36067375954075914
   local.get $0
   f64.const 0.2885390073180969
   f64.mul
   f64.add
   f64.mul
   f64.add
   local.get $1
   local.get $1
   f64.mul
   f64.const -0.2404693555628422
   local.get $0
   f64.const 0.2061202382173603
   f64.mul
   f64.add
   f64.mul
   f64.add
   f64.mul
   f64.add
   local.get $4
   f64.add
   local.set $0
  end
  local.get $0
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getBucketsNeededToCoverValue (param $0 i32) (param $1 i64) (result i32)
  (local $2 i64)
  local.get $0
  i32.load offset=48
  i64.extend_i32_s
  local.get $0
  i32.load offset=112
  i64.extend_i32_s
  i64.shl
  local.set $2
  i32.const 1
  local.set $0
  loop $while-continue|0
   local.get $2
   local.get $1
   i64.le_u
   if
    local.get $2
    i64.const 9223372036854775807
    i64.gt_u
    if
     local.get $0
     i32.const 1
     i32.add
     return
    end
    local.get $2
    i64.const 1
    i64.shl
    local.set $2
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $while-continue|0
   end
  end
  local.get $0
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#establishSize (param $0 i32) (param $1 i64)
  local.get $1
  local.get $0
  i64.load offset=24
  i64.const 2
  i64.mul
  i64.lt_u
  if
   i32.const 12400
   i32.const 9952
   i32.const 160
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getBucketsNeededToCoverValue
  i32.const 1
  i32.add
  local.get $0
  i32.load offset=48
  i32.const 1
  i32.shr_s
  i32.mul
  i32.store offset=52
  local.get $0
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getBucketsNeededToCoverValue
  i64.extend_i32_s
  i64.store offset=40
  local.get $0
  local.get $1
  i64.store offset=16
 )
 (func $~lib/memory/memory.fill (param $0 i32) (param $1 i32)
  (local $2 i32)
  block $~lib/util/memory/memset|inlined.0
   local.get $1
   i32.eqz
   br_if $~lib/util/memory/memset|inlined.0
   local.get $0
   i32.const 0
   i32.store8
   local.get $0
   local.get $1
   i32.add
   i32.const 4
   i32.sub
   local.tee $2
   i32.const 0
   i32.store8 offset=3
   local.get $1
   i32.const 2
   i32.le_u
   br_if $~lib/util/memory/memset|inlined.0
   local.get $0
   i32.const 0
   i32.store8 offset=1
   local.get $0
   i32.const 0
   i32.store8 offset=2
   local.get $2
   i32.const 0
   i32.store8 offset=2
   local.get $2
   i32.const 0
   i32.store8 offset=1
   local.get $1
   i32.const 6
   i32.le_u
   br_if $~lib/util/memory/memset|inlined.0
   local.get $0
   i32.const 0
   i32.store8 offset=3
   local.get $2
   i32.const 0
   i32.store8
   local.get $1
   i32.const 8
   i32.le_u
   br_if $~lib/util/memory/memset|inlined.0
   local.get $0
   i32.const 0
   local.get $0
   i32.sub
   i32.const 3
   i32.and
   local.tee $2
   i32.add
   local.tee $0
   i32.const 0
   i32.store
   local.get $0
   local.get $1
   local.get $2
   i32.sub
   i32.const -4
   i32.and
   local.tee $2
   i32.add
   i32.const 28
   i32.sub
   local.tee $1
   i32.const 0
   i32.store offset=24
   local.get $2
   i32.const 8
   i32.le_u
   br_if $~lib/util/memory/memset|inlined.0
   local.get $0
   i32.const 0
   i32.store offset=4
   local.get $0
   i32.const 0
   i32.store offset=8
   local.get $1
   i32.const 0
   i32.store offset=16
   local.get $1
   i32.const 0
   i32.store offset=20
   local.get $2
   i32.const 24
   i32.le_u
   br_if $~lib/util/memory/memset|inlined.0
   local.get $0
   i32.const 0
   i32.store offset=12
   local.get $0
   i32.const 0
   i32.store offset=16
   local.get $0
   i32.const 0
   i32.store offset=20
   local.get $0
   i32.const 0
   i32.store offset=24
   local.get $1
   i32.const 0
   i32.store
   local.get $1
   i32.const 0
   i32.store offset=4
   local.get $1
   i32.const 0
   i32.store offset=8
   local.get $1
   i32.const 0
   i32.store offset=12
   local.get $0
   local.get $0
   i32.const 4
   i32.and
   i32.const 24
   i32.add
   local.tee $1
   i32.add
   local.set $0
   local.get $2
   local.get $1
   i32.sub
   local.set $1
   loop $while-continue|0
    local.get $1
    i32.const 32
    i32.ge_u
    if
     local.get $0
     i64.const 0
     i64.store
     local.get $0
     i64.const 0
     i64.store offset=8
     local.get $0
     i64.const 0
     i64.store offset=16
     local.get $0
     i64.const 0
     i64.store offset=24
     local.get $1
     i32.const 32
     i32.sub
     local.set $1
     local.get $0
     i32.const 32
     i32.add
     local.set $0
     br $while-continue|0
    end
   end
  end
 )
 (func $~lib/arraybuffer/ArrayBufferView#constructor (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  local.get $0
  i32.eqz
  if
   call $~lib/rt/tlsf/maybeInitialize
   i32.const 12
   i32.const 2
   call $~lib/rt/tlsf/allocateBlock
   i32.const 16
   i32.add
   local.tee $0
   i32.const 16700
   i32.gt_u
   if
    local.get $0
    i32.const 16
    i32.sub
    local.tee $3
    i32.load offset=4
    local.set $4
    local.get $3
    local.get $4
    i32.const 1
    i32.add
    i32.store offset=4
    local.get $3
    i32.load
    drop
   end
  end
  local.get $0
  i32.const 0
  i32.store
  local.get $0
  i32.const 0
  i32.store offset=4
  local.get $0
  i32.const 0
  i32.store offset=8
  local.get $1
  i32.const 1073741808
  local.get $2
  i32.shr_u
  i32.gt_u
  if
   i32.const 1216
   i32.const 12544
   i32.const 18
   i32.const 57
   call $~lib/builtins/abort
   unreachable
  end
  call $~lib/rt/tlsf/maybeInitialize
  local.get $1
  local.get $2
  i32.shl
  local.tee $3
  i32.const 0
  call $~lib/rt/tlsf/allocateBlock
  i32.const 16
  i32.add
  local.tee $1
  local.get $3
  call $~lib/memory/memory.fill
  local.get $0
  i32.load
  local.tee $2
  local.get $1
  i32.ne
  if
   local.get $1
   i32.const 16700
   i32.gt_u
   if
    local.get $1
    i32.const 16
    i32.sub
    local.tee $4
    i32.load offset=4
    local.set $5
    local.get $4
    local.get $5
    i32.const 1
    i32.add
    i32.store offset=4
    local.get $4
    i32.load
    drop
   end
   local.get $2
   i32.const 16700
   i32.gt_u
   if
    local.get $2
    i32.const 16
    i32.sub
    call $~lib/rt/pure/decrement
   end
  end
  local.get $0
  local.get $1
  i32.store
  local.get $0
  local.get $1
  i32.store offset=4
  local.get $0
  local.get $3
  i32.store offset=8
  local.get $0
 )
 (func $~lib/typedarray/Uint8Array#constructor (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  call $~lib/rt/tlsf/maybeInitialize
  i32.const 12
  i32.const 4
  call $~lib/rt/tlsf/allocateBlock
  i32.const 16
  i32.add
  local.tee $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $1
  local.get $0
  i32.const 0
  call $~lib/arraybuffer/ArrayBufferView#constructor
 )
 (func $assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>#constructor (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  call $~lib/rt/tlsf/maybeInitialize
  i32.const 4
  i32.const 6
  call $~lib/rt/tlsf/allocateBlock
  i32.const 16
  i32.add
  local.tee $2
  i32.const 16700
  i32.gt_u
  if
   local.get $2
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $1
   local.get $3
   local.get $1
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $2
  i32.const 0
  i32.store
  local.get $0
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $0
  local.tee $1
  local.get $2
  i32.load
  local.tee $3
  i32.ne
  if
   local.get $1
   i32.const 16700
   i32.gt_u
   if
    local.get $1
    i32.const 16
    i32.sub
    local.tee $4
    i32.load offset=4
    local.set $5
    local.get $4
    local.get $5
    i32.const 1
    i32.add
    i32.store offset=4
    local.get $4
    i32.load
    drop
   end
   local.get $3
   i32.const 16700
   i32.gt_u
   if
    local.get $3
    i32.const 16
    i32.sub
    call $~lib/rt/pure/decrement
   end
  end
  local.get $2
  local.get $1
  i32.store
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $2
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#resetIterator (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $1
  local.get $0
  i32.load offset=28
  local.tee $2
  i32.ne
  if
   local.get $1
   i32.const 16700
   i32.gt_u
   if
    local.get $1
    i32.const 16
    i32.sub
    local.tee $3
    i32.load offset=4
    local.set $4
    local.get $3
    local.get $4
    i32.const 1
    i32.add
    i32.store offset=4
    local.get $3
    i32.load
    drop
   end
   local.get $2
   i32.const 16700
   i32.gt_u
   if
    local.get $2
    i32.const 16
    i32.sub
    call $~lib/rt/pure/decrement
   end
  end
  local.get $0
  local.get $1
  i32.store offset=28
  local.get $0
  local.get $1
  i64.load offset=168
  i64.store offset=32
  local.get $0
  local.get $1
  i64.load offset=168
  i64.store offset=96
  local.get $0
  i32.const 0
  i32.store offset=40
  local.get $0
  i64.const 0
  i64.store offset=48
  local.get $0
  i64.const 1
  local.get $1
  i32.load offset=112
  i64.extend_i32_s
  i64.shl
  i64.store offset=56
  local.get $0
  i64.const 0
  i64.store offset=64
  local.get $0
  i64.const 0
  i64.store offset=72
  local.get $0
  i64.const 0
  i64.store offset=80
  local.get $0
  i64.const 0
  i64.store offset=88
  local.get $0
  i64.const 0
  i64.store offset=104
  local.get $0
  i32.const 1
  i32.store8 offset=112
  local.get $0
  i32.load offset=116
  local.tee $0
  i64.const 0
  i64.store
  local.get $0
  i64.const 0
  i64.store offset=8
  local.get $0
  i64.const 0
  i64.store offset=16
  local.get $0
  i64.const 0
  i64.store offset=24
  local.get $0
  i64.const 0
  i64.store offset=32
  local.get $0
  i64.const 0
  i64.store offset=40
  local.get $0
  f64.const 0
  f64.store offset=48
  local.get $0
  f64.const 0
  f64.store offset=56
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#doReset (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $4
   local.get $3
   local.get $4
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $0
  local.get $1
  call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#resetIterator
  local.get $0
  local.get $2
  i32.store
  local.get $0
  f64.const 0
  f64.store offset=8
  local.get $0
  f64.const 0
  f64.store offset=16
  local.get $0
  i32.const 0
  i32.store8 offset=24
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/HistogramIterationValue/HistogramIterationValue#constructor (result i32)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  call $~lib/rt/tlsf/maybeInitialize
  i32.const 64
  i32.const 11
  call $~lib/rt/tlsf/allocateBlock
  i32.const 16
  i32.add
  local.tee $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $1
   i32.load offset=4
   local.set $2
   local.get $1
   local.get $2
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $1
   i32.load
   drop
  end
  local.get $0
  i64.const 0
  i64.store
  local.get $0
  i64.const 0
  i64.store offset=8
  local.get $0
  i64.const 0
  i64.store offset=16
  local.get $0
  i64.const 0
  i64.store offset=24
  local.get $0
  i64.const 0
  i64.store offset=32
  local.get $0
  i64.const 0
  i64.store offset=40
  local.get $0
  f64.const 0
  f64.store offset=48
  local.get $0
  f64.const 0
  f64.store offset=56
  local.get $0
  i64.const 0
  i64.store
  local.get $0
  i64.const 0
  i64.store offset=8
  local.get $0
  i64.const 0
  i64.store offset=16
  local.get $0
  i64.const 0
  i64.store offset=24
  local.get $0
  i64.const 0
  i64.store offset=32
  local.get $0
  i64.const 0
  i64.store offset=40
  local.get $0
  f64.const 0
  f64.store offset=48
  local.get $0
  f64.const 0
  f64.store offset=56
  local.get $0
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#constructor (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  call $~lib/rt/tlsf/maybeInitialize
  i32.const 120
  i32.const 10
  call $~lib/rt/tlsf/allocateBlock
  i32.const 16
  i32.add
  local.tee $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $1
  i32.const 0
  i32.store
  local.get $1
  f64.const 0
  f64.store offset=8
  local.get $1
  f64.const 0
  f64.store offset=16
  local.get $1
  i32.const 0
  i32.store8 offset=24
  local.get $1
  i32.const 0
  i32.store offset=28
  local.get $1
  i64.const 0
  i64.store offset=32
  local.get $1
  i32.const 0
  i32.store offset=40
  local.get $1
  i64.const 0
  i64.store offset=48
  local.get $1
  i64.const 0
  i64.store offset=56
  local.get $1
  i64.const 0
  i64.store offset=64
  local.get $1
  i64.const 0
  i64.store offset=72
  local.get $1
  i64.const 0
  i64.store offset=80
  local.get $1
  i64.const 0
  i64.store offset=88
  local.get $1
  i64.const 0
  i64.store offset=96
  local.get $1
  i64.const 0
  i64.store offset=104
  local.get $1
  i32.const 0
  i32.store8 offset=112
  local.get $1
  call $assembly/HistogramIterationValue/HistogramIterationValue#constructor
  i32.store offset=116
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $1
  i32.const 0
  i32.store
  local.get $1
  f64.const 0
  f64.store offset=8
  local.get $1
  f64.const 0
  f64.store offset=16
  local.get $1
  i32.const 0
  i32.store8 offset=24
  local.get $1
  local.get $0
  i32.const 1
  call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#doReset
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $1
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#resetIterator (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $1
  local.get $0
  i32.load offset=4
  local.tee $2
  i32.ne
  if
   local.get $1
   i32.const 16700
   i32.gt_u
   if
    local.get $1
    i32.const 16
    i32.sub
    local.tee $3
    i32.load offset=4
    local.set $4
    local.get $3
    local.get $4
    i32.const 1
    i32.add
    i32.store offset=4
    local.get $3
    i32.load
    drop
   end
   local.get $2
   i32.const 16700
   i32.gt_u
   if
    local.get $2
    i32.const 16
    i32.sub
    call $~lib/rt/pure/decrement
   end
  end
  local.get $0
  local.get $1
  i32.store offset=4
  local.get $0
  local.get $1
  i64.load offset=168
  i64.store offset=8
  local.get $0
  local.get $1
  i64.load offset=168
  i64.store offset=72
  local.get $0
  i32.const 0
  i32.store offset=16
  local.get $0
  i64.const 0
  i64.store offset=24
  local.get $0
  i64.const 1
  local.get $1
  i32.load offset=112
  i64.extend_i32_s
  i64.shl
  i64.store offset=32
  local.get $0
  i64.const 0
  i64.store offset=40
  local.get $0
  i64.const 0
  i64.store offset=48
  local.get $0
  i64.const 0
  i64.store offset=56
  local.get $0
  i64.const 0
  i64.store offset=64
  local.get $0
  i64.const 0
  i64.store offset=80
  local.get $0
  i32.const 1
  i32.store8 offset=88
  local.get $0
  i32.load offset=92
  local.tee $0
  i64.const 0
  i64.store
  local.get $0
  i64.const 0
  i64.store offset=8
  local.get $0
  i64.const 0
  i64.store offset=16
  local.get $0
  i64.const 0
  i64.store offset=24
  local.get $0
  i64.const 0
  i64.store offset=32
  local.get $0
  i64.const 0
  i64.store offset=40
  local.get $0
  f64.const 0
  f64.store offset=48
  local.get $0
  f64.const 0
  f64.store offset=56
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#doReset (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  local.get $1
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#resetIterator
  local.get $0
  i32.const -1
  i32.store
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#constructor (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  call $~lib/rt/tlsf/maybeInitialize
  i32.const 96
  i32.const 12
  call $~lib/rt/tlsf/allocateBlock
  i32.const 16
  i32.add
  local.tee $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $1
  i32.const 0
  i32.store
  local.get $1
  i32.const 0
  i32.store offset=4
  local.get $1
  i64.const 0
  i64.store offset=8
  local.get $1
  i32.const 0
  i32.store offset=16
  local.get $1
  i64.const 0
  i64.store offset=24
  local.get $1
  i64.const 0
  i64.store offset=32
  local.get $1
  i64.const 0
  i64.store offset=40
  local.get $1
  i64.const 0
  i64.store offset=48
  local.get $1
  i64.const 0
  i64.store offset=56
  local.get $1
  i64.const 0
  i64.store offset=64
  local.get $1
  i64.const 0
  i64.store offset=72
  local.get $1
  i64.const 0
  i64.store offset=80
  local.get $1
  i32.const 0
  i32.store8 offset=88
  local.get $1
  call $assembly/HistogramIterationValue/HistogramIterationValue#constructor
  i32.store offset=92
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $1
  local.get $0
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#doReset
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $1
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#init (param $0 i32) (param $1 i64) (param $2 i64) (param $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i64)
  (local $8 i32)
  local.get $0
  local.get $1
  i64.store offset=24
  local.get $0
  local.get $2
  i64.store offset=16
  local.get $0
  local.get $3
  i32.store8 offset=32
  local.get $0
  f64.const 1
  f64.store offset=88
  f64.const 10
  local.get $3
  f64.convert_i32_u
  call $~lib/math/NativeMath.pow
  i64.trunc_f64_u
  i64.const 2
  i64.mul
  local.set $7
  local.get $0
  local.get $1
  f64.convert_i64_u
  call $~lib/math/NativeMath.log2
  f64.floor
  i32.trunc_f64_s
  i32.store offset=112
  local.get $0
  i64.const 1
  local.get $0
  i32.load offset=112
  i64.extend_i32_s
  i64.shl
  i64.const 1
  i64.sub
  i64.store offset=136
  local.get $0
  local.get $7
  f64.convert_i64_u
  call $~lib/math/NativeMath.log2
  f64.ceil
  i32.trunc_f64_s
  local.tee $3
  i32.const 1
  i32.sub
  i32.store offset=108
  local.get $0
  i32.const 1
  local.get $3
  i32.shl
  i32.store offset=48
  local.get $0
  local.get $0
  i32.load offset=48
  i32.const 1
  i32.shr_s
  i32.store offset=116
  local.get $0
  local.get $0
  i32.load offset=48
  i64.extend_i32_s
  i64.const 1
  i64.sub
  local.get $0
  i32.load offset=112
  i64.extend_i32_s
  i64.shl
  i64.store offset=128
  local.get $0
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#establishSize
  local.get $0
  i32.load offset=52
  call $assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>#constructor
  local.tee $3
  local.set $4
  local.get $3
  local.get $0
  i32.load offset=160
  local.tee $5
  i32.ne
  if
   local.get $4
   i32.const 16700
   i32.gt_u
   if
    local.get $4
    i32.const 16
    i32.sub
    local.tee $6
    i32.load offset=4
    local.set $8
    local.get $6
    local.get $8
    i32.const 1
    i32.add
    i32.store offset=4
    local.get $6
    i32.load
    drop
   end
   local.get $5
   i32.const 16700
   i32.gt_u
   if
    local.get $5
    i32.const 16
    i32.sub
    call $~lib/rt/pure/decrement
   end
  end
  local.get $0
  local.get $4
  i32.store offset=160
  local.get $0
  i32.const 0
  local.get $0
  i32.load offset=112
  i32.sub
  local.get $0
  i32.load offset=108
  i32.sub
  i32.const 63
  i32.add
  i32.store offset=104
  local.get $0
  call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#constructor
  local.set $5
  local.get $0
  i32.load offset=96
  local.tee $4
  i32.const 16700
  i32.gt_u
  if
   local.get $4
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $0
  local.get $5
  i32.store offset=96
  local.get $0
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#constructor
  local.set $5
  local.get $0
  i32.load offset=100
  local.tee $4
  i32.const 16700
  i32.gt_u
  if
   local.get $4
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $0
  local.get $5
  i32.store offset=100
  local.get $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#constructor (param $0 i64) (param $1 i64) (param $2 i32) (result i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 f64)
  call $~lib/rt/tlsf/maybeInitialize
  i32.const 176
  i32.const 8
  call $~lib/rt/tlsf/allocateBlock
  i32.const 16
  i32.add
  local.tee $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   local.tee $4
   i32.load offset=4
   local.set $5
   local.get $4
   local.get $5
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $4
   i32.load
   drop
  end
  local.get $3
  i32.const 0
  i32.store offset=104
  local.get $3
  i32.const 0
  i32.store offset=108
  local.get $3
  i32.const 0
  i32.store offset=112
  local.get $3
  i32.const 0
  i32.store offset=116
  local.get $3
  i64.const 0
  i64.store offset=120
  local.get $3
  i64.const 0
  i64.store offset=128
  local.get $3
  i64.const 0
  i64.store offset=136
  local.get $3
  i64.const 0
  i64.store offset=144
  local.get $3
  i64.const -1
  i64.store offset=152
  local.get $3
  i32.const 0
  i32.store offset=160
  local.get $3
  i64.const 0
  i64.store offset=168
  local.get $3
  call $assembly/AbstractHistogramBase/AbstractHistogramBase<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#constructor
  local.set $3
  local.get $0
  i64.const 1
  i64.lt_u
  if
   i32.const 9856
   i32.const 9952
   i32.const 61
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $1
  local.get $0
  i64.const 2
  i64.mul
  i64.lt_u
  if
   i32.const 10016
   i32.const 9952
   i32.const 64
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  i32.const 1
  local.get $2
  i32.const 255
  i32.and
  local.tee $4
  i32.const 5
  i32.gt_u
  local.get $4
  i32.const 0
  i32.lt_u
  select
  if
   i32.const 10224
   i32.const 9952
   i32.const 72
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  global.get $assembly/AbstractHistogramBase/AbstractHistogramBase.identityBuilder
  local.tee $6
  f64.const 1
  f64.add
  global.set $assembly/AbstractHistogramBase/AbstractHistogramBase.identityBuilder
  local.get $3
  local.get $6
  f64.store
  local.get $3
  local.get $0
  local.get $1
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#init
  local.get $3
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#constructor (param $0 i32) (param $1 f64) (param $2 f64) (param $3 f64) (param $4 i32) (param $5 i32) (result i32)
  (local $6 i32)
  (local $7 i32)
  local.get $0
  i32.eqz
  if
   call $~lib/rt/tlsf/maybeInitialize
   i32.const 4
   i32.const 7
   call $~lib/rt/tlsf/allocateBlock
   i32.const 16
   i32.add
   local.tee $0
   i32.const 16700
   i32.gt_u
   if
    local.get $0
    i32.const 16
    i32.sub
    local.tee $6
    i32.load offset=4
    local.set $7
    local.get $6
    local.get $7
    i32.const 1
    i32.add
    i32.store offset=4
    local.get $6
    i32.load
    drop
   end
  end
  local.get $0
  i32.const 0
  i32.store
  local.get $5
  i32.const 16700
  i32.gt_u
  if
   local.get $5
   i32.const 16
   i32.sub
   local.tee $6
   i32.load offset=4
   local.set $7
   local.get $6
   local.get $7
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $6
   i32.load
   drop
  end
  local.get $5
  if
   local.get $5
   local.get $0
   i32.load
   local.tee $4
   i32.ne
   if
    local.get $5
    i32.const 16700
    i32.gt_u
    if
     local.get $5
     i32.const 16
     i32.sub
     local.tee $6
     i32.load offset=4
     local.set $7
     local.get $6
     local.get $7
     i32.const 1
     i32.add
     i32.store offset=4
     local.get $6
     i32.load
     drop
    end
    local.get $4
    i32.const 16700
    i32.gt_u
    if
     local.get $4
     i32.const 16
     i32.sub
     call $~lib/rt/pure/decrement
    end
   end
   local.get $0
   local.get $5
   i32.store
  else
   local.get $1
   i64.trunc_f64_u
   local.get $2
   i64.trunc_f64_u
   local.get $3
   i32.trunc_f64_u
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#constructor
   local.set $6
   local.get $0
   i32.load
   local.tee $7
   i32.const 16700
   i32.gt_u
   if
    local.get $7
    i32.const 16
    i32.sub
    call $~lib/rt/pure/decrement
   end
   local.get $0
   local.get $6
   i32.store
   local.get $0
   i32.load
   local.get $4
   i32.store8 offset=8
  end
  local.get $5
  i32.const 16700
  i32.gt_u
  if
   local.get $5
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $0
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:autoResize (param $0 i32) (result i32)
  local.get $0
  i32.load
  i32.load8_u offset=8
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#set:autoResize (param $0 i32) (param $1 i32)
  local.get $0
  i32.load
  local.get $1
  i32.store8 offset=8
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:highestTrackableValue (param $0 i32) (result f64)
  local.get $0
  i32.load
  i64.load offset=16
  f64.convert_i64_u
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#set:highestTrackableValue (param $0 i32) (param $1 f64)
  local.get $0
  i32.load
  local.get $1
  i64.trunc_f64_u
  i64.store offset=16
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:startTimeStampMsec (param $0 i32) (result f64)
  local.get $0
  i32.load
  i64.load offset=64
  f64.convert_i64_u
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#set:startTimeStampMsec (param $0 i32) (param $1 f64)
  local.get $0
  i32.load
  local.get $1
  i64.trunc_f64_u
  i64.store offset=64
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:endTimeStampMsec (param $0 i32) (result f64)
  local.get $0
  i32.load
  i64.load offset=72
  f64.convert_i64_u
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#set:endTimeStampMsec (param $0 i32) (param $1 f64)
  local.get $0
  i32.load
  local.get $1
  i64.trunc_f64_u
  i64.store offset=72
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:minNonZeroValue (param $0 i32) (result f64)
  local.get $0
  i32.load
  i64.load offset=152
  f64.convert_i64_u
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:maxValue (param $0 i32) (result f64)
  local.get $0
  i32.load
  i64.load offset=144
  f64.convert_i64_u
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:totalCount (param $0 i32) (result f64)
  local.get $0
  i32.load
  i64.load offset=168
  f64.convert_i64_u
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#hasNext (param $0 i32) (result i32)
  local.get $0
  i32.load offset=4
  i64.load offset=168
  local.get $0
  i64.load offset=8
  i64.ne
  if
   i32.const 0
   i32.const 12608
   i32.const 87
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i64.load offset=56
  local.get $0
  i64.load offset=72
  i64.lt_u
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#incrementSubBucket (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  i32.const 1
  i32.store8 offset=88
  local.get $0
  local.get $0
  i32.load offset=16
  i32.const 1
  i32.add
  i32.store offset=16
  local.get $0
  i32.load offset=4
  local.tee $1
  i32.load offset=116
  local.get $0
  i32.load offset=16
  local.tee $2
  local.get $1
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  i32.add
  local.set $3
  local.get $0
  local.get $2
  local.get $1
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.tee $2
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 0
   local.set $2
   local.get $3
   local.get $1
   i32.load offset=116
   i32.sub
  else
   local.get $3
  end
  i64.extend_i32_s
  local.get $2
  local.get $1
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.store offset=24
  local.get $0
  i32.load offset=4
  local.tee $1
  i32.load offset=116
  local.get $0
  i32.load offset=16
  i32.const 1
  i32.add
  local.tee $2
  local.get $1
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  i32.add
  local.set $3
  local.get $0
  local.get $2
  local.get $1
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.tee $2
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 0
   local.set $2
   local.get $3
   local.get $1
   i32.load offset=116
   i32.sub
  else
   local.get $3
  end
  i64.extend_i32_s
  local.get $2
  local.get $1
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.store offset=32
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#next (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i64)
  (local $3 i32)
  loop $while-continue|0
   local.get $0
   i32.load offset=16
   local.get $0
   i32.load offset=4
   i32.load offset=52
   i32.lt_s
   if
    local.get $0
    local.get $0
    i32.load offset=16
    local.get $0
    i32.load offset=4
    i32.load offset=160
    i32.load
    i32.load offset=4
    i32.add
    i32.load8_u
    i64.extend_i32_u
    i64.store offset=80
    local.get $0
    i32.load8_u offset=88
    if
     local.get $0
     local.get $0
     i64.load offset=56
     local.get $0
     i64.load offset=80
     i64.add
     i64.store offset=56
     local.get $0
     i32.load offset=4
     local.tee $1
     i32.load offset=104
     local.get $0
     i64.load offset=24
     local.tee $2
     local.get $1
     i64.load offset=128
     i64.or
     i64.clz
     i32.wrap_i64
     i32.sub
     local.set $3
     local.get $0
     local.get $0
     i64.load offset=64
     local.get $0
     i64.load offset=80
     local.get $2
     local.get $3
     local.get $1
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shr_u
     i32.wrap_i64
     i64.extend_i32_s
     local.get $3
     local.get $1
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shl
     i64.const 1
     local.get $1
     i32.load offset=112
     local.get $1
     i32.load offset=104
     local.get $2
     local.get $1
     i64.load offset=128
     i64.or
     i64.clz
     i32.wrap_i64
     i32.sub
     i32.add
     i64.extend_i32_s
     i64.shl
     i64.add
     i64.const 1
     i64.sub
     i64.mul
     i64.add
     i64.store offset=64
     local.get $0
     i32.const 0
     i32.store8 offset=88
    end
    local.get $0
    i32.load offset=16
    local.get $0
    i32.load offset=4
    i32.load offset=160
    i32.load
    i32.load offset=4
    i32.add
    i32.load8_u
    i64.extend_i32_u
    i64.const 0
    i64.ne
    if (result i32)
     local.get $0
     i32.load
     local.get $0
     i32.load offset=16
     i32.ne
    else
     i32.const 0
    end
    if
     local.get $0
     i32.load offset=4
     local.tee $1
     i32.load offset=104
     local.get $0
     i64.load offset=24
     local.tee $2
     local.get $1
     i64.load offset=128
     i64.or
     i64.clz
     i32.wrap_i64
     i32.sub
     local.set $3
     local.get $0
     i32.load offset=92
     local.get $2
     local.get $3
     local.get $1
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shr_u
     i32.wrap_i64
     i64.extend_i32_s
     local.get $3
     local.get $1
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shl
     i64.const 1
     local.get $1
     i32.load offset=112
     local.get $1
     i32.load offset=104
     local.get $2
     local.get $1
     i64.load offset=128
     i64.or
     i64.clz
     i32.wrap_i64
     i32.sub
     i32.add
     i64.extend_i32_s
     i64.shl
     i64.add
     i64.const 1
     i64.sub
     local.tee $2
     i64.store
     local.get $0
     i32.load offset=92
     local.get $0
     i64.load offset=40
     i64.store offset=8
     local.get $0
     i32.load offset=92
     local.get $0
     i64.load offset=80
     i64.store offset=16
     local.get $0
     i32.load offset=92
     local.get $0
     i64.load offset=56
     local.get $0
     i64.load offset=48
     i64.sub
     i64.store offset=24
     local.get $0
     i32.load offset=92
     local.get $0
     i64.load offset=56
     i64.store offset=32
     local.get $0
     i32.load offset=92
     local.get $0
     i64.load offset=64
     i64.store offset=40
     local.get $0
     i32.load offset=92
     f64.const 100
     local.get $0
     i64.load offset=56
     f64.convert_i64_u
     f64.mul
     local.get $0
     i64.load offset=72
     f64.convert_i64_u
     f64.div
     f64.store offset=48
     local.get $0
     i32.load offset=92
     f64.const 100
     local.get $0
     i64.load offset=56
     f64.convert_i64_u
     f64.mul
     local.get $0
     i64.load offset=72
     f64.convert_i64_u
     f64.div
     f64.store offset=56
     local.get $0
     local.get $2
     i64.store offset=40
     local.get $0
     local.get $0
     i64.load offset=56
     i64.store offset=48
     local.get $0
     local.get $0
     i32.load offset=16
     i32.store
     local.get $0
     i32.load offset=4
     i64.load offset=168
     local.get $0
     i64.load offset=8
     i64.ne
     if
      i32.const 12704
      i32.const 12608
      i32.const 128
      i32.const 11
      call $~lib/builtins/abort
      unreachable
     end
     local.get $0
     i32.load offset=92
     local.tee $0
     i32.const 16700
     i32.gt_u
     if
      local.get $0
      i32.const 16
      i32.sub
      local.tee $1
      i32.load offset=4
      local.set $3
      local.get $1
      local.get $3
      i32.const 1
      i32.add
      i32.store offset=4
      local.get $1
      i32.load
      drop
     end
     local.get $0
     return
    end
    local.get $0
    call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#incrementSubBucket
    br $while-continue|0
   end
  end
  i32.const 12800
  i32.const 12608
  i32.const 134
  i32.const 5
  call $~lib/builtins/abort
  unreachable
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getMean (param $0 i32) (result f64)
  (local $1 i32)
  (local $2 i64)
  (local $3 i32)
  local.get $0
  i64.load offset=168
  i64.eqz
  if
   f64.const 0
   return
  end
  local.get $0
  i32.load offset=100
  local.tee $1
  local.get $1
  i32.load offset=4
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#doReset
  loop $while-continue|0
   local.get $0
   i32.load offset=100
   call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#hasNext
   if
    local.get $2
    local.get $0
    i32.load offset=100
    call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#next
    local.tee $1
    i64.load
    local.tee $2
    local.get $0
    i32.load offset=104
    local.get $2
    local.get $0
    i64.load offset=128
    i64.or
    i64.clz
    i32.wrap_i64
    i32.sub
    local.tee $3
    local.get $0
    i32.load offset=112
    i32.add
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    i64.extend_i32_s
    local.get $3
    local.get $0
    i32.load offset=112
    i32.add
    i64.extend_i32_s
    i64.shl
    i64.const 1
    local.get $0
    i32.load offset=112
    local.get $0
    i32.load offset=104
    local.get $2
    local.get $0
    i64.load offset=128
    i64.or
    i64.clz
    i32.wrap_i64
    i32.sub
    i32.add
    i64.extend_i32_s
    i64.shl
    i64.const 1
    i64.shr_u
    i64.add
    local.get $1
    i64.load offset=16
    i64.mul
    i64.add
    local.set $2
    local.get $1
    i32.const 16700
    i32.gt_u
    if
     local.get $1
     i32.const 16
     i32.sub
     call $~lib/rt/pure/decrement
    end
    br $while-continue|0
   end
  end
  local.get $2
  f64.convert_i64_u
  local.get $0
  i64.load offset=168
  f64.convert_i64_u
  f64.div
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#computeStdDeviation (param $0 i32) (param $1 f64) (result f64)
  (local $2 i32)
  (local $3 f64)
  (local $4 i64)
  (local $5 i32)
  local.get $0
  i64.load offset=168
  i64.eqz
  if
   f64.const 0
   return
  end
  local.get $0
  i32.load offset=100
  local.tee $2
  local.get $2
  i32.load offset=4
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#doReset
  loop $while-continue|0
   local.get $0
   i32.load offset=100
   call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#hasNext
   if
    local.get $3
    local.get $0
    i32.load offset=100
    call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#next
    local.tee $2
    i64.load
    local.tee $4
    local.get $0
    i32.load offset=104
    local.get $4
    local.get $0
    i64.load offset=128
    i64.or
    i64.clz
    i32.wrap_i64
    i32.sub
    local.tee $5
    local.get $0
    i32.load offset=112
    i32.add
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    i64.extend_i32_s
    local.get $5
    local.get $0
    i32.load offset=112
    i32.add
    i64.extend_i32_s
    i64.shl
    i64.const 1
    local.get $0
    i32.load offset=112
    local.get $0
    i32.load offset=104
    local.get $4
    local.get $0
    i64.load offset=128
    i64.or
    i64.clz
    i32.wrap_i64
    i32.sub
    i32.add
    i64.extend_i32_s
    i64.shl
    i64.const 1
    i64.shr_u
    i64.add
    f64.convert_i64_u
    local.get $1
    f64.sub
    local.tee $3
    local.get $3
    f64.mul
    local.get $2
    i64.load offset=24
    f64.convert_i64_u
    f64.mul
    f64.add
    local.set $3
    local.get $2
    i32.const 16700
    i32.gt_u
    if
     local.get $2
     i32.const 16
     i32.sub
     call $~lib/rt/pure/decrement
    end
    br $while-continue|0
   end
  end
  local.get $3
  local.get $0
  i64.load offset=168
  f64.convert_i64_u
  f64.div
  f64.sqrt
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:stdDeviation (param $0 i32) (result f64)
  block $__inlined_func$assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getStdDeviation (result f64)
   f64.const 0
   local.get $0
   i32.load
   local.tee $0
   i64.load offset=168
   i64.eqz
   br_if $__inlined_func$assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getStdDeviation
   drop
   local.get $0
   local.get $0
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getMean
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#computeStdDeviation
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:mean (param $0 i32) (result f64)
  local.get $0
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getMean
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:estimatedFootprintInBytes (param $0 i32) (result f64)
  local.get $0
  i32.load
  i32.load offset=160
  i32.load
  i32.load offset=8
  i32.const 184
  i32.add
  f64.convert_i32_u
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex (param $0 i32) (param $1 i64) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $1
  i64.const 0
  i64.lt_u
  if
   i32.const 12880
   i32.const 9952
   i32.const 239
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $1
  local.get $0
  i32.load offset=104
  local.get $1
  local.get $0
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  local.tee $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shr_u
  i32.wrap_i64
  local.get $0
  local.tee $2
  i32.load offset=48
  drop
  local.get $3
  local.tee $0
  if
   local.get $2
   i32.load offset=116
   drop
  end
  local.get $2
  i32.load offset=116
  i32.sub
  local.get $0
  i32.const 1
  i32.add
  i32.const 1
  local.get $2
  i32.load offset=108
  i32.shl
  i32.mul
  i32.add
 )
 (func $~lib/typedarray/Uint8Array#set<~lib/typedarray/Uint8Array> (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $4
   local.get $3
   local.get $4
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $4
   local.get $3
   local.get $4
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $4
   local.get $3
   local.get $4
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $2
  i32.const 0
  i32.lt_s
  if
   i32.const 13120
   i32.const 13184
   i32.const 1774
   i32.const 19
   call $~lib/builtins/abort
   unreachable
  end
  local.get $2
  local.get $1
  i32.load offset=8
  i32.add
  local.get $0
  i32.load offset=8
  i32.gt_s
  if
   i32.const 13120
   i32.const 13184
   i32.const 1775
   i32.const 47
   call $~lib/builtins/abort
   unreachable
  end
  local.get $2
  local.get $0
  i32.load offset=4
  i32.add
  local.get $1
  i32.load offset=4
  local.get $1
  i32.load offset=8
  call $~lib/memory/memory.copy
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#resize (param $0 i32) (param $1 i64)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#establishSize
  local.get $0
  i32.load offset=160
  local.set $2
  local.get $0
  i32.load offset=52
  call $assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>#constructor
  local.tee $3
  i32.load
  local.get $2
  i32.load
  i32.const 0
  call $~lib/typedarray/Uint8Array#set<~lib/typedarray/Uint8Array>
  local.get $0
  i32.load offset=160
  local.tee $2
  i32.const 16700
  i32.gt_u
  if
   local.get $2
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $0
  local.get $3
  i32.store offset=160
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#addToCountAtIndex (param $0 i32) (param $1 i32) (param $2 i64)
  local.get $2
  local.get $1
  local.get $0
  i32.load offset=160
  i32.load
  i32.load offset=4
  i32.add
  i32.load8_u
  i64.extend_i32_u
  i64.add
  local.tee $2
  i64.const 0
  i64.lt_u
  if
   i32.const 0
   i32.const 9952
   i32.const 611
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $1
  local.get $0
  i32.load offset=160
  i32.load
  i32.load offset=4
  i32.add
  local.get $2
  i64.store8
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#handleRecordException (param $0 i32) (param $1 i64) (param $2 i64)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  local.get $0
  i32.load8_u offset=8
  i32.eqz
  if
   i32.const 12992
   local.get $2
   call $~lib/util/number/utoa64
   call $~lib/string/String.__concat
   i32.const 13024
   call $~lib/string/String.__concat
   i32.const 9952
   i32.const 225
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#resize
  local.get $0
  local.get $0
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#addToCountAtIndex
  local.get $0
  i32.load offset=116
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $5
  local.get $0
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  i32.add
  local.set $6
  local.get $5
  local.get $0
  local.tee $3
  local.tee $4
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.tee $5
  i32.const 0
  i32.lt_s
  if
   i32.const 0
   local.set $5
   local.get $6
   local.get $3
   i32.load offset=116
   i32.sub
   local.set $6
  end
  local.get $4
  i32.load offset=104
  local.get $6
  i64.extend_i32_s
  local.get $5
  local.get $3
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  local.tee $1
  local.get $4
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  local.set $0
  local.get $3
  local.get $1
  local.get $0
  local.get $4
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shr_u
  i32.wrap_i64
  i64.extend_i32_s
  local.get $0
  local.get $4
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.const 1
  local.get $4
  i32.load offset=112
  local.get $4
  i32.load offset=104
  local.get $1
  local.get $4
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.add
  i64.const 1
  i64.sub
  i64.store offset=16
 )
 (func $~lib/util/number/utoa32 (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.eqz
  if
   i32.const 1552
   return
  end
  call $~lib/rt/tlsf/maybeInitialize
  local.get $0
  local.tee $1
  i32.const 100000
  i32.lt_u
  if (result i32)
   local.get $1
   i32.const 100
   i32.lt_u
   if (result i32)
    local.get $1
    i32.const 10
    i32.ge_u
    i32.const 1
    i32.add
   else
    local.get $1
    i32.const 10000
    i32.ge_u
    i32.const 3
    i32.add
    local.get $1
    i32.const 1000
    i32.ge_u
    i32.add
   end
  else
   local.get $1
   i32.const 10000000
   i32.lt_u
   if (result i32)
    local.get $1
    i32.const 1000000
    i32.ge_u
    i32.const 6
    i32.add
   else
    local.get $1
    i32.const 1000000000
    i32.ge_u
    i32.const 8
    i32.add
    local.get $1
    i32.const 100000000
    i32.ge_u
    i32.add
   end
  end
  local.tee $0
  i32.const 1
  i32.shl
  i32.const 1
  call $~lib/rt/tlsf/allocateBlock
  i32.const 16
  i32.add
  local.tee $2
  local.get $1
  local.get $0
  call $~lib/util/number/utoa32_dec_lut
  local.get $2
  i32.const 16700
  i32.gt_u
  if
   local.get $2
   i32.const 16
   i32.sub
   local.tee $0
   i32.load offset=4
   local.set $1
   local.get $0
   local.get $1
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $0
   i32.load
   drop
  end
  local.get $2
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordSingleValue (param $0 i32) (param $1 i64)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex
  local.tee $2
  local.get $0
  i32.load offset=52
  i32.ge_s
  if
   local.get $0
   i64.const 1
   local.get $1
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#handleRecordException
  else
   local.get $2
   local.get $0
   i32.load offset=160
   i32.load
   i32.load offset=4
   i32.add
   i32.load8_u
   i32.const 1
   i32.add
   local.tee $3
   i32.const 255
   i32.and
   i32.const 0
   i32.lt_u
   if
    local.get $3
    i32.const 255
    i32.and
    call $~lib/util/number/utoa32
    i32.const 13248
    call $~lib/string/String.__concat
    i32.const 9952
    i32.const 593
    i32.const 7
    call $~lib/builtins/abort
    unreachable
   end
   local.get $2
   local.get $0
   i32.load offset=160
   i32.load
   i32.load offset=4
   i32.add
   local.get $3
   i32.store8
  end
  local.get $1
  local.get $0
  i64.load offset=144
  i64.gt_u
  if
   local.get $0
   local.get $1
   local.get $0
   i64.load offset=136
   i64.add
   i64.store offset=144
  end
  local.get $1
  local.get $0
  i64.load offset=152
  i64.lt_u
  if (result i32)
   local.get $1
   i64.const 0
   i64.ne
  else
   i32.const 0
  end
  if
   local.get $1
   local.get $0
   i64.load offset=136
   i64.gt_u
   if
    local.get $0
    local.get $1
    local.get $0
    i64.load offset=136
    i64.const -1
    i64.xor
    i64.and
    i64.store offset=152
   end
  end
  local.get $0
  local.get $0
  i64.load offset=168
  i64.const 1
  i64.add
  i64.store offset=168
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordValue (param $0 i32) (param $1 f64)
  local.get $0
  i32.load
  local.get $1
  i64.trunc_f64_u
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordSingleValue
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordCountAtValue (param $0 i32) (param $1 i64) (param $2 i64)
  (local $3 i32)
  local.get $0
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex
  local.tee $3
  local.get $0
  i32.load offset=52
  i32.ge_s
  if
   local.get $0
   local.get $1
   local.get $2
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#handleRecordException
  else
   local.get $0
   local.get $3
   local.get $1
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#addToCountAtIndex
  end
  local.get $2
  local.get $0
  i64.load offset=144
  i64.gt_u
  if
   local.get $0
   local.get $2
   local.get $0
   i64.load offset=136
   i64.add
   i64.store offset=144
  end
  local.get $2
  local.get $0
  i64.load offset=152
  i64.lt_u
  if (result i32)
   local.get $2
   i64.const 0
   i64.ne
  else
   i32.const 0
  end
  if
   local.get $2
   local.get $0
   i64.load offset=136
   i64.gt_u
   if
    local.get $0
    local.get $2
    local.get $0
    i64.load offset=136
    i64.const -1
    i64.xor
    i64.and
    i64.store offset=152
   end
  end
  local.get $0
  local.get $1
  local.get $0
  i64.load offset=168
  i64.add
  i64.store offset=168
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordValueWithCount (param $0 i32) (param $1 f64) (param $2 f64)
  local.get $0
  i32.load
  local.get $2
  i64.trunc_f64_u
  local.get $1
  i64.trunc_f64_u
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordCountAtValue
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordValueWithExpectedInterval (param $0 i32) (param $1 f64) (param $2 f64)
  (local $3 i64)
  (local $4 i64)
  block $__inlined_func$assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordSingleValueWithExpectedInterval
   local.get $2
   i64.trunc_f64_u
   local.set $4
   local.get $0
   i32.load
   local.tee $0
   local.get $1
   i64.trunc_f64_u
   local.tee $3
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordSingleValue
   i32.const 1
   local.get $4
   i64.eqz
   local.get $3
   local.get $4
   i64.lt_u
   select
   br_if $__inlined_func$assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordSingleValueWithExpectedInterval
   local.get $3
   local.get $4
   i64.sub
   local.set $3
   loop $for-loop|0
    local.get $3
    local.get $4
    i64.ge_u
    if
     local.get $0
     local.get $3
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordSingleValue
     local.get $3
     local.get $4
     i64.sub
     local.set $3
     br $for-loop|0
    end
   end
  end
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getValueAtPercentile (param $0 i32) (param $1 f64) (result i64)
  (local $2 i32)
  (local $3 i64)
  (local $4 f64)
  (local $5 i32)
  (local $6 i64)
  local.get $1
  f64.const 100
  f64.min
  f64.const 100
  f64.div
  local.get $0
  i64.load offset=168
  f64.convert_i64_u
  f64.mul
  local.set $4
  i32.const 1
  global.set $~argumentsLength
  local.get $4
  local.get $4
  local.get $4
  i64.reinterpret_f64
  i64.const 1
  i64.xor
  f64.reinterpret_i64
  f64.sub
  f64.abs
  f64.sub
  f64.ceil
  f64.const 1
  f64.max
  i64.trunc_f64_u
  local.set $3
  loop $for-loop|0
   local.get $2
   local.get $0
   i32.load offset=52
   i32.lt_s
   if
    local.get $6
    local.get $2
    local.get $0
    i32.load offset=160
    i32.load
    i32.load offset=4
    i32.add
    i32.load8_u
    i64.extend_i32_u
    i64.add
    local.tee $6
    local.get $3
    i64.ge_u
    if
     local.get $0
     i32.load offset=116
     local.get $2
     local.get $0
     i32.load offset=116
     i32.const 1
     i32.sub
     i32.and
     i32.add
     local.set $5
     local.get $2
     local.get $0
     i32.load offset=108
     i32.shr_s
     i32.const 1
     i32.sub
     local.tee $2
     i32.const 0
     i32.lt_s
     if
      local.get $5
      local.get $0
      i32.load offset=116
      i32.sub
      local.set $5
      i32.const 0
      local.set $2
     end
     local.get $5
     i64.extend_i32_s
     local.get $2
     local.get $0
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shl
     local.set $3
     local.get $1
     f64.const 0
     f64.eq
     if (result i64)
      local.get $3
      local.get $0
      i32.load offset=104
      local.get $3
      local.get $0
      i64.load offset=128
      i64.or
      i64.clz
      i32.wrap_i64
      i32.sub
      local.tee $2
      local.get $0
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shr_u
      i32.wrap_i64
      i64.extend_i32_s
      local.get $2
      local.get $0
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shl
     else
      local.get $3
      local.get $0
      i32.load offset=104
      local.get $3
      local.get $0
      i64.load offset=128
      i64.or
      i64.clz
      i32.wrap_i64
      i32.sub
      local.tee $2
      local.get $0
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shr_u
      i32.wrap_i64
      i64.extend_i32_s
      local.get $2
      local.get $0
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shl
      i64.const 1
      local.get $0
      i32.load offset=112
      local.get $0
      i32.load offset=104
      local.get $3
      local.get $0
      i64.load offset=128
      i64.or
      i64.clz
      i32.wrap_i64
      i32.sub
      i32.add
      i64.extend_i32_s
      i64.shl
      i64.add
      i64.const 1
      i64.sub
     end
     return
    end
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|0
   end
  end
  i64.const 0
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getValueAtPercentile (param $0 i32) (param $1 f64) (result f64)
  local.get $0
  i32.load
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getValueAtPercentile
  f64.convert_i64_u
 )
 (func $assembly/formatters/FloatFormatter#constructor (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  call $~lib/rt/tlsf/maybeInitialize
  i32.const 8
  i32.const 14
  call $~lib/rt/tlsf/allocateBlock
  i32.const 16
  i32.add
  local.tee $2
  i32.const 16700
  i32.gt_u
  if
   local.get $2
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $4
   local.get $3
   local.get $4
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $2
  local.get $0
  i32.store
  local.get $2
  local.get $1
  i32.store offset=4
  local.get $2
 )
 (func $assembly/formatters/IntegerFormatter#constructor (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  call $~lib/rt/tlsf/maybeInitialize
  i32.const 4
  i32.const 15
  call $~lib/rt/tlsf/allocateBlock
  i32.const 16
  i32.add
  local.tee $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $1
  local.get $0
  i32.store
  local.get $1
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#hasNext (param $0 i32) (result i32)
  local.get $0
  i32.load offset=28
  i64.load offset=168
  local.get $0
  i64.load offset=32
  i64.ne
  if
   i32.const 0
   i32.const 13488
   i32.const 138
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i64.load offset=80
  local.get $0
  i64.load offset=96
  i64.lt_u
  if
   i32.const 1
   return
  end
  local.get $0
  i32.load8_u offset=24
  if (result i32)
   i32.const 0
  else
   local.get $0
   i64.load offset=96
   i64.const 0
   i64.gt_u
  end
  if
   local.get $0
   f64.const 100
   f64.store offset=8
   local.get $0
   i32.const 1
   i32.store8 offset=24
   i32.const 1
   return
  end
  i32.const 0
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#incrementIterationLevel (param $0 i32)
  (local $1 f64)
  local.get $0
  local.get $0
  f64.load offset=8
  f64.store offset=16
  local.get $0
  i32.load
  f64.convert_i32_s
  f64.const 2
  f64.const 100
  f64.const 100
  local.get $0
  f64.load offset=8
  f64.sub
  f64.div
  call $~lib/math/NativeMath.log2
  f64.floor
  f64.const 1
  f64.add
  call $~lib/math/NativeMath.pow
  f64.mul
  local.set $1
  local.get $0
  local.get $0
  f64.load offset=8
  f64.const 100
  local.get $1
  f64.div
  f64.add
  f64.store offset=8
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#incrementSubBucket (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  i32.const 1
  i32.store8 offset=112
  local.get $0
  local.get $0
  i32.load offset=40
  i32.const 1
  i32.add
  i32.store offset=40
  local.get $0
  i32.load offset=28
  local.tee $1
  i32.load offset=116
  local.get $0
  i32.load offset=40
  local.tee $2
  local.get $1
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  i32.add
  local.set $3
  local.get $0
  local.get $2
  local.get $1
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.tee $2
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 0
   local.set $2
   local.get $3
   local.get $1
   i32.load offset=116
   i32.sub
  else
   local.get $3
  end
  i64.extend_i32_s
  local.get $2
  local.get $1
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.store offset=48
  local.get $0
  i32.load offset=28
  local.tee $1
  i32.load offset=116
  local.get $0
  i32.load offset=40
  i32.const 1
  i32.add
  local.tee $2
  local.get $1
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  i32.add
  local.set $3
  local.get $0
  local.get $2
  local.get $1
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.tee $2
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 0
   local.set $2
   local.get $3
   local.get $1
   i32.load offset=116
   i32.sub
  else
   local.get $3
  end
  i64.extend_i32_s
  local.get $2
  local.get $1
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.store offset=56
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#next (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i64)
  (local $3 i32)
  loop $while-continue|0
   local.get $0
   i32.load offset=40
   local.get $0
   i32.load offset=28
   i32.load offset=52
   i32.lt_s
   if
    local.get $0
    local.get $0
    i32.load offset=40
    local.get $0
    i32.load offset=28
    i32.load offset=160
    i32.load
    i32.load offset=4
    i32.add
    i32.load8_u
    i64.extend_i32_u
    i64.store offset=104
    local.get $0
    i32.load8_u offset=112
    if
     local.get $0
     local.get $0
     i64.load offset=80
     local.get $0
     i64.load offset=104
     i64.add
     i64.store offset=80
     local.get $0
     i32.load offset=28
     local.tee $1
     i32.load offset=104
     local.get $0
     i64.load offset=48
     local.tee $2
     local.get $1
     i64.load offset=128
     i64.or
     i64.clz
     i32.wrap_i64
     i32.sub
     local.set $3
     local.get $0
     local.get $0
     i64.load offset=88
     local.get $0
     i64.load offset=104
     local.get $2
     local.get $3
     local.get $1
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shr_u
     i32.wrap_i64
     i64.extend_i32_s
     local.get $3
     local.get $1
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shl
     i64.const 1
     local.get $1
     i32.load offset=112
     local.get $1
     i32.load offset=104
     local.get $2
     local.get $1
     i64.load offset=128
     i64.or
     i64.clz
     i32.wrap_i64
     i32.sub
     i32.add
     i64.extend_i32_s
     i64.shl
     i64.add
     i64.const 1
     i64.sub
     i64.mul
     i64.add
     i64.store offset=88
     local.get $0
     i32.const 0
     i32.store8 offset=112
    end
    block $__inlined_func$assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#reachedIterationLevel (result i32)
     i32.const 0
     local.get $0
     i64.load offset=104
     i64.eqz
     br_if $__inlined_func$assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#reachedIterationLevel
     drop
     f64.const 100
     local.get $0
     i64.load offset=80
     f64.convert_i64_u
     f64.mul
     local.get $0
     i64.load offset=96
     f64.convert_i64_u
     f64.div
     local.get $0
     f64.load offset=8
     f64.ge
    end
    if
     local.get $0
     i32.load offset=28
     local.tee $1
     i32.load offset=104
     local.get $0
     i64.load offset=48
     local.tee $2
     local.get $1
     i64.load offset=128
     i64.or
     i64.clz
     i32.wrap_i64
     i32.sub
     local.set $3
     local.get $0
     i32.load offset=116
     local.get $2
     local.get $3
     local.get $1
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shr_u
     i32.wrap_i64
     i64.extend_i32_s
     local.get $3
     local.get $1
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shl
     i64.const 1
     local.get $1
     i32.load offset=112
     local.get $1
     i32.load offset=104
     local.get $2
     local.get $1
     i64.load offset=128
     i64.or
     i64.clz
     i32.wrap_i64
     i32.sub
     i32.add
     i64.extend_i32_s
     i64.shl
     i64.add
     i64.const 1
     i64.sub
     local.tee $2
     i64.store
     local.get $0
     i32.load offset=116
     local.get $0
     i64.load offset=64
     i64.store offset=8
     local.get $0
     i32.load offset=116
     local.get $0
     i64.load offset=104
     i64.store offset=16
     local.get $0
     i32.load offset=116
     local.get $0
     i64.load offset=80
     local.get $0
     i64.load offset=72
     i64.sub
     i64.store offset=24
     local.get $0
     i32.load offset=116
     local.get $0
     i64.load offset=80
     i64.store offset=32
     local.get $0
     i32.load offset=116
     local.get $0
     i64.load offset=88
     i64.store offset=40
     local.get $0
     i32.load offset=116
     f64.const 100
     local.get $0
     i64.load offset=80
     f64.convert_i64_u
     f64.mul
     local.get $0
     i64.load offset=96
     f64.convert_i64_u
     f64.div
     f64.store offset=48
     local.get $0
     i32.load offset=116
     local.get $0
     f64.load offset=8
     f64.store offset=56
     local.get $0
     local.get $2
     i64.store offset=64
     local.get $0
     local.get $0
     i64.load offset=80
     i64.store offset=72
     local.get $0
     call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#incrementIterationLevel
     local.get $0
     i32.load offset=28
     i64.load offset=168
     local.get $0
     i64.load offset=32
     i64.ne
     if
      i32.const 12704
      i32.const 13488
      i32.const 187
      i32.const 11
      call $~lib/builtins/abort
      unreachable
     end
     local.get $0
     i32.load offset=116
     local.tee $0
     i32.const 16700
     i32.gt_u
     if
      local.get $0
      i32.const 16
      i32.sub
      local.tee $1
      i32.load offset=4
      local.set $3
      local.get $1
      local.get $3
      i32.const 1
      i32.add
      i32.store offset=4
      local.get $1
      i32.load
      drop
     end
     local.get $0
     return
    end
    local.get $0
    call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#incrementSubBucket
    br $while-continue|0
   end
  end
  i32.const 12800
  i32.const 13488
  i32.const 193
  i32.const 5
  call $~lib/builtins/abort
  unreachable
 )
 (func $assembly/formatters/FloatFormatter#format (param $0 i32) (param $1 f64) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i64)
  (local $10 i32)
  (local $11 i32)
  local.get $1
  f64.floor
  i64.trunc_f64_u
  local.set $9
  local.get $1
  f64.const 10
  local.get $0
  i32.load offset=4
  f64.convert_i32_s
  call $~lib/math/NativeMath.pow
  local.tee $1
  f64.mul
  local.get $9
  f64.convert_i64_u
  local.get $1
  f64.mul
  f64.sub
  local.tee $1
  f64.const 0.5
  f64.add
  f64.floor
  local.get $1
  f64.copysign
  i64.trunc_f64_u
  call $~lib/util/number/utoa64
  local.tee $4
  i32.const 16
  i32.sub
  i32.load offset=12
  i32.const 1
  i32.shr_u
  local.get $0
  i32.load offset=4
  i32.lt_s
  if
   local.get $4
   local.tee $2
   i32.const 1552
   local.get $0
   i32.load offset=4
   local.get $2
   i32.const 16
   i32.sub
   i32.load offset=12
   i32.const 1
   i32.shr_u
   i32.sub
   call $~lib/string/String#repeat
   local.tee $3
   call $~lib/string/String.__concat
   local.tee $5
   local.tee $4
   local.get $2
   i32.ne
   if
    local.get $4
    i32.const 16700
    i32.gt_u
    if
     local.get $4
     i32.const 16
     i32.sub
     local.tee $6
     i32.load offset=4
     local.set $7
     local.get $6
     local.get $7
     i32.const 1
     i32.add
     i32.store offset=4
     local.get $6
     i32.load
     drop
    end
    local.get $2
    i32.const 16700
    i32.gt_u
    if
     local.get $2
     i32.const 16
     i32.sub
     call $~lib/rt/pure/decrement
    end
   end
   local.get $3
   i32.const 16700
   i32.gt_u
   if
    local.get $3
    i32.const 16
    i32.sub
    call $~lib/rt/pure/decrement
   end
   local.get $5
   i32.const 16700
   i32.gt_u
   if
    local.get $5
    i32.const 16
    i32.sub
    call $~lib/rt/pure/decrement
   end
  end
  local.get $9
  call $~lib/util/number/utoa64
  local.tee $6
  i32.const 13568
  call $~lib/string/String.__concat
  local.tee $7
  local.get $4
  call $~lib/string/String.__concat
  local.tee $5
  local.set $2
  local.get $5
  i32.const 16700
  i32.gt_u
  if
   local.get $2
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $8
   local.get $3
   local.get $8
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $2
  i32.const 16
  i32.sub
  i32.load offset=12
  i32.const 1
  i32.shr_u
  local.get $0
  i32.load
  i32.lt_s
  if
   i32.const 1184
   local.get $0
   i32.load
   local.get $2
   local.tee $3
   i32.const 16
   i32.sub
   i32.load offset=12
   i32.const 1
   i32.shr_u
   i32.sub
   call $~lib/string/String#repeat
   local.tee $0
   local.get $2
   call $~lib/string/String.__concat
   local.tee $8
   local.tee $2
   local.get $3
   i32.ne
   if
    local.get $2
    i32.const 16700
    i32.gt_u
    if
     local.get $2
     i32.const 16
     i32.sub
     local.tee $10
     i32.load offset=4
     local.set $11
     local.get $10
     local.get $11
     i32.const 1
     i32.add
     i32.store offset=4
     local.get $10
     i32.load
     drop
    end
    local.get $3
    i32.const 16700
    i32.gt_u
    if
     local.get $3
     i32.const 16
     i32.sub
     call $~lib/rt/pure/decrement
    end
   end
   local.get $0
   i32.const 16700
   i32.gt_u
   if
    local.get $0
    i32.const 16
    i32.sub
    call $~lib/rt/pure/decrement
   end
   local.get $8
   i32.const 16700
   i32.gt_u
   if
    local.get $8
    i32.const 16
    i32.sub
    call $~lib/rt/pure/decrement
   end
  end
  local.get $4
  i32.const 16700
  i32.gt_u
  if
   local.get $4
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $6
  i32.const 16700
  i32.gt_u
  if
   local.get $6
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $7
  i32.const 16700
  i32.gt_u
  if
   local.get $7
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $5
  i32.const 16700
  i32.gt_u
  if
   local.get $5
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $2
 )
 (func $assembly/formatters/IntegerFormatter#format (param $0 i32) (param $1 i64) (result i32)
  (local $2 i32)
  local.get $0
  i32.load
  local.get $1
  call $~lib/util/number/utoa64
  local.set $0
  i32.const 2
  global.set $~argumentsLength
  local.get $0
  call $start:assembly/formatters~anonymous|0
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#outputPercentileDistribution (param $0 i32) (param $1 i32) (param $2 f64) (result i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  (local $15 i32)
  (local $16 i32)
  (local $17 i32)
  (local $18 i32)
  (local $19 i32)
  (local $20 i32)
  (local $21 i32)
  (local $22 i32)
  (local $23 i32)
  (local $24 i32)
  (local $25 i32)
  (local $26 i32)
  (local $27 i32)
  (local $28 i32)
  (local $29 i32)
  (local $30 i32)
  (local $31 i32)
  (local $32 i32)
  (local $33 f64)
  (local $34 i32)
  i32.const 1312
  i32.const 13344
  call $~lib/string/String.__concat
  local.tee $24
  local.tee $3
  i32.const 1312
  i32.ne
  if
   local.get $3
   i32.const 16700
   i32.gt_u
   if
    local.get $3
    i32.const 16
    i32.sub
    local.tee $15
    i32.load offset=4
    local.set $5
    local.get $15
    local.get $5
    i32.const 1
    i32.add
    i32.store offset=4
    local.get $15
    i32.load
    drop
   end
  end
  local.get $0
  i32.load offset=96
  local.tee $15
  i32.const 16700
  i32.gt_u
  if
   local.get $15
   i32.const 16
   i32.sub
   local.tee $5
   i32.load offset=4
   local.set $10
   local.get $5
   local.get $10
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $5
   i32.load
   drop
  end
  local.get $15
  local.get $15
  i32.load offset=28
  local.get $1
  call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#doReset
  i32.const 12
  local.get $0
  i32.load8_u offset=32
  call $assembly/formatters/FloatFormatter#constructor
  local.set $19
  i32.const 2
  i32.const 12
  call $assembly/formatters/FloatFormatter#constructor
  local.set $20
  i32.const 10
  call $assembly/formatters/IntegerFormatter#constructor
  local.set $21
  i32.const 14
  i32.const 2
  call $assembly/formatters/FloatFormatter#constructor
  local.set $23
  loop $while-continue|0
   local.get $15
   call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#hasNext
   if
    local.get $15
    call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#next
    local.tee $5
    f64.load offset=56
    f64.const 100
    f64.lt
    if
     local.get $3
     local.tee $1
     local.get $19
     local.get $5
     i64.load
     f64.convert_i64_u
     local.get $2
     f64.div
     call $assembly/formatters/FloatFormatter#format
     local.tee $10
     i32.const 1184
     call $~lib/string/String.__concat
     local.tee $11
     local.get $20
     local.get $5
     f64.load offset=56
     f64.const 100
     f64.div
     call $assembly/formatters/FloatFormatter#format
     local.tee $12
     call $~lib/string/String.__concat
     local.tee $6
     i32.const 1184
     call $~lib/string/String.__concat
     local.tee $7
     local.get $21
     local.get $5
     i64.load offset=32
     call $assembly/formatters/IntegerFormatter#format
     local.tee $8
     call $~lib/string/String.__concat
     local.tee $4
     i32.const 1184
     call $~lib/string/String.__concat
     local.tee $13
     local.get $23
     f64.const 1
     f64.const 1
     local.get $5
     f64.load offset=56
     f64.const 100
     f64.div
     f64.sub
     f64.div
     call $assembly/formatters/FloatFormatter#format
     local.tee $14
     call $~lib/string/String.__concat
     local.tee $9
     i32.const 13600
     call $~lib/string/String.__concat
     local.tee $16
     call $~lib/string/String.__concat
     local.tee $17
     local.tee $3
     local.get $1
     i32.ne
     if
      local.get $3
      i32.const 16700
      i32.gt_u
      if
       local.get $3
       i32.const 16
       i32.sub
       local.tee $18
       i32.load offset=4
       local.set $22
       local.get $18
       local.get $22
       i32.const 1
       i32.add
       i32.store offset=4
       local.get $18
       i32.load
       drop
      end
      local.get $1
      i32.const 16700
      i32.gt_u
      if
       local.get $1
       i32.const 16
       i32.sub
       call $~lib/rt/pure/decrement
      end
     end
     local.get $10
     i32.const 16700
     i32.gt_u
     if
      local.get $10
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $11
     i32.const 16700
     i32.gt_u
     if
      local.get $11
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $12
     i32.const 16700
     i32.gt_u
     if
      local.get $12
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $6
     i32.const 16700
     i32.gt_u
     if
      local.get $6
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $7
     i32.const 16700
     i32.gt_u
     if
      local.get $7
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $8
     i32.const 16700
     i32.gt_u
     if
      local.get $8
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $4
     i32.const 16700
     i32.gt_u
     if
      local.get $4
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $13
     i32.const 16700
     i32.gt_u
     if
      local.get $13
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $14
     i32.const 16700
     i32.gt_u
     if
      local.get $14
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $9
     i32.const 16700
     i32.gt_u
     if
      local.get $9
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $16
     i32.const 16700
     i32.gt_u
     if
      local.get $16
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $17
     i32.const 16700
     i32.gt_u
     if
      local.get $17
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
    else
     local.get $3
     local.tee $1
     local.get $19
     local.get $5
     i64.load
     f64.convert_i64_u
     local.get $2
     f64.div
     call $assembly/formatters/FloatFormatter#format
     local.tee $10
     i32.const 1184
     call $~lib/string/String.__concat
     local.tee $11
     local.get $20
     local.get $5
     f64.load offset=56
     f64.const 100
     f64.div
     call $assembly/formatters/FloatFormatter#format
     local.tee $12
     call $~lib/string/String.__concat
     local.tee $6
     i32.const 1184
     call $~lib/string/String.__concat
     local.tee $7
     local.get $21
     local.get $5
     i64.load offset=32
     call $assembly/formatters/IntegerFormatter#format
     local.tee $8
     call $~lib/string/String.__concat
     local.tee $4
     i32.const 13600
     call $~lib/string/String.__concat
     local.tee $13
     call $~lib/string/String.__concat
     local.tee $14
     local.tee $3
     local.get $1
     i32.ne
     if
      local.get $3
      i32.const 16700
      i32.gt_u
      if
       local.get $3
       i32.const 16
       i32.sub
       local.tee $9
       i32.load offset=4
       local.set $16
       local.get $9
       local.get $16
       i32.const 1
       i32.add
       i32.store offset=4
       local.get $9
       i32.load
       drop
      end
      local.get $1
      i32.const 16700
      i32.gt_u
      if
       local.get $1
       i32.const 16
       i32.sub
       call $~lib/rt/pure/decrement
      end
     end
     local.get $10
     i32.const 16700
     i32.gt_u
     if
      local.get $10
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $11
     i32.const 16700
     i32.gt_u
     if
      local.get $11
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $12
     i32.const 16700
     i32.gt_u
     if
      local.get $12
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $6
     i32.const 16700
     i32.gt_u
     if
      local.get $6
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $7
     i32.const 16700
     i32.gt_u
     if
      local.get $7
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $8
     i32.const 16700
     i32.gt_u
     if
      local.get $8
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $4
     i32.const 16700
     i32.gt_u
     if
      local.get $4
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $13
     i32.const 16700
     i32.gt_u
     if
      local.get $13
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $14
     i32.const 16700
     i32.gt_u
     if
      local.get $14
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
    end
    local.get $5
    i32.const 16700
    i32.gt_u
    if
     local.get $5
     i32.const 16
     i32.sub
     call $~lib/rt/pure/decrement
    end
    br $while-continue|0
   end
  end
  i32.const 12
  local.get $0
  i32.load8_u offset=32
  call $assembly/formatters/FloatFormatter#constructor
  local.tee $16
  local.get $0
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getMean
  local.tee $33
  local.get $2
  f64.div
  call $assembly/formatters/FloatFormatter#format
  local.set $11
  local.get $16
  local.get $0
  local.get $33
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#computeStdDeviation
  local.get $2
  f64.div
  call $assembly/formatters/FloatFormatter#format
  local.set $12
  local.get $16
  local.get $0
  i64.load offset=144
  f64.convert_i64_u
  local.get $2
  f64.div
  call $assembly/formatters/FloatFormatter#format
  i32.const 12
  call $assembly/formatters/IntegerFormatter#constructor
  local.tee $17
  local.get $0
  i64.load offset=168
  call $assembly/formatters/IntegerFormatter#format
  local.set $5
  local.get $17
  local.get $0
  i64.load offset=40
  call $assembly/formatters/IntegerFormatter#format
  local.set $10
  local.get $17
  local.get $0
  i32.load offset=48
  i64.extend_i32_s
  call $assembly/formatters/IntegerFormatter#format
  local.set $0
  local.get $3
  local.set $4
  local.get $11
  local.tee $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   local.tee $6
   i32.load offset=4
   local.set $7
   local.get $6
   local.get $7
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $6
   i32.load
   drop
  end
  i32.const 13632
  local.get $3
  local.tee $13
  call $~lib/string/String.__concat
  local.tee $18
  i32.const 13680
  call $~lib/string/String.__concat
  local.tee $25
  local.get $12
  local.tee $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   local.tee $6
   i32.load offset=4
   local.set $8
   local.get $6
   local.get $8
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $6
   i32.load
   drop
  end
  local.get $3
  local.tee $14
  call $~lib/string/String.__concat
  local.tee $22
  i32.const 13744
  call $~lib/string/String.__concat
  local.tee $26
  local.set $7
  local.tee $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   local.tee $6
   i32.load offset=4
   local.set $8
   local.get $6
   local.get $8
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $6
   i32.load
   drop
  end
  local.get $7
  local.get $3
  call $~lib/string/String.__concat
  local.tee $27
  i32.const 13792
  call $~lib/string/String.__concat
  local.tee $28
  local.get $5
  local.tee $6
  i32.const 16700
  i32.gt_u
  if
   local.get $6
   i32.const 16
   i32.sub
   local.tee $7
   i32.load offset=4
   local.set $9
   local.get $7
   local.get $9
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $7
   i32.load
   drop
  end
  local.get $6
  call $~lib/string/String.__concat
  local.tee $29
  i32.const 13856
  call $~lib/string/String.__concat
  local.tee $30
  local.get $10
  local.tee $7
  i32.const 16700
  i32.gt_u
  if
   local.get $7
   i32.const 16
   i32.sub
   local.tee $8
   i32.load offset=4
   local.set $1
   local.get $8
   local.get $1
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $8
   i32.load
   drop
  end
  local.get $7
  call $~lib/string/String.__concat
  local.tee $1
  i32.const 13904
  call $~lib/string/String.__concat
  local.tee $31
  local.set $5
  local.get $0
  local.tee $8
  i32.const 16700
  i32.gt_u
  if
   local.get $8
   i32.const 16
   i32.sub
   local.tee $9
   i32.load offset=4
   local.set $0
   local.get $9
   local.get $0
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $9
   i32.load
   drop
  end
  local.get $4
  local.tee $9
  local.get $9
  local.get $5
  local.get $8
  call $~lib/string/String.__concat
  local.tee $4
  i32.const 13968
  call $~lib/string/String.__concat
  local.tee $5
  call $~lib/string/String.__concat
  local.tee $0
  local.tee $10
  i32.ne
  if
   local.get $10
   i32.const 16700
   i32.gt_u
   if
    local.get $10
    i32.const 16
    i32.sub
    local.tee $32
    i32.load offset=4
    local.set $34
    local.get $32
    local.get $34
    i32.const 1
    i32.add
    i32.store offset=4
    local.get $32
    i32.load
    drop
   end
   local.get $9
   i32.const 16700
   i32.gt_u
   if
    local.get $9
    i32.const 16
    i32.sub
    call $~lib/rt/pure/decrement
   end
  end
  local.get $24
  i32.const 16700
  i32.gt_u
  if
   local.get $24
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $15
  i32.const 16700
  i32.gt_u
  if
   local.get $15
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $19
  i32.const 16700
  i32.gt_u
  if
   local.get $19
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $20
  i32.const 16700
  i32.gt_u
  if
   local.get $20
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $21
  i32.const 16700
  i32.gt_u
  if
   local.get $21
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $23
  i32.const 16700
  i32.gt_u
  if
   local.get $23
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $16
  i32.const 16700
  i32.gt_u
  if
   local.get $16
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $11
  i32.const 16700
  i32.gt_u
  if
   local.get $11
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $12
  i32.const 16700
  i32.gt_u
  if
   local.get $12
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $17
  i32.const 16700
  i32.gt_u
  if
   local.get $17
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $6
  i32.const 16700
  i32.gt_u
  if
   local.get $6
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $7
  i32.const 16700
  i32.gt_u
  if
   local.get $7
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $8
  i32.const 16700
  i32.gt_u
  if
   local.get $8
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $13
  i32.const 16700
  i32.gt_u
  if
   local.get $13
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $18
  i32.const 16700
  i32.gt_u
  if
   local.get $18
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $25
  i32.const 16700
  i32.gt_u
  if
   local.get $25
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $14
  i32.const 16700
  i32.gt_u
  if
   local.get $14
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $22
  i32.const 16700
  i32.gt_u
  if
   local.get $22
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $26
  i32.const 16700
  i32.gt_u
  if
   local.get $26
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $27
  i32.const 16700
  i32.gt_u
  if
   local.get $27
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $28
  i32.const 16700
  i32.gt_u
  if
   local.get $28
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $6
  i32.const 16700
  i32.gt_u
  if
   local.get $6
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $29
  i32.const 16700
  i32.gt_u
  if
   local.get $29
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $30
  i32.const 16700
  i32.gt_u
  if
   local.get $30
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $7
  i32.const 16700
  i32.gt_u
  if
   local.get $7
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $31
  i32.const 16700
  i32.gt_u
  if
   local.get $31
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $8
  i32.const 16700
  i32.gt_u
  if
   local.get $8
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $4
  i32.const 16700
  i32.gt_u
  if
   local.get $4
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $5
  i32.const 16700
  i32.gt_u
  if
   local.get $5
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $10
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#outputPercentileDistribution (param $0 i32) (param $1 f64) (param $2 f64) (result i32)
  local.get $0
  i32.load
  local.get $1
  i32.trunc_f64_s
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#outputPercentileDistribution
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#addWhileCorrectingForCoordinatedOmission (param $0 i32) (param $1 i32) (param $2 i64)
  (local $3 i32)
  (local $4 i32)
  (local $5 i64)
  (local $6 i64)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $4
   local.get $3
   local.get $4
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $4
   local.get $3
   local.get $4
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $1
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#constructor
  local.set $3
  loop $while-continue|0
   local.get $3
   call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#hasNext
   if
    local.get $0
    local.get $3
    call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#next
    local.tee $4
    i64.load offset=16
    local.tee $6
    local.get $4
    i64.load
    local.tee $5
    call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordCountAtValue
    i32.const 1
    local.get $5
    local.get $2
    i64.le_u
    local.get $2
    i64.const 0
    i64.le_u
    select
    i32.eqz
    if
     local.get $5
     local.get $2
     i64.sub
     local.set $5
     loop $for-loop|0
      local.get $5
      local.get $2
      i64.ge_u
      if
       local.get $0
       local.get $6
       local.get $5
       call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordCountAtValue
       local.get $5
       local.get $2
       i64.sub
       local.set $5
       br $for-loop|0
      end
     end
    end
    local.get $4
    i32.const 16700
    i32.gt_u
    if
     local.get $4
     i32.const 16
     i32.sub
     call $~lib/rt/pure/decrement
    end
    br $while-continue|0
   end
  end
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#copyCorrectedForCoordinatedOmission (param $0 i32) (param $1 f64) (result i32)
  (local $2 i32)
  (local $3 i64)
  local.get $1
  i64.trunc_f64_u
  local.set $3
  local.get $0
  i32.load
  local.tee $2
  i64.load offset=24
  local.get $2
  i64.load offset=16
  local.get $2
  i32.load8_u offset=32
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#constructor
  local.tee $0
  local.get $2
  local.get $3
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#addWhileCorrectingForCoordinatedOmission
  i32.const 0
  f64.const 0
  f64.const 0
  f64.const 0
  i32.const 0
  local.get $0
  call $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#constructor
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#add<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i32)
  (local $4 i64)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $5
   local.get $3
   local.get $5
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $0
  i32.load offset=116
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $5
  local.get $0
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  i32.add
  local.set $3
  local.get $5
  local.get $0
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.tee $5
  i32.const 0
  i32.lt_s
  if
   i32.const 0
   local.set $5
   local.get $3
   local.get $0
   i32.load offset=116
   i32.sub
   local.set $3
  end
  local.get $0
  i32.load offset=104
  local.get $3
  i64.extend_i32_s
  local.get $5
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  local.tee $2
  local.get $0
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  local.set $3
  local.get $2
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shr_u
  i32.wrap_i64
  i64.extend_i32_s
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.const 1
  local.get $0
  i32.load offset=112
  local.get $0
  i32.load offset=104
  local.get $2
  local.get $0
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.add
  i64.const 1
  i64.sub
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 14000
    i32.const 9952
    i32.const 639
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   loop $for-loop|0
    local.get $6
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $6
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     i32.add
     i32.load8_u
     i64.extend_i32_u
     local.tee $2
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $6
      local.get $2
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#addToCountAtIndex
      local.get $2
      local.get $4
      i64.add
      local.set $4
     end
     local.get $6
     i32.const 1
     i32.add
     local.set $6
     br $for-loop|0
    end
   end
   local.get $0
   local.get $4
   local.get $0
   i64.load offset=168
   i64.add
   i64.store offset=168
   local.get $0
   local.get $0
   i64.load offset=136
   local.get $0
   i64.load offset=144
   local.tee $2
   local.get $1
   i64.load offset=144
   local.tee $4
   local.get $2
   local.get $4
   i64.gt_u
   select
   i64.add
   i64.store offset=144
   local.get $0
   i64.load offset=152
   local.tee $2
   local.get $1
   i64.load offset=152
   local.tee $4
   local.get $2
   local.get $4
   i64.lt_u
   select
   local.tee $2
   local.get $0
   i64.load offset=136
   i64.gt_u
   if
    local.get $0
    local.get $2
    local.get $0
    i64.load offset=136
    i64.const -1
    i64.xor
    i64.and
    i64.store offset=152
   end
  else
   local.get $1
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex
   local.set $5
   local.get $1
   i32.load offset=116
   local.get $5
   local.get $1
   i32.load offset=116
   i32.const 1
   i32.sub
   i32.and
   i32.add
   local.set $3
   local.get $5
   local.get $1
   i32.load offset=160
   i32.load
   i32.load offset=4
   i32.add
   i32.load8_u
   i64.extend_i32_u
   local.set $2
   local.get $5
   local.get $1
   i32.load offset=108
   i32.shr_s
   i32.const 1
   i32.sub
   local.tee $6
   i32.const 0
   i32.lt_s
   if
    i32.const 0
    local.set $6
    local.get $3
    local.get $1
    i32.load offset=116
    i32.sub
    local.set $3
   end
   local.get $0
   local.get $2
   local.get $3
   i64.extend_i32_s
   local.get $6
   local.get $1
   i32.load offset=112
   i32.add
   i64.extend_i32_s
   i64.shl
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordCountAtValue
   loop $for-loop|1
    local.get $7
    local.get $5
    i32.lt_s
    if
     local.get $7
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     i32.add
     i32.load8_u
     i64.extend_i32_u
     local.tee $4
     local.set $2
     local.get $4
     i64.const 0
     i64.gt_u
     if
      local.get $1
      i32.load offset=116
      local.get $7
      local.get $1
      i32.load offset=116
      i32.const 1
      i32.sub
      i32.and
      i32.add
      local.set $3
      local.get $7
      local.get $1
      i32.load offset=108
      i32.shr_s
      i32.const 1
      i32.sub
      local.tee $6
      i32.const 0
      i32.lt_s
      if
       i32.const 0
       local.set $6
       local.get $3
       local.get $1
       i32.load offset=116
       i32.sub
       local.set $3
      end
      local.get $0
      local.get $2
      local.get $3
      i64.extend_i32_s
      local.get $6
      local.get $1
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shl
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordCountAtValue
     end
     local.get $7
     i32.const 1
     i32.add
     local.set $7
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=64
  local.tee $2
  local.get $1
  i64.load offset=64
  local.tee $4
  local.get $2
  local.get $4
  i64.lt_u
  select
  i64.store offset=64
  local.get $0
  local.get $0
  i64.load offset=72
  local.tee $2
  local.get $1
  i64.load offset=72
  local.tee $4
  local.get $2
  local.get $4
  i64.gt_u
  select
  i64.store offset=72
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#addHistogram8 (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#add<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#add<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i32)
  (local $4 i64)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $5
   local.get $3
   local.get $5
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $0
  i32.load offset=116
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $5
  local.get $0
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  i32.add
  local.set $3
  local.get $5
  local.get $0
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.tee $5
  i32.const 0
  i32.lt_s
  if
   i32.const 0
   local.set $5
   local.get $3
   local.get $0
   i32.load offset=116
   i32.sub
   local.set $3
  end
  local.get $0
  i32.load offset=104
  local.get $3
  i64.extend_i32_s
  local.get $5
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  local.tee $2
  local.get $0
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  local.set $3
  local.get $2
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shr_u
  i32.wrap_i64
  i64.extend_i32_s
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.const 1
  local.get $0
  i32.load offset=112
  local.get $0
  i32.load offset=104
  local.get $2
  local.get $0
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.add
  i64.const 1
  i64.sub
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 14000
    i32.const 9952
    i32.const 639
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   loop $for-loop|0
    local.get $6
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $6
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u
     i64.extend_i32_u
     local.tee $2
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $6
      local.get $2
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#addToCountAtIndex
      local.get $2
      local.get $4
      i64.add
      local.set $4
     end
     local.get $6
     i32.const 1
     i32.add
     local.set $6
     br $for-loop|0
    end
   end
   local.get $0
   local.get $4
   local.get $0
   i64.load offset=168
   i64.add
   i64.store offset=168
   local.get $0
   local.get $0
   i64.load offset=136
   local.get $0
   i64.load offset=144
   local.tee $2
   local.get $1
   i64.load offset=144
   local.tee $4
   local.get $2
   local.get $4
   i64.gt_u
   select
   i64.add
   i64.store offset=144
   local.get $0
   i64.load offset=152
   local.tee $2
   local.get $1
   i64.load offset=152
   local.tee $4
   local.get $2
   local.get $4
   i64.lt_u
   select
   local.tee $2
   local.get $0
   i64.load offset=136
   i64.gt_u
   if
    local.get $0
    local.get $2
    local.get $0
    i64.load offset=136
    i64.const -1
    i64.xor
    i64.and
    i64.store offset=152
   end
  else
   local.get $1
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex
   local.set $5
   local.get $1
   i32.load offset=116
   local.get $5
   local.get $1
   i32.load offset=116
   i32.const 1
   i32.sub
   i32.and
   i32.add
   local.set $3
   local.get $1
   i32.load offset=160
   i32.load
   i32.load offset=4
   local.get $5
   i32.const 1
   i32.shl
   i32.add
   i32.load16_u
   i64.extend_i32_u
   local.set $2
   local.get $5
   local.get $1
   i32.load offset=108
   i32.shr_s
   i32.const 1
   i32.sub
   local.tee $6
   i32.const 0
   i32.lt_s
   if
    i32.const 0
    local.set $6
    local.get $3
    local.get $1
    i32.load offset=116
    i32.sub
    local.set $3
   end
   local.get $0
   local.get $2
   local.get $3
   i64.extend_i32_s
   local.get $6
   local.get $1
   i32.load offset=112
   i32.add
   i64.extend_i32_s
   i64.shl
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordCountAtValue
   loop $for-loop|1
    local.get $7
    local.get $5
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $7
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u
     i64.extend_i32_u
     local.tee $4
     local.set $2
     local.get $4
     i64.const 0
     i64.gt_u
     if
      local.get $1
      i32.load offset=116
      local.get $7
      local.get $1
      i32.load offset=116
      i32.const 1
      i32.sub
      i32.and
      i32.add
      local.set $3
      local.get $7
      local.get $1
      i32.load offset=108
      i32.shr_s
      i32.const 1
      i32.sub
      local.tee $6
      i32.const 0
      i32.lt_s
      if
       i32.const 0
       local.set $6
       local.get $3
       local.get $1
       i32.load offset=116
       i32.sub
       local.set $3
      end
      local.get $0
      local.get $2
      local.get $3
      i64.extend_i32_s
      local.get $6
      local.get $1
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shl
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordCountAtValue
     end
     local.get $7
     i32.const 1
     i32.add
     local.set $7
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=64
  local.tee $2
  local.get $1
  i64.load offset=64
  local.tee $4
  local.get $2
  local.get $4
  i64.lt_u
  select
  i64.store offset=64
  local.get $0
  local.get $0
  i64.load offset=72
  local.tee $2
  local.get $1
  i64.load offset=72
  local.tee $4
  local.get $2
  local.get $4
  i64.gt_u
  select
  i64.store offset=72
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#addHistogram16 (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#add<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#add<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i32)
  (local $4 i64)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $5
   local.get $3
   local.get $5
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $0
  i32.load offset=116
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $5
  local.get $0
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  i32.add
  local.set $3
  local.get $5
  local.get $0
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.tee $5
  i32.const 0
  i32.lt_s
  if
   i32.const 0
   local.set $5
   local.get $3
   local.get $0
   i32.load offset=116
   i32.sub
   local.set $3
  end
  local.get $0
  i32.load offset=104
  local.get $3
  i64.extend_i32_s
  local.get $5
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  local.tee $2
  local.get $0
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  local.set $3
  local.get $2
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shr_u
  i32.wrap_i64
  i64.extend_i32_s
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.const 1
  local.get $0
  i32.load offset=112
  local.get $0
  i32.load offset=104
  local.get $2
  local.get $0
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.add
  i64.const 1
  i64.sub
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 14000
    i32.const 9952
    i32.const 639
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   loop $for-loop|0
    local.get $6
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $6
     i32.const 2
     i32.shl
     i32.add
     i32.load
     i64.extend_i32_u
     local.tee $2
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $6
      local.get $2
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#addToCountAtIndex
      local.get $2
      local.get $4
      i64.add
      local.set $4
     end
     local.get $6
     i32.const 1
     i32.add
     local.set $6
     br $for-loop|0
    end
   end
   local.get $0
   local.get $4
   local.get $0
   i64.load offset=168
   i64.add
   i64.store offset=168
   local.get $0
   local.get $0
   i64.load offset=136
   local.get $0
   i64.load offset=144
   local.tee $2
   local.get $1
   i64.load offset=144
   local.tee $4
   local.get $2
   local.get $4
   i64.gt_u
   select
   i64.add
   i64.store offset=144
   local.get $0
   i64.load offset=152
   local.tee $2
   local.get $1
   i64.load offset=152
   local.tee $4
   local.get $2
   local.get $4
   i64.lt_u
   select
   local.tee $2
   local.get $0
   i64.load offset=136
   i64.gt_u
   if
    local.get $0
    local.get $2
    local.get $0
    i64.load offset=136
    i64.const -1
    i64.xor
    i64.and
    i64.store offset=152
   end
  else
   local.get $1
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex
   local.set $5
   local.get $1
   i32.load offset=116
   local.get $5
   local.get $1
   i32.load offset=116
   i32.const 1
   i32.sub
   i32.and
   i32.add
   local.set $3
   local.get $1
   i32.load offset=160
   i32.load
   i32.load offset=4
   local.get $5
   i32.const 2
   i32.shl
   i32.add
   i32.load
   i64.extend_i32_u
   local.set $2
   local.get $5
   local.get $1
   i32.load offset=108
   i32.shr_s
   i32.const 1
   i32.sub
   local.tee $6
   i32.const 0
   i32.lt_s
   if
    i32.const 0
    local.set $6
    local.get $3
    local.get $1
    i32.load offset=116
    i32.sub
    local.set $3
   end
   local.get $0
   local.get $2
   local.get $3
   i64.extend_i32_s
   local.get $6
   local.get $1
   i32.load offset=112
   i32.add
   i64.extend_i32_s
   i64.shl
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordCountAtValue
   loop $for-loop|1
    local.get $7
    local.get $5
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $7
     i32.const 2
     i32.shl
     i32.add
     i32.load
     i64.extend_i32_u
     local.tee $4
     local.set $2
     local.get $4
     i64.const 0
     i64.gt_u
     if
      local.get $1
      i32.load offset=116
      local.get $7
      local.get $1
      i32.load offset=116
      i32.const 1
      i32.sub
      i32.and
      i32.add
      local.set $3
      local.get $7
      local.get $1
      i32.load offset=108
      i32.shr_s
      i32.const 1
      i32.sub
      local.tee $6
      i32.const 0
      i32.lt_s
      if
       i32.const 0
       local.set $6
       local.get $3
       local.get $1
       i32.load offset=116
       i32.sub
       local.set $3
      end
      local.get $0
      local.get $2
      local.get $3
      i64.extend_i32_s
      local.get $6
      local.get $1
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shl
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordCountAtValue
     end
     local.get $7
     i32.const 1
     i32.add
     local.set $7
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=64
  local.tee $2
  local.get $1
  i64.load offset=64
  local.tee $4
  local.get $2
  local.get $4
  i64.lt_u
  select
  i64.store offset=64
  local.get $0
  local.get $0
  i64.load offset=72
  local.tee $2
  local.get $1
  i64.load offset=72
  local.tee $4
  local.get $2
  local.get $4
  i64.gt_u
  select
  i64.store offset=72
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#addHistogram32 (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#add<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#add<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i32)
  (local $4 i64)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $5
   local.get $3
   local.get $5
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $0
  i32.load offset=116
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $5
  local.get $0
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  i32.add
  local.set $3
  local.get $5
  local.get $0
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.tee $5
  i32.const 0
  i32.lt_s
  if
   i32.const 0
   local.set $5
   local.get $3
   local.get $0
   i32.load offset=116
   i32.sub
   local.set $3
  end
  local.get $0
  i32.load offset=104
  local.get $3
  i64.extend_i32_s
  local.get $5
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  local.tee $2
  local.get $0
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  local.set $3
  local.get $2
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shr_u
  i32.wrap_i64
  i64.extend_i32_s
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.const 1
  local.get $0
  i32.load offset=112
  local.get $0
  i32.load offset=104
  local.get $2
  local.get $0
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.add
  i64.const 1
  i64.sub
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 14000
    i32.const 9952
    i32.const 639
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   loop $for-loop|0
    local.get $6
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $6
     i32.const 3
     i32.shl
     i32.add
     i64.load
     local.tee $2
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $6
      local.get $2
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#addToCountAtIndex
      local.get $2
      local.get $4
      i64.add
      local.set $4
     end
     local.get $6
     i32.const 1
     i32.add
     local.set $6
     br $for-loop|0
    end
   end
   local.get $0
   local.get $4
   local.get $0
   i64.load offset=168
   i64.add
   i64.store offset=168
   local.get $0
   local.get $0
   i64.load offset=136
   local.get $0
   i64.load offset=144
   local.tee $2
   local.get $1
   i64.load offset=144
   local.tee $4
   local.get $2
   local.get $4
   i64.gt_u
   select
   i64.add
   i64.store offset=144
   local.get $0
   i64.load offset=152
   local.tee $2
   local.get $1
   i64.load offset=152
   local.tee $4
   local.get $2
   local.get $4
   i64.lt_u
   select
   local.tee $2
   local.get $0
   i64.load offset=136
   i64.gt_u
   if
    local.get $0
    local.get $2
    local.get $0
    i64.load offset=136
    i64.const -1
    i64.xor
    i64.and
    i64.store offset=152
   end
  else
   local.get $1
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex
   local.set $5
   local.get $1
   i32.load offset=116
   local.get $5
   local.get $1
   i32.load offset=116
   i32.const 1
   i32.sub
   i32.and
   i32.add
   local.set $3
   local.get $1
   i32.load offset=160
   i32.load
   i32.load offset=4
   local.get $5
   i32.const 3
   i32.shl
   i32.add
   i64.load
   local.set $2
   local.get $5
   local.get $1
   i32.load offset=108
   i32.shr_s
   i32.const 1
   i32.sub
   local.tee $6
   i32.const 0
   i32.lt_s
   if
    i32.const 0
    local.set $6
    local.get $3
    local.get $1
    i32.load offset=116
    i32.sub
    local.set $3
   end
   local.get $0
   local.get $2
   local.get $3
   i64.extend_i32_s
   local.get $6
   local.get $1
   i32.load offset=112
   i32.add
   i64.extend_i32_s
   i64.shl
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordCountAtValue
   loop $for-loop|1
    local.get $7
    local.get $5
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $7
     i32.const 3
     i32.shl
     i32.add
     i64.load
     local.tee $4
     local.set $2
     local.get $4
     i64.const 0
     i64.gt_u
     if
      local.get $1
      i32.load offset=116
      local.get $7
      local.get $1
      i32.load offset=116
      i32.const 1
      i32.sub
      i32.and
      i32.add
      local.set $3
      local.get $7
      local.get $1
      i32.load offset=108
      i32.shr_s
      i32.const 1
      i32.sub
      local.tee $6
      i32.const 0
      i32.lt_s
      if
       i32.const 0
       local.set $6
       local.get $3
       local.get $1
       i32.load offset=116
       i32.sub
       local.set $3
      end
      local.get $0
      local.get $2
      local.get $3
      i64.extend_i32_s
      local.get $6
      local.get $1
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shl
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordCountAtValue
     end
     local.get $7
     i32.const 1
     i32.add
     local.set $7
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=64
  local.tee $2
  local.get $1
  i64.load offset=64
  local.tee $4
  local.get $2
  local.get $4
  i64.lt_u
  select
  i64.store offset=64
  local.get $0
  local.get $0
  i64.load offset=72
  local.tee $2
  local.get $1
  i64.load offset=72
  local.tee $4
  local.get $2
  local.get $4
  i64.gt_u
  select
  i64.store offset=72
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#addHistogram64 (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#add<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $~lib/typedarray/Uint64Array#__get (param $0 i32) (param $1 i32) (result i64)
  local.get $1
  local.get $0
  i32.load offset=8
  i32.const 3
  i32.shr_u
  i32.ge_u
  if
   i32.const 13120
   i32.const 13184
   i32.const 1048
   i32.const 64
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i32.load offset=4
  local.get $1
  i32.const 3
  i32.shl
  i32.add
  i64.load
 )
 (func $~lib/typedarray/Uint16Array#__get (param $0 i32) (param $1 i32) (result i32)
  local.get $1
  local.get $0
  i32.load offset=8
  i32.const 1
  i32.shr_u
  i32.ge_u
  if
   i32.const 13120
   i32.const 13184
   i32.const 536
   i32.const 64
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i32.load offset=4
  local.get $1
  i32.const 1
  i32.shl
  i32.add
  i32.load16_u
 )
 (func $~lib/typedarray/Uint8Array.wrap (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  i32.const 0
  local.get $0
  i32.const 16
  i32.sub
  i32.load offset=12
  local.tee $2
  i32.gt_u
  if
   i32.const 13120
   i32.const 13184
   i32.const 1741
   i32.const 5
   call $~lib/builtins/abort
   unreachable
  end
  local.get $1
  i32.const 0
  i32.lt_s
  if
   local.get $1
   i32.const -1
   i32.eq
   if (result i32)
    local.get $2
   else
    i32.const 1216
    i32.const 13184
    i32.const 1750
    i32.const 7
    call $~lib/builtins/abort
    unreachable
   end
   local.set $1
  else
   local.get $1
   local.get $2
   i32.gt_s
   if
    i32.const 1216
    i32.const 13184
    i32.const 1755
    i32.const 7
    call $~lib/builtins/abort
    unreachable
   end
  end
  call $~lib/rt/tlsf/maybeInitialize
  i32.const 12
  i32.const 4
  call $~lib/rt/tlsf/allocateBlock
  i32.const 16
  i32.add
  local.tee $2
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $5
   local.get $3
   local.get $5
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $0
  i32.store
  local.get $2
  local.get $1
  i32.store offset=8
  local.get $2
  local.get $0
  i32.store offset=4
  local.get $2
  i32.const 16700
  i32.gt_u
  if
   local.get $2
   i32.const 16
   i32.sub
   local.tee $1
   i32.load offset=4
   local.set $3
   local.get $1
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $1
   i32.load
   drop
  end
  local.get $0
  local.tee $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $2
 )
 (func $~lib/typedarray/Uint8Array.wrap@varargs (param $0 i32) (result i32)
  (local $1 i32)
  block $2of2
   block $1of2
    block $outOfRange
     global.get $~argumentsLength
     i32.const 1
     i32.sub
     br_table $1of2 $1of2 $2of2 $outOfRange
    end
    unreachable
   end
   i32.const -1
   local.set $1
  end
  local.get $0
  local.get $1
  call $~lib/typedarray/Uint8Array.wrap
 )
 (func $~lib/typedarray/Uint16Array.wrap (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $1
   i32.load offset=4
   local.set $2
   local.get $1
   local.get $2
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $1
   i32.load
   drop
  end
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $1
   i32.load offset=4
   local.set $2
   local.get $1
   local.get $2
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $1
   i32.load
   drop
  end
  i32.const 0
  local.get $0
  i32.const 16
  i32.sub
  i32.load offset=12
  local.tee $1
  i32.gt_u
  if
   i32.const 13120
   i32.const 13184
   i32.const 1741
   i32.const 5
   call $~lib/builtins/abort
   unreachable
  end
  local.get $1
  i32.const 1
  i32.and
  if
   i32.const 1216
   i32.const 13184
   i32.const 1746
   i32.const 9
   call $~lib/builtins/abort
   unreachable
  end
  call $~lib/rt/tlsf/maybeInitialize
  i32.const 12
  i32.const 17
  call $~lib/rt/tlsf/allocateBlock
  i32.const 16
  i32.add
  local.tee $2
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $5
   local.get $3
   local.get $5
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $0
  i32.store
  local.get $2
  local.get $1
  i32.store offset=8
  local.get $2
  local.get $0
  i32.store offset=4
  local.get $2
  i32.const 16700
  i32.gt_u
  if
   local.get $2
   i32.const 16
   i32.sub
   local.tee $1
   i32.load offset=4
   local.set $3
   local.get $1
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $1
   i32.load
   drop
  end
  local.get $0
  local.tee $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $2
 )
 (func $~lib/typedarray/Uint64Array.wrap (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $1
   i32.load offset=4
   local.set $2
   local.get $1
   local.get $2
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $1
   i32.load
   drop
  end
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $1
   i32.load offset=4
   local.set $2
   local.get $1
   local.get $2
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $1
   i32.load
   drop
  end
  i32.const 0
  local.get $0
  i32.const 16
  i32.sub
  i32.load offset=12
  local.tee $1
  i32.gt_u
  if
   i32.const 13120
   i32.const 13184
   i32.const 1741
   i32.const 5
   call $~lib/builtins/abort
   unreachable
  end
  local.get $1
  i32.const 7
  i32.and
  if
   i32.const 1216
   i32.const 13184
   i32.const 1746
   i32.const 9
   call $~lib/builtins/abort
   unreachable
  end
  call $~lib/rt/tlsf/maybeInitialize
  i32.const 12
  i32.const 33
  call $~lib/rt/tlsf/allocateBlock
  i32.const 16
  i32.add
  local.tee $2
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $5
   local.get $3
   local.get $5
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $0
  i32.store
  local.get $2
  local.get $1
  i32.store offset=8
  local.get $2
  local.get $0
  i32.store offset=4
  local.get $2
  i32.const 16700
  i32.gt_u
  if
   local.get $2
   i32.const 16
   i32.sub
   local.tee $1
   i32.load offset=4
   local.set $3
   local.get $1
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $1
   i32.load
   drop
  end
  local.get $0
  local.tee $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $2
 )
 (func $assembly/packedarray/PackedArrayContext/PackedArrayContext#initArrayViews (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $1
  call $~lib/typedarray/Uint8Array.wrap@varargs
  local.set $2
  local.get $0
  i32.load offset=12
  local.tee $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $0
  local.get $2
  i32.store offset=12
  i32.const 1
  global.set $~argumentsLength
  local.get $1
  call $~lib/typedarray/Uint16Array.wrap
  local.set $2
  local.get $0
  i32.load offset=16
  local.tee $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $0
  local.get $2
  i32.store offset=16
  i32.const 1
  global.set $~argumentsLength
  local.get $1
  call $~lib/typedarray/Uint64Array.wrap
  local.set $2
  local.get $0
  i32.load offset=20
  local.tee $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $0
  local.get $2
  i32.store offset=20
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/packedarray/PackedArrayContext/PackedArrayContext#expandArrayIfNeeded (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  local.get $0
  i32.load offset=4
  local.tee $2
  local.get $1
  local.get $0
  i32.load offset=24
  i32.const 3
  i32.add
  i32.const 2
  i32.shr_s
  i32.add
  i32.lt_s
  if
   local.get $2
   local.get $1
   i32.const 16
   local.get $1
   i32.const 16
   i32.gt_s
   select
   local.tee $1
   local.get $0
   i32.load offset=24
   i32.const 3
   i32.add
   i32.const 6
   i32.shr_s
   local.tee $2
   local.get $1
   local.get $2
   i32.gt_s
   select
   i32.add
   local.tee $5
   i32.const 3
   i32.shl
   call $~lib/typedarray/Uint8Array#constructor
   local.tee $1
   local.get $0
   i32.load offset=12
   i32.const 0
   call $~lib/typedarray/Uint8Array#set<~lib/typedarray/Uint8Array>
   local.get $0
   i32.load offset=8
   local.tee $3
   local.get $1
   i32.load
   local.tee $2
   i32.ne
   if
    local.get $2
    i32.const 16700
    i32.gt_u
    if
     local.get $2
     i32.const 16
     i32.sub
     local.tee $4
     i32.load offset=4
     local.set $6
     local.get $4
     local.get $6
     i32.const 1
     i32.add
     i32.store offset=4
     local.get $4
     i32.load
     drop
    end
    local.get $3
    i32.const 16700
    i32.gt_u
    if
     local.get $3
     i32.const 16
     i32.sub
     call $~lib/rt/pure/decrement
    end
   end
   local.get $0
   local.get $2
   i32.store offset=8
   local.get $0
   local.get $0
   i32.load offset=8
   call $assembly/packedarray/PackedArrayContext/PackedArrayContext#initArrayViews
   local.get $0
   local.get $5
   i32.store offset=4
   local.get $1
   i32.const 16700
   i32.gt_u
   if
    local.get $1
    i32.const 16
    i32.sub
    call $~lib/rt/pure/decrement
   end
  end
 )
 (func $assembly/packedarray/PackedArrayContext/PackedArrayContext#setAtShortIndex (param $0 i32) (param $1 i32) (param $2 i32)
  local.get $2
  i32.const 65535
  i32.and
  local.set $2
  local.get $1
  local.get $0
  i32.load offset=16
  local.tee $0
  i32.load offset=8
  i32.const 1
  i32.shr_u
  i32.ge_u
  if
   i32.const 13120
   i32.const 13184
   i32.const 547
   i32.const 64
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i32.load offset=4
  local.get $1
  i32.const 1
  i32.shl
  i32.add
  local.get $2
  i32.store16
 )
 (func $assembly/packedarray/PackedArrayContext/PackedArrayContext#newEntry (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  i32.load offset=24
  local.set $2
  local.get $0
  local.get $1
  i32.const 2
  i32.shr_s
  i32.const 1
  i32.add
  call $assembly/packedarray/PackedArrayContext/PackedArrayContext#expandArrayIfNeeded
  local.get $0
  local.get $1
  local.get $2
  i32.add
  i32.store offset=24
  loop $for-loop|0
   local.get $3
   local.get $1
   i32.lt_s
   if
    local.get $0
    local.get $2
    local.get $3
    i32.add
    i32.const -1
    call $assembly/packedarray/PackedArrayContext/PackedArrayContext#setAtShortIndex
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|0
   end
  end
  local.get $2
 )
 (func $~lib/typedarray/Uint64Array#__set (param $0 i32) (param $1 i32) (param $2 i64)
  local.get $1
  local.get $0
  i32.load offset=8
  i32.const 3
  i32.shr_u
  i32.ge_u
  if
   i32.const 13120
   i32.const 13184
   i32.const 1059
   i32.const 64
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i32.load offset=4
  local.get $1
  i32.const 3
  i32.shl
  i32.add
  local.get $2
  i64.store
 )
 (func $assembly/packedarray/PackedArrayContext/PackedArrayContext#newLeafEntry (param $0 i32) (result i32)
  (local $1 i32)
  local.get $0
  i32.load offset=24
  i32.const 3
  i32.add
  i32.const 2
  i32.shr_s
  local.set $1
  local.get $0
  i32.const 1
  call $assembly/packedarray/PackedArrayContext/PackedArrayContext#expandArrayIfNeeded
  local.get $0
  local.get $1
  i32.const 1
  i32.add
  i32.const 2
  i32.shl
  i32.store offset=24
  local.get $0
  i32.load offset=20
  local.get $1
  i64.const 0
  call $~lib/typedarray/Uint64Array#__set
  local.get $1
 )
 (func $assembly/packedarray/PackedArrayContext/PackedArrayContext#consolidateEntry (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  local.get $0
  i32.load offset=16
  local.get $2
  call $~lib/typedarray/Uint16Array#__get
  i32.const 65535
  i32.and
  local.set $5
  local.get $0
  i32.load offset=16
  local.get $1
  call $~lib/typedarray/Uint16Array#__get
  i32.const 65535
  i32.and
  local.set $3
  i32.const 1
  global.set $~argumentsLength
  local.get $3
  local.get $3
  local.get $5
  i32.xor
  i32.const 1
  i32.sub
  i32.and
  i64.extend_i32_u
  call $start:assembly/packedarray/bitcount~anonymous|0
  local.set $5
  i32.const 1
  global.set $~argumentsLength
  local.get $3
  i64.extend_i32_u
  call $start:assembly/packedarray/bitcount~anonymous|0
  local.set $3
  loop $for-loop|1
   local.get $4
   i32.const 255
   i32.and
   local.get $3
   i32.const 255
   i32.and
   i32.lt_u
   if
    local.get $4
    i32.const 255
    i32.and
    local.get $5
    i32.const 255
    i32.and
    i32.ne
    if
     local.get $0
     i32.load offset=16
     local.get $6
     local.get $2
     i32.const 1
     i32.add
     i32.add
     call $~lib/typedarray/Uint16Array#__get
     local.tee $7
     local.set $8
     local.get $7
     if
      local.get $0
      local.get $1
      i32.const 1
      i32.add
      local.get $4
      i32.const 255
      i32.and
      i32.add
      local.get $8
      call $assembly/packedarray/PackedArrayContext/PackedArrayContext#setAtShortIndex
     end
     local.get $6
     i32.const 1
     i32.add
     local.set $6
    end
    local.get $4
    i32.const 1
    i32.add
    local.set $4
    br $for-loop|1
   end
  end
 )
 (func $assembly/packedarray/PackedArrayContext/PackedArrayContext#expandEntry (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (param $4 i32) (param $5 i32) (result i32)
  (local $6 i32)
  local.get $0
  i32.load offset=16
  local.get $1
  call $~lib/typedarray/Uint16Array#__get
  local.set $6
  i32.const 1
  global.set $~argumentsLength
  local.get $3
  local.get $4
  local.get $6
  i32.const 65535
  i32.and
  i32.or
  local.tee $6
  i64.extend_i32_s
  call $start:assembly/packedarray/bitcount~anonymous|0
  local.tee $4
  i32.const 255
  i32.and
  i32.ge_s
  if
   i32.const 14480
   i32.const 14368
   i32.const 288
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $4
  i32.const 255
  i32.and
  i32.const 1
  i32.add
  local.set $4
  local.get $5
  if
   local.get $0
   call $assembly/packedarray/PackedArrayContext/PackedArrayContext#newLeafEntry
   local.set $5
  else
   local.get $0
   local.get $0
   i32.const 1
   call $assembly/packedarray/PackedArrayContext/PackedArrayContext#newEntry
   local.tee $5
   i32.const 0
   call $assembly/packedarray/PackedArrayContext/PackedArrayContext#setAtShortIndex
  end
  local.get $0
  local.get $0
  local.get $4
  i32.const 65535
  i32.and
  call $assembly/packedarray/PackedArrayContext/PackedArrayContext#newEntry
  local.tee $4
  local.get $6
  call $assembly/packedarray/PackedArrayContext/PackedArrayContext#setAtShortIndex
  local.get $0
  local.get $3
  local.get $4
  i32.const 1
  i32.add
  i32.add
  local.get $5
  call $assembly/packedarray/PackedArrayContext/PackedArrayContext#setAtShortIndex
  local.get $0
  local.get $2
  local.get $4
  call $assembly/packedarray/PackedArrayContext/PackedArrayContext#setAtShortIndex
  local.get $0
  local.get $4
  local.get $1
  call $assembly/packedarray/PackedArrayContext/PackedArrayContext#consolidateEntry
  local.get $4
 )
 (func $assembly/packedarray/PackedArrayContext/PackedArrayContext#getPackedIndex (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (result i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  local.get $2
  local.get $0
  i32.load offset=28
  i32.ge_s
  if
   i32.const 14176
   i32.const 14368
   i32.const 374
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  local.tee $4
  i32.load offset=16
  local.get $1
  local.tee $0
  local.tee $5
  call $~lib/typedarray/Uint16Array#__get
  local.tee $1
  i32.eqz
  if
   block $__inlined_func$assembly/packedarray/PackedArrayContext/PackedArrayContext#getRootEntry
    local.get $3
    i32.eqz
    if
     i32.const 0
     local.set $1
     br $__inlined_func$assembly/packedarray/PackedArrayContext/PackedArrayContext#getRootEntry
    end
    local.get $4
    local.get $4
    i32.const 1
    call $assembly/packedarray/PackedArrayContext/PackedArrayContext#newEntry
    local.tee $1
    i32.const 0
    call $assembly/packedarray/PackedArrayContext/PackedArrayContext#setAtShortIndex
    local.get $4
    local.get $5
    local.get $1
    call $assembly/packedarray/PackedArrayContext/PackedArrayContext#setAtShortIndex
   end
  end
  local.get $1
  i32.eqz
  if
   i32.const -1
   return
  end
  local.get $4
  i32.load offset=32
  local.set $5
  loop $for-loop|0
   local.get $5
   i32.const 3
   i32.ge_s
   if
    local.get $5
    i32.const 3
    i32.eq
    local.set $9
    local.get $4
    i32.load offset=16
    local.get $1
    call $~lib/typedarray/Uint16Array#__get
    i32.const 65535
    i32.and
    local.set $6
    i32.const 1
    global.set $~argumentsLength
    local.get $6
    i32.const 1
    local.get $2
    local.get $5
    i32.shr_u
    i32.const 15
    i32.and
    i32.shl
    local.tee $7
    i32.const 1
    i32.sub
    i32.and
    i64.extend_i32_s
    call $start:assembly/packedarray/bitcount~anonymous|0
    local.set $8
    local.get $6
    local.get $7
    i32.and
    i32.eqz
    if
     local.get $3
     i32.eqz
     if
      i32.const -1
      return
     end
     local.get $4
     local.get $1
     local.get $0
     local.get $8
     i32.const 255
     i32.and
     local.get $7
     local.get $9
     call $assembly/packedarray/PackedArrayContext/PackedArrayContext#expandEntry
     local.set $1
    end
    local.get $4
    i32.load offset=16
    local.get $1
    i32.const 1
    i32.add
    local.get $8
    i32.const 255
    i32.and
    i32.add
    local.tee $0
    call $~lib/typedarray/Uint16Array#__get
    local.set $1
    local.get $5
    i32.const 4
    i32.sub
    local.set $5
    br $for-loop|0
   end
  end
  local.get $2
  i32.const 7
  i32.and
  local.get $1
  i32.const 3
  i32.shl
  i32.add
 )
 (func $assembly/packedarray/PackedArray/PackedArray#get (param $0 i32) (param $1 i32) (result i64)
  (local $2 i32)
  (local $3 i64)
  (local $4 i32)
  (local $5 i32)
  loop $for-loop|1
   local.get $2
   i32.const 255
   i32.and
   i32.const 8
   i32.lt_u
   if
    local.get $0
    i32.load
    i32.load8_u
    i32.eqz
    if
     local.get $0
     i32.load
     i32.load offset=20
     local.get $1
     call $~lib/typedarray/Uint64Array#__get
     return
    end
    local.get $0
    i32.load
    local.get $2
    i32.const 255
    i32.and
    local.get $1
    i32.const 0
    call $assembly/packedarray/PackedArrayContext/PackedArrayContext#getPackedIndex
    local.tee $4
    i32.const 0
    i32.lt_s
    if
     local.get $3
     return
    end
    local.get $4
    local.get $0
    i32.load
    i32.load offset=12
    local.tee $5
    i32.load offset=8
    i32.ge_u
    if
     i32.const 13120
     i32.const 13184
     i32.const 152
     i32.const 45
     call $~lib/builtins/abort
     unreachable
    end
    local.get $3
    local.get $4
    local.get $5
    i32.load offset=4
    i32.add
    i32.load8_u
    i64.extend_i32_u
    local.get $2
    i32.const 3
    i32.shl
    i32.const 255
    i32.and
    i64.extend_i32_u
    i64.shl
    i64.add
    local.set $3
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|1
   end
  end
  local.get $3
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#add<assembly/packedarray/PackedArray/PackedArray,u64> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i32)
  (local $4 i64)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $5
   local.get $3
   local.get $5
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $0
  i32.load offset=116
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $5
  local.get $0
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  i32.add
  local.set $3
  local.get $5
  local.get $0
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.tee $5
  i32.const 0
  i32.lt_s
  if
   i32.const 0
   local.set $5
   local.get $3
   local.get $0
   i32.load offset=116
   i32.sub
   local.set $3
  end
  local.get $0
  i32.load offset=104
  local.get $3
  i64.extend_i32_s
  local.get $5
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  local.tee $2
  local.get $0
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  local.set $3
  local.get $2
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shr_u
  i32.wrap_i64
  i64.extend_i32_s
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.const 1
  local.get $0
  i32.load offset=112
  local.get $0
  i32.load offset=104
  local.get $2
  local.get $0
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.add
  i64.const 1
  i64.sub
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 14000
    i32.const 9952
    i32.const 639
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   loop $for-loop|0
    local.get $6
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     local.get $6
     call $assembly/packedarray/PackedArray/PackedArray#get
     local.tee $2
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $6
      local.get $2
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#addToCountAtIndex
      local.get $2
      local.get $4
      i64.add
      local.set $4
     end
     local.get $6
     i32.const 1
     i32.add
     local.set $6
     br $for-loop|0
    end
   end
   local.get $0
   local.get $4
   local.get $0
   i64.load offset=168
   i64.add
   i64.store offset=168
   local.get $0
   local.get $0
   i64.load offset=136
   local.get $0
   i64.load offset=144
   local.tee $2
   local.get $1
   i64.load offset=144
   local.tee $4
   local.get $2
   local.get $4
   i64.gt_u
   select
   i64.add
   i64.store offset=144
   local.get $0
   i64.load offset=152
   local.tee $2
   local.get $1
   i64.load offset=152
   local.tee $4
   local.get $2
   local.get $4
   i64.lt_u
   select
   local.tee $2
   local.get $0
   i64.load offset=136
   i64.gt_u
   if
    local.get $0
    local.get $2
    local.get $0
    i64.load offset=136
    i64.const -1
    i64.xor
    i64.and
    i64.store offset=152
   end
  else
   local.get $1
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex
   local.set $5
   local.get $1
   i32.load offset=160
   local.get $5
   call $assembly/packedarray/PackedArray/PackedArray#get
   local.set $2
   local.get $1
   i32.load offset=116
   local.get $5
   local.get $1
   i32.load offset=116
   i32.const 1
   i32.sub
   i32.and
   i32.add
   local.set $3
   local.get $5
   local.get $1
   i32.load offset=108
   i32.shr_s
   i32.const 1
   i32.sub
   local.tee $6
   i32.const 0
   i32.lt_s
   if
    i32.const 0
    local.set $6
    local.get $3
    local.get $1
    i32.load offset=116
    i32.sub
    local.set $3
   end
   local.get $0
   local.get $2
   local.get $3
   i64.extend_i32_s
   local.get $6
   local.get $1
   i32.load offset=112
   i32.add
   i64.extend_i32_s
   i64.shl
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordCountAtValue
   loop $for-loop|1
    local.get $7
    local.get $5
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     local.get $7
     call $assembly/packedarray/PackedArray/PackedArray#get
     local.tee $4
     local.set $2
     local.get $4
     i64.const 0
     i64.gt_u
     if
      local.get $1
      i32.load offset=116
      local.get $7
      local.get $1
      i32.load offset=116
      i32.const 1
      i32.sub
      i32.and
      i32.add
      local.set $3
      local.get $7
      local.get $1
      i32.load offset=108
      i32.shr_s
      i32.const 1
      i32.sub
      local.tee $6
      i32.const 0
      i32.lt_s
      if
       i32.const 0
       local.set $6
       local.get $3
       local.get $1
       i32.load offset=116
       i32.sub
       local.set $3
      end
      local.get $0
      local.get $2
      local.get $3
      i64.extend_i32_s
      local.get $6
      local.get $1
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shl
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordCountAtValue
     end
     local.get $7
     i32.const 1
     i32.add
     local.set $7
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=64
  local.tee $2
  local.get $1
  i64.load offset=64
  local.tee $4
  local.get $2
  local.get $4
  i64.lt_u
  select
  i64.store offset=64
  local.get $0
  local.get $0
  i64.load offset=72
  local.tee $2
  local.get $1
  i64.load offset=72
  local.tee $4
  local.get $2
  local.get $4
  i64.gt_u
  select
  i64.store offset=72
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#addPackedHistogram (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#add<assembly/packedarray/PackedArray/PackedArray,u64>
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtValue (param $0 i32) (param $1 i64) (result i64)
  (local $2 i32)
  (local $3 i32)
  i32.const 0
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex
  local.tee $2
  i32.const 0
  local.get $2
  i32.gt_s
  select
  local.tee $2
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $3
  local.get $2
  local.get $3
  i32.lt_s
  select
  local.get $0
  i32.load offset=160
  i32.load
  i32.load offset=4
  i32.add
  i32.load8_u
  i64.extend_i32_u
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#establishInternalTackingValues (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i64)
  (local $5 i64)
  (local $6 i32)
  local.get $0
  i64.const 0
  i64.store offset=144
  local.get $0
  i64.const -1
  i64.store offset=152
  i32.const -1
  local.set $2
  i32.const -1
  local.set $6
  loop $for-loop|0
   local.get $3
   local.get $1
   i32.lt_s
   if
    local.get $3
    local.get $0
    i32.load offset=160
    i32.load
    i32.load offset=4
    i32.add
    i32.load8_u
    i64.extend_i32_u
    local.tee $5
    i64.const 0
    i64.gt_u
    if
     local.get $4
     local.get $5
     i64.add
     local.set $4
     local.get $3
     local.get $6
     local.get $3
     i32.const 0
     local.get $6
     i32.const -1
     i32.eq
     select
     select
     local.set $6
     local.get $3
     local.set $2
    end
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|0
   end
  end
  local.get $2
  i32.const 0
  i32.ge_s
  if
   local.get $0
   i32.load offset=116
   local.get $2
   local.get $0
   i32.load offset=116
   i32.const 1
   i32.sub
   i32.and
   i32.add
   local.set $3
   local.get $2
   local.get $0
   i32.load offset=108
   i32.shr_s
   i32.const 1
   i32.sub
   local.tee $2
   i32.const 0
   i32.lt_s
   if
    local.get $3
    local.get $0
    i32.load offset=116
    i32.sub
    local.set $3
    i32.const 0
    local.set $2
   end
   local.get $0
   i32.load offset=104
   local.get $3
   i64.extend_i32_s
   local.get $2
   local.get $0
   i32.load offset=112
   i32.add
   i64.extend_i32_s
   i64.shl
   local.tee $5
   local.get $0
   i64.load offset=128
   i64.or
   i64.clz
   i32.wrap_i64
   i32.sub
   local.set $2
   local.get $0
   local.get $0
   i64.load offset=136
   local.get $5
   local.get $2
   local.get $0
   i32.load offset=112
   i32.add
   i64.extend_i32_s
   i64.shr_u
   i32.wrap_i64
   i64.extend_i32_s
   local.get $2
   local.get $0
   i32.load offset=112
   i32.add
   i64.extend_i32_s
   i64.shl
   i64.const 1
   local.get $0
   i32.load offset=112
   local.get $0
   i32.load offset=104
   local.get $5
   local.get $0
   i64.load offset=128
   i64.or
   i64.clz
   i32.wrap_i64
   i32.sub
   i32.add
   i64.extend_i32_s
   i64.shl
   i64.add
   i64.const 1
   i64.sub
   i64.add
   i64.store offset=144
  end
  local.get $6
  i32.const 0
  i32.ge_s
  if
   block $__inlined_func$assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#updateMinNonZeroValue
    local.get $0
    i32.load offset=116
    local.get $6
    local.get $0
    i32.load offset=116
    i32.const 1
    i32.sub
    i32.and
    i32.add
    local.set $1
    local.get $6
    local.get $0
    i32.load offset=108
    i32.shr_s
    i32.const 1
    i32.sub
    local.tee $3
    i32.const 0
    i32.lt_s
    if
     i32.const 0
     local.set $3
     local.get $1
     local.get $0
     i32.load offset=116
     i32.sub
     local.set $1
    end
    local.get $1
    i64.extend_i32_s
    local.get $3
    local.get $0
    i32.load offset=112
    i32.add
    i64.extend_i32_s
    i64.shl
    local.tee $5
    local.get $0
    i64.load offset=136
    i64.le_u
    br_if $__inlined_func$assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#updateMinNonZeroValue
    local.get $0
    local.get $5
    local.get $0
    i64.load offset=136
    i64.const -1
    i64.xor
    i64.and
    i64.store offset=152
   end
  end
  local.get $0
  local.get $4
  i64.store offset=168
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#establishInternalTackingValues@varargs (param $0 i32)
  (local $1 i32)
  block $1of1
   block $0of1
    block $outOfRange
     global.get $~argumentsLength
     br_table $0of1 $1of1 $outOfRange
    end
    unreachable
   end
   local.get $0
   i32.load offset=52
   local.set $1
  end
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#establishInternalTackingValues
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8> (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i64)
  (local $6 i64)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $4
   i32.load offset=4
   local.set $3
   local.get $4
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $4
   i32.load
   drop
  end
  local.get $0
  i32.load offset=116
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $3
  local.get $0
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  i32.add
  local.set $4
  local.get $3
  local.get $0
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.tee $3
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 0
   local.set $3
   local.get $4
   local.get $0
   i32.load offset=116
   i32.sub
  else
   local.get $4
  end
  i64.extend_i32_s
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 14000
    i32.const 9952
    i32.const 748
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   loop $for-loop|0
    local.get $2
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $2
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     i32.add
     i32.load8_u
     i64.extend_i32_u
     local.tee $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $2
      i64.const 0
      local.get $6
      i64.sub
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#addToCountAtIndex
      local.get $5
      local.get $6
      i64.add
      local.set $5
     end
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $5
   i64.sub
   i64.store offset=168
  else
   loop $for-loop|1
    local.get $2
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $2
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     i32.add
     i32.load8_u
     i64.extend_i32_u
     local.tee $6
     i64.const 0
     i64.gt_u
     if
      local.get $1
      i32.load offset=116
      local.get $2
      local.get $1
      i32.load offset=116
      i32.const 1
      i32.sub
      i32.and
      i32.add
      local.set $4
      local.get $0
      local.get $2
      local.get $1
      i32.load offset=108
      i32.shr_s
      i32.const 1
      i32.sub
      local.tee $3
      i32.const 0
      i32.lt_s
      if (result i32)
       i32.const 0
       local.set $3
       local.get $4
       local.get $1
       i32.load offset=116
       i32.sub
      else
       local.get $4
      end
      i64.extend_i32_s
      local.get $3
      local.get $1
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shl
      local.tee $5
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtValue
      local.get $6
      i64.lt_u
      if
       i32.const 14608
       local.get $6
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14672
       call $~lib/string/String.__concat
       local.get $5
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14720
       call $~lib/string/String.__concat
       local.get $0
       local.get $5
       call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtValue
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14800
       call $~lib/string/String.__concat
       i32.const 9952
       i32.const 777
       i32.const 13
       call $~lib/builtins/abort
       unreachable
      end
      local.get $0
      i64.const 0
      local.get $6
      i64.sub
      local.get $5
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordCountAtValue
     end
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=144
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtValue
  i64.const 0
  i64.le_u
  if (result i32)
   i32.const 1
  else
   local.get $0
   local.get $0
   i64.load offset=152
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtValue
   i64.const 0
   i64.le_u
  end
  if
   i32.const 0
   global.set $~argumentsLength
   local.get $0
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#establishInternalTackingValues@varargs
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#subtractHistogram8 (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16> (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i64)
  (local $6 i64)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $4
   i32.load offset=4
   local.set $3
   local.get $4
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $4
   i32.load
   drop
  end
  local.get $0
  i32.load offset=116
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $3
  local.get $0
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  i32.add
  local.set $4
  local.get $3
  local.get $0
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.tee $3
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 0
   local.set $3
   local.get $4
   local.get $0
   i32.load offset=116
   i32.sub
  else
   local.get $4
  end
  i64.extend_i32_s
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 14000
    i32.const 9952
    i32.const 748
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   loop $for-loop|0
    local.get $2
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $2
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u
     i64.extend_i32_u
     local.tee $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $2
      i64.const 0
      local.get $6
      i64.sub
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#addToCountAtIndex
      local.get $5
      local.get $6
      i64.add
      local.set $5
     end
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $5
   i64.sub
   i64.store offset=168
  else
   loop $for-loop|1
    local.get $2
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $2
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u
     i64.extend_i32_u
     local.tee $6
     i64.const 0
     i64.gt_u
     if
      local.get $1
      i32.load offset=116
      local.get $2
      local.get $1
      i32.load offset=116
      i32.const 1
      i32.sub
      i32.and
      i32.add
      local.set $4
      local.get $0
      local.get $2
      local.get $1
      i32.load offset=108
      i32.shr_s
      i32.const 1
      i32.sub
      local.tee $3
      i32.const 0
      i32.lt_s
      if (result i32)
       i32.const 0
       local.set $3
       local.get $4
       local.get $1
       i32.load offset=116
       i32.sub
      else
       local.get $4
      end
      i64.extend_i32_s
      local.get $3
      local.get $1
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shl
      local.tee $5
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtValue
      local.get $6
      i64.lt_u
      if
       i32.const 14608
       local.get $6
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14672
       call $~lib/string/String.__concat
       local.get $5
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14720
       call $~lib/string/String.__concat
       local.get $0
       local.get $5
       call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtValue
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14800
       call $~lib/string/String.__concat
       i32.const 9952
       i32.const 777
       i32.const 13
       call $~lib/builtins/abort
       unreachable
      end
      local.get $0
      i64.const 0
      local.get $6
      i64.sub
      local.get $5
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordCountAtValue
     end
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=144
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtValue
  i64.const 0
  i64.le_u
  if (result i32)
   i32.const 1
  else
   local.get $0
   local.get $0
   i64.load offset=152
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtValue
   i64.const 0
   i64.le_u
  end
  if
   i32.const 0
   global.set $~argumentsLength
   local.get $0
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#establishInternalTackingValues@varargs
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#subtractHistogram16 (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32> (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i64)
  (local $6 i64)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $4
   i32.load offset=4
   local.set $3
   local.get $4
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $4
   i32.load
   drop
  end
  local.get $0
  i32.load offset=116
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $3
  local.get $0
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  i32.add
  local.set $4
  local.get $3
  local.get $0
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.tee $3
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 0
   local.set $3
   local.get $4
   local.get $0
   i32.load offset=116
   i32.sub
  else
   local.get $4
  end
  i64.extend_i32_s
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 14000
    i32.const 9952
    i32.const 748
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   loop $for-loop|0
    local.get $2
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $2
     i32.const 2
     i32.shl
     i32.add
     i32.load
     i64.extend_i32_u
     local.tee $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $2
      i64.const 0
      local.get $6
      i64.sub
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#addToCountAtIndex
      local.get $5
      local.get $6
      i64.add
      local.set $5
     end
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $5
   i64.sub
   i64.store offset=168
  else
   loop $for-loop|1
    local.get $2
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $2
     i32.const 2
     i32.shl
     i32.add
     i32.load
     i64.extend_i32_u
     local.tee $6
     i64.const 0
     i64.gt_u
     if
      local.get $1
      i32.load offset=116
      local.get $2
      local.get $1
      i32.load offset=116
      i32.const 1
      i32.sub
      i32.and
      i32.add
      local.set $4
      local.get $0
      local.get $2
      local.get $1
      i32.load offset=108
      i32.shr_s
      i32.const 1
      i32.sub
      local.tee $3
      i32.const 0
      i32.lt_s
      if (result i32)
       i32.const 0
       local.set $3
       local.get $4
       local.get $1
       i32.load offset=116
       i32.sub
      else
       local.get $4
      end
      i64.extend_i32_s
      local.get $3
      local.get $1
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shl
      local.tee $5
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtValue
      local.get $6
      i64.lt_u
      if
       i32.const 14608
       local.get $6
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14672
       call $~lib/string/String.__concat
       local.get $5
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14720
       call $~lib/string/String.__concat
       local.get $0
       local.get $5
       call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtValue
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14800
       call $~lib/string/String.__concat
       i32.const 9952
       i32.const 777
       i32.const 13
       call $~lib/builtins/abort
       unreachable
      end
      local.get $0
      i64.const 0
      local.get $6
      i64.sub
      local.get $5
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordCountAtValue
     end
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=144
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtValue
  i64.const 0
  i64.le_u
  if (result i32)
   i32.const 1
  else
   local.get $0
   local.get $0
   i64.load offset=152
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtValue
   i64.const 0
   i64.le_u
  end
  if
   i32.const 0
   global.set $~argumentsLength
   local.get $0
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#establishInternalTackingValues@varargs
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#subtractHistogram32 (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64> (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i64)
  (local $6 i64)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $4
   i32.load offset=4
   local.set $3
   local.get $4
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $4
   i32.load
   drop
  end
  local.get $0
  i32.load offset=116
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $3
  local.get $0
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  i32.add
  local.set $4
  local.get $3
  local.get $0
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.tee $3
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 0
   local.set $3
   local.get $4
   local.get $0
   i32.load offset=116
   i32.sub
  else
   local.get $4
  end
  i64.extend_i32_s
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 14000
    i32.const 9952
    i32.const 748
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   loop $for-loop|0
    local.get $2
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $2
     i32.const 3
     i32.shl
     i32.add
     i64.load
     local.tee $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $2
      i64.const 0
      local.get $6
      i64.sub
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#addToCountAtIndex
      local.get $5
      local.get $6
      i64.add
      local.set $5
     end
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $5
   i64.sub
   i64.store offset=168
  else
   loop $for-loop|1
    local.get $2
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $2
     i32.const 3
     i32.shl
     i32.add
     i64.load
     local.tee $6
     i64.const 0
     i64.gt_u
     if
      local.get $1
      i32.load offset=116
      local.get $2
      local.get $1
      i32.load offset=116
      i32.const 1
      i32.sub
      i32.and
      i32.add
      local.set $4
      local.get $0
      local.get $2
      local.get $1
      i32.load offset=108
      i32.shr_s
      i32.const 1
      i32.sub
      local.tee $3
      i32.const 0
      i32.lt_s
      if (result i32)
       i32.const 0
       local.set $3
       local.get $4
       local.get $1
       i32.load offset=116
       i32.sub
      else
       local.get $4
      end
      i64.extend_i32_s
      local.get $3
      local.get $1
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shl
      local.tee $5
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtValue
      local.get $6
      i64.lt_u
      if
       i32.const 14608
       local.get $6
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14672
       call $~lib/string/String.__concat
       local.get $5
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14720
       call $~lib/string/String.__concat
       local.get $0
       local.get $5
       call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtValue
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14800
       call $~lib/string/String.__concat
       i32.const 9952
       i32.const 777
       i32.const 13
       call $~lib/builtins/abort
       unreachable
      end
      local.get $0
      i64.const 0
      local.get $6
      i64.sub
      local.get $5
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordCountAtValue
     end
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=144
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtValue
  i64.const 0
  i64.le_u
  if (result i32)
   i32.const 1
  else
   local.get $0
   local.get $0
   i64.load offset=152
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtValue
   i64.const 0
   i64.le_u
  end
  if
   i32.const 0
   global.set $~argumentsLength
   local.get $0
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#establishInternalTackingValues@varargs
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#subtractHistogram64 (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#subtract<assembly/packedarray/PackedArray/PackedArray,u64> (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i64)
  (local $6 i64)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $4
   i32.load offset=4
   local.set $3
   local.get $4
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $4
   i32.load
   drop
  end
  local.get $0
  i32.load offset=116
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $3
  local.get $0
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  i32.add
  local.set $4
  local.get $3
  local.get $0
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.tee $3
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 0
   local.set $3
   local.get $4
   local.get $0
   i32.load offset=116
   i32.sub
  else
   local.get $4
  end
  i64.extend_i32_s
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 14000
    i32.const 9952
    i32.const 748
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   loop $for-loop|0
    local.get $2
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     local.get $2
     call $assembly/packedarray/PackedArray/PackedArray#get
     local.tee $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $2
      i64.const 0
      local.get $6
      i64.sub
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#addToCountAtIndex
      local.get $5
      local.get $6
      i64.add
      local.set $5
     end
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $5
   i64.sub
   i64.store offset=168
  else
   loop $for-loop|1
    local.get $2
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     local.get $2
     call $assembly/packedarray/PackedArray/PackedArray#get
     local.tee $6
     i64.const 0
     i64.gt_u
     if
      local.get $1
      i32.load offset=116
      local.get $2
      local.get $1
      i32.load offset=116
      i32.const 1
      i32.sub
      i32.and
      i32.add
      local.set $4
      local.get $0
      local.get $2
      local.get $1
      i32.load offset=108
      i32.shr_s
      i32.const 1
      i32.sub
      local.tee $3
      i32.const 0
      i32.lt_s
      if (result i32)
       i32.const 0
       local.set $3
       local.get $4
       local.get $1
       i32.load offset=116
       i32.sub
      else
       local.get $4
      end
      i64.extend_i32_s
      local.get $3
      local.get $1
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shl
      local.tee $5
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtValue
      local.get $6
      i64.lt_u
      if
       i32.const 14608
       local.get $6
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14672
       call $~lib/string/String.__concat
       local.get $5
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14720
       call $~lib/string/String.__concat
       local.get $0
       local.get $5
       call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtValue
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14800
       call $~lib/string/String.__concat
       i32.const 9952
       i32.const 777
       i32.const 13
       call $~lib/builtins/abort
       unreachable
      end
      local.get $0
      i64.const 0
      local.get $6
      i64.sub
      local.get $5
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordCountAtValue
     end
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=144
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtValue
  i64.const 0
  i64.le_u
  if (result i32)
   i32.const 1
  else
   local.get $0
   local.get $0
   i64.load offset=152
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtValue
   i64.const 0
   i64.le_u
  end
  if
   i32.const 0
   global.set $~argumentsLength
   local.get $0
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#establishInternalTackingValues@varargs
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#subtractPackedHistogram (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#subtract<assembly/packedarray/PackedArray/PackedArray,u64>
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $~lib/typedarray/Uint64Array#constructor (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  call $~lib/rt/tlsf/maybeInitialize
  i32.const 12
  i32.const 33
  call $~lib/rt/tlsf/allocateBlock
  i32.const 16
  i32.add
  local.tee $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $1
  local.get $0
  i32.const 3
  call $~lib/arraybuffer/ArrayBufferView#constructor
 )
 (func $~lib/typedarray/Uint32Array#constructor (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  call $~lib/rt/tlsf/maybeInitialize
  i32.const 12
  i32.const 25
  call $~lib/rt/tlsf/allocateBlock
  i32.const 16
  i32.add
  local.tee $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $1
  local.get $0
  i32.const 2
  call $~lib/arraybuffer/ArrayBufferView#constructor
 )
 (func $assembly/ByteBuffer/ByteBuffer#constructor (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  call $~lib/rt/tlsf/maybeInitialize
  i32.const 24
  i32.const 48
  call $~lib/rt/tlsf/allocateBlock
  i32.const 16
  i32.add
  local.tee $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $1
  i32.const 0
  i32.store
  local.get $1
  i32.const 0
  i32.store offset=4
  local.get $1
  i32.const 0
  i32.store offset=8
  local.get $1
  i32.const 0
  i32.store offset=12
  local.get $1
  i32.const 0
  i32.store offset=16
  local.get $1
  i32.const 0
  i32.store offset=20
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $1
  i32.const 0
  i32.store
  local.get $0
  local.get $1
  i32.load offset=4
  local.tee $2
  i32.ne
  if
   local.get $0
   i32.const 16700
   i32.gt_u
   if
    local.get $0
    i32.const 16
    i32.sub
    local.tee $3
    i32.load offset=4
    local.set $4
    local.get $3
    local.get $4
    i32.const 1
    i32.add
    i32.store offset=4
    local.get $3
    i32.load
    drop
   end
   local.get $2
   i32.const 16700
   i32.gt_u
   if
    local.get $2
    i32.const 16
    i32.sub
    call $~lib/rt/pure/decrement
   end
  end
  local.get $1
  local.get $0
  i32.store offset=4
  i32.const 1
  call $~lib/typedarray/Uint64Array#constructor
  local.set $2
  local.get $1
  i32.load offset=8
  local.tee $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $1
  local.get $2
  i32.store offset=8
  i32.const 1
  call $~lib/typedarray/Uint32Array#constructor
  local.set $2
  local.get $1
  i32.load offset=12
  local.tee $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $1
  local.get $2
  i32.store offset=12
  local.get $1
  i32.load offset=12
  i32.load
  i32.const 1
  global.set $~argumentsLength
  call $~lib/typedarray/Uint8Array.wrap@varargs
  local.set $2
  local.get $1
  i32.load offset=16
  local.tee $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $1
  local.get $2
  i32.store offset=16
  local.get $1
  i32.load offset=8
  i32.load
  i32.const 1
  global.set $~argumentsLength
  call $~lib/typedarray/Uint8Array.wrap@varargs
  local.set $2
  local.get $1
  i32.load offset=20
  local.tee $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $1
  local.get $2
  i32.store offset=20
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $1
 )
 (func $assembly/ByteBuffer/ByteBuffer.allocate (result i32)
  (local $0 i32)
  (local $1 i32)
  i32.const 1024
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $0
  call $assembly/ByteBuffer/ByteBuffer#constructor
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $~lib/typedarray/Uint8Array#reverse (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $1
   i32.load offset=4
   local.set $2
   local.get $1
   local.get $2
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $1
   i32.load
   drop
  end
  local.get $0
  local.tee $1
  i32.load offset=4
  local.set $2
  local.get $0
  i32.load offset=8
  i32.const 1
  i32.sub
  local.set $0
  loop $for-loop|0
   local.get $3
   local.get $0
   i32.lt_u
   if
    local.get $2
    local.get $3
    i32.add
    local.tee $4
    i32.load8_u
    local.set $5
    local.get $4
    local.get $0
    local.get $2
    i32.add
    local.tee $4
    i32.load8_u
    i32.store8
    local.get $4
    local.get $5
    i32.store8
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    local.get $0
    i32.const 1
    i32.sub
    local.set $0
    br $for-loop|0
   end
  end
  local.get $1
 )
 (func $assembly/ByteBuffer/ByteBuffer#putInt32 (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  i32.load offset=4
  i32.load offset=8
  local.get $0
  i32.load
  i32.sub
  i32.const 4
  i32.lt_s
  if
   local.get $0
   i32.load offset=4
   local.tee $2
   i32.const 16700
   i32.gt_u
   if
    local.get $2
    i32.const 16
    i32.sub
    local.tee $3
    i32.load offset=4
    local.set $4
    local.get $3
    local.get $4
    i32.const 1
    i32.add
    i32.store offset=4
    local.get $3
    i32.load
    drop
   end
   local.get $0
   i32.load offset=4
   i32.load offset=8
   i32.const 1
   i32.shl
   i32.const 4
   i32.add
   call $~lib/typedarray/Uint8Array#constructor
   local.set $3
   local.get $0
   i32.load offset=4
   local.tee $4
   i32.const 16700
   i32.gt_u
   if
    local.get $4
    i32.const 16
    i32.sub
    call $~lib/rt/pure/decrement
   end
   local.get $0
   local.get $3
   i32.store offset=4
   local.get $0
   i32.load offset=4
   local.get $2
   i32.const 0
   call $~lib/typedarray/Uint8Array#set<~lib/typedarray/Uint8Array>
   local.get $2
   i32.const 16700
   i32.gt_u
   if
    local.get $2
    i32.const 16
    i32.sub
    call $~lib/rt/pure/decrement
   end
  end
  local.get $0
  i32.load offset=12
  i32.load offset=4
  local.get $1
  i32.store
  local.get $0
  i32.load offset=4
  local.get $0
  i32.load offset=16
  call $~lib/typedarray/Uint8Array#reverse
  local.tee $1
  local.get $0
  i32.load
  call $~lib/typedarray/Uint8Array#set<~lib/typedarray/Uint8Array>
  local.get $0
  local.get $0
  i32.load
  i32.const 4
  i32.add
  i32.store
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/ByteBuffer/ByteBuffer#putInt64 (param $0 i32) (param $1 i64)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  i32.load offset=4
  i32.load offset=8
  local.get $0
  i32.load
  i32.sub
  i32.const 8
  i32.lt_s
  if
   local.get $0
   i32.load offset=4
   local.tee $2
   i32.const 16700
   i32.gt_u
   if
    local.get $2
    i32.const 16
    i32.sub
    local.tee $3
    i32.load offset=4
    local.set $4
    local.get $3
    local.get $4
    i32.const 1
    i32.add
    i32.store offset=4
    local.get $3
    i32.load
    drop
   end
   local.get $0
   i32.load offset=4
   i32.load offset=8
   i32.const 1
   i32.shl
   i32.const 8
   i32.add
   call $~lib/typedarray/Uint8Array#constructor
   local.set $3
   local.get $0
   i32.load offset=4
   local.tee $4
   i32.const 16700
   i32.gt_u
   if
    local.get $4
    i32.const 16
    i32.sub
    call $~lib/rt/pure/decrement
   end
   local.get $0
   local.get $3
   i32.store offset=4
   local.get $0
   i32.load offset=4
   local.get $2
   i32.const 0
   call $~lib/typedarray/Uint8Array#set<~lib/typedarray/Uint8Array>
   local.get $2
   i32.const 16700
   i32.gt_u
   if
    local.get $2
    i32.const 16
    i32.sub
    call $~lib/rt/pure/decrement
   end
  end
  local.get $0
  i32.load offset=8
  i32.load offset=4
  local.get $1
  i64.store
  local.get $0
  i32.load offset=4
  local.get $0
  i32.load offset=20
  call $~lib/typedarray/Uint8Array#reverse
  local.tee $2
  local.get $0
  i32.load
  call $~lib/typedarray/Uint8Array#set<~lib/typedarray/Uint8Array>
  local.get $0
  local.get $0
  i32.load
  i32.const 8
  i32.add
  i32.store
  local.get $2
  i32.const 16700
  i32.gt_u
  if
   local.get $2
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $~lib/util/number/itoa32 (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  i32.eqz
  if
   i32.const 1552
   return
  end
  call $~lib/rt/tlsf/maybeInitialize
  local.get $0
  i32.const 31
  i32.shr_u
  local.tee $2
  if (result i32)
   i32.const 0
   local.get $0
   i32.sub
  else
   local.get $0
  end
  local.tee $1
  i32.const 100000
  i32.lt_u
  if (result i32)
   local.get $1
   i32.const 100
   i32.lt_u
   if (result i32)
    local.get $1
    i32.const 10
    i32.ge_u
    i32.const 1
    i32.add
   else
    local.get $1
    i32.const 10000
    i32.ge_u
    i32.const 3
    i32.add
    local.get $1
    i32.const 1000
    i32.ge_u
    i32.add
   end
  else
   local.get $1
   i32.const 10000000
   i32.lt_u
   if (result i32)
    local.get $1
    i32.const 1000000
    i32.ge_u
    i32.const 6
    i32.add
   else
    local.get $1
    i32.const 1000000000
    i32.ge_u
    i32.const 8
    i32.add
    local.get $1
    i32.const 100000000
    i32.ge_u
    i32.add
   end
  end
  local.tee $0
  local.get $2
  i32.add
  local.tee $3
  i32.const 1
  i32.shl
  i32.const 1
  call $~lib/rt/tlsf/allocateBlock
  i32.const 16
  i32.add
  local.tee $0
  local.get $1
  local.get $3
  call $~lib/util/number/utoa32_dec_lut
  local.get $2
  if
   local.get $0
   i32.const 45
   i32.store16
  end
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $1
   i32.load offset=4
   local.set $2
   local.get $1
   local.get $2
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $1
   i32.load
   drop
  end
  local.get $0
 )
 (func $assembly/ByteBuffer/ByteBuffer#put (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  i32.load
  local.get $0
  i32.load offset=4
  i32.load offset=8
  i32.eq
  if
   local.get $0
   i32.load offset=4
   local.tee $2
   i32.const 16700
   i32.gt_u
   if
    local.get $2
    i32.const 16
    i32.sub
    local.tee $3
    i32.load offset=4
    local.set $4
    local.get $3
    local.get $4
    i32.const 1
    i32.add
    i32.store offset=4
    local.get $3
    i32.load
    drop
   end
   local.get $0
   i32.load offset=4
   i32.load offset=8
   i32.const 1
   i32.shl
   call $~lib/typedarray/Uint8Array#constructor
   local.set $3
   local.get $0
   i32.load offset=4
   local.tee $4
   i32.const 16700
   i32.gt_u
   if
    local.get $4
    i32.const 16
    i32.sub
    call $~lib/rt/pure/decrement
   end
   local.get $0
   local.get $3
   i32.store offset=4
   local.get $0
   i32.load offset=4
   local.get $2
   i32.const 0
   call $~lib/typedarray/Uint8Array#set<~lib/typedarray/Uint8Array>
   local.get $2
   i32.const 16700
   i32.gt_u
   if
    local.get $2
    i32.const 16
    i32.sub
    call $~lib/rt/pure/decrement
   end
  end
  local.get $0
  i32.load
  local.get $0
  i32.load offset=4
  i32.load offset=4
  i32.add
  local.get $1
  i32.store8
  local.get $0
  local.get $0
  i32.load
  i32.const 1
  i32.add
  i32.store
 )
 (func $assembly/ZigZagEncoding/ZigZagEncoding.encode (param $0 i32) (param $1 i64)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $1
  i64.const 1
  i64.shl
  local.get $1
  i64.const 63
  i64.shr_s
  i64.xor
  local.tee $1
  i64.const 7
  i64.shr_u
  i64.eqz
  if
   local.get $0
   local.get $1
   i32.wrap_i64
   call $assembly/ByteBuffer/ByteBuffer#put
  else
   local.get $0
   local.get $1
   i64.const 127
   i64.and
   i64.const 128
   i64.or
   i32.wrap_i64
   call $assembly/ByteBuffer/ByteBuffer#put
   local.get $1
   i64.const 14
   i64.shr_u
   i64.eqz
   if
    local.get $0
    local.get $1
    i64.const 7
    i64.shr_u
    i32.wrap_i64
    call $assembly/ByteBuffer/ByteBuffer#put
   else
    local.get $0
    local.get $1
    i64.const 7
    i64.shr_u
    i64.const 128
    i64.or
    i32.wrap_i64
    call $assembly/ByteBuffer/ByteBuffer#put
    local.get $1
    i64.const 21
    i64.shr_u
    i64.eqz
    if
     local.get $0
     local.get $1
     i64.const 14
     i64.shr_u
     i32.wrap_i64
     call $assembly/ByteBuffer/ByteBuffer#put
    else
     local.get $0
     local.get $1
     i64.const 14
     i64.shr_u
     i64.const 128
     i64.or
     i32.wrap_i64
     call $assembly/ByteBuffer/ByteBuffer#put
     local.get $1
     i64.const 28
     i64.shr_u
     i64.eqz
     if
      local.get $0
      local.get $1
      i64.const 21
      i64.shr_u
      i32.wrap_i64
      call $assembly/ByteBuffer/ByteBuffer#put
     else
      local.get $0
      local.get $1
      i64.const 21
      i64.shr_u
      i64.const 128
      i64.or
      i32.wrap_i64
      call $assembly/ByteBuffer/ByteBuffer#put
      local.get $1
      i64.const 35
      i64.shr_u
      i64.eqz
      if
       local.get $0
       local.get $1
       i64.const 28
       i64.shr_u
       i32.wrap_i64
       call $assembly/ByteBuffer/ByteBuffer#put
      else
       local.get $0
       local.get $1
       i64.const 28
       i64.shr_u
       i64.const 128
       i64.or
       i32.wrap_i64
       call $assembly/ByteBuffer/ByteBuffer#put
       local.get $1
       i64.const 42
       i64.shr_u
       i64.eqz
       if
        local.get $0
        local.get $1
        i64.const 35
        i64.shr_u
        i32.wrap_i64
        call $assembly/ByteBuffer/ByteBuffer#put
       else
        local.get $0
        local.get $1
        i64.const 35
        i64.shr_u
        i64.const 128
        i64.or
        i32.wrap_i64
        call $assembly/ByteBuffer/ByteBuffer#put
        local.get $1
        i64.const 49
        i64.shr_u
        i64.eqz
        if
         local.get $0
         local.get $1
         i64.const 42
         i64.shr_u
         i32.wrap_i64
         call $assembly/ByteBuffer/ByteBuffer#put
        else
         local.get $0
         local.get $1
         i64.const 42
         i64.shr_u
         i64.const 128
         i64.or
         i32.wrap_i64
         call $assembly/ByteBuffer/ByteBuffer#put
         local.get $1
         i64.const 56
         i64.shr_u
         i64.eqz
         if
          local.get $0
          local.get $1
          i64.const 49
          i64.shr_u
          i32.wrap_i64
          call $assembly/ByteBuffer/ByteBuffer#put
         else
          local.get $0
          local.get $1
          i64.const 49
          i64.shr_u
          i64.const 128
          i64.or
          i32.wrap_i64
          call $assembly/ByteBuffer/ByteBuffer#put
          local.get $0
          local.get $1
          i64.const 56
          i64.shr_u
          i32.wrap_i64
          call $assembly/ByteBuffer/ByteBuffer#put
         end
        end
       end
      end
     end
    end
   end
  end
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/encoding/fillBufferFromCountsArray<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8> (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i64)
  (local $6 i32)
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $4
   local.get $2
   local.get $4
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  local.set $2
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $0
   i32.load offset=4
   local.set $4
   local.get $0
   local.get $4
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $0
   i32.load
   drop
  end
  local.get $2
  local.get $2
  i64.load offset=144
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex
  i32.const 1
  i32.add
  local.set $4
  loop $while-continue|0
   local.get $3
   local.get $4
   i32.lt_s
   if
    local.get $3
    local.tee $0
    i32.const 1
    i32.add
    local.set $3
    local.get $0
    local.get $2
    i32.load offset=160
    i32.load
    i32.load offset=4
    i32.add
    i32.load8_u
    i64.extend_i32_u
    local.tee $5
    i64.const 0
    i64.lt_u
    if
     i32.const 14832
     local.get $5
     call $~lib/util/number/utoa64
     call $~lib/string/String.__concat
     i32.const 14960
     call $~lib/string/String.__concat
     local.get $3
     call $~lib/util/number/itoa32
     call $~lib/string/String.__concat
     i32.const 15008
     call $~lib/string/String.__concat
     local.get $2
     i32.load offset=116
     local.get $3
     local.get $2
     i32.load offset=116
     i32.const 1
     i32.sub
     i32.and
     i32.add
     local.set $0
     local.get $2
     i32.load offset=104
     local.get $3
     local.get $2
     i32.load offset=108
     i32.shr_s
     i32.const 1
     i32.sub
     local.tee $1
     i32.const 0
     i32.lt_s
     if
      i32.const 0
      local.set $1
      local.get $0
      local.get $2
      i32.load offset=116
      i32.sub
      local.set $0
     end
     local.get $0
     i64.extend_i32_s
     local.get $1
     local.get $2
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shl
     local.tee $5
     local.get $2
     i64.load offset=128
     i64.or
     i64.clz
     i32.wrap_i64
     i32.sub
     local.set $0
     local.get $5
     local.get $0
     local.get $2
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shr_u
     i32.wrap_i64
     i64.extend_i32_s
     local.get $0
     local.get $2
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shl
     call $~lib/util/number/utoa64
     call $~lib/string/String.__concat
     i32.const 15104
     call $~lib/string/String.__concat
     local.get $2
     i32.load offset=116
     local.get $3
     local.get $2
     i32.load offset=116
     i32.const 1
     i32.sub
     i32.and
     i32.add
     local.set $1
     local.get $3
     local.get $2
     local.tee $0
     i32.load offset=108
     i32.shr_s
     i32.const 1
     i32.sub
     local.tee $3
     i32.const 0
     i32.lt_s
     if
      i32.const 0
      local.set $3
      local.get $1
      local.get $0
      i32.load offset=116
      i32.sub
      local.set $1
     end
     local.get $0
     i32.load offset=104
     local.get $1
     i64.extend_i32_s
     local.get $3
     local.get $0
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shl
     local.tee $5
     local.get $0
     i64.load offset=128
     i64.or
     i64.clz
     i32.wrap_i64
     i32.sub
     local.set $1
     local.get $5
     local.get $1
     local.get $0
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shr_u
     i32.wrap_i64
     i64.extend_i32_s
     local.get $1
     local.get $0
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shl
     i64.const 1
     local.get $0
     i32.load offset=112
     local.get $0
     i32.load offset=104
     local.get $5
     local.get $0
     i64.load offset=128
     i64.or
     i64.clz
     i32.wrap_i64
     i32.sub
     i32.add
     i64.extend_i32_s
     i64.shl
     i64.add
     call $~lib/util/number/utoa64
     call $~lib/string/String.__concat
     i32.const 14800
     call $~lib/string/String.__concat
     i32.const 15136
     i32.const 31
     i32.const 7
     call $~lib/builtins/abort
     unreachable
    end
    i32.const 0
    local.set $0
    local.get $5
    i64.eqz
    if
     i32.const 1
     local.set $0
     loop $while-continue|1
      local.get $3
      local.get $4
      i32.lt_s
      if (result i32)
       local.get $3
       local.get $2
       i32.load offset=160
       i32.load
       i32.load offset=4
       i32.add
       i32.load8_u
       i64.extend_i32_u
       i64.eqz
      else
       i32.const 0
      end
      if
       local.get $0
       i32.const 1
       i32.add
       local.set $0
       local.get $3
       i32.const 1
       i32.add
       local.set $3
       br $while-continue|1
      end
     end
    end
    local.get $0
    i32.const 1
    i32.gt_s
    if
     local.get $1
     i32.const 0
     local.get $0
     i32.sub
     i64.extend_i32_s
     call $assembly/ZigZagEncoding/ZigZagEncoding.encode
    else
     local.get $1
     local.get $5
     call $assembly/ZigZagEncoding/ZigZagEncoding.encode
    end
    br $while-continue|0
   end
  end
  local.get $2
  i32.const 16700
  i32.gt_u
  if
   local.get $2
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/encoding/encodeIntoByteBuffer<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8> (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $1
  i32.load
  local.set $3
  local.get $1
  i32.const 478450451
  call $assembly/ByteBuffer/ByteBuffer#putInt32
  local.get $1
  i32.const 0
  call $assembly/ByteBuffer/ByteBuffer#putInt32
  local.get $1
  i32.const 1
  call $assembly/ByteBuffer/ByteBuffer#putInt32
  local.get $1
  local.get $0
  i32.load8_u offset=32
  call $assembly/ByteBuffer/ByteBuffer#putInt32
  local.get $1
  local.get $0
  i64.load offset=24
  call $assembly/ByteBuffer/ByteBuffer#putInt64
  local.get $1
  local.get $0
  i64.load offset=16
  call $assembly/ByteBuffer/ByteBuffer#putInt64
  local.get $1
  i64.const 1
  call $assembly/ByteBuffer/ByteBuffer#putInt64
  local.get $1
  i32.load
  local.set $4
  local.get $0
  local.get $1
  call $assembly/encoding/fillBufferFromCountsArray<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>
  local.get $1
  i32.load
  local.set $2
  local.get $1
  local.get $3
  i32.const 4
  i32.add
  i32.store
  local.get $1
  local.get $2
  local.get $4
  i32.sub
  call $assembly/ByteBuffer/ByteBuffer#putInt32
  local.get $1
  local.get $2
  i32.store
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $~lib/typedarray/Uint8Array#slice (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $4
   i32.load offset=4
   local.set $3
   local.get $4
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $4
   i32.load
   drop
  end
  local.get $0
  i32.load offset=8
  local.set $3
  local.get $1
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $1
   local.get $3
   i32.add
   local.tee $1
   i32.const 0
   local.get $1
   i32.const 0
   i32.gt_s
   select
  else
   local.get $1
   local.get $3
   local.get $1
   local.get $3
   i32.lt_s
   select
  end
  local.set $4
  local.get $2
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $2
   local.get $3
   i32.add
   local.tee $1
   i32.const 0
   local.get $1
   i32.const 0
   i32.gt_s
   select
  else
   local.get $2
   local.get $3
   local.get $2
   local.get $3
   i32.lt_s
   select
  end
  local.get $4
  i32.sub
  local.tee $1
  i32.const 0
  local.get $1
  i32.const 0
  i32.gt_s
  select
  local.tee $5
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $1
  local.set $2
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $2
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $6
   local.get $3
   local.get $6
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $2
  i32.load offset=4
  local.get $4
  local.get $0
  i32.load offset=4
  i32.add
  local.get $5
  call $~lib/memory/memory.copy
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $2
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#encode (param $0 i32) (result i32)
  (local $1 i32)
  local.get $0
  i32.load
  call $assembly/ByteBuffer/ByteBuffer.allocate
  local.tee $0
  call $assembly/encoding/encodeIntoByteBuffer<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>
  local.get $0
  i32.load offset=4
  i32.const 0
  local.get $0
  i32.load
  call $~lib/typedarray/Uint8Array#slice
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $~lib/typedarray/Uint8Array#fill (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $1
   i32.load offset=4
   local.set $2
   local.get $1
   local.get $2
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $1
   i32.load
   drop
  end
  local.get $0
  local.tee $1
  i32.load offset=4
  local.set $3
  i32.const 0
  local.get $0
  i32.load offset=8
  local.tee $2
  i32.const 0
  local.get $2
  i32.lt_s
  select
  local.tee $0
  i32.const 2147483647
  local.get $2
  i32.const 2147483647
  local.get $2
  i32.lt_s
  select
  local.tee $2
  i32.lt_s
  if
   local.get $0
   local.get $3
   i32.add
   local.get $2
   local.get $0
   i32.sub
   call $~lib/memory/memory.fill
  end
  local.get $1
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#reset (param $0 i32)
  (local $1 i32)
  local.get $0
  i32.load
  local.tee $0
  i32.load offset=160
  i32.load
  call $~lib/typedarray/Uint8Array#fill
  local.tee $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $0
  i64.const 0
  i64.store offset=168
  local.get $0
  i64.const 0
  i64.store offset=64
  local.get $0
  i64.const 0
  i64.store offset=72
  local.get $0
  i64.const 0
  i64.store offset=144
  local.get $0
  i64.const -1
  i64.store offset=152
 )
 (func $assembly/AbstractHistogramBase/AbstractHistogramBase<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#constructor (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.eqz
  if
   call $~lib/rt/tlsf/maybeInitialize
   i32.const 104
   i32.const 21
   call $~lib/rt/tlsf/allocateBlock
   i32.const 16
   i32.add
   local.tee $0
   i32.const 16700
   i32.gt_u
   if
    local.get $0
    i32.const 16
    i32.sub
    local.tee $1
    i32.load offset=4
    local.set $2
    local.get $1
    local.get $2
    i32.const 1
    i32.add
    i32.store offset=4
    local.get $1
    i32.load
    drop
   end
  end
  local.get $0
  f64.const 0
  f64.store
  local.get $0
  i32.const 0
  i32.store8 offset=8
  local.get $0
  i64.const 0
  i64.store offset=16
  local.get $0
  i64.const 0
  i64.store offset=24
  local.get $0
  i32.const 0
  i32.store8 offset=32
  local.get $0
  i64.const 0
  i64.store offset=40
  local.get $0
  i32.const 0
  i32.store offset=48
  local.get $0
  i32.const 0
  i32.store offset=52
  local.get $0
  i64.const 0
  i64.store offset=56
  local.get $0
  i64.const -1
  i64.store offset=64
  local.get $0
  i64.const 0
  i64.store offset=72
  local.get $0
  i32.const 1152
  i32.store offset=80
  local.get $0
  f64.const 1
  f64.store offset=88
  local.get $0
  i32.const 0
  i32.store offset=96
  local.get $0
  i32.const 0
  i32.store offset=100
  local.get $0
  f64.const 0
  f64.store
  local.get $0
  i64.const 0
  i64.store offset=16
  local.get $0
  i64.const 0
  i64.store offset=24
  local.get $0
  i32.const 0
  i32.store8 offset=32
  local.get $0
  i64.const 0
  i64.store offset=40
  local.get $0
  i32.const 0
  i32.store offset=48
  local.get $0
  i32.const 0
  i32.store offset=52
  local.get $0
  i64.const 0
  i64.store offset=56
  local.get $0
 )
 (func $assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>#constructor (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  call $~lib/rt/tlsf/maybeInitialize
  i32.const 4
  i32.const 18
  call $~lib/rt/tlsf/allocateBlock
  i32.const 16
  i32.add
  local.tee $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   local.tee $1
   i32.load offset=4
   local.set $2
   local.get $1
   local.get $2
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $1
   i32.load
   drop
  end
  local.get $3
  i32.const 0
  i32.store
  call $~lib/rt/tlsf/maybeInitialize
  i32.const 12
  i32.const 17
  call $~lib/rt/tlsf/allocateBlock
  i32.const 16
  i32.add
  local.tee $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $4
   local.get $2
   local.get $4
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $1
  local.get $0
  i32.const 1
  call $~lib/arraybuffer/ArrayBufferView#constructor
  local.tee $0
  local.tee $2
  local.get $3
  i32.load
  local.tee $1
  i32.ne
  if
   local.get $2
   i32.const 16700
   i32.gt_u
   if
    local.get $2
    i32.const 16
    i32.sub
    local.tee $4
    i32.load offset=4
    local.set $5
    local.get $4
    local.get $5
    i32.const 1
    i32.add
    i32.store offset=4
    local.get $4
    i32.load
    drop
   end
   local.get $1
   i32.const 16700
   i32.gt_u
   if
    local.get $1
    i32.const 16
    i32.sub
    call $~lib/rt/pure/decrement
   end
  end
  local.get $3
  local.get $2
  i32.store
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $3
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#constructor (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  call $~lib/rt/tlsf/maybeInitialize
  i32.const 120
  i32.const 22
  call $~lib/rt/tlsf/allocateBlock
  i32.const 16
  i32.add
  local.tee $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $1
  i32.const 0
  i32.store
  local.get $1
  f64.const 0
  f64.store offset=8
  local.get $1
  f64.const 0
  f64.store offset=16
  local.get $1
  i32.const 0
  i32.store8 offset=24
  local.get $1
  i32.const 0
  i32.store offset=28
  local.get $1
  i64.const 0
  i64.store offset=32
  local.get $1
  i32.const 0
  i32.store offset=40
  local.get $1
  i64.const 0
  i64.store offset=48
  local.get $1
  i64.const 0
  i64.store offset=56
  local.get $1
  i64.const 0
  i64.store offset=64
  local.get $1
  i64.const 0
  i64.store offset=72
  local.get $1
  i64.const 0
  i64.store offset=80
  local.get $1
  i64.const 0
  i64.store offset=88
  local.get $1
  i64.const 0
  i64.store offset=96
  local.get $1
  i64.const 0
  i64.store offset=104
  local.get $1
  i32.const 0
  i32.store8 offset=112
  local.get $1
  call $assembly/HistogramIterationValue/HistogramIterationValue#constructor
  i32.store offset=116
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $1
  i32.const 0
  i32.store
  local.get $1
  f64.const 0
  f64.store offset=8
  local.get $1
  f64.const 0
  f64.store offset=16
  local.get $1
  i32.const 0
  i32.store8 offset=24
  local.get $1
  local.get $0
  i32.const 1
  call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#doReset
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $1
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#constructor (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  call $~lib/rt/tlsf/maybeInitialize
  i32.const 96
  i32.const 23
  call $~lib/rt/tlsf/allocateBlock
  i32.const 16
  i32.add
  local.tee $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $1
  i32.const 0
  i32.store
  local.get $1
  i32.const 0
  i32.store offset=4
  local.get $1
  i64.const 0
  i64.store offset=8
  local.get $1
  i32.const 0
  i32.store offset=16
  local.get $1
  i64.const 0
  i64.store offset=24
  local.get $1
  i64.const 0
  i64.store offset=32
  local.get $1
  i64.const 0
  i64.store offset=40
  local.get $1
  i64.const 0
  i64.store offset=48
  local.get $1
  i64.const 0
  i64.store offset=56
  local.get $1
  i64.const 0
  i64.store offset=64
  local.get $1
  i64.const 0
  i64.store offset=72
  local.get $1
  i64.const 0
  i64.store offset=80
  local.get $1
  i32.const 0
  i32.store8 offset=88
  local.get $1
  call $assembly/HistogramIterationValue/HistogramIterationValue#constructor
  i32.store offset=92
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $1
  local.get $0
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#doReset
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $1
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#init (param $0 i32) (param $1 i64) (param $2 i64) (param $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i64)
  (local $8 i32)
  local.get $0
  local.get $1
  i64.store offset=24
  local.get $0
  local.get $2
  i64.store offset=16
  local.get $0
  local.get $3
  i32.store8 offset=32
  local.get $0
  f64.const 1
  f64.store offset=88
  f64.const 10
  local.get $3
  f64.convert_i32_u
  call $~lib/math/NativeMath.pow
  i64.trunc_f64_u
  i64.const 2
  i64.mul
  local.set $7
  local.get $0
  local.get $1
  f64.convert_i64_u
  call $~lib/math/NativeMath.log2
  f64.floor
  i32.trunc_f64_s
  i32.store offset=112
  local.get $0
  i64.const 1
  local.get $0
  i32.load offset=112
  i64.extend_i32_s
  i64.shl
  i64.const 1
  i64.sub
  i64.store offset=136
  local.get $0
  local.get $7
  f64.convert_i64_u
  call $~lib/math/NativeMath.log2
  f64.ceil
  i32.trunc_f64_s
  local.tee $3
  i32.const 1
  i32.sub
  i32.store offset=108
  local.get $0
  i32.const 1
  local.get $3
  i32.shl
  i32.store offset=48
  local.get $0
  local.get $0
  i32.load offset=48
  i32.const 1
  i32.shr_s
  i32.store offset=116
  local.get $0
  local.get $0
  i32.load offset=48
  i64.extend_i32_s
  i64.const 1
  i64.sub
  local.get $0
  i32.load offset=112
  i64.extend_i32_s
  i64.shl
  i64.store offset=128
  local.get $0
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#establishSize
  local.get $0
  i32.load offset=52
  call $assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>#constructor
  local.tee $3
  local.set $4
  local.get $3
  local.get $0
  i32.load offset=160
  local.tee $5
  i32.ne
  if
   local.get $4
   i32.const 16700
   i32.gt_u
   if
    local.get $4
    i32.const 16
    i32.sub
    local.tee $6
    i32.load offset=4
    local.set $8
    local.get $6
    local.get $8
    i32.const 1
    i32.add
    i32.store offset=4
    local.get $6
    i32.load
    drop
   end
   local.get $5
   i32.const 16700
   i32.gt_u
   if
    local.get $5
    i32.const 16
    i32.sub
    call $~lib/rt/pure/decrement
   end
  end
  local.get $0
  local.get $4
  i32.store offset=160
  local.get $0
  i32.const 0
  local.get $0
  i32.load offset=112
  i32.sub
  local.get $0
  i32.load offset=108
  i32.sub
  i32.const 63
  i32.add
  i32.store offset=104
  local.get $0
  call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#constructor
  local.set $5
  local.get $0
  i32.load offset=96
  local.tee $4
  i32.const 16700
  i32.gt_u
  if
   local.get $4
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $0
  local.get $5
  i32.store offset=96
  local.get $0
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#constructor
  local.set $5
  local.get $0
  i32.load offset=100
  local.tee $4
  i32.const 16700
  i32.gt_u
  if
   local.get $4
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $0
  local.get $5
  i32.store offset=100
  local.get $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#constructor (param $0 i64) (param $1 i64) (param $2 i32) (result i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 f64)
  call $~lib/rt/tlsf/maybeInitialize
  i32.const 176
  i32.const 20
  call $~lib/rt/tlsf/allocateBlock
  i32.const 16
  i32.add
  local.tee $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   local.tee $4
   i32.load offset=4
   local.set $5
   local.get $4
   local.get $5
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $4
   i32.load
   drop
  end
  local.get $3
  i32.const 0
  i32.store offset=104
  local.get $3
  i32.const 0
  i32.store offset=108
  local.get $3
  i32.const 0
  i32.store offset=112
  local.get $3
  i32.const 0
  i32.store offset=116
  local.get $3
  i64.const 0
  i64.store offset=120
  local.get $3
  i64.const 0
  i64.store offset=128
  local.get $3
  i64.const 0
  i64.store offset=136
  local.get $3
  i64.const 0
  i64.store offset=144
  local.get $3
  i64.const -1
  i64.store offset=152
  local.get $3
  i32.const 0
  i32.store offset=160
  local.get $3
  i64.const 0
  i64.store offset=168
  local.get $3
  call $assembly/AbstractHistogramBase/AbstractHistogramBase<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#constructor
  local.set $3
  local.get $0
  i64.const 1
  i64.lt_u
  if
   i32.const 9856
   i32.const 9952
   i32.const 61
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $1
  local.get $0
  i64.const 2
  i64.mul
  i64.lt_u
  if
   i32.const 10016
   i32.const 9952
   i32.const 64
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  i32.const 1
  local.get $2
  i32.const 255
  i32.and
  local.tee $4
  i32.const 5
  i32.gt_u
  local.get $4
  i32.const 0
  i32.lt_u
  select
  if
   i32.const 10224
   i32.const 9952
   i32.const 72
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  global.get $assembly/AbstractHistogramBase/AbstractHistogramBase.identityBuilder
  local.tee $6
  f64.const 1
  f64.add
  global.set $assembly/AbstractHistogramBase/AbstractHistogramBase.identityBuilder
  local.get $3
  local.get $6
  f64.store
  local.get $3
  local.get $0
  local.get $1
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#init
  local.get $3
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#constructor (param $0 i32) (param $1 f64) (param $2 f64) (param $3 f64) (param $4 i32) (param $5 i32) (result i32)
  (local $6 i32)
  (local $7 i32)
  local.get $0
  i32.eqz
  if
   call $~lib/rt/tlsf/maybeInitialize
   i32.const 4
   i32.const 19
   call $~lib/rt/tlsf/allocateBlock
   i32.const 16
   i32.add
   local.tee $0
   i32.const 16700
   i32.gt_u
   if
    local.get $0
    i32.const 16
    i32.sub
    local.tee $6
    i32.load offset=4
    local.set $7
    local.get $6
    local.get $7
    i32.const 1
    i32.add
    i32.store offset=4
    local.get $6
    i32.load
    drop
   end
  end
  local.get $0
  i32.const 0
  i32.store
  local.get $5
  i32.const 16700
  i32.gt_u
  if
   local.get $5
   i32.const 16
   i32.sub
   local.tee $6
   i32.load offset=4
   local.set $7
   local.get $6
   local.get $7
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $6
   i32.load
   drop
  end
  local.get $5
  if
   local.get $5
   local.get $0
   i32.load
   local.tee $4
   i32.ne
   if
    local.get $5
    i32.const 16700
    i32.gt_u
    if
     local.get $5
     i32.const 16
     i32.sub
     local.tee $6
     i32.load offset=4
     local.set $7
     local.get $6
     local.get $7
     i32.const 1
     i32.add
     i32.store offset=4
     local.get $6
     i32.load
     drop
    end
    local.get $4
    i32.const 16700
    i32.gt_u
    if
     local.get $4
     i32.const 16
     i32.sub
     call $~lib/rt/pure/decrement
    end
   end
   local.get $0
   local.get $5
   i32.store
  else
   local.get $1
   i64.trunc_f64_u
   local.get $2
   i64.trunc_f64_u
   local.get $3
   i32.trunc_f64_u
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#constructor
   local.set $6
   local.get $0
   i32.load
   local.tee $7
   i32.const 16700
   i32.gt_u
   if
    local.get $7
    i32.const 16
    i32.sub
    call $~lib/rt/pure/decrement
   end
   local.get $0
   local.get $6
   i32.store
   local.get $0
   i32.load
   local.get $4
   i32.store8 offset=8
  end
  local.get $5
  i32.const 16700
  i32.gt_u
  if
   local.get $5
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $0
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#next (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i64)
  (local $3 i32)
  loop $while-continue|0
   local.get $0
   i32.load offset=16
   local.get $0
   i32.load offset=4
   i32.load offset=52
   i32.lt_s
   if
    local.get $0
    local.get $0
    i32.load offset=4
    i32.load offset=160
    i32.load
    i32.load offset=4
    local.get $0
    i32.load offset=16
    i32.const 1
    i32.shl
    i32.add
    i32.load16_u
    i64.extend_i32_u
    i64.store offset=80
    local.get $0
    i32.load8_u offset=88
    if
     local.get $0
     local.get $0
     i64.load offset=56
     local.get $0
     i64.load offset=80
     i64.add
     i64.store offset=56
     local.get $0
     i32.load offset=4
     local.tee $1
     i32.load offset=104
     local.get $0
     i64.load offset=24
     local.tee $2
     local.get $1
     i64.load offset=128
     i64.or
     i64.clz
     i32.wrap_i64
     i32.sub
     local.set $3
     local.get $0
     local.get $0
     i64.load offset=64
     local.get $0
     i64.load offset=80
     local.get $2
     local.get $3
     local.get $1
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shr_u
     i32.wrap_i64
     i64.extend_i32_s
     local.get $3
     local.get $1
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shl
     i64.const 1
     local.get $1
     i32.load offset=112
     local.get $1
     i32.load offset=104
     local.get $2
     local.get $1
     i64.load offset=128
     i64.or
     i64.clz
     i32.wrap_i64
     i32.sub
     i32.add
     i64.extend_i32_s
     i64.shl
     i64.add
     i64.const 1
     i64.sub
     i64.mul
     i64.add
     i64.store offset=64
     local.get $0
     i32.const 0
     i32.store8 offset=88
    end
    local.get $0
    i32.load offset=4
    i32.load offset=160
    i32.load
    i32.load offset=4
    local.get $0
    i32.load offset=16
    i32.const 1
    i32.shl
    i32.add
    i32.load16_u
    i64.extend_i32_u
    i64.const 0
    i64.ne
    if (result i32)
     local.get $0
     i32.load
     local.get $0
     i32.load offset=16
     i32.ne
    else
     i32.const 0
    end
    if
     local.get $0
     i32.load offset=4
     local.tee $1
     i32.load offset=104
     local.get $0
     i64.load offset=24
     local.tee $2
     local.get $1
     i64.load offset=128
     i64.or
     i64.clz
     i32.wrap_i64
     i32.sub
     local.set $3
     local.get $0
     i32.load offset=92
     local.get $2
     local.get $3
     local.get $1
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shr_u
     i32.wrap_i64
     i64.extend_i32_s
     local.get $3
     local.get $1
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shl
     i64.const 1
     local.get $1
     i32.load offset=112
     local.get $1
     i32.load offset=104
     local.get $2
     local.get $1
     i64.load offset=128
     i64.or
     i64.clz
     i32.wrap_i64
     i32.sub
     i32.add
     i64.extend_i32_s
     i64.shl
     i64.add
     i64.const 1
     i64.sub
     local.tee $2
     i64.store
     local.get $0
     i32.load offset=92
     local.get $0
     i64.load offset=40
     i64.store offset=8
     local.get $0
     i32.load offset=92
     local.get $0
     i64.load offset=80
     i64.store offset=16
     local.get $0
     i32.load offset=92
     local.get $0
     i64.load offset=56
     local.get $0
     i64.load offset=48
     i64.sub
     i64.store offset=24
     local.get $0
     i32.load offset=92
     local.get $0
     i64.load offset=56
     i64.store offset=32
     local.get $0
     i32.load offset=92
     local.get $0
     i64.load offset=64
     i64.store offset=40
     local.get $0
     i32.load offset=92
     f64.const 100
     local.get $0
     i64.load offset=56
     f64.convert_i64_u
     f64.mul
     local.get $0
     i64.load offset=72
     f64.convert_i64_u
     f64.div
     f64.store offset=48
     local.get $0
     i32.load offset=92
     f64.const 100
     local.get $0
     i64.load offset=56
     f64.convert_i64_u
     f64.mul
     local.get $0
     i64.load offset=72
     f64.convert_i64_u
     f64.div
     f64.store offset=56
     local.get $0
     local.get $2
     i64.store offset=40
     local.get $0
     local.get $0
     i64.load offset=56
     i64.store offset=48
     local.get $0
     local.get $0
     i32.load offset=16
     i32.store
     local.get $0
     i32.load offset=4
     i64.load offset=168
     local.get $0
     i64.load offset=8
     i64.ne
     if
      i32.const 12704
      i32.const 12608
      i32.const 128
      i32.const 11
      call $~lib/builtins/abort
      unreachable
     end
     local.get $0
     i32.load offset=92
     local.tee $0
     i32.const 16700
     i32.gt_u
     if
      local.get $0
      i32.const 16
      i32.sub
      local.tee $1
      i32.load offset=4
      local.set $3
      local.get $1
      local.get $3
      i32.const 1
      i32.add
      i32.store offset=4
      local.get $1
      i32.load
      drop
     end
     local.get $0
     return
    end
    local.get $0
    call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#incrementSubBucket
    br $while-continue|0
   end
  end
  i32.const 12800
  i32.const 12608
  i32.const 134
  i32.const 5
  call $~lib/builtins/abort
  unreachable
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getMean (param $0 i32) (result f64)
  (local $1 i32)
  (local $2 i64)
  (local $3 i32)
  local.get $0
  i64.load offset=168
  i64.eqz
  if
   f64.const 0
   return
  end
  local.get $0
  i32.load offset=100
  local.tee $1
  local.get $1
  i32.load offset=4
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#doReset
  loop $while-continue|0
   local.get $0
   i32.load offset=100
   call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#hasNext
   if
    local.get $2
    local.get $0
    i32.load offset=100
    call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#next
    local.tee $1
    i64.load
    local.tee $2
    local.get $0
    i32.load offset=104
    local.get $2
    local.get $0
    i64.load offset=128
    i64.or
    i64.clz
    i32.wrap_i64
    i32.sub
    local.tee $3
    local.get $0
    i32.load offset=112
    i32.add
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    i64.extend_i32_s
    local.get $3
    local.get $0
    i32.load offset=112
    i32.add
    i64.extend_i32_s
    i64.shl
    i64.const 1
    local.get $0
    i32.load offset=112
    local.get $0
    i32.load offset=104
    local.get $2
    local.get $0
    i64.load offset=128
    i64.or
    i64.clz
    i32.wrap_i64
    i32.sub
    i32.add
    i64.extend_i32_s
    i64.shl
    i64.const 1
    i64.shr_u
    i64.add
    local.get $1
    i64.load offset=16
    i64.mul
    i64.add
    local.set $2
    local.get $1
    i32.const 16700
    i32.gt_u
    if
     local.get $1
     i32.const 16
     i32.sub
     call $~lib/rt/pure/decrement
    end
    br $while-continue|0
   end
  end
  local.get $2
  f64.convert_i64_u
  local.get $0
  i64.load offset=168
  f64.convert_i64_u
  f64.div
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#computeStdDeviation (param $0 i32) (param $1 f64) (result f64)
  (local $2 i32)
  (local $3 f64)
  (local $4 i64)
  (local $5 i32)
  local.get $0
  i64.load offset=168
  i64.eqz
  if
   f64.const 0
   return
  end
  local.get $0
  i32.load offset=100
  local.tee $2
  local.get $2
  i32.load offset=4
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#doReset
  loop $while-continue|0
   local.get $0
   i32.load offset=100
   call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#hasNext
   if
    local.get $3
    local.get $0
    i32.load offset=100
    call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#next
    local.tee $2
    i64.load
    local.tee $4
    local.get $0
    i32.load offset=104
    local.get $4
    local.get $0
    i64.load offset=128
    i64.or
    i64.clz
    i32.wrap_i64
    i32.sub
    local.tee $5
    local.get $0
    i32.load offset=112
    i32.add
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    i64.extend_i32_s
    local.get $5
    local.get $0
    i32.load offset=112
    i32.add
    i64.extend_i32_s
    i64.shl
    i64.const 1
    local.get $0
    i32.load offset=112
    local.get $0
    i32.load offset=104
    local.get $4
    local.get $0
    i64.load offset=128
    i64.or
    i64.clz
    i32.wrap_i64
    i32.sub
    i32.add
    i64.extend_i32_s
    i64.shl
    i64.const 1
    i64.shr_u
    i64.add
    f64.convert_i64_u
    local.get $1
    f64.sub
    local.tee $3
    local.get $3
    f64.mul
    local.get $2
    i64.load offset=24
    f64.convert_i64_u
    f64.mul
    f64.add
    local.set $3
    local.get $2
    i32.const 16700
    i32.gt_u
    if
     local.get $2
     i32.const 16
     i32.sub
     call $~lib/rt/pure/decrement
    end
    br $while-continue|0
   end
  end
  local.get $3
  local.get $0
  i64.load offset=168
  f64.convert_i64_u
  f64.div
  f64.sqrt
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#get:stdDeviation (param $0 i32) (result f64)
  block $__inlined_func$assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getStdDeviation (result f64)
   f64.const 0
   local.get $0
   i32.load
   local.tee $0
   i64.load offset=168
   i64.eqz
   br_if $__inlined_func$assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getStdDeviation
   drop
   local.get $0
   local.get $0
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getMean
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#computeStdDeviation
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#get:mean (param $0 i32) (result f64)
  local.get $0
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getMean
 )
 (func $~lib/typedarray/Uint16Array#set<~lib/typedarray/Uint16Array> (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $1
  i32.load offset=8
  i32.const 1
  i32.shr_u
  local.get $0
  i32.load offset=8
  i32.const 1
  i32.shr_u
  i32.gt_s
  if
   i32.const 13120
   i32.const 13184
   i32.const 1775
   i32.const 47
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i32.load offset=4
  local.get $1
  i32.load offset=4
  local.get $1
  i32.load offset=8
  call $~lib/memory/memory.copy
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#resize (param $0 i32) (param $1 i64)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#establishSize
  local.get $0
  i32.load offset=160
  local.set $2
  local.get $0
  i32.load offset=52
  call $assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>#constructor
  local.tee $3
  i32.load
  local.get $2
  i32.load
  call $~lib/typedarray/Uint16Array#set<~lib/typedarray/Uint16Array>
  local.get $0
  i32.load offset=160
  local.tee $2
  i32.const 16700
  i32.gt_u
  if
   local.get $2
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $0
  local.get $3
  i32.store offset=160
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#addToCountAtIndex (param $0 i32) (param $1 i32) (param $2 i64)
  local.get $2
  local.get $0
  i32.load offset=160
  i32.load
  i32.load offset=4
  local.get $1
  i32.const 1
  i32.shl
  i32.add
  i32.load16_u
  i64.extend_i32_u
  i64.add
  local.tee $2
  i64.const 0
  i64.lt_u
  if
   i32.const 0
   i32.const 9952
   i32.const 611
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i32.load offset=160
  i32.load
  i32.load offset=4
  local.get $1
  i32.const 1
  i32.shl
  i32.add
  local.get $2
  i64.store16
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#handleRecordException (param $0 i32) (param $1 i64) (param $2 i64)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  local.get $0
  i32.load8_u offset=8
  i32.eqz
  if
   i32.const 12992
   local.get $2
   call $~lib/util/number/utoa64
   call $~lib/string/String.__concat
   i32.const 13024
   call $~lib/string/String.__concat
   i32.const 9952
   i32.const 225
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#resize
  local.get $0
  local.get $0
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#addToCountAtIndex
  local.get $0
  i32.load offset=116
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $5
  local.get $0
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  i32.add
  local.set $6
  local.get $5
  local.get $0
  local.tee $3
  local.tee $4
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.tee $5
  i32.const 0
  i32.lt_s
  if
   i32.const 0
   local.set $5
   local.get $6
   local.get $3
   i32.load offset=116
   i32.sub
   local.set $6
  end
  local.get $4
  i32.load offset=104
  local.get $6
  i64.extend_i32_s
  local.get $5
  local.get $3
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  local.tee $1
  local.get $4
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  local.set $0
  local.get $3
  local.get $1
  local.get $0
  local.get $4
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shr_u
  i32.wrap_i64
  i64.extend_i32_s
  local.get $0
  local.get $4
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.const 1
  local.get $4
  i32.load offset=112
  local.get $4
  i32.load offset=104
  local.get $1
  local.get $4
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.add
  i64.const 1
  i64.sub
  i64.store offset=16
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordSingleValue (param $0 i32) (param $1 i64)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex
  local.tee $2
  local.get $0
  i32.load offset=52
  i32.ge_s
  if
   local.get $0
   i64.const 1
   local.get $1
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#handleRecordException
  else
   local.get $0
   i32.load offset=160
   i32.load
   i32.load offset=4
   local.get $2
   i32.const 1
   i32.shl
   i32.add
   i32.load16_u
   i32.const 1
   i32.add
   local.tee $3
   i32.const 65535
   i32.and
   i32.const 0
   i32.lt_u
   if
    local.get $3
    i32.const 65535
    i32.and
    call $~lib/util/number/utoa32
    i32.const 13248
    call $~lib/string/String.__concat
    i32.const 9952
    i32.const 593
    i32.const 7
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   i32.load offset=160
   i32.load
   i32.load offset=4
   local.get $2
   i32.const 1
   i32.shl
   i32.add
   local.get $3
   i32.store16
  end
  local.get $1
  local.get $0
  i64.load offset=144
  i64.gt_u
  if
   local.get $0
   local.get $1
   local.get $0
   i64.load offset=136
   i64.add
   i64.store offset=144
  end
  local.get $1
  local.get $0
  i64.load offset=152
  i64.lt_u
  if (result i32)
   local.get $1
   i64.const 0
   i64.ne
  else
   i32.const 0
  end
  if
   local.get $1
   local.get $0
   i64.load offset=136
   i64.gt_u
   if
    local.get $0
    local.get $1
    local.get $0
    i64.load offset=136
    i64.const -1
    i64.xor
    i64.and
    i64.store offset=152
   end
  end
  local.get $0
  local.get $0
  i64.load offset=168
  i64.const 1
  i64.add
  i64.store offset=168
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordValue (param $0 i32) (param $1 f64)
  local.get $0
  i32.load
  local.get $1
  i64.trunc_f64_u
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordSingleValue
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordCountAtValue (param $0 i32) (param $1 i64) (param $2 i64)
  (local $3 i32)
  local.get $0
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex
  local.tee $3
  local.get $0
  i32.load offset=52
  i32.ge_s
  if
   local.get $0
   local.get $1
   local.get $2
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#handleRecordException
  else
   local.get $0
   local.get $3
   local.get $1
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#addToCountAtIndex
  end
  local.get $2
  local.get $0
  i64.load offset=144
  i64.gt_u
  if
   local.get $0
   local.get $2
   local.get $0
   i64.load offset=136
   i64.add
   i64.store offset=144
  end
  local.get $2
  local.get $0
  i64.load offset=152
  i64.lt_u
  if (result i32)
   local.get $2
   i64.const 0
   i64.ne
  else
   i32.const 0
  end
  if
   local.get $2
   local.get $0
   i64.load offset=136
   i64.gt_u
   if
    local.get $0
    local.get $2
    local.get $0
    i64.load offset=136
    i64.const -1
    i64.xor
    i64.and
    i64.store offset=152
   end
  end
  local.get $0
  local.get $1
  local.get $0
  i64.load offset=168
  i64.add
  i64.store offset=168
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordValueWithCount (param $0 i32) (param $1 f64) (param $2 f64)
  local.get $0
  i32.load
  local.get $2
  i64.trunc_f64_u
  local.get $1
  i64.trunc_f64_u
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordCountAtValue
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordValueWithExpectedInterval (param $0 i32) (param $1 f64) (param $2 f64)
  (local $3 i64)
  (local $4 i64)
  block $__inlined_func$assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordSingleValueWithExpectedInterval
   local.get $2
   i64.trunc_f64_u
   local.set $4
   local.get $0
   i32.load
   local.tee $0
   local.get $1
   i64.trunc_f64_u
   local.tee $3
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordSingleValue
   i32.const 1
   local.get $4
   i64.eqz
   local.get $3
   local.get $4
   i64.lt_u
   select
   br_if $__inlined_func$assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordSingleValueWithExpectedInterval
   local.get $3
   local.get $4
   i64.sub
   local.set $3
   loop $for-loop|0
    local.get $3
    local.get $4
    i64.ge_u
    if
     local.get $0
     local.get $3
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordSingleValue
     local.get $3
     local.get $4
     i64.sub
     local.set $3
     br $for-loop|0
    end
   end
  end
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getValueAtPercentile (param $0 i32) (param $1 f64) (result i64)
  (local $2 i32)
  (local $3 i64)
  (local $4 f64)
  (local $5 i32)
  (local $6 i64)
  local.get $1
  f64.const 100
  f64.min
  f64.const 100
  f64.div
  local.get $0
  i64.load offset=168
  f64.convert_i64_u
  f64.mul
  local.set $4
  i32.const 1
  global.set $~argumentsLength
  local.get $4
  local.get $4
  local.get $4
  i64.reinterpret_f64
  i64.const 1
  i64.xor
  f64.reinterpret_i64
  f64.sub
  f64.abs
  f64.sub
  f64.ceil
  f64.const 1
  f64.max
  i64.trunc_f64_u
  local.set $3
  loop $for-loop|0
   local.get $2
   local.get $0
   i32.load offset=52
   i32.lt_s
   if
    local.get $6
    local.get $0
    i32.load offset=160
    i32.load
    i32.load offset=4
    local.get $2
    i32.const 1
    i32.shl
    i32.add
    i32.load16_u
    i64.extend_i32_u
    i64.add
    local.tee $6
    local.get $3
    i64.ge_u
    if
     local.get $0
     i32.load offset=116
     local.get $2
     local.get $0
     i32.load offset=116
     i32.const 1
     i32.sub
     i32.and
     i32.add
     local.set $5
     local.get $2
     local.get $0
     i32.load offset=108
     i32.shr_s
     i32.const 1
     i32.sub
     local.tee $2
     i32.const 0
     i32.lt_s
     if
      local.get $5
      local.get $0
      i32.load offset=116
      i32.sub
      local.set $5
      i32.const 0
      local.set $2
     end
     local.get $5
     i64.extend_i32_s
     local.get $2
     local.get $0
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shl
     local.set $3
     local.get $1
     f64.const 0
     f64.eq
     if (result i64)
      local.get $3
      local.get $0
      i32.load offset=104
      local.get $3
      local.get $0
      i64.load offset=128
      i64.or
      i64.clz
      i32.wrap_i64
      i32.sub
      local.tee $2
      local.get $0
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shr_u
      i32.wrap_i64
      i64.extend_i32_s
      local.get $2
      local.get $0
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shl
     else
      local.get $3
      local.get $0
      i32.load offset=104
      local.get $3
      local.get $0
      i64.load offset=128
      i64.or
      i64.clz
      i32.wrap_i64
      i32.sub
      local.tee $2
      local.get $0
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shr_u
      i32.wrap_i64
      i64.extend_i32_s
      local.get $2
      local.get $0
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shl
      i64.const 1
      local.get $0
      i32.load offset=112
      local.get $0
      i32.load offset=104
      local.get $3
      local.get $0
      i64.load offset=128
      i64.or
      i64.clz
      i32.wrap_i64
      i32.sub
      i32.add
      i64.extend_i32_s
      i64.shl
      i64.add
      i64.const 1
      i64.sub
     end
     return
    end
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|0
   end
  end
  i64.const 0
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getValueAtPercentile (param $0 i32) (param $1 f64) (result f64)
  local.get $0
  i32.load
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getValueAtPercentile
  f64.convert_i64_u
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#next (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i64)
  (local $3 i32)
  loop $while-continue|0
   local.get $0
   i32.load offset=40
   local.get $0
   i32.load offset=28
   i32.load offset=52
   i32.lt_s
   if
    local.get $0
    local.get $0
    i32.load offset=28
    i32.load offset=160
    i32.load
    i32.load offset=4
    local.get $0
    i32.load offset=40
    i32.const 1
    i32.shl
    i32.add
    i32.load16_u
    i64.extend_i32_u
    i64.store offset=104
    local.get $0
    i32.load8_u offset=112
    if
     local.get $0
     local.get $0
     i64.load offset=80
     local.get $0
     i64.load offset=104
     i64.add
     i64.store offset=80
     local.get $0
     i32.load offset=28
     local.tee $1
     i32.load offset=104
     local.get $0
     i64.load offset=48
     local.tee $2
     local.get $1
     i64.load offset=128
     i64.or
     i64.clz
     i32.wrap_i64
     i32.sub
     local.set $3
     local.get $0
     local.get $0
     i64.load offset=88
     local.get $0
     i64.load offset=104
     local.get $2
     local.get $3
     local.get $1
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shr_u
     i32.wrap_i64
     i64.extend_i32_s
     local.get $3
     local.get $1
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shl
     i64.const 1
     local.get $1
     i32.load offset=112
     local.get $1
     i32.load offset=104
     local.get $2
     local.get $1
     i64.load offset=128
     i64.or
     i64.clz
     i32.wrap_i64
     i32.sub
     i32.add
     i64.extend_i32_s
     i64.shl
     i64.add
     i64.const 1
     i64.sub
     i64.mul
     i64.add
     i64.store offset=88
     local.get $0
     i32.const 0
     i32.store8 offset=112
    end
    block $__inlined_func$assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#reachedIterationLevel (result i32)
     i32.const 0
     local.get $0
     i64.load offset=104
     i64.eqz
     br_if $__inlined_func$assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#reachedIterationLevel
     drop
     f64.const 100
     local.get $0
     i64.load offset=80
     f64.convert_i64_u
     f64.mul
     local.get $0
     i64.load offset=96
     f64.convert_i64_u
     f64.div
     local.get $0
     f64.load offset=8
     f64.ge
    end
    if
     local.get $0
     i32.load offset=28
     local.tee $1
     i32.load offset=104
     local.get $0
     i64.load offset=48
     local.tee $2
     local.get $1
     i64.load offset=128
     i64.or
     i64.clz
     i32.wrap_i64
     i32.sub
     local.set $3
     local.get $0
     i32.load offset=116
     local.get $2
     local.get $3
     local.get $1
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shr_u
     i32.wrap_i64
     i64.extend_i32_s
     local.get $3
     local.get $1
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shl
     i64.const 1
     local.get $1
     i32.load offset=112
     local.get $1
     i32.load offset=104
     local.get $2
     local.get $1
     i64.load offset=128
     i64.or
     i64.clz
     i32.wrap_i64
     i32.sub
     i32.add
     i64.extend_i32_s
     i64.shl
     i64.add
     i64.const 1
     i64.sub
     local.tee $2
     i64.store
     local.get $0
     i32.load offset=116
     local.get $0
     i64.load offset=64
     i64.store offset=8
     local.get $0
     i32.load offset=116
     local.get $0
     i64.load offset=104
     i64.store offset=16
     local.get $0
     i32.load offset=116
     local.get $0
     i64.load offset=80
     local.get $0
     i64.load offset=72
     i64.sub
     i64.store offset=24
     local.get $0
     i32.load offset=116
     local.get $0
     i64.load offset=80
     i64.store offset=32
     local.get $0
     i32.load offset=116
     local.get $0
     i64.load offset=88
     i64.store offset=40
     local.get $0
     i32.load offset=116
     f64.const 100
     local.get $0
     i64.load offset=80
     f64.convert_i64_u
     f64.mul
     local.get $0
     i64.load offset=96
     f64.convert_i64_u
     f64.div
     f64.store offset=48
     local.get $0
     i32.load offset=116
     local.get $0
     f64.load offset=8
     f64.store offset=56
     local.get $0
     local.get $2
     i64.store offset=64
     local.get $0
     local.get $0
     i64.load offset=80
     i64.store offset=72
     local.get $0
     call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#incrementIterationLevel
     local.get $0
     i32.load offset=28
     i64.load offset=168
     local.get $0
     i64.load offset=32
     i64.ne
     if
      i32.const 12704
      i32.const 13488
      i32.const 187
      i32.const 11
      call $~lib/builtins/abort
      unreachable
     end
     local.get $0
     i32.load offset=116
     local.tee $0
     i32.const 16700
     i32.gt_u
     if
      local.get $0
      i32.const 16
      i32.sub
      local.tee $1
      i32.load offset=4
      local.set $3
      local.get $1
      local.get $3
      i32.const 1
      i32.add
      i32.store offset=4
      local.get $1
      i32.load
      drop
     end
     local.get $0
     return
    end
    local.get $0
    call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#incrementSubBucket
    br $while-continue|0
   end
  end
  i32.const 12800
  i32.const 13488
  i32.const 193
  i32.const 5
  call $~lib/builtins/abort
  unreachable
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#outputPercentileDistribution (param $0 i32) (param $1 i32) (param $2 f64) (result i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  (local $15 i32)
  (local $16 i32)
  (local $17 i32)
  (local $18 i32)
  (local $19 i32)
  (local $20 i32)
  (local $21 i32)
  (local $22 i32)
  (local $23 i32)
  (local $24 i32)
  (local $25 i32)
  (local $26 i32)
  (local $27 i32)
  (local $28 i32)
  (local $29 i32)
  (local $30 i32)
  (local $31 i32)
  (local $32 i32)
  (local $33 f64)
  (local $34 i32)
  i32.const 1312
  i32.const 13344
  call $~lib/string/String.__concat
  local.tee $24
  local.tee $3
  i32.const 1312
  i32.ne
  if
   local.get $3
   i32.const 16700
   i32.gt_u
   if
    local.get $3
    i32.const 16
    i32.sub
    local.tee $15
    i32.load offset=4
    local.set $5
    local.get $15
    local.get $5
    i32.const 1
    i32.add
    i32.store offset=4
    local.get $15
    i32.load
    drop
   end
  end
  local.get $0
  i32.load offset=96
  local.tee $15
  i32.const 16700
  i32.gt_u
  if
   local.get $15
   i32.const 16
   i32.sub
   local.tee $5
   i32.load offset=4
   local.set $10
   local.get $5
   local.get $10
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $5
   i32.load
   drop
  end
  local.get $15
  local.get $15
  i32.load offset=28
  local.get $1
  call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#doReset
  i32.const 12
  local.get $0
  i32.load8_u offset=32
  call $assembly/formatters/FloatFormatter#constructor
  local.set $19
  i32.const 2
  i32.const 12
  call $assembly/formatters/FloatFormatter#constructor
  local.set $20
  i32.const 10
  call $assembly/formatters/IntegerFormatter#constructor
  local.set $21
  i32.const 14
  i32.const 2
  call $assembly/formatters/FloatFormatter#constructor
  local.set $23
  loop $while-continue|0
   local.get $15
   call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#hasNext
   if
    local.get $15
    call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#next
    local.tee $5
    f64.load offset=56
    f64.const 100
    f64.lt
    if
     local.get $3
     local.tee $1
     local.get $19
     local.get $5
     i64.load
     f64.convert_i64_u
     local.get $2
     f64.div
     call $assembly/formatters/FloatFormatter#format
     local.tee $10
     i32.const 1184
     call $~lib/string/String.__concat
     local.tee $11
     local.get $20
     local.get $5
     f64.load offset=56
     f64.const 100
     f64.div
     call $assembly/formatters/FloatFormatter#format
     local.tee $12
     call $~lib/string/String.__concat
     local.tee $6
     i32.const 1184
     call $~lib/string/String.__concat
     local.tee $7
     local.get $21
     local.get $5
     i64.load offset=32
     call $assembly/formatters/IntegerFormatter#format
     local.tee $8
     call $~lib/string/String.__concat
     local.tee $4
     i32.const 1184
     call $~lib/string/String.__concat
     local.tee $13
     local.get $23
     f64.const 1
     f64.const 1
     local.get $5
     f64.load offset=56
     f64.const 100
     f64.div
     f64.sub
     f64.div
     call $assembly/formatters/FloatFormatter#format
     local.tee $14
     call $~lib/string/String.__concat
     local.tee $9
     i32.const 13600
     call $~lib/string/String.__concat
     local.tee $16
     call $~lib/string/String.__concat
     local.tee $17
     local.tee $3
     local.get $1
     i32.ne
     if
      local.get $3
      i32.const 16700
      i32.gt_u
      if
       local.get $3
       i32.const 16
       i32.sub
       local.tee $18
       i32.load offset=4
       local.set $22
       local.get $18
       local.get $22
       i32.const 1
       i32.add
       i32.store offset=4
       local.get $18
       i32.load
       drop
      end
      local.get $1
      i32.const 16700
      i32.gt_u
      if
       local.get $1
       i32.const 16
       i32.sub
       call $~lib/rt/pure/decrement
      end
     end
     local.get $10
     i32.const 16700
     i32.gt_u
     if
      local.get $10
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $11
     i32.const 16700
     i32.gt_u
     if
      local.get $11
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $12
     i32.const 16700
     i32.gt_u
     if
      local.get $12
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $6
     i32.const 16700
     i32.gt_u
     if
      local.get $6
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $7
     i32.const 16700
     i32.gt_u
     if
      local.get $7
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $8
     i32.const 16700
     i32.gt_u
     if
      local.get $8
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $4
     i32.const 16700
     i32.gt_u
     if
      local.get $4
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $13
     i32.const 16700
     i32.gt_u
     if
      local.get $13
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $14
     i32.const 16700
     i32.gt_u
     if
      local.get $14
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $9
     i32.const 16700
     i32.gt_u
     if
      local.get $9
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $16
     i32.const 16700
     i32.gt_u
     if
      local.get $16
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $17
     i32.const 16700
     i32.gt_u
     if
      local.get $17
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
    else
     local.get $3
     local.tee $1
     local.get $19
     local.get $5
     i64.load
     f64.convert_i64_u
     local.get $2
     f64.div
     call $assembly/formatters/FloatFormatter#format
     local.tee $10
     i32.const 1184
     call $~lib/string/String.__concat
     local.tee $11
     local.get $20
     local.get $5
     f64.load offset=56
     f64.const 100
     f64.div
     call $assembly/formatters/FloatFormatter#format
     local.tee $12
     call $~lib/string/String.__concat
     local.tee $6
     i32.const 1184
     call $~lib/string/String.__concat
     local.tee $7
     local.get $21
     local.get $5
     i64.load offset=32
     call $assembly/formatters/IntegerFormatter#format
     local.tee $8
     call $~lib/string/String.__concat
     local.tee $4
     i32.const 13600
     call $~lib/string/String.__concat
     local.tee $13
     call $~lib/string/String.__concat
     local.tee $14
     local.tee $3
     local.get $1
     i32.ne
     if
      local.get $3
      i32.const 16700
      i32.gt_u
      if
       local.get $3
       i32.const 16
       i32.sub
       local.tee $9
       i32.load offset=4
       local.set $16
       local.get $9
       local.get $16
       i32.const 1
       i32.add
       i32.store offset=4
       local.get $9
       i32.load
       drop
      end
      local.get $1
      i32.const 16700
      i32.gt_u
      if
       local.get $1
       i32.const 16
       i32.sub
       call $~lib/rt/pure/decrement
      end
     end
     local.get $10
     i32.const 16700
     i32.gt_u
     if
      local.get $10
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $11
     i32.const 16700
     i32.gt_u
     if
      local.get $11
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $12
     i32.const 16700
     i32.gt_u
     if
      local.get $12
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $6
     i32.const 16700
     i32.gt_u
     if
      local.get $6
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $7
     i32.const 16700
     i32.gt_u
     if
      local.get $7
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $8
     i32.const 16700
     i32.gt_u
     if
      local.get $8
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $4
     i32.const 16700
     i32.gt_u
     if
      local.get $4
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $13
     i32.const 16700
     i32.gt_u
     if
      local.get $13
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $14
     i32.const 16700
     i32.gt_u
     if
      local.get $14
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
    end
    local.get $5
    i32.const 16700
    i32.gt_u
    if
     local.get $5
     i32.const 16
     i32.sub
     call $~lib/rt/pure/decrement
    end
    br $while-continue|0
   end
  end
  i32.const 12
  local.get $0
  i32.load8_u offset=32
  call $assembly/formatters/FloatFormatter#constructor
  local.tee $16
  local.get $0
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getMean
  local.tee $33
  local.get $2
  f64.div
  call $assembly/formatters/FloatFormatter#format
  local.set $11
  local.get $16
  local.get $0
  local.get $33
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#computeStdDeviation
  local.get $2
  f64.div
  call $assembly/formatters/FloatFormatter#format
  local.set $12
  local.get $16
  local.get $0
  i64.load offset=144
  f64.convert_i64_u
  local.get $2
  f64.div
  call $assembly/formatters/FloatFormatter#format
  i32.const 12
  call $assembly/formatters/IntegerFormatter#constructor
  local.tee $17
  local.get $0
  i64.load offset=168
  call $assembly/formatters/IntegerFormatter#format
  local.set $5
  local.get $17
  local.get $0
  i64.load offset=40
  call $assembly/formatters/IntegerFormatter#format
  local.set $10
  local.get $17
  local.get $0
  i32.load offset=48
  i64.extend_i32_s
  call $assembly/formatters/IntegerFormatter#format
  local.set $0
  local.get $3
  local.set $4
  local.get $11
  local.tee $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   local.tee $6
   i32.load offset=4
   local.set $7
   local.get $6
   local.get $7
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $6
   i32.load
   drop
  end
  i32.const 13632
  local.get $3
  local.tee $13
  call $~lib/string/String.__concat
  local.tee $18
  i32.const 13680
  call $~lib/string/String.__concat
  local.tee $25
  local.get $12
  local.tee $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   local.tee $6
   i32.load offset=4
   local.set $8
   local.get $6
   local.get $8
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $6
   i32.load
   drop
  end
  local.get $3
  local.tee $14
  call $~lib/string/String.__concat
  local.tee $22
  i32.const 13744
  call $~lib/string/String.__concat
  local.tee $26
  local.set $7
  local.tee $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   local.tee $6
   i32.load offset=4
   local.set $8
   local.get $6
   local.get $8
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $6
   i32.load
   drop
  end
  local.get $7
  local.get $3
  call $~lib/string/String.__concat
  local.tee $27
  i32.const 13792
  call $~lib/string/String.__concat
  local.tee $28
  local.get $5
  local.tee $6
  i32.const 16700
  i32.gt_u
  if
   local.get $6
   i32.const 16
   i32.sub
   local.tee $7
   i32.load offset=4
   local.set $9
   local.get $7
   local.get $9
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $7
   i32.load
   drop
  end
  local.get $6
  call $~lib/string/String.__concat
  local.tee $29
  i32.const 13856
  call $~lib/string/String.__concat
  local.tee $30
  local.get $10
  local.tee $7
  i32.const 16700
  i32.gt_u
  if
   local.get $7
   i32.const 16
   i32.sub
   local.tee $8
   i32.load offset=4
   local.set $1
   local.get $8
   local.get $1
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $8
   i32.load
   drop
  end
  local.get $7
  call $~lib/string/String.__concat
  local.tee $1
  i32.const 13904
  call $~lib/string/String.__concat
  local.tee $31
  local.set $5
  local.get $0
  local.tee $8
  i32.const 16700
  i32.gt_u
  if
   local.get $8
   i32.const 16
   i32.sub
   local.tee $9
   i32.load offset=4
   local.set $0
   local.get $9
   local.get $0
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $9
   i32.load
   drop
  end
  local.get $4
  local.tee $9
  local.get $9
  local.get $5
  local.get $8
  call $~lib/string/String.__concat
  local.tee $4
  i32.const 13968
  call $~lib/string/String.__concat
  local.tee $5
  call $~lib/string/String.__concat
  local.tee $0
  local.tee $10
  i32.ne
  if
   local.get $10
   i32.const 16700
   i32.gt_u
   if
    local.get $10
    i32.const 16
    i32.sub
    local.tee $32
    i32.load offset=4
    local.set $34
    local.get $32
    local.get $34
    i32.const 1
    i32.add
    i32.store offset=4
    local.get $32
    i32.load
    drop
   end
   local.get $9
   i32.const 16700
   i32.gt_u
   if
    local.get $9
    i32.const 16
    i32.sub
    call $~lib/rt/pure/decrement
   end
  end
  local.get $24
  i32.const 16700
  i32.gt_u
  if
   local.get $24
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $15
  i32.const 16700
  i32.gt_u
  if
   local.get $15
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $19
  i32.const 16700
  i32.gt_u
  if
   local.get $19
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $20
  i32.const 16700
  i32.gt_u
  if
   local.get $20
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $21
  i32.const 16700
  i32.gt_u
  if
   local.get $21
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $23
  i32.const 16700
  i32.gt_u
  if
   local.get $23
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $16
  i32.const 16700
  i32.gt_u
  if
   local.get $16
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $11
  i32.const 16700
  i32.gt_u
  if
   local.get $11
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $12
  i32.const 16700
  i32.gt_u
  if
   local.get $12
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $17
  i32.const 16700
  i32.gt_u
  if
   local.get $17
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $6
  i32.const 16700
  i32.gt_u
  if
   local.get $6
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $7
  i32.const 16700
  i32.gt_u
  if
   local.get $7
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $8
  i32.const 16700
  i32.gt_u
  if
   local.get $8
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $13
  i32.const 16700
  i32.gt_u
  if
   local.get $13
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $18
  i32.const 16700
  i32.gt_u
  if
   local.get $18
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $25
  i32.const 16700
  i32.gt_u
  if
   local.get $25
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $14
  i32.const 16700
  i32.gt_u
  if
   local.get $14
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $22
  i32.const 16700
  i32.gt_u
  if
   local.get $22
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $26
  i32.const 16700
  i32.gt_u
  if
   local.get $26
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $27
  i32.const 16700
  i32.gt_u
  if
   local.get $27
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $28
  i32.const 16700
  i32.gt_u
  if
   local.get $28
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $6
  i32.const 16700
  i32.gt_u
  if
   local.get $6
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $29
  i32.const 16700
  i32.gt_u
  if
   local.get $29
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $30
  i32.const 16700
  i32.gt_u
  if
   local.get $30
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $7
  i32.const 16700
  i32.gt_u
  if
   local.get $7
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $31
  i32.const 16700
  i32.gt_u
  if
   local.get $31
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $8
  i32.const 16700
  i32.gt_u
  if
   local.get $8
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $4
  i32.const 16700
  i32.gt_u
  if
   local.get $4
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $5
  i32.const 16700
  i32.gt_u
  if
   local.get $5
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $10
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#outputPercentileDistribution (param $0 i32) (param $1 f64) (param $2 f64) (result i32)
  local.get $0
  i32.load
  local.get $1
  i32.trunc_f64_s
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#outputPercentileDistribution
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#addWhileCorrectingForCoordinatedOmission (param $0 i32) (param $1 i32) (param $2 i64)
  (local $3 i32)
  (local $4 i32)
  (local $5 i64)
  (local $6 i64)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $4
   local.get $3
   local.get $4
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $4
   local.get $3
   local.get $4
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $1
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#constructor
  local.set $3
  loop $while-continue|0
   local.get $3
   call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#hasNext
   if
    local.get $0
    local.get $3
    call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#next
    local.tee $4
    i64.load offset=16
    local.tee $6
    local.get $4
    i64.load
    local.tee $5
    call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordCountAtValue
    i32.const 1
    local.get $5
    local.get $2
    i64.le_u
    local.get $2
    i64.const 0
    i64.le_u
    select
    i32.eqz
    if
     local.get $5
     local.get $2
     i64.sub
     local.set $5
     loop $for-loop|0
      local.get $5
      local.get $2
      i64.ge_u
      if
       local.get $0
       local.get $6
       local.get $5
       call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordCountAtValue
       local.get $5
       local.get $2
       i64.sub
       local.set $5
       br $for-loop|0
      end
     end
    end
    local.get $4
    i32.const 16700
    i32.gt_u
    if
     local.get $4
     i32.const 16
     i32.sub
     call $~lib/rt/pure/decrement
    end
    br $while-continue|0
   end
  end
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#copyCorrectedForCoordinatedOmission (param $0 i32) (param $1 f64) (result i32)
  (local $2 i32)
  (local $3 i64)
  local.get $1
  i64.trunc_f64_u
  local.set $3
  local.get $0
  i32.load
  local.tee $2
  i64.load offset=24
  local.get $2
  i64.load offset=16
  local.get $2
  i32.load8_u offset=32
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#constructor
  local.tee $0
  local.get $2
  local.get $3
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#addWhileCorrectingForCoordinatedOmission
  i32.const 0
  f64.const 0
  f64.const 0
  f64.const 0
  i32.const 0
  local.get $0
  call $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#constructor
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#add<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i32)
  (local $4 i64)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $5
   local.get $3
   local.get $5
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $0
  i32.load offset=116
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $5
  local.get $0
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  i32.add
  local.set $3
  local.get $5
  local.get $0
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.tee $5
  i32.const 0
  i32.lt_s
  if
   i32.const 0
   local.set $5
   local.get $3
   local.get $0
   i32.load offset=116
   i32.sub
   local.set $3
  end
  local.get $0
  i32.load offset=104
  local.get $3
  i64.extend_i32_s
  local.get $5
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  local.tee $2
  local.get $0
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  local.set $3
  local.get $2
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shr_u
  i32.wrap_i64
  i64.extend_i32_s
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.const 1
  local.get $0
  i32.load offset=112
  local.get $0
  i32.load offset=104
  local.get $2
  local.get $0
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.add
  i64.const 1
  i64.sub
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 14000
    i32.const 9952
    i32.const 639
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   loop $for-loop|0
    local.get $6
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $6
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     i32.add
     i32.load8_u
     i64.extend_i32_u
     local.tee $2
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $6
      local.get $2
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#addToCountAtIndex
      local.get $2
      local.get $4
      i64.add
      local.set $4
     end
     local.get $6
     i32.const 1
     i32.add
     local.set $6
     br $for-loop|0
    end
   end
   local.get $0
   local.get $4
   local.get $0
   i64.load offset=168
   i64.add
   i64.store offset=168
   local.get $0
   local.get $0
   i64.load offset=136
   local.get $0
   i64.load offset=144
   local.tee $2
   local.get $1
   i64.load offset=144
   local.tee $4
   local.get $2
   local.get $4
   i64.gt_u
   select
   i64.add
   i64.store offset=144
   local.get $0
   i64.load offset=152
   local.tee $2
   local.get $1
   i64.load offset=152
   local.tee $4
   local.get $2
   local.get $4
   i64.lt_u
   select
   local.tee $2
   local.get $0
   i64.load offset=136
   i64.gt_u
   if
    local.get $0
    local.get $2
    local.get $0
    i64.load offset=136
    i64.const -1
    i64.xor
    i64.and
    i64.store offset=152
   end
  else
   local.get $1
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex
   local.set $5
   local.get $1
   i32.load offset=116
   local.get $5
   local.get $1
   i32.load offset=116
   i32.const 1
   i32.sub
   i32.and
   i32.add
   local.set $3
   local.get $5
   local.get $1
   i32.load offset=160
   i32.load
   i32.load offset=4
   i32.add
   i32.load8_u
   i64.extend_i32_u
   local.set $2
   local.get $5
   local.get $1
   i32.load offset=108
   i32.shr_s
   i32.const 1
   i32.sub
   local.tee $6
   i32.const 0
   i32.lt_s
   if
    i32.const 0
    local.set $6
    local.get $3
    local.get $1
    i32.load offset=116
    i32.sub
    local.set $3
   end
   local.get $0
   local.get $2
   local.get $3
   i64.extend_i32_s
   local.get $6
   local.get $1
   i32.load offset=112
   i32.add
   i64.extend_i32_s
   i64.shl
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordCountAtValue
   loop $for-loop|1
    local.get $7
    local.get $5
    i32.lt_s
    if
     local.get $7
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     i32.add
     i32.load8_u
     i64.extend_i32_u
     local.tee $4
     local.set $2
     local.get $4
     i64.const 0
     i64.gt_u
     if
      local.get $1
      i32.load offset=116
      local.get $7
      local.get $1
      i32.load offset=116
      i32.const 1
      i32.sub
      i32.and
      i32.add
      local.set $3
      local.get $7
      local.get $1
      i32.load offset=108
      i32.shr_s
      i32.const 1
      i32.sub
      local.tee $6
      i32.const 0
      i32.lt_s
      if
       i32.const 0
       local.set $6
       local.get $3
       local.get $1
       i32.load offset=116
       i32.sub
       local.set $3
      end
      local.get $0
      local.get $2
      local.get $3
      i64.extend_i32_s
      local.get $6
      local.get $1
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shl
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordCountAtValue
     end
     local.get $7
     i32.const 1
     i32.add
     local.set $7
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=64
  local.tee $2
  local.get $1
  i64.load offset=64
  local.tee $4
  local.get $2
  local.get $4
  i64.lt_u
  select
  i64.store offset=64
  local.get $0
  local.get $0
  i64.load offset=72
  local.tee $2
  local.get $1
  i64.load offset=72
  local.tee $4
  local.get $2
  local.get $4
  i64.gt_u
  select
  i64.store offset=72
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#addHistogram8 (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#add<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#add<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i32)
  (local $4 i64)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $5
   local.get $3
   local.get $5
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $0
  i32.load offset=116
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $5
  local.get $0
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  i32.add
  local.set $3
  local.get $5
  local.get $0
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.tee $5
  i32.const 0
  i32.lt_s
  if
   i32.const 0
   local.set $5
   local.get $3
   local.get $0
   i32.load offset=116
   i32.sub
   local.set $3
  end
  local.get $0
  i32.load offset=104
  local.get $3
  i64.extend_i32_s
  local.get $5
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  local.tee $2
  local.get $0
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  local.set $3
  local.get $2
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shr_u
  i32.wrap_i64
  i64.extend_i32_s
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.const 1
  local.get $0
  i32.load offset=112
  local.get $0
  i32.load offset=104
  local.get $2
  local.get $0
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.add
  i64.const 1
  i64.sub
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 14000
    i32.const 9952
    i32.const 639
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   loop $for-loop|0
    local.get $6
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $6
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u
     i64.extend_i32_u
     local.tee $2
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $6
      local.get $2
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#addToCountAtIndex
      local.get $2
      local.get $4
      i64.add
      local.set $4
     end
     local.get $6
     i32.const 1
     i32.add
     local.set $6
     br $for-loop|0
    end
   end
   local.get $0
   local.get $4
   local.get $0
   i64.load offset=168
   i64.add
   i64.store offset=168
   local.get $0
   local.get $0
   i64.load offset=136
   local.get $0
   i64.load offset=144
   local.tee $2
   local.get $1
   i64.load offset=144
   local.tee $4
   local.get $2
   local.get $4
   i64.gt_u
   select
   i64.add
   i64.store offset=144
   local.get $0
   i64.load offset=152
   local.tee $2
   local.get $1
   i64.load offset=152
   local.tee $4
   local.get $2
   local.get $4
   i64.lt_u
   select
   local.tee $2
   local.get $0
   i64.load offset=136
   i64.gt_u
   if
    local.get $0
    local.get $2
    local.get $0
    i64.load offset=136
    i64.const -1
    i64.xor
    i64.and
    i64.store offset=152
   end
  else
   local.get $1
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex
   local.set $5
   local.get $1
   i32.load offset=116
   local.get $5
   local.get $1
   i32.load offset=116
   i32.const 1
   i32.sub
   i32.and
   i32.add
   local.set $3
   local.get $1
   i32.load offset=160
   i32.load
   i32.load offset=4
   local.get $5
   i32.const 1
   i32.shl
   i32.add
   i32.load16_u
   i64.extend_i32_u
   local.set $2
   local.get $5
   local.get $1
   i32.load offset=108
   i32.shr_s
   i32.const 1
   i32.sub
   local.tee $6
   i32.const 0
   i32.lt_s
   if
    i32.const 0
    local.set $6
    local.get $3
    local.get $1
    i32.load offset=116
    i32.sub
    local.set $3
   end
   local.get $0
   local.get $2
   local.get $3
   i64.extend_i32_s
   local.get $6
   local.get $1
   i32.load offset=112
   i32.add
   i64.extend_i32_s
   i64.shl
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordCountAtValue
   loop $for-loop|1
    local.get $7
    local.get $5
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $7
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u
     i64.extend_i32_u
     local.tee $4
     local.set $2
     local.get $4
     i64.const 0
     i64.gt_u
     if
      local.get $1
      i32.load offset=116
      local.get $7
      local.get $1
      i32.load offset=116
      i32.const 1
      i32.sub
      i32.and
      i32.add
      local.set $3
      local.get $7
      local.get $1
      i32.load offset=108
      i32.shr_s
      i32.const 1
      i32.sub
      local.tee $6
      i32.const 0
      i32.lt_s
      if
       i32.const 0
       local.set $6
       local.get $3
       local.get $1
       i32.load offset=116
       i32.sub
       local.set $3
      end
      local.get $0
      local.get $2
      local.get $3
      i64.extend_i32_s
      local.get $6
      local.get $1
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shl
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordCountAtValue
     end
     local.get $7
     i32.const 1
     i32.add
     local.set $7
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=64
  local.tee $2
  local.get $1
  i64.load offset=64
  local.tee $4
  local.get $2
  local.get $4
  i64.lt_u
  select
  i64.store offset=64
  local.get $0
  local.get $0
  i64.load offset=72
  local.tee $2
  local.get $1
  i64.load offset=72
  local.tee $4
  local.get $2
  local.get $4
  i64.gt_u
  select
  i64.store offset=72
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#addHistogram16 (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#add<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#add<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i32)
  (local $4 i64)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $5
   local.get $3
   local.get $5
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $0
  i32.load offset=116
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $5
  local.get $0
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  i32.add
  local.set $3
  local.get $5
  local.get $0
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.tee $5
  i32.const 0
  i32.lt_s
  if
   i32.const 0
   local.set $5
   local.get $3
   local.get $0
   i32.load offset=116
   i32.sub
   local.set $3
  end
  local.get $0
  i32.load offset=104
  local.get $3
  i64.extend_i32_s
  local.get $5
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  local.tee $2
  local.get $0
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  local.set $3
  local.get $2
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shr_u
  i32.wrap_i64
  i64.extend_i32_s
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.const 1
  local.get $0
  i32.load offset=112
  local.get $0
  i32.load offset=104
  local.get $2
  local.get $0
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.add
  i64.const 1
  i64.sub
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 14000
    i32.const 9952
    i32.const 639
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   loop $for-loop|0
    local.get $6
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $6
     i32.const 2
     i32.shl
     i32.add
     i32.load
     i64.extend_i32_u
     local.tee $2
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $6
      local.get $2
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#addToCountAtIndex
      local.get $2
      local.get $4
      i64.add
      local.set $4
     end
     local.get $6
     i32.const 1
     i32.add
     local.set $6
     br $for-loop|0
    end
   end
   local.get $0
   local.get $4
   local.get $0
   i64.load offset=168
   i64.add
   i64.store offset=168
   local.get $0
   local.get $0
   i64.load offset=136
   local.get $0
   i64.load offset=144
   local.tee $2
   local.get $1
   i64.load offset=144
   local.tee $4
   local.get $2
   local.get $4
   i64.gt_u
   select
   i64.add
   i64.store offset=144
   local.get $0
   i64.load offset=152
   local.tee $2
   local.get $1
   i64.load offset=152
   local.tee $4
   local.get $2
   local.get $4
   i64.lt_u
   select
   local.tee $2
   local.get $0
   i64.load offset=136
   i64.gt_u
   if
    local.get $0
    local.get $2
    local.get $0
    i64.load offset=136
    i64.const -1
    i64.xor
    i64.and
    i64.store offset=152
   end
  else
   local.get $1
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex
   local.set $5
   local.get $1
   i32.load offset=116
   local.get $5
   local.get $1
   i32.load offset=116
   i32.const 1
   i32.sub
   i32.and
   i32.add
   local.set $3
   local.get $1
   i32.load offset=160
   i32.load
   i32.load offset=4
   local.get $5
   i32.const 2
   i32.shl
   i32.add
   i32.load
   i64.extend_i32_u
   local.set $2
   local.get $5
   local.get $1
   i32.load offset=108
   i32.shr_s
   i32.const 1
   i32.sub
   local.tee $6
   i32.const 0
   i32.lt_s
   if
    i32.const 0
    local.set $6
    local.get $3
    local.get $1
    i32.load offset=116
    i32.sub
    local.set $3
   end
   local.get $0
   local.get $2
   local.get $3
   i64.extend_i32_s
   local.get $6
   local.get $1
   i32.load offset=112
   i32.add
   i64.extend_i32_s
   i64.shl
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordCountAtValue
   loop $for-loop|1
    local.get $7
    local.get $5
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $7
     i32.const 2
     i32.shl
     i32.add
     i32.load
     i64.extend_i32_u
     local.tee $4
     local.set $2
     local.get $4
     i64.const 0
     i64.gt_u
     if
      local.get $1
      i32.load offset=116
      local.get $7
      local.get $1
      i32.load offset=116
      i32.const 1
      i32.sub
      i32.and
      i32.add
      local.set $3
      local.get $7
      local.get $1
      i32.load offset=108
      i32.shr_s
      i32.const 1
      i32.sub
      local.tee $6
      i32.const 0
      i32.lt_s
      if
       i32.const 0
       local.set $6
       local.get $3
       local.get $1
       i32.load offset=116
       i32.sub
       local.set $3
      end
      local.get $0
      local.get $2
      local.get $3
      i64.extend_i32_s
      local.get $6
      local.get $1
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shl
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordCountAtValue
     end
     local.get $7
     i32.const 1
     i32.add
     local.set $7
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=64
  local.tee $2
  local.get $1
  i64.load offset=64
  local.tee $4
  local.get $2
  local.get $4
  i64.lt_u
  select
  i64.store offset=64
  local.get $0
  local.get $0
  i64.load offset=72
  local.tee $2
  local.get $1
  i64.load offset=72
  local.tee $4
  local.get $2
  local.get $4
  i64.gt_u
  select
  i64.store offset=72
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#addHistogram32 (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#add<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#add<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i32)
  (local $4 i64)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $5
   local.get $3
   local.get $5
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $0
  i32.load offset=116
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $5
  local.get $0
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  i32.add
  local.set $3
  local.get $5
  local.get $0
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.tee $5
  i32.const 0
  i32.lt_s
  if
   i32.const 0
   local.set $5
   local.get $3
   local.get $0
   i32.load offset=116
   i32.sub
   local.set $3
  end
  local.get $0
  i32.load offset=104
  local.get $3
  i64.extend_i32_s
  local.get $5
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  local.tee $2
  local.get $0
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  local.set $3
  local.get $2
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shr_u
  i32.wrap_i64
  i64.extend_i32_s
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.const 1
  local.get $0
  i32.load offset=112
  local.get $0
  i32.load offset=104
  local.get $2
  local.get $0
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.add
  i64.const 1
  i64.sub
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 14000
    i32.const 9952
    i32.const 639
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   loop $for-loop|0
    local.get $6
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $6
     i32.const 3
     i32.shl
     i32.add
     i64.load
     local.tee $2
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $6
      local.get $2
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#addToCountAtIndex
      local.get $2
      local.get $4
      i64.add
      local.set $4
     end
     local.get $6
     i32.const 1
     i32.add
     local.set $6
     br $for-loop|0
    end
   end
   local.get $0
   local.get $4
   local.get $0
   i64.load offset=168
   i64.add
   i64.store offset=168
   local.get $0
   local.get $0
   i64.load offset=136
   local.get $0
   i64.load offset=144
   local.tee $2
   local.get $1
   i64.load offset=144
   local.tee $4
   local.get $2
   local.get $4
   i64.gt_u
   select
   i64.add
   i64.store offset=144
   local.get $0
   i64.load offset=152
   local.tee $2
   local.get $1
   i64.load offset=152
   local.tee $4
   local.get $2
   local.get $4
   i64.lt_u
   select
   local.tee $2
   local.get $0
   i64.load offset=136
   i64.gt_u
   if
    local.get $0
    local.get $2
    local.get $0
    i64.load offset=136
    i64.const -1
    i64.xor
    i64.and
    i64.store offset=152
   end
  else
   local.get $1
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex
   local.set $5
   local.get $1
   i32.load offset=116
   local.get $5
   local.get $1
   i32.load offset=116
   i32.const 1
   i32.sub
   i32.and
   i32.add
   local.set $3
   local.get $1
   i32.load offset=160
   i32.load
   i32.load offset=4
   local.get $5
   i32.const 3
   i32.shl
   i32.add
   i64.load
   local.set $2
   local.get $5
   local.get $1
   i32.load offset=108
   i32.shr_s
   i32.const 1
   i32.sub
   local.tee $6
   i32.const 0
   i32.lt_s
   if
    i32.const 0
    local.set $6
    local.get $3
    local.get $1
    i32.load offset=116
    i32.sub
    local.set $3
   end
   local.get $0
   local.get $2
   local.get $3
   i64.extend_i32_s
   local.get $6
   local.get $1
   i32.load offset=112
   i32.add
   i64.extend_i32_s
   i64.shl
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordCountAtValue
   loop $for-loop|1
    local.get $7
    local.get $5
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $7
     i32.const 3
     i32.shl
     i32.add
     i64.load
     local.tee $4
     local.set $2
     local.get $4
     i64.const 0
     i64.gt_u
     if
      local.get $1
      i32.load offset=116
      local.get $7
      local.get $1
      i32.load offset=116
      i32.const 1
      i32.sub
      i32.and
      i32.add
      local.set $3
      local.get $7
      local.get $1
      i32.load offset=108
      i32.shr_s
      i32.const 1
      i32.sub
      local.tee $6
      i32.const 0
      i32.lt_s
      if
       i32.const 0
       local.set $6
       local.get $3
       local.get $1
       i32.load offset=116
       i32.sub
       local.set $3
      end
      local.get $0
      local.get $2
      local.get $3
      i64.extend_i32_s
      local.get $6
      local.get $1
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shl
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordCountAtValue
     end
     local.get $7
     i32.const 1
     i32.add
     local.set $7
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=64
  local.tee $2
  local.get $1
  i64.load offset=64
  local.tee $4
  local.get $2
  local.get $4
  i64.lt_u
  select
  i64.store offset=64
  local.get $0
  local.get $0
  i64.load offset=72
  local.tee $2
  local.get $1
  i64.load offset=72
  local.tee $4
  local.get $2
  local.get $4
  i64.gt_u
  select
  i64.store offset=72
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#addHistogram64 (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#add<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#add<assembly/packedarray/PackedArray/PackedArray,u64> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i32)
  (local $4 i64)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $5
   local.get $3
   local.get $5
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $0
  i32.load offset=116
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $5
  local.get $0
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  i32.add
  local.set $3
  local.get $5
  local.get $0
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.tee $5
  i32.const 0
  i32.lt_s
  if
   i32.const 0
   local.set $5
   local.get $3
   local.get $0
   i32.load offset=116
   i32.sub
   local.set $3
  end
  local.get $0
  i32.load offset=104
  local.get $3
  i64.extend_i32_s
  local.get $5
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  local.tee $2
  local.get $0
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  local.set $3
  local.get $2
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shr_u
  i32.wrap_i64
  i64.extend_i32_s
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.const 1
  local.get $0
  i32.load offset=112
  local.get $0
  i32.load offset=104
  local.get $2
  local.get $0
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.add
  i64.const 1
  i64.sub
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 14000
    i32.const 9952
    i32.const 639
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   loop $for-loop|0
    local.get $6
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     local.get $6
     call $assembly/packedarray/PackedArray/PackedArray#get
     local.tee $2
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $6
      local.get $2
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#addToCountAtIndex
      local.get $2
      local.get $4
      i64.add
      local.set $4
     end
     local.get $6
     i32.const 1
     i32.add
     local.set $6
     br $for-loop|0
    end
   end
   local.get $0
   local.get $4
   local.get $0
   i64.load offset=168
   i64.add
   i64.store offset=168
   local.get $0
   local.get $0
   i64.load offset=136
   local.get $0
   i64.load offset=144
   local.tee $2
   local.get $1
   i64.load offset=144
   local.tee $4
   local.get $2
   local.get $4
   i64.gt_u
   select
   i64.add
   i64.store offset=144
   local.get $0
   i64.load offset=152
   local.tee $2
   local.get $1
   i64.load offset=152
   local.tee $4
   local.get $2
   local.get $4
   i64.lt_u
   select
   local.tee $2
   local.get $0
   i64.load offset=136
   i64.gt_u
   if
    local.get $0
    local.get $2
    local.get $0
    i64.load offset=136
    i64.const -1
    i64.xor
    i64.and
    i64.store offset=152
   end
  else
   local.get $1
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex
   local.set $5
   local.get $1
   i32.load offset=160
   local.get $5
   call $assembly/packedarray/PackedArray/PackedArray#get
   local.set $2
   local.get $1
   i32.load offset=116
   local.get $5
   local.get $1
   i32.load offset=116
   i32.const 1
   i32.sub
   i32.and
   i32.add
   local.set $3
   local.get $5
   local.get $1
   i32.load offset=108
   i32.shr_s
   i32.const 1
   i32.sub
   local.tee $6
   i32.const 0
   i32.lt_s
   if
    i32.const 0
    local.set $6
    local.get $3
    local.get $1
    i32.load offset=116
    i32.sub
    local.set $3
   end
   local.get $0
   local.get $2
   local.get $3
   i64.extend_i32_s
   local.get $6
   local.get $1
   i32.load offset=112
   i32.add
   i64.extend_i32_s
   i64.shl
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordCountAtValue
   loop $for-loop|1
    local.get $7
    local.get $5
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     local.get $7
     call $assembly/packedarray/PackedArray/PackedArray#get
     local.tee $4
     local.set $2
     local.get $4
     i64.const 0
     i64.gt_u
     if
      local.get $1
      i32.load offset=116
      local.get $7
      local.get $1
      i32.load offset=116
      i32.const 1
      i32.sub
      i32.and
      i32.add
      local.set $3
      local.get $7
      local.get $1
      i32.load offset=108
      i32.shr_s
      i32.const 1
      i32.sub
      local.tee $6
      i32.const 0
      i32.lt_s
      if
       i32.const 0
       local.set $6
       local.get $3
       local.get $1
       i32.load offset=116
       i32.sub
       local.set $3
      end
      local.get $0
      local.get $2
      local.get $3
      i64.extend_i32_s
      local.get $6
      local.get $1
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shl
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordCountAtValue
     end
     local.get $7
     i32.const 1
     i32.add
     local.set $7
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=64
  local.tee $2
  local.get $1
  i64.load offset=64
  local.tee $4
  local.get $2
  local.get $4
  i64.lt_u
  select
  i64.store offset=64
  local.get $0
  local.get $0
  i64.load offset=72
  local.tee $2
  local.get $1
  i64.load offset=72
  local.tee $4
  local.get $2
  local.get $4
  i64.gt_u
  select
  i64.store offset=72
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#addPackedHistogram (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#add<assembly/packedarray/PackedArray/PackedArray,u64>
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtValue (param $0 i32) (param $1 i64) (result i64)
  (local $2 i32)
  i32.const 0
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex
  local.tee $2
  i32.const 0
  local.get $2
  i32.gt_s
  select
  local.set $2
  local.get $0
  i32.load offset=160
  i32.load
  i32.load offset=4
  local.get $2
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $0
  local.get $2
  local.get $0
  i32.lt_s
  select
  i32.const 1
  i32.shl
  i32.add
  i32.load16_u
  i64.extend_i32_u
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#establishInternalTackingValues (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i64)
  (local $5 i64)
  (local $6 i32)
  local.get $0
  i64.const 0
  i64.store offset=144
  local.get $0
  i64.const -1
  i64.store offset=152
  i32.const -1
  local.set $2
  i32.const -1
  local.set $6
  loop $for-loop|0
   local.get $3
   local.get $1
   i32.lt_s
   if
    local.get $0
    i32.load offset=160
    i32.load
    i32.load offset=4
    local.get $3
    i32.const 1
    i32.shl
    i32.add
    i32.load16_u
    i64.extend_i32_u
    local.tee $5
    i64.const 0
    i64.gt_u
    if
     local.get $4
     local.get $5
     i64.add
     local.set $4
     local.get $3
     local.get $6
     local.get $3
     i32.const 0
     local.get $6
     i32.const -1
     i32.eq
     select
     select
     local.set $6
     local.get $3
     local.set $2
    end
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|0
   end
  end
  local.get $2
  i32.const 0
  i32.ge_s
  if
   local.get $0
   i32.load offset=116
   local.get $2
   local.get $0
   i32.load offset=116
   i32.const 1
   i32.sub
   i32.and
   i32.add
   local.set $3
   local.get $2
   local.get $0
   i32.load offset=108
   i32.shr_s
   i32.const 1
   i32.sub
   local.tee $2
   i32.const 0
   i32.lt_s
   if
    local.get $3
    local.get $0
    i32.load offset=116
    i32.sub
    local.set $3
    i32.const 0
    local.set $2
   end
   local.get $0
   i32.load offset=104
   local.get $3
   i64.extend_i32_s
   local.get $2
   local.get $0
   i32.load offset=112
   i32.add
   i64.extend_i32_s
   i64.shl
   local.tee $5
   local.get $0
   i64.load offset=128
   i64.or
   i64.clz
   i32.wrap_i64
   i32.sub
   local.set $2
   local.get $0
   local.get $0
   i64.load offset=136
   local.get $5
   local.get $2
   local.get $0
   i32.load offset=112
   i32.add
   i64.extend_i32_s
   i64.shr_u
   i32.wrap_i64
   i64.extend_i32_s
   local.get $2
   local.get $0
   i32.load offset=112
   i32.add
   i64.extend_i32_s
   i64.shl
   i64.const 1
   local.get $0
   i32.load offset=112
   local.get $0
   i32.load offset=104
   local.get $5
   local.get $0
   i64.load offset=128
   i64.or
   i64.clz
   i32.wrap_i64
   i32.sub
   i32.add
   i64.extend_i32_s
   i64.shl
   i64.add
   i64.const 1
   i64.sub
   i64.add
   i64.store offset=144
  end
  local.get $6
  i32.const 0
  i32.ge_s
  if
   block $__inlined_func$assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#updateMinNonZeroValue
    local.get $0
    i32.load offset=116
    local.get $6
    local.get $0
    i32.load offset=116
    i32.const 1
    i32.sub
    i32.and
    i32.add
    local.set $1
    local.get $6
    local.get $0
    i32.load offset=108
    i32.shr_s
    i32.const 1
    i32.sub
    local.tee $3
    i32.const 0
    i32.lt_s
    if
     i32.const 0
     local.set $3
     local.get $1
     local.get $0
     i32.load offset=116
     i32.sub
     local.set $1
    end
    local.get $1
    i64.extend_i32_s
    local.get $3
    local.get $0
    i32.load offset=112
    i32.add
    i64.extend_i32_s
    i64.shl
    local.tee $5
    local.get $0
    i64.load offset=136
    i64.le_u
    br_if $__inlined_func$assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#updateMinNonZeroValue
    local.get $0
    local.get $5
    local.get $0
    i64.load offset=136
    i64.const -1
    i64.xor
    i64.and
    i64.store offset=152
   end
  end
  local.get $0
  local.get $4
  i64.store offset=168
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#establishInternalTackingValues@varargs (param $0 i32)
  (local $1 i32)
  block $1of1
   block $0of1
    block $outOfRange
     global.get $~argumentsLength
     br_table $0of1 $1of1 $outOfRange
    end
    unreachable
   end
   local.get $0
   i32.load offset=52
   local.set $1
  end
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#establishInternalTackingValues
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8> (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i64)
  (local $6 i64)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $4
   i32.load offset=4
   local.set $3
   local.get $4
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $4
   i32.load
   drop
  end
  local.get $0
  i32.load offset=116
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $3
  local.get $0
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  i32.add
  local.set $4
  local.get $3
  local.get $0
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.tee $3
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 0
   local.set $3
   local.get $4
   local.get $0
   i32.load offset=116
   i32.sub
  else
   local.get $4
  end
  i64.extend_i32_s
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 14000
    i32.const 9952
    i32.const 748
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   loop $for-loop|0
    local.get $2
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $2
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     i32.add
     i32.load8_u
     i64.extend_i32_u
     local.tee $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $2
      i64.const 0
      local.get $6
      i64.sub
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#addToCountAtIndex
      local.get $5
      local.get $6
      i64.add
      local.set $5
     end
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $5
   i64.sub
   i64.store offset=168
  else
   loop $for-loop|1
    local.get $2
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $2
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     i32.add
     i32.load8_u
     i64.extend_i32_u
     local.tee $6
     i64.const 0
     i64.gt_u
     if
      local.get $1
      i32.load offset=116
      local.get $2
      local.get $1
      i32.load offset=116
      i32.const 1
      i32.sub
      i32.and
      i32.add
      local.set $4
      local.get $0
      local.get $2
      local.get $1
      i32.load offset=108
      i32.shr_s
      i32.const 1
      i32.sub
      local.tee $3
      i32.const 0
      i32.lt_s
      if (result i32)
       i32.const 0
       local.set $3
       local.get $4
       local.get $1
       i32.load offset=116
       i32.sub
      else
       local.get $4
      end
      i64.extend_i32_s
      local.get $3
      local.get $1
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shl
      local.tee $5
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtValue
      local.get $6
      i64.lt_u
      if
       i32.const 14608
       local.get $6
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14672
       call $~lib/string/String.__concat
       local.get $5
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14720
       call $~lib/string/String.__concat
       local.get $0
       local.get $5
       call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtValue
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14800
       call $~lib/string/String.__concat
       i32.const 9952
       i32.const 777
       i32.const 13
       call $~lib/builtins/abort
       unreachable
      end
      local.get $0
      i64.const 0
      local.get $6
      i64.sub
      local.get $5
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordCountAtValue
     end
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=144
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtValue
  i64.const 0
  i64.le_u
  if (result i32)
   i32.const 1
  else
   local.get $0
   local.get $0
   i64.load offset=152
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtValue
   i64.const 0
   i64.le_u
  end
  if
   i32.const 0
   global.set $~argumentsLength
   local.get $0
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#establishInternalTackingValues@varargs
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#subtractHistogram8 (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16> (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i64)
  (local $6 i64)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $4
   i32.load offset=4
   local.set $3
   local.get $4
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $4
   i32.load
   drop
  end
  local.get $0
  i32.load offset=116
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $3
  local.get $0
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  i32.add
  local.set $4
  local.get $3
  local.get $0
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.tee $3
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 0
   local.set $3
   local.get $4
   local.get $0
   i32.load offset=116
   i32.sub
  else
   local.get $4
  end
  i64.extend_i32_s
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 14000
    i32.const 9952
    i32.const 748
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   loop $for-loop|0
    local.get $2
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $2
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u
     i64.extend_i32_u
     local.tee $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $2
      i64.const 0
      local.get $6
      i64.sub
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#addToCountAtIndex
      local.get $5
      local.get $6
      i64.add
      local.set $5
     end
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $5
   i64.sub
   i64.store offset=168
  else
   loop $for-loop|1
    local.get $2
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $2
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u
     i64.extend_i32_u
     local.tee $6
     i64.const 0
     i64.gt_u
     if
      local.get $1
      i32.load offset=116
      local.get $2
      local.get $1
      i32.load offset=116
      i32.const 1
      i32.sub
      i32.and
      i32.add
      local.set $4
      local.get $0
      local.get $2
      local.get $1
      i32.load offset=108
      i32.shr_s
      i32.const 1
      i32.sub
      local.tee $3
      i32.const 0
      i32.lt_s
      if (result i32)
       i32.const 0
       local.set $3
       local.get $4
       local.get $1
       i32.load offset=116
       i32.sub
      else
       local.get $4
      end
      i64.extend_i32_s
      local.get $3
      local.get $1
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shl
      local.tee $5
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtValue
      local.get $6
      i64.lt_u
      if
       i32.const 14608
       local.get $6
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14672
       call $~lib/string/String.__concat
       local.get $5
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14720
       call $~lib/string/String.__concat
       local.get $0
       local.get $5
       call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtValue
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14800
       call $~lib/string/String.__concat
       i32.const 9952
       i32.const 777
       i32.const 13
       call $~lib/builtins/abort
       unreachable
      end
      local.get $0
      i64.const 0
      local.get $6
      i64.sub
      local.get $5
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordCountAtValue
     end
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=144
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtValue
  i64.const 0
  i64.le_u
  if (result i32)
   i32.const 1
  else
   local.get $0
   local.get $0
   i64.load offset=152
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtValue
   i64.const 0
   i64.le_u
  end
  if
   i32.const 0
   global.set $~argumentsLength
   local.get $0
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#establishInternalTackingValues@varargs
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#subtractHistogram16 (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32> (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i64)
  (local $6 i64)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $4
   i32.load offset=4
   local.set $3
   local.get $4
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $4
   i32.load
   drop
  end
  local.get $0
  i32.load offset=116
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $3
  local.get $0
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  i32.add
  local.set $4
  local.get $3
  local.get $0
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.tee $3
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 0
   local.set $3
   local.get $4
   local.get $0
   i32.load offset=116
   i32.sub
  else
   local.get $4
  end
  i64.extend_i32_s
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 14000
    i32.const 9952
    i32.const 748
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   loop $for-loop|0
    local.get $2
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $2
     i32.const 2
     i32.shl
     i32.add
     i32.load
     i64.extend_i32_u
     local.tee $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $2
      i64.const 0
      local.get $6
      i64.sub
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#addToCountAtIndex
      local.get $5
      local.get $6
      i64.add
      local.set $5
     end
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $5
   i64.sub
   i64.store offset=168
  else
   loop $for-loop|1
    local.get $2
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $2
     i32.const 2
     i32.shl
     i32.add
     i32.load
     i64.extend_i32_u
     local.tee $6
     i64.const 0
     i64.gt_u
     if
      local.get $1
      i32.load offset=116
      local.get $2
      local.get $1
      i32.load offset=116
      i32.const 1
      i32.sub
      i32.and
      i32.add
      local.set $4
      local.get $0
      local.get $2
      local.get $1
      i32.load offset=108
      i32.shr_s
      i32.const 1
      i32.sub
      local.tee $3
      i32.const 0
      i32.lt_s
      if (result i32)
       i32.const 0
       local.set $3
       local.get $4
       local.get $1
       i32.load offset=116
       i32.sub
      else
       local.get $4
      end
      i64.extend_i32_s
      local.get $3
      local.get $1
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shl
      local.tee $5
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtValue
      local.get $6
      i64.lt_u
      if
       i32.const 14608
       local.get $6
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14672
       call $~lib/string/String.__concat
       local.get $5
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14720
       call $~lib/string/String.__concat
       local.get $0
       local.get $5
       call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtValue
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14800
       call $~lib/string/String.__concat
       i32.const 9952
       i32.const 777
       i32.const 13
       call $~lib/builtins/abort
       unreachable
      end
      local.get $0
      i64.const 0
      local.get $6
      i64.sub
      local.get $5
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordCountAtValue
     end
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=144
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtValue
  i64.const 0
  i64.le_u
  if (result i32)
   i32.const 1
  else
   local.get $0
   local.get $0
   i64.load offset=152
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtValue
   i64.const 0
   i64.le_u
  end
  if
   i32.const 0
   global.set $~argumentsLength
   local.get $0
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#establishInternalTackingValues@varargs
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#subtractHistogram32 (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64> (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i64)
  (local $6 i64)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $4
   i32.load offset=4
   local.set $3
   local.get $4
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $4
   i32.load
   drop
  end
  local.get $0
  i32.load offset=116
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $3
  local.get $0
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  i32.add
  local.set $4
  local.get $3
  local.get $0
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.tee $3
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 0
   local.set $3
   local.get $4
   local.get $0
   i32.load offset=116
   i32.sub
  else
   local.get $4
  end
  i64.extend_i32_s
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 14000
    i32.const 9952
    i32.const 748
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   loop $for-loop|0
    local.get $2
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $2
     i32.const 3
     i32.shl
     i32.add
     i64.load
     local.tee $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $2
      i64.const 0
      local.get $6
      i64.sub
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#addToCountAtIndex
      local.get $5
      local.get $6
      i64.add
      local.set $5
     end
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $5
   i64.sub
   i64.store offset=168
  else
   loop $for-loop|1
    local.get $2
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $2
     i32.const 3
     i32.shl
     i32.add
     i64.load
     local.tee $6
     i64.const 0
     i64.gt_u
     if
      local.get $1
      i32.load offset=116
      local.get $2
      local.get $1
      i32.load offset=116
      i32.const 1
      i32.sub
      i32.and
      i32.add
      local.set $4
      local.get $0
      local.get $2
      local.get $1
      i32.load offset=108
      i32.shr_s
      i32.const 1
      i32.sub
      local.tee $3
      i32.const 0
      i32.lt_s
      if (result i32)
       i32.const 0
       local.set $3
       local.get $4
       local.get $1
       i32.load offset=116
       i32.sub
      else
       local.get $4
      end
      i64.extend_i32_s
      local.get $3
      local.get $1
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shl
      local.tee $5
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtValue
      local.get $6
      i64.lt_u
      if
       i32.const 14608
       local.get $6
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14672
       call $~lib/string/String.__concat
       local.get $5
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14720
       call $~lib/string/String.__concat
       local.get $0
       local.get $5
       call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtValue
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14800
       call $~lib/string/String.__concat
       i32.const 9952
       i32.const 777
       i32.const 13
       call $~lib/builtins/abort
       unreachable
      end
      local.get $0
      i64.const 0
      local.get $6
      i64.sub
      local.get $5
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordCountAtValue
     end
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=144
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtValue
  i64.const 0
  i64.le_u
  if (result i32)
   i32.const 1
  else
   local.get $0
   local.get $0
   i64.load offset=152
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtValue
   i64.const 0
   i64.le_u
  end
  if
   i32.const 0
   global.set $~argumentsLength
   local.get $0
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#establishInternalTackingValues@varargs
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#subtractHistogram64 (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#subtract<assembly/packedarray/PackedArray/PackedArray,u64> (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i64)
  (local $6 i64)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $4
   i32.load offset=4
   local.set $3
   local.get $4
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $4
   i32.load
   drop
  end
  local.get $0
  i32.load offset=116
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $3
  local.get $0
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  i32.add
  local.set $4
  local.get $3
  local.get $0
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.tee $3
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 0
   local.set $3
   local.get $4
   local.get $0
   i32.load offset=116
   i32.sub
  else
   local.get $4
  end
  i64.extend_i32_s
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 14000
    i32.const 9952
    i32.const 748
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   loop $for-loop|0
    local.get $2
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     local.get $2
     call $assembly/packedarray/PackedArray/PackedArray#get
     local.tee $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $2
      i64.const 0
      local.get $6
      i64.sub
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#addToCountAtIndex
      local.get $5
      local.get $6
      i64.add
      local.set $5
     end
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $5
   i64.sub
   i64.store offset=168
  else
   loop $for-loop|1
    local.get $2
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     local.get $2
     call $assembly/packedarray/PackedArray/PackedArray#get
     local.tee $6
     i64.const 0
     i64.gt_u
     if
      local.get $1
      i32.load offset=116
      local.get $2
      local.get $1
      i32.load offset=116
      i32.const 1
      i32.sub
      i32.and
      i32.add
      local.set $4
      local.get $0
      local.get $2
      local.get $1
      i32.load offset=108
      i32.shr_s
      i32.const 1
      i32.sub
      local.tee $3
      i32.const 0
      i32.lt_s
      if (result i32)
       i32.const 0
       local.set $3
       local.get $4
       local.get $1
       i32.load offset=116
       i32.sub
      else
       local.get $4
      end
      i64.extend_i32_s
      local.get $3
      local.get $1
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shl
      local.tee $5
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtValue
      local.get $6
      i64.lt_u
      if
       i32.const 14608
       local.get $6
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14672
       call $~lib/string/String.__concat
       local.get $5
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14720
       call $~lib/string/String.__concat
       local.get $0
       local.get $5
       call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtValue
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14800
       call $~lib/string/String.__concat
       i32.const 9952
       i32.const 777
       i32.const 13
       call $~lib/builtins/abort
       unreachable
      end
      local.get $0
      i64.const 0
      local.get $6
      i64.sub
      local.get $5
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordCountAtValue
     end
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=144
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtValue
  i64.const 0
  i64.le_u
  if (result i32)
   i32.const 1
  else
   local.get $0
   local.get $0
   i64.load offset=152
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtValue
   i64.const 0
   i64.le_u
  end
  if
   i32.const 0
   global.set $~argumentsLength
   local.get $0
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#establishInternalTackingValues@varargs
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#subtractPackedHistogram (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#subtract<assembly/packedarray/PackedArray/PackedArray,u64>
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/encoding/fillBufferFromCountsArray<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16> (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i64)
  (local $6 i32)
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $4
   local.get $2
   local.get $4
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  local.set $2
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $0
   i32.load offset=4
   local.set $4
   local.get $0
   local.get $4
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $0
   i32.load
   drop
  end
  local.get $2
  local.get $2
  i64.load offset=144
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex
  i32.const 1
  i32.add
  local.set $4
  loop $while-continue|0
   local.get $3
   local.get $4
   i32.lt_s
   if
    local.get $3
    local.tee $0
    i32.const 1
    i32.add
    local.set $3
    local.get $2
    i32.load offset=160
    i32.load
    i32.load offset=4
    local.get $0
    i32.const 1
    i32.shl
    i32.add
    i32.load16_u
    i64.extend_i32_u
    local.tee $5
    i64.const 0
    i64.lt_u
    if
     i32.const 14832
     local.get $5
     call $~lib/util/number/utoa64
     call $~lib/string/String.__concat
     i32.const 14960
     call $~lib/string/String.__concat
     local.get $3
     call $~lib/util/number/itoa32
     call $~lib/string/String.__concat
     i32.const 15008
     call $~lib/string/String.__concat
     local.get $2
     i32.load offset=116
     local.get $3
     local.get $2
     i32.load offset=116
     i32.const 1
     i32.sub
     i32.and
     i32.add
     local.set $0
     local.get $2
     i32.load offset=104
     local.get $3
     local.get $2
     i32.load offset=108
     i32.shr_s
     i32.const 1
     i32.sub
     local.tee $1
     i32.const 0
     i32.lt_s
     if
      i32.const 0
      local.set $1
      local.get $0
      local.get $2
      i32.load offset=116
      i32.sub
      local.set $0
     end
     local.get $0
     i64.extend_i32_s
     local.get $1
     local.get $2
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shl
     local.tee $5
     local.get $2
     i64.load offset=128
     i64.or
     i64.clz
     i32.wrap_i64
     i32.sub
     local.set $0
     local.get $5
     local.get $0
     local.get $2
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shr_u
     i32.wrap_i64
     i64.extend_i32_s
     local.get $0
     local.get $2
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shl
     call $~lib/util/number/utoa64
     call $~lib/string/String.__concat
     i32.const 15104
     call $~lib/string/String.__concat
     local.get $2
     i32.load offset=116
     local.get $3
     local.get $2
     i32.load offset=116
     i32.const 1
     i32.sub
     i32.and
     i32.add
     local.set $1
     local.get $3
     local.get $2
     local.tee $0
     i32.load offset=108
     i32.shr_s
     i32.const 1
     i32.sub
     local.tee $3
     i32.const 0
     i32.lt_s
     if
      i32.const 0
      local.set $3
      local.get $1
      local.get $0
      i32.load offset=116
      i32.sub
      local.set $1
     end
     local.get $0
     i32.load offset=104
     local.get $1
     i64.extend_i32_s
     local.get $3
     local.get $0
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shl
     local.tee $5
     local.get $0
     i64.load offset=128
     i64.or
     i64.clz
     i32.wrap_i64
     i32.sub
     local.set $1
     local.get $5
     local.get $1
     local.get $0
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shr_u
     i32.wrap_i64
     i64.extend_i32_s
     local.get $1
     local.get $0
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shl
     i64.const 1
     local.get $0
     i32.load offset=112
     local.get $0
     i32.load offset=104
     local.get $5
     local.get $0
     i64.load offset=128
     i64.or
     i64.clz
     i32.wrap_i64
     i32.sub
     i32.add
     i64.extend_i32_s
     i64.shl
     i64.add
     call $~lib/util/number/utoa64
     call $~lib/string/String.__concat
     i32.const 14800
     call $~lib/string/String.__concat
     i32.const 15136
     i32.const 31
     i32.const 7
     call $~lib/builtins/abort
     unreachable
    end
    i32.const 0
    local.set $0
    local.get $5
    i64.eqz
    if
     i32.const 1
     local.set $0
     loop $while-continue|1
      local.get $3
      local.get $4
      i32.lt_s
      if (result i32)
       local.get $2
       i32.load offset=160
       i32.load
       i32.load offset=4
       local.get $3
       i32.const 1
       i32.shl
       i32.add
       i32.load16_u
       i64.extend_i32_u
       i64.eqz
      else
       i32.const 0
      end
      if
       local.get $0
       i32.const 1
       i32.add
       local.set $0
       local.get $3
       i32.const 1
       i32.add
       local.set $3
       br $while-continue|1
      end
     end
    end
    local.get $0
    i32.const 1
    i32.gt_s
    if
     local.get $1
     i32.const 0
     local.get $0
     i32.sub
     i64.extend_i32_s
     call $assembly/ZigZagEncoding/ZigZagEncoding.encode
    else
     local.get $1
     local.get $5
     call $assembly/ZigZagEncoding/ZigZagEncoding.encode
    end
    br $while-continue|0
   end
  end
  local.get $2
  i32.const 16700
  i32.gt_u
  if
   local.get $2
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/encoding/encodeIntoByteBuffer<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16> (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $1
  i32.load
  local.set $3
  local.get $1
  i32.const 478450451
  call $assembly/ByteBuffer/ByteBuffer#putInt32
  local.get $1
  i32.const 0
  call $assembly/ByteBuffer/ByteBuffer#putInt32
  local.get $1
  i32.const 1
  call $assembly/ByteBuffer/ByteBuffer#putInt32
  local.get $1
  local.get $0
  i32.load8_u offset=32
  call $assembly/ByteBuffer/ByteBuffer#putInt32
  local.get $1
  local.get $0
  i64.load offset=24
  call $assembly/ByteBuffer/ByteBuffer#putInt64
  local.get $1
  local.get $0
  i64.load offset=16
  call $assembly/ByteBuffer/ByteBuffer#putInt64
  local.get $1
  i64.const 1
  call $assembly/ByteBuffer/ByteBuffer#putInt64
  local.get $1
  i32.load
  local.set $4
  local.get $0
  local.get $1
  call $assembly/encoding/fillBufferFromCountsArray<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>
  local.get $1
  i32.load
  local.set $2
  local.get $1
  local.get $3
  i32.const 4
  i32.add
  i32.store
  local.get $1
  local.get $2
  local.get $4
  i32.sub
  call $assembly/ByteBuffer/ByteBuffer#putInt32
  local.get $1
  local.get $2
  i32.store
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#encode (param $0 i32) (result i32)
  (local $1 i32)
  local.get $0
  i32.load
  call $assembly/ByteBuffer/ByteBuffer.allocate
  local.tee $0
  call $assembly/encoding/encodeIntoByteBuffer<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>
  local.get $0
  i32.load offset=4
  i32.const 0
  local.get $0
  i32.load
  call $~lib/typedarray/Uint8Array#slice
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#reset (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  i32.load
  local.tee $3
  i32.load offset=160
  i32.load
  local.tee $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $1
   i32.load offset=4
   local.set $2
   local.get $1
   local.get $2
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $1
   i32.load
   drop
  end
  local.get $0
  i32.load offset=4
  local.set $4
  i32.const 0
  local.get $0
  i32.load offset=8
  i32.const 1
  i32.shr_u
  local.tee $2
  i32.const 0
  local.get $2
  i32.lt_s
  select
  local.set $1
  i32.const 2147483647
  local.get $2
  i32.const 2147483647
  local.get $2
  i32.lt_s
  select
  local.set $2
  loop $for-loop|0
   local.get $1
   local.get $2
   i32.lt_s
   if
    local.get $4
    local.get $1
    i32.const 1
    i32.shl
    i32.add
    i32.const 0
    i32.store16
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0
   end
  end
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $3
  i64.const 0
  i64.store offset=168
  local.get $3
  i64.const 0
  i64.store offset=64
  local.get $3
  i64.const 0
  i64.store offset=72
  local.get $3
  i64.const 0
  i64.store offset=144
  local.get $3
  i64.const -1
  i64.store offset=152
 )
 (func $assembly/AbstractHistogramBase/AbstractHistogramBase<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#constructor (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.eqz
  if
   call $~lib/rt/tlsf/maybeInitialize
   i32.const 104
   i32.const 29
   call $~lib/rt/tlsf/allocateBlock
   i32.const 16
   i32.add
   local.tee $0
   i32.const 16700
   i32.gt_u
   if
    local.get $0
    i32.const 16
    i32.sub
    local.tee $1
    i32.load offset=4
    local.set $2
    local.get $1
    local.get $2
    i32.const 1
    i32.add
    i32.store offset=4
    local.get $1
    i32.load
    drop
   end
  end
  local.get $0
  f64.const 0
  f64.store
  local.get $0
  i32.const 0
  i32.store8 offset=8
  local.get $0
  i64.const 0
  i64.store offset=16
  local.get $0
  i64.const 0
  i64.store offset=24
  local.get $0
  i32.const 0
  i32.store8 offset=32
  local.get $0
  i64.const 0
  i64.store offset=40
  local.get $0
  i32.const 0
  i32.store offset=48
  local.get $0
  i32.const 0
  i32.store offset=52
  local.get $0
  i64.const 0
  i64.store offset=56
  local.get $0
  i64.const -1
  i64.store offset=64
  local.get $0
  i64.const 0
  i64.store offset=72
  local.get $0
  i32.const 1152
  i32.store offset=80
  local.get $0
  f64.const 1
  f64.store offset=88
  local.get $0
  i32.const 0
  i32.store offset=96
  local.get $0
  i32.const 0
  i32.store offset=100
  local.get $0
  f64.const 0
  f64.store
  local.get $0
  i64.const 0
  i64.store offset=16
  local.get $0
  i64.const 0
  i64.store offset=24
  local.get $0
  i32.const 0
  i32.store8 offset=32
  local.get $0
  i64.const 0
  i64.store offset=40
  local.get $0
  i32.const 0
  i32.store offset=48
  local.get $0
  i32.const 0
  i32.store offset=52
  local.get $0
  i64.const 0
  i64.store offset=56
  local.get $0
 )
 (func $assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>#constructor (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  call $~lib/rt/tlsf/maybeInitialize
  i32.const 4
  i32.const 26
  call $~lib/rt/tlsf/allocateBlock
  i32.const 16
  i32.add
  local.tee $2
  i32.const 16700
  i32.gt_u
  if
   local.get $2
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $1
   local.get $3
   local.get $1
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $2
  i32.const 0
  i32.store
  local.get $0
  call $~lib/typedarray/Uint32Array#constructor
  local.tee $0
  local.tee $1
  local.get $2
  i32.load
  local.tee $3
  i32.ne
  if
   local.get $1
   i32.const 16700
   i32.gt_u
   if
    local.get $1
    i32.const 16
    i32.sub
    local.tee $4
    i32.load offset=4
    local.set $5
    local.get $4
    local.get $5
    i32.const 1
    i32.add
    i32.store offset=4
    local.get $4
    i32.load
    drop
   end
   local.get $3
   i32.const 16700
   i32.gt_u
   if
    local.get $3
    i32.const 16
    i32.sub
    call $~lib/rt/pure/decrement
   end
  end
  local.get $2
  local.get $1
  i32.store
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $2
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#constructor (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  call $~lib/rt/tlsf/maybeInitialize
  i32.const 120
  i32.const 30
  call $~lib/rt/tlsf/allocateBlock
  i32.const 16
  i32.add
  local.tee $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $1
  i32.const 0
  i32.store
  local.get $1
  f64.const 0
  f64.store offset=8
  local.get $1
  f64.const 0
  f64.store offset=16
  local.get $1
  i32.const 0
  i32.store8 offset=24
  local.get $1
  i32.const 0
  i32.store offset=28
  local.get $1
  i64.const 0
  i64.store offset=32
  local.get $1
  i32.const 0
  i32.store offset=40
  local.get $1
  i64.const 0
  i64.store offset=48
  local.get $1
  i64.const 0
  i64.store offset=56
  local.get $1
  i64.const 0
  i64.store offset=64
  local.get $1
  i64.const 0
  i64.store offset=72
  local.get $1
  i64.const 0
  i64.store offset=80
  local.get $1
  i64.const 0
  i64.store offset=88
  local.get $1
  i64.const 0
  i64.store offset=96
  local.get $1
  i64.const 0
  i64.store offset=104
  local.get $1
  i32.const 0
  i32.store8 offset=112
  local.get $1
  call $assembly/HistogramIterationValue/HistogramIterationValue#constructor
  i32.store offset=116
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $1
  i32.const 0
  i32.store
  local.get $1
  f64.const 0
  f64.store offset=8
  local.get $1
  f64.const 0
  f64.store offset=16
  local.get $1
  i32.const 0
  i32.store8 offset=24
  local.get $1
  local.get $0
  i32.const 1
  call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#doReset
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $1
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#constructor (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  call $~lib/rt/tlsf/maybeInitialize
  i32.const 96
  i32.const 31
  call $~lib/rt/tlsf/allocateBlock
  i32.const 16
  i32.add
  local.tee $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $1
  i32.const 0
  i32.store
  local.get $1
  i32.const 0
  i32.store offset=4
  local.get $1
  i64.const 0
  i64.store offset=8
  local.get $1
  i32.const 0
  i32.store offset=16
  local.get $1
  i64.const 0
  i64.store offset=24
  local.get $1
  i64.const 0
  i64.store offset=32
  local.get $1
  i64.const 0
  i64.store offset=40
  local.get $1
  i64.const 0
  i64.store offset=48
  local.get $1
  i64.const 0
  i64.store offset=56
  local.get $1
  i64.const 0
  i64.store offset=64
  local.get $1
  i64.const 0
  i64.store offset=72
  local.get $1
  i64.const 0
  i64.store offset=80
  local.get $1
  i32.const 0
  i32.store8 offset=88
  local.get $1
  call $assembly/HistogramIterationValue/HistogramIterationValue#constructor
  i32.store offset=92
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $1
  local.get $0
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#doReset
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $1
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#init (param $0 i32) (param $1 i64) (param $2 i64) (param $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i64)
  (local $8 i32)
  local.get $0
  local.get $1
  i64.store offset=24
  local.get $0
  local.get $2
  i64.store offset=16
  local.get $0
  local.get $3
  i32.store8 offset=32
  local.get $0
  f64.const 1
  f64.store offset=88
  f64.const 10
  local.get $3
  f64.convert_i32_u
  call $~lib/math/NativeMath.pow
  i64.trunc_f64_u
  i64.const 2
  i64.mul
  local.set $7
  local.get $0
  local.get $1
  f64.convert_i64_u
  call $~lib/math/NativeMath.log2
  f64.floor
  i32.trunc_f64_s
  i32.store offset=112
  local.get $0
  i64.const 1
  local.get $0
  i32.load offset=112
  i64.extend_i32_s
  i64.shl
  i64.const 1
  i64.sub
  i64.store offset=136
  local.get $0
  local.get $7
  f64.convert_i64_u
  call $~lib/math/NativeMath.log2
  f64.ceil
  i32.trunc_f64_s
  local.tee $3
  i32.const 1
  i32.sub
  i32.store offset=108
  local.get $0
  i32.const 1
  local.get $3
  i32.shl
  i32.store offset=48
  local.get $0
  local.get $0
  i32.load offset=48
  i32.const 1
  i32.shr_s
  i32.store offset=116
  local.get $0
  local.get $0
  i32.load offset=48
  i64.extend_i32_s
  i64.const 1
  i64.sub
  local.get $0
  i32.load offset=112
  i64.extend_i32_s
  i64.shl
  i64.store offset=128
  local.get $0
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#establishSize
  local.get $0
  i32.load offset=52
  call $assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>#constructor
  local.tee $3
  local.set $4
  local.get $3
  local.get $0
  i32.load offset=160
  local.tee $5
  i32.ne
  if
   local.get $4
   i32.const 16700
   i32.gt_u
   if
    local.get $4
    i32.const 16
    i32.sub
    local.tee $6
    i32.load offset=4
    local.set $8
    local.get $6
    local.get $8
    i32.const 1
    i32.add
    i32.store offset=4
    local.get $6
    i32.load
    drop
   end
   local.get $5
   i32.const 16700
   i32.gt_u
   if
    local.get $5
    i32.const 16
    i32.sub
    call $~lib/rt/pure/decrement
   end
  end
  local.get $0
  local.get $4
  i32.store offset=160
  local.get $0
  i32.const 0
  local.get $0
  i32.load offset=112
  i32.sub
  local.get $0
  i32.load offset=108
  i32.sub
  i32.const 63
  i32.add
  i32.store offset=104
  local.get $0
  call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#constructor
  local.set $5
  local.get $0
  i32.load offset=96
  local.tee $4
  i32.const 16700
  i32.gt_u
  if
   local.get $4
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $0
  local.get $5
  i32.store offset=96
  local.get $0
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#constructor
  local.set $5
  local.get $0
  i32.load offset=100
  local.tee $4
  i32.const 16700
  i32.gt_u
  if
   local.get $4
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $0
  local.get $5
  i32.store offset=100
  local.get $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#constructor (param $0 i64) (param $1 i64) (param $2 i32) (result i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 f64)
  call $~lib/rt/tlsf/maybeInitialize
  i32.const 176
  i32.const 28
  call $~lib/rt/tlsf/allocateBlock
  i32.const 16
  i32.add
  local.tee $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   local.tee $4
   i32.load offset=4
   local.set $5
   local.get $4
   local.get $5
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $4
   i32.load
   drop
  end
  local.get $3
  i32.const 0
  i32.store offset=104
  local.get $3
  i32.const 0
  i32.store offset=108
  local.get $3
  i32.const 0
  i32.store offset=112
  local.get $3
  i32.const 0
  i32.store offset=116
  local.get $3
  i64.const 0
  i64.store offset=120
  local.get $3
  i64.const 0
  i64.store offset=128
  local.get $3
  i64.const 0
  i64.store offset=136
  local.get $3
  i64.const 0
  i64.store offset=144
  local.get $3
  i64.const -1
  i64.store offset=152
  local.get $3
  i32.const 0
  i32.store offset=160
  local.get $3
  i64.const 0
  i64.store offset=168
  local.get $3
  call $assembly/AbstractHistogramBase/AbstractHistogramBase<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#constructor
  local.set $3
  local.get $0
  i64.const 1
  i64.lt_u
  if
   i32.const 9856
   i32.const 9952
   i32.const 61
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $1
  local.get $0
  i64.const 2
  i64.mul
  i64.lt_u
  if
   i32.const 10016
   i32.const 9952
   i32.const 64
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  i32.const 1
  local.get $2
  i32.const 255
  i32.and
  local.tee $4
  i32.const 5
  i32.gt_u
  local.get $4
  i32.const 0
  i32.lt_u
  select
  if
   i32.const 10224
   i32.const 9952
   i32.const 72
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  global.get $assembly/AbstractHistogramBase/AbstractHistogramBase.identityBuilder
  local.tee $6
  f64.const 1
  f64.add
  global.set $assembly/AbstractHistogramBase/AbstractHistogramBase.identityBuilder
  local.get $3
  local.get $6
  f64.store
  local.get $3
  local.get $0
  local.get $1
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#init
  local.get $3
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#constructor (param $0 i32) (param $1 f64) (param $2 f64) (param $3 f64) (param $4 i32) (param $5 i32) (result i32)
  (local $6 i32)
  (local $7 i32)
  local.get $0
  i32.eqz
  if
   call $~lib/rt/tlsf/maybeInitialize
   i32.const 4
   i32.const 27
   call $~lib/rt/tlsf/allocateBlock
   i32.const 16
   i32.add
   local.tee $0
   i32.const 16700
   i32.gt_u
   if
    local.get $0
    i32.const 16
    i32.sub
    local.tee $6
    i32.load offset=4
    local.set $7
    local.get $6
    local.get $7
    i32.const 1
    i32.add
    i32.store offset=4
    local.get $6
    i32.load
    drop
   end
  end
  local.get $0
  i32.const 0
  i32.store
  local.get $5
  i32.const 16700
  i32.gt_u
  if
   local.get $5
   i32.const 16
   i32.sub
   local.tee $6
   i32.load offset=4
   local.set $7
   local.get $6
   local.get $7
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $6
   i32.load
   drop
  end
  local.get $5
  if
   local.get $5
   local.get $0
   i32.load
   local.tee $4
   i32.ne
   if
    local.get $5
    i32.const 16700
    i32.gt_u
    if
     local.get $5
     i32.const 16
     i32.sub
     local.tee $6
     i32.load offset=4
     local.set $7
     local.get $6
     local.get $7
     i32.const 1
     i32.add
     i32.store offset=4
     local.get $6
     i32.load
     drop
    end
    local.get $4
    i32.const 16700
    i32.gt_u
    if
     local.get $4
     i32.const 16
     i32.sub
     call $~lib/rt/pure/decrement
    end
   end
   local.get $0
   local.get $5
   i32.store
  else
   local.get $1
   i64.trunc_f64_u
   local.get $2
   i64.trunc_f64_u
   local.get $3
   i32.trunc_f64_u
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#constructor
   local.set $6
   local.get $0
   i32.load
   local.tee $7
   i32.const 16700
   i32.gt_u
   if
    local.get $7
    i32.const 16
    i32.sub
    call $~lib/rt/pure/decrement
   end
   local.get $0
   local.get $6
   i32.store
   local.get $0
   i32.load
   local.get $4
   i32.store8 offset=8
  end
  local.get $5
  i32.const 16700
  i32.gt_u
  if
   local.get $5
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $0
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#next (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i64)
  (local $3 i32)
  loop $while-continue|0
   local.get $0
   i32.load offset=16
   local.get $0
   i32.load offset=4
   i32.load offset=52
   i32.lt_s
   if
    local.get $0
    local.get $0
    i32.load offset=4
    i32.load offset=160
    i32.load
    i32.load offset=4
    local.get $0
    i32.load offset=16
    i32.const 2
    i32.shl
    i32.add
    i32.load
    i64.extend_i32_u
    i64.store offset=80
    local.get $0
    i32.load8_u offset=88
    if
     local.get $0
     local.get $0
     i64.load offset=56
     local.get $0
     i64.load offset=80
     i64.add
     i64.store offset=56
     local.get $0
     i32.load offset=4
     local.tee $1
     i32.load offset=104
     local.get $0
     i64.load offset=24
     local.tee $2
     local.get $1
     i64.load offset=128
     i64.or
     i64.clz
     i32.wrap_i64
     i32.sub
     local.set $3
     local.get $0
     local.get $0
     i64.load offset=64
     local.get $0
     i64.load offset=80
     local.get $2
     local.get $3
     local.get $1
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shr_u
     i32.wrap_i64
     i64.extend_i32_s
     local.get $3
     local.get $1
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shl
     i64.const 1
     local.get $1
     i32.load offset=112
     local.get $1
     i32.load offset=104
     local.get $2
     local.get $1
     i64.load offset=128
     i64.or
     i64.clz
     i32.wrap_i64
     i32.sub
     i32.add
     i64.extend_i32_s
     i64.shl
     i64.add
     i64.const 1
     i64.sub
     i64.mul
     i64.add
     i64.store offset=64
     local.get $0
     i32.const 0
     i32.store8 offset=88
    end
    local.get $0
    i32.load offset=4
    i32.load offset=160
    i32.load
    i32.load offset=4
    local.get $0
    i32.load offset=16
    i32.const 2
    i32.shl
    i32.add
    i32.load
    i64.extend_i32_u
    i64.const 0
    i64.ne
    if (result i32)
     local.get $0
     i32.load
     local.get $0
     i32.load offset=16
     i32.ne
    else
     i32.const 0
    end
    if
     local.get $0
     i32.load offset=4
     local.tee $1
     i32.load offset=104
     local.get $0
     i64.load offset=24
     local.tee $2
     local.get $1
     i64.load offset=128
     i64.or
     i64.clz
     i32.wrap_i64
     i32.sub
     local.set $3
     local.get $0
     i32.load offset=92
     local.get $2
     local.get $3
     local.get $1
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shr_u
     i32.wrap_i64
     i64.extend_i32_s
     local.get $3
     local.get $1
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shl
     i64.const 1
     local.get $1
     i32.load offset=112
     local.get $1
     i32.load offset=104
     local.get $2
     local.get $1
     i64.load offset=128
     i64.or
     i64.clz
     i32.wrap_i64
     i32.sub
     i32.add
     i64.extend_i32_s
     i64.shl
     i64.add
     i64.const 1
     i64.sub
     local.tee $2
     i64.store
     local.get $0
     i32.load offset=92
     local.get $0
     i64.load offset=40
     i64.store offset=8
     local.get $0
     i32.load offset=92
     local.get $0
     i64.load offset=80
     i64.store offset=16
     local.get $0
     i32.load offset=92
     local.get $0
     i64.load offset=56
     local.get $0
     i64.load offset=48
     i64.sub
     i64.store offset=24
     local.get $0
     i32.load offset=92
     local.get $0
     i64.load offset=56
     i64.store offset=32
     local.get $0
     i32.load offset=92
     local.get $0
     i64.load offset=64
     i64.store offset=40
     local.get $0
     i32.load offset=92
     f64.const 100
     local.get $0
     i64.load offset=56
     f64.convert_i64_u
     f64.mul
     local.get $0
     i64.load offset=72
     f64.convert_i64_u
     f64.div
     f64.store offset=48
     local.get $0
     i32.load offset=92
     f64.const 100
     local.get $0
     i64.load offset=56
     f64.convert_i64_u
     f64.mul
     local.get $0
     i64.load offset=72
     f64.convert_i64_u
     f64.div
     f64.store offset=56
     local.get $0
     local.get $2
     i64.store offset=40
     local.get $0
     local.get $0
     i64.load offset=56
     i64.store offset=48
     local.get $0
     local.get $0
     i32.load offset=16
     i32.store
     local.get $0
     i32.load offset=4
     i64.load offset=168
     local.get $0
     i64.load offset=8
     i64.ne
     if
      i32.const 12704
      i32.const 12608
      i32.const 128
      i32.const 11
      call $~lib/builtins/abort
      unreachable
     end
     local.get $0
     i32.load offset=92
     local.tee $0
     i32.const 16700
     i32.gt_u
     if
      local.get $0
      i32.const 16
      i32.sub
      local.tee $1
      i32.load offset=4
      local.set $3
      local.get $1
      local.get $3
      i32.const 1
      i32.add
      i32.store offset=4
      local.get $1
      i32.load
      drop
     end
     local.get $0
     return
    end
    local.get $0
    call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#incrementSubBucket
    br $while-continue|0
   end
  end
  i32.const 12800
  i32.const 12608
  i32.const 134
  i32.const 5
  call $~lib/builtins/abort
  unreachable
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getMean (param $0 i32) (result f64)
  (local $1 i32)
  (local $2 i64)
  (local $3 i32)
  local.get $0
  i64.load offset=168
  i64.eqz
  if
   f64.const 0
   return
  end
  local.get $0
  i32.load offset=100
  local.tee $1
  local.get $1
  i32.load offset=4
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#doReset
  loop $while-continue|0
   local.get $0
   i32.load offset=100
   call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#hasNext
   if
    local.get $2
    local.get $0
    i32.load offset=100
    call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#next
    local.tee $1
    i64.load
    local.tee $2
    local.get $0
    i32.load offset=104
    local.get $2
    local.get $0
    i64.load offset=128
    i64.or
    i64.clz
    i32.wrap_i64
    i32.sub
    local.tee $3
    local.get $0
    i32.load offset=112
    i32.add
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    i64.extend_i32_s
    local.get $3
    local.get $0
    i32.load offset=112
    i32.add
    i64.extend_i32_s
    i64.shl
    i64.const 1
    local.get $0
    i32.load offset=112
    local.get $0
    i32.load offset=104
    local.get $2
    local.get $0
    i64.load offset=128
    i64.or
    i64.clz
    i32.wrap_i64
    i32.sub
    i32.add
    i64.extend_i32_s
    i64.shl
    i64.const 1
    i64.shr_u
    i64.add
    local.get $1
    i64.load offset=16
    i64.mul
    i64.add
    local.set $2
    local.get $1
    i32.const 16700
    i32.gt_u
    if
     local.get $1
     i32.const 16
     i32.sub
     call $~lib/rt/pure/decrement
    end
    br $while-continue|0
   end
  end
  local.get $2
  f64.convert_i64_u
  local.get $0
  i64.load offset=168
  f64.convert_i64_u
  f64.div
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#computeStdDeviation (param $0 i32) (param $1 f64) (result f64)
  (local $2 i32)
  (local $3 f64)
  (local $4 i64)
  (local $5 i32)
  local.get $0
  i64.load offset=168
  i64.eqz
  if
   f64.const 0
   return
  end
  local.get $0
  i32.load offset=100
  local.tee $2
  local.get $2
  i32.load offset=4
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#doReset
  loop $while-continue|0
   local.get $0
   i32.load offset=100
   call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#hasNext
   if
    local.get $3
    local.get $0
    i32.load offset=100
    call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#next
    local.tee $2
    i64.load
    local.tee $4
    local.get $0
    i32.load offset=104
    local.get $4
    local.get $0
    i64.load offset=128
    i64.or
    i64.clz
    i32.wrap_i64
    i32.sub
    local.tee $5
    local.get $0
    i32.load offset=112
    i32.add
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    i64.extend_i32_s
    local.get $5
    local.get $0
    i32.load offset=112
    i32.add
    i64.extend_i32_s
    i64.shl
    i64.const 1
    local.get $0
    i32.load offset=112
    local.get $0
    i32.load offset=104
    local.get $4
    local.get $0
    i64.load offset=128
    i64.or
    i64.clz
    i32.wrap_i64
    i32.sub
    i32.add
    i64.extend_i32_s
    i64.shl
    i64.const 1
    i64.shr_u
    i64.add
    f64.convert_i64_u
    local.get $1
    f64.sub
    local.tee $3
    local.get $3
    f64.mul
    local.get $2
    i64.load offset=24
    f64.convert_i64_u
    f64.mul
    f64.add
    local.set $3
    local.get $2
    i32.const 16700
    i32.gt_u
    if
     local.get $2
     i32.const 16
     i32.sub
     call $~lib/rt/pure/decrement
    end
    br $while-continue|0
   end
  end
  local.get $3
  local.get $0
  i64.load offset=168
  f64.convert_i64_u
  f64.div
  f64.sqrt
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#get:stdDeviation (param $0 i32) (result f64)
  block $__inlined_func$assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getStdDeviation (result f64)
   f64.const 0
   local.get $0
   i32.load
   local.tee $0
   i64.load offset=168
   i64.eqz
   br_if $__inlined_func$assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getStdDeviation
   drop
   local.get $0
   local.get $0
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getMean
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#computeStdDeviation
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#get:mean (param $0 i32) (result f64)
  local.get $0
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getMean
 )
 (func $~lib/typedarray/Uint32Array#set<~lib/typedarray/Uint32Array> (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $1
  i32.load offset=8
  i32.const 2
  i32.shr_u
  local.get $0
  i32.load offset=8
  i32.const 2
  i32.shr_u
  i32.gt_s
  if
   i32.const 13120
   i32.const 13184
   i32.const 1775
   i32.const 47
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i32.load offset=4
  local.get $1
  i32.load offset=4
  local.get $1
  i32.load offset=8
  call $~lib/memory/memory.copy
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#resize (param $0 i32) (param $1 i64)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#establishSize
  local.get $0
  i32.load offset=160
  local.set $2
  local.get $0
  i32.load offset=52
  call $assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>#constructor
  local.tee $3
  i32.load
  local.get $2
  i32.load
  call $~lib/typedarray/Uint32Array#set<~lib/typedarray/Uint32Array>
  local.get $0
  i32.load offset=160
  local.tee $2
  i32.const 16700
  i32.gt_u
  if
   local.get $2
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $0
  local.get $3
  i32.store offset=160
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#addToCountAtIndex (param $0 i32) (param $1 i32) (param $2 i64)
  local.get $2
  local.get $0
  i32.load offset=160
  i32.load
  i32.load offset=4
  local.get $1
  i32.const 2
  i32.shl
  i32.add
  i32.load
  i64.extend_i32_u
  i64.add
  local.tee $2
  i64.const 0
  i64.lt_u
  if
   i32.const 0
   i32.const 9952
   i32.const 611
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i32.load offset=160
  i32.load
  i32.load offset=4
  local.get $1
  i32.const 2
  i32.shl
  i32.add
  local.get $2
  i64.store32
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#handleRecordException (param $0 i32) (param $1 i64) (param $2 i64)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  local.get $0
  i32.load8_u offset=8
  i32.eqz
  if
   i32.const 12992
   local.get $2
   call $~lib/util/number/utoa64
   call $~lib/string/String.__concat
   i32.const 13024
   call $~lib/string/String.__concat
   i32.const 9952
   i32.const 225
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#resize
  local.get $0
  local.get $0
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#addToCountAtIndex
  local.get $0
  i32.load offset=116
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $5
  local.get $0
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  i32.add
  local.set $6
  local.get $5
  local.get $0
  local.tee $3
  local.tee $4
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.tee $5
  i32.const 0
  i32.lt_s
  if
   i32.const 0
   local.set $5
   local.get $6
   local.get $3
   i32.load offset=116
   i32.sub
   local.set $6
  end
  local.get $4
  i32.load offset=104
  local.get $6
  i64.extend_i32_s
  local.get $5
  local.get $3
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  local.tee $1
  local.get $4
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  local.set $0
  local.get $3
  local.get $1
  local.get $0
  local.get $4
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shr_u
  i32.wrap_i64
  i64.extend_i32_s
  local.get $0
  local.get $4
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.const 1
  local.get $4
  i32.load offset=112
  local.get $4
  i32.load offset=104
  local.get $1
  local.get $4
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.add
  i64.const 1
  i64.sub
  i64.store offset=16
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordSingleValue (param $0 i32) (param $1 i64)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex
  local.tee $2
  local.get $0
  i32.load offset=52
  i32.ge_s
  if
   local.get $0
   i64.const 1
   local.get $1
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#handleRecordException
  else
   local.get $0
   i32.load offset=160
   i32.load
   i32.load offset=4
   local.get $2
   i32.const 2
   i32.shl
   i32.add
   i32.load
   i32.const 1
   i32.add
   local.tee $3
   i32.const 0
   i32.lt_u
   if
    local.get $3
    call $~lib/util/number/utoa32
    i32.const 13248
    call $~lib/string/String.__concat
    i32.const 9952
    i32.const 593
    i32.const 7
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   i32.load offset=160
   i32.load
   i32.load offset=4
   local.get $2
   i32.const 2
   i32.shl
   i32.add
   local.get $3
   i32.store
  end
  local.get $1
  local.get $0
  i64.load offset=144
  i64.gt_u
  if
   local.get $0
   local.get $1
   local.get $0
   i64.load offset=136
   i64.add
   i64.store offset=144
  end
  local.get $1
  local.get $0
  i64.load offset=152
  i64.lt_u
  if (result i32)
   local.get $1
   i64.const 0
   i64.ne
  else
   i32.const 0
  end
  if
   local.get $1
   local.get $0
   i64.load offset=136
   i64.gt_u
   if
    local.get $0
    local.get $1
    local.get $0
    i64.load offset=136
    i64.const -1
    i64.xor
    i64.and
    i64.store offset=152
   end
  end
  local.get $0
  local.get $0
  i64.load offset=168
  i64.const 1
  i64.add
  i64.store offset=168
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordValue (param $0 i32) (param $1 f64)
  local.get $0
  i32.load
  local.get $1
  i64.trunc_f64_u
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordSingleValue
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordCountAtValue (param $0 i32) (param $1 i64) (param $2 i64)
  (local $3 i32)
  local.get $0
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex
  local.tee $3
  local.get $0
  i32.load offset=52
  i32.ge_s
  if
   local.get $0
   local.get $1
   local.get $2
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#handleRecordException
  else
   local.get $0
   local.get $3
   local.get $1
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#addToCountAtIndex
  end
  local.get $2
  local.get $0
  i64.load offset=144
  i64.gt_u
  if
   local.get $0
   local.get $2
   local.get $0
   i64.load offset=136
   i64.add
   i64.store offset=144
  end
  local.get $2
  local.get $0
  i64.load offset=152
  i64.lt_u
  if (result i32)
   local.get $2
   i64.const 0
   i64.ne
  else
   i32.const 0
  end
  if
   local.get $2
   local.get $0
   i64.load offset=136
   i64.gt_u
   if
    local.get $0
    local.get $2
    local.get $0
    i64.load offset=136
    i64.const -1
    i64.xor
    i64.and
    i64.store offset=152
   end
  end
  local.get $0
  local.get $1
  local.get $0
  i64.load offset=168
  i64.add
  i64.store offset=168
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordValueWithCount (param $0 i32) (param $1 f64) (param $2 f64)
  local.get $0
  i32.load
  local.get $2
  i64.trunc_f64_u
  local.get $1
  i64.trunc_f64_u
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordCountAtValue
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordValueWithExpectedInterval (param $0 i32) (param $1 f64) (param $2 f64)
  (local $3 i64)
  (local $4 i64)
  block $__inlined_func$assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordSingleValueWithExpectedInterval
   local.get $2
   i64.trunc_f64_u
   local.set $4
   local.get $0
   i32.load
   local.tee $0
   local.get $1
   i64.trunc_f64_u
   local.tee $3
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordSingleValue
   i32.const 1
   local.get $4
   i64.eqz
   local.get $3
   local.get $4
   i64.lt_u
   select
   br_if $__inlined_func$assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordSingleValueWithExpectedInterval
   local.get $3
   local.get $4
   i64.sub
   local.set $3
   loop $for-loop|0
    local.get $3
    local.get $4
    i64.ge_u
    if
     local.get $0
     local.get $3
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordSingleValue
     local.get $3
     local.get $4
     i64.sub
     local.set $3
     br $for-loop|0
    end
   end
  end
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getValueAtPercentile (param $0 i32) (param $1 f64) (result i64)
  (local $2 i32)
  (local $3 i64)
  (local $4 f64)
  (local $5 i32)
  (local $6 i64)
  local.get $1
  f64.const 100
  f64.min
  f64.const 100
  f64.div
  local.get $0
  i64.load offset=168
  f64.convert_i64_u
  f64.mul
  local.set $4
  i32.const 1
  global.set $~argumentsLength
  local.get $4
  local.get $4
  local.get $4
  i64.reinterpret_f64
  i64.const 1
  i64.xor
  f64.reinterpret_i64
  f64.sub
  f64.abs
  f64.sub
  f64.ceil
  f64.const 1
  f64.max
  i64.trunc_f64_u
  local.set $3
  loop $for-loop|0
   local.get $2
   local.get $0
   i32.load offset=52
   i32.lt_s
   if
    local.get $6
    local.get $0
    i32.load offset=160
    i32.load
    i32.load offset=4
    local.get $2
    i32.const 2
    i32.shl
    i32.add
    i32.load
    i64.extend_i32_u
    i64.add
    local.tee $6
    local.get $3
    i64.ge_u
    if
     local.get $0
     i32.load offset=116
     local.get $2
     local.get $0
     i32.load offset=116
     i32.const 1
     i32.sub
     i32.and
     i32.add
     local.set $5
     local.get $2
     local.get $0
     i32.load offset=108
     i32.shr_s
     i32.const 1
     i32.sub
     local.tee $2
     i32.const 0
     i32.lt_s
     if
      local.get $5
      local.get $0
      i32.load offset=116
      i32.sub
      local.set $5
      i32.const 0
      local.set $2
     end
     local.get $5
     i64.extend_i32_s
     local.get $2
     local.get $0
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shl
     local.set $3
     local.get $1
     f64.const 0
     f64.eq
     if (result i64)
      local.get $3
      local.get $0
      i32.load offset=104
      local.get $3
      local.get $0
      i64.load offset=128
      i64.or
      i64.clz
      i32.wrap_i64
      i32.sub
      local.tee $2
      local.get $0
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shr_u
      i32.wrap_i64
      i64.extend_i32_s
      local.get $2
      local.get $0
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shl
     else
      local.get $3
      local.get $0
      i32.load offset=104
      local.get $3
      local.get $0
      i64.load offset=128
      i64.or
      i64.clz
      i32.wrap_i64
      i32.sub
      local.tee $2
      local.get $0
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shr_u
      i32.wrap_i64
      i64.extend_i32_s
      local.get $2
      local.get $0
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shl
      i64.const 1
      local.get $0
      i32.load offset=112
      local.get $0
      i32.load offset=104
      local.get $3
      local.get $0
      i64.load offset=128
      i64.or
      i64.clz
      i32.wrap_i64
      i32.sub
      i32.add
      i64.extend_i32_s
      i64.shl
      i64.add
      i64.const 1
      i64.sub
     end
     return
    end
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|0
   end
  end
  i64.const 0
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getValueAtPercentile (param $0 i32) (param $1 f64) (result f64)
  local.get $0
  i32.load
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getValueAtPercentile
  f64.convert_i64_u
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#next (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i64)
  (local $3 i32)
  loop $while-continue|0
   local.get $0
   i32.load offset=40
   local.get $0
   i32.load offset=28
   i32.load offset=52
   i32.lt_s
   if
    local.get $0
    local.get $0
    i32.load offset=28
    i32.load offset=160
    i32.load
    i32.load offset=4
    local.get $0
    i32.load offset=40
    i32.const 2
    i32.shl
    i32.add
    i32.load
    i64.extend_i32_u
    i64.store offset=104
    local.get $0
    i32.load8_u offset=112
    if
     local.get $0
     local.get $0
     i64.load offset=80
     local.get $0
     i64.load offset=104
     i64.add
     i64.store offset=80
     local.get $0
     i32.load offset=28
     local.tee $1
     i32.load offset=104
     local.get $0
     i64.load offset=48
     local.tee $2
     local.get $1
     i64.load offset=128
     i64.or
     i64.clz
     i32.wrap_i64
     i32.sub
     local.set $3
     local.get $0
     local.get $0
     i64.load offset=88
     local.get $0
     i64.load offset=104
     local.get $2
     local.get $3
     local.get $1
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shr_u
     i32.wrap_i64
     i64.extend_i32_s
     local.get $3
     local.get $1
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shl
     i64.const 1
     local.get $1
     i32.load offset=112
     local.get $1
     i32.load offset=104
     local.get $2
     local.get $1
     i64.load offset=128
     i64.or
     i64.clz
     i32.wrap_i64
     i32.sub
     i32.add
     i64.extend_i32_s
     i64.shl
     i64.add
     i64.const 1
     i64.sub
     i64.mul
     i64.add
     i64.store offset=88
     local.get $0
     i32.const 0
     i32.store8 offset=112
    end
    block $__inlined_func$assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#reachedIterationLevel (result i32)
     i32.const 0
     local.get $0
     i64.load offset=104
     i64.eqz
     br_if $__inlined_func$assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#reachedIterationLevel
     drop
     f64.const 100
     local.get $0
     i64.load offset=80
     f64.convert_i64_u
     f64.mul
     local.get $0
     i64.load offset=96
     f64.convert_i64_u
     f64.div
     local.get $0
     f64.load offset=8
     f64.ge
    end
    if
     local.get $0
     i32.load offset=28
     local.tee $1
     i32.load offset=104
     local.get $0
     i64.load offset=48
     local.tee $2
     local.get $1
     i64.load offset=128
     i64.or
     i64.clz
     i32.wrap_i64
     i32.sub
     local.set $3
     local.get $0
     i32.load offset=116
     local.get $2
     local.get $3
     local.get $1
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shr_u
     i32.wrap_i64
     i64.extend_i32_s
     local.get $3
     local.get $1
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shl
     i64.const 1
     local.get $1
     i32.load offset=112
     local.get $1
     i32.load offset=104
     local.get $2
     local.get $1
     i64.load offset=128
     i64.or
     i64.clz
     i32.wrap_i64
     i32.sub
     i32.add
     i64.extend_i32_s
     i64.shl
     i64.add
     i64.const 1
     i64.sub
     local.tee $2
     i64.store
     local.get $0
     i32.load offset=116
     local.get $0
     i64.load offset=64
     i64.store offset=8
     local.get $0
     i32.load offset=116
     local.get $0
     i64.load offset=104
     i64.store offset=16
     local.get $0
     i32.load offset=116
     local.get $0
     i64.load offset=80
     local.get $0
     i64.load offset=72
     i64.sub
     i64.store offset=24
     local.get $0
     i32.load offset=116
     local.get $0
     i64.load offset=80
     i64.store offset=32
     local.get $0
     i32.load offset=116
     local.get $0
     i64.load offset=88
     i64.store offset=40
     local.get $0
     i32.load offset=116
     f64.const 100
     local.get $0
     i64.load offset=80
     f64.convert_i64_u
     f64.mul
     local.get $0
     i64.load offset=96
     f64.convert_i64_u
     f64.div
     f64.store offset=48
     local.get $0
     i32.load offset=116
     local.get $0
     f64.load offset=8
     f64.store offset=56
     local.get $0
     local.get $2
     i64.store offset=64
     local.get $0
     local.get $0
     i64.load offset=80
     i64.store offset=72
     local.get $0
     call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#incrementIterationLevel
     local.get $0
     i32.load offset=28
     i64.load offset=168
     local.get $0
     i64.load offset=32
     i64.ne
     if
      i32.const 12704
      i32.const 13488
      i32.const 187
      i32.const 11
      call $~lib/builtins/abort
      unreachable
     end
     local.get $0
     i32.load offset=116
     local.tee $0
     i32.const 16700
     i32.gt_u
     if
      local.get $0
      i32.const 16
      i32.sub
      local.tee $1
      i32.load offset=4
      local.set $3
      local.get $1
      local.get $3
      i32.const 1
      i32.add
      i32.store offset=4
      local.get $1
      i32.load
      drop
     end
     local.get $0
     return
    end
    local.get $0
    call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#incrementSubBucket
    br $while-continue|0
   end
  end
  i32.const 12800
  i32.const 13488
  i32.const 193
  i32.const 5
  call $~lib/builtins/abort
  unreachable
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#outputPercentileDistribution (param $0 i32) (param $1 i32) (param $2 f64) (result i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  (local $15 i32)
  (local $16 i32)
  (local $17 i32)
  (local $18 i32)
  (local $19 i32)
  (local $20 i32)
  (local $21 i32)
  (local $22 i32)
  (local $23 i32)
  (local $24 i32)
  (local $25 i32)
  (local $26 i32)
  (local $27 i32)
  (local $28 i32)
  (local $29 i32)
  (local $30 i32)
  (local $31 i32)
  (local $32 i32)
  (local $33 f64)
  (local $34 i32)
  i32.const 1312
  i32.const 13344
  call $~lib/string/String.__concat
  local.tee $24
  local.tee $3
  i32.const 1312
  i32.ne
  if
   local.get $3
   i32.const 16700
   i32.gt_u
   if
    local.get $3
    i32.const 16
    i32.sub
    local.tee $15
    i32.load offset=4
    local.set $5
    local.get $15
    local.get $5
    i32.const 1
    i32.add
    i32.store offset=4
    local.get $15
    i32.load
    drop
   end
  end
  local.get $0
  i32.load offset=96
  local.tee $15
  i32.const 16700
  i32.gt_u
  if
   local.get $15
   i32.const 16
   i32.sub
   local.tee $5
   i32.load offset=4
   local.set $10
   local.get $5
   local.get $10
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $5
   i32.load
   drop
  end
  local.get $15
  local.get $15
  i32.load offset=28
  local.get $1
  call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#doReset
  i32.const 12
  local.get $0
  i32.load8_u offset=32
  call $assembly/formatters/FloatFormatter#constructor
  local.set $19
  i32.const 2
  i32.const 12
  call $assembly/formatters/FloatFormatter#constructor
  local.set $20
  i32.const 10
  call $assembly/formatters/IntegerFormatter#constructor
  local.set $21
  i32.const 14
  i32.const 2
  call $assembly/formatters/FloatFormatter#constructor
  local.set $23
  loop $while-continue|0
   local.get $15
   call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#hasNext
   if
    local.get $15
    call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#next
    local.tee $5
    f64.load offset=56
    f64.const 100
    f64.lt
    if
     local.get $3
     local.tee $1
     local.get $19
     local.get $5
     i64.load
     f64.convert_i64_u
     local.get $2
     f64.div
     call $assembly/formatters/FloatFormatter#format
     local.tee $10
     i32.const 1184
     call $~lib/string/String.__concat
     local.tee $11
     local.get $20
     local.get $5
     f64.load offset=56
     f64.const 100
     f64.div
     call $assembly/formatters/FloatFormatter#format
     local.tee $12
     call $~lib/string/String.__concat
     local.tee $6
     i32.const 1184
     call $~lib/string/String.__concat
     local.tee $7
     local.get $21
     local.get $5
     i64.load offset=32
     call $assembly/formatters/IntegerFormatter#format
     local.tee $8
     call $~lib/string/String.__concat
     local.tee $4
     i32.const 1184
     call $~lib/string/String.__concat
     local.tee $13
     local.get $23
     f64.const 1
     f64.const 1
     local.get $5
     f64.load offset=56
     f64.const 100
     f64.div
     f64.sub
     f64.div
     call $assembly/formatters/FloatFormatter#format
     local.tee $14
     call $~lib/string/String.__concat
     local.tee $9
     i32.const 13600
     call $~lib/string/String.__concat
     local.tee $16
     call $~lib/string/String.__concat
     local.tee $17
     local.tee $3
     local.get $1
     i32.ne
     if
      local.get $3
      i32.const 16700
      i32.gt_u
      if
       local.get $3
       i32.const 16
       i32.sub
       local.tee $18
       i32.load offset=4
       local.set $22
       local.get $18
       local.get $22
       i32.const 1
       i32.add
       i32.store offset=4
       local.get $18
       i32.load
       drop
      end
      local.get $1
      i32.const 16700
      i32.gt_u
      if
       local.get $1
       i32.const 16
       i32.sub
       call $~lib/rt/pure/decrement
      end
     end
     local.get $10
     i32.const 16700
     i32.gt_u
     if
      local.get $10
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $11
     i32.const 16700
     i32.gt_u
     if
      local.get $11
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $12
     i32.const 16700
     i32.gt_u
     if
      local.get $12
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $6
     i32.const 16700
     i32.gt_u
     if
      local.get $6
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $7
     i32.const 16700
     i32.gt_u
     if
      local.get $7
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $8
     i32.const 16700
     i32.gt_u
     if
      local.get $8
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $4
     i32.const 16700
     i32.gt_u
     if
      local.get $4
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $13
     i32.const 16700
     i32.gt_u
     if
      local.get $13
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $14
     i32.const 16700
     i32.gt_u
     if
      local.get $14
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $9
     i32.const 16700
     i32.gt_u
     if
      local.get $9
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $16
     i32.const 16700
     i32.gt_u
     if
      local.get $16
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $17
     i32.const 16700
     i32.gt_u
     if
      local.get $17
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
    else
     local.get $3
     local.tee $1
     local.get $19
     local.get $5
     i64.load
     f64.convert_i64_u
     local.get $2
     f64.div
     call $assembly/formatters/FloatFormatter#format
     local.tee $10
     i32.const 1184
     call $~lib/string/String.__concat
     local.tee $11
     local.get $20
     local.get $5
     f64.load offset=56
     f64.const 100
     f64.div
     call $assembly/formatters/FloatFormatter#format
     local.tee $12
     call $~lib/string/String.__concat
     local.tee $6
     i32.const 1184
     call $~lib/string/String.__concat
     local.tee $7
     local.get $21
     local.get $5
     i64.load offset=32
     call $assembly/formatters/IntegerFormatter#format
     local.tee $8
     call $~lib/string/String.__concat
     local.tee $4
     i32.const 13600
     call $~lib/string/String.__concat
     local.tee $13
     call $~lib/string/String.__concat
     local.tee $14
     local.tee $3
     local.get $1
     i32.ne
     if
      local.get $3
      i32.const 16700
      i32.gt_u
      if
       local.get $3
       i32.const 16
       i32.sub
       local.tee $9
       i32.load offset=4
       local.set $16
       local.get $9
       local.get $16
       i32.const 1
       i32.add
       i32.store offset=4
       local.get $9
       i32.load
       drop
      end
      local.get $1
      i32.const 16700
      i32.gt_u
      if
       local.get $1
       i32.const 16
       i32.sub
       call $~lib/rt/pure/decrement
      end
     end
     local.get $10
     i32.const 16700
     i32.gt_u
     if
      local.get $10
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $11
     i32.const 16700
     i32.gt_u
     if
      local.get $11
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $12
     i32.const 16700
     i32.gt_u
     if
      local.get $12
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $6
     i32.const 16700
     i32.gt_u
     if
      local.get $6
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $7
     i32.const 16700
     i32.gt_u
     if
      local.get $7
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $8
     i32.const 16700
     i32.gt_u
     if
      local.get $8
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $4
     i32.const 16700
     i32.gt_u
     if
      local.get $4
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $13
     i32.const 16700
     i32.gt_u
     if
      local.get $13
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $14
     i32.const 16700
     i32.gt_u
     if
      local.get $14
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
    end
    local.get $5
    i32.const 16700
    i32.gt_u
    if
     local.get $5
     i32.const 16
     i32.sub
     call $~lib/rt/pure/decrement
    end
    br $while-continue|0
   end
  end
  i32.const 12
  local.get $0
  i32.load8_u offset=32
  call $assembly/formatters/FloatFormatter#constructor
  local.tee $16
  local.get $0
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getMean
  local.tee $33
  local.get $2
  f64.div
  call $assembly/formatters/FloatFormatter#format
  local.set $11
  local.get $16
  local.get $0
  local.get $33
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#computeStdDeviation
  local.get $2
  f64.div
  call $assembly/formatters/FloatFormatter#format
  local.set $12
  local.get $16
  local.get $0
  i64.load offset=144
  f64.convert_i64_u
  local.get $2
  f64.div
  call $assembly/formatters/FloatFormatter#format
  i32.const 12
  call $assembly/formatters/IntegerFormatter#constructor
  local.tee $17
  local.get $0
  i64.load offset=168
  call $assembly/formatters/IntegerFormatter#format
  local.set $5
  local.get $17
  local.get $0
  i64.load offset=40
  call $assembly/formatters/IntegerFormatter#format
  local.set $10
  local.get $17
  local.get $0
  i32.load offset=48
  i64.extend_i32_s
  call $assembly/formatters/IntegerFormatter#format
  local.set $0
  local.get $3
  local.set $4
  local.get $11
  local.tee $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   local.tee $6
   i32.load offset=4
   local.set $7
   local.get $6
   local.get $7
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $6
   i32.load
   drop
  end
  i32.const 13632
  local.get $3
  local.tee $13
  call $~lib/string/String.__concat
  local.tee $18
  i32.const 13680
  call $~lib/string/String.__concat
  local.tee $25
  local.get $12
  local.tee $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   local.tee $6
   i32.load offset=4
   local.set $8
   local.get $6
   local.get $8
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $6
   i32.load
   drop
  end
  local.get $3
  local.tee $14
  call $~lib/string/String.__concat
  local.tee $22
  i32.const 13744
  call $~lib/string/String.__concat
  local.tee $26
  local.set $7
  local.tee $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   local.tee $6
   i32.load offset=4
   local.set $8
   local.get $6
   local.get $8
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $6
   i32.load
   drop
  end
  local.get $7
  local.get $3
  call $~lib/string/String.__concat
  local.tee $27
  i32.const 13792
  call $~lib/string/String.__concat
  local.tee $28
  local.get $5
  local.tee $6
  i32.const 16700
  i32.gt_u
  if
   local.get $6
   i32.const 16
   i32.sub
   local.tee $7
   i32.load offset=4
   local.set $9
   local.get $7
   local.get $9
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $7
   i32.load
   drop
  end
  local.get $6
  call $~lib/string/String.__concat
  local.tee $29
  i32.const 13856
  call $~lib/string/String.__concat
  local.tee $30
  local.get $10
  local.tee $7
  i32.const 16700
  i32.gt_u
  if
   local.get $7
   i32.const 16
   i32.sub
   local.tee $8
   i32.load offset=4
   local.set $1
   local.get $8
   local.get $1
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $8
   i32.load
   drop
  end
  local.get $7
  call $~lib/string/String.__concat
  local.tee $1
  i32.const 13904
  call $~lib/string/String.__concat
  local.tee $31
  local.set $5
  local.get $0
  local.tee $8
  i32.const 16700
  i32.gt_u
  if
   local.get $8
   i32.const 16
   i32.sub
   local.tee $9
   i32.load offset=4
   local.set $0
   local.get $9
   local.get $0
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $9
   i32.load
   drop
  end
  local.get $4
  local.tee $9
  local.get $9
  local.get $5
  local.get $8
  call $~lib/string/String.__concat
  local.tee $4
  i32.const 13968
  call $~lib/string/String.__concat
  local.tee $5
  call $~lib/string/String.__concat
  local.tee $0
  local.tee $10
  i32.ne
  if
   local.get $10
   i32.const 16700
   i32.gt_u
   if
    local.get $10
    i32.const 16
    i32.sub
    local.tee $32
    i32.load offset=4
    local.set $34
    local.get $32
    local.get $34
    i32.const 1
    i32.add
    i32.store offset=4
    local.get $32
    i32.load
    drop
   end
   local.get $9
   i32.const 16700
   i32.gt_u
   if
    local.get $9
    i32.const 16
    i32.sub
    call $~lib/rt/pure/decrement
   end
  end
  local.get $24
  i32.const 16700
  i32.gt_u
  if
   local.get $24
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $15
  i32.const 16700
  i32.gt_u
  if
   local.get $15
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $19
  i32.const 16700
  i32.gt_u
  if
   local.get $19
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $20
  i32.const 16700
  i32.gt_u
  if
   local.get $20
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $21
  i32.const 16700
  i32.gt_u
  if
   local.get $21
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $23
  i32.const 16700
  i32.gt_u
  if
   local.get $23
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $16
  i32.const 16700
  i32.gt_u
  if
   local.get $16
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $11
  i32.const 16700
  i32.gt_u
  if
   local.get $11
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $12
  i32.const 16700
  i32.gt_u
  if
   local.get $12
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $17
  i32.const 16700
  i32.gt_u
  if
   local.get $17
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $6
  i32.const 16700
  i32.gt_u
  if
   local.get $6
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $7
  i32.const 16700
  i32.gt_u
  if
   local.get $7
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $8
  i32.const 16700
  i32.gt_u
  if
   local.get $8
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $13
  i32.const 16700
  i32.gt_u
  if
   local.get $13
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $18
  i32.const 16700
  i32.gt_u
  if
   local.get $18
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $25
  i32.const 16700
  i32.gt_u
  if
   local.get $25
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $14
  i32.const 16700
  i32.gt_u
  if
   local.get $14
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $22
  i32.const 16700
  i32.gt_u
  if
   local.get $22
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $26
  i32.const 16700
  i32.gt_u
  if
   local.get $26
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $27
  i32.const 16700
  i32.gt_u
  if
   local.get $27
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $28
  i32.const 16700
  i32.gt_u
  if
   local.get $28
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $6
  i32.const 16700
  i32.gt_u
  if
   local.get $6
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $29
  i32.const 16700
  i32.gt_u
  if
   local.get $29
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $30
  i32.const 16700
  i32.gt_u
  if
   local.get $30
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $7
  i32.const 16700
  i32.gt_u
  if
   local.get $7
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $31
  i32.const 16700
  i32.gt_u
  if
   local.get $31
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $8
  i32.const 16700
  i32.gt_u
  if
   local.get $8
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $4
  i32.const 16700
  i32.gt_u
  if
   local.get $4
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $5
  i32.const 16700
  i32.gt_u
  if
   local.get $5
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $10
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#outputPercentileDistribution (param $0 i32) (param $1 f64) (param $2 f64) (result i32)
  local.get $0
  i32.load
  local.get $1
  i32.trunc_f64_s
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#outputPercentileDistribution
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#addWhileCorrectingForCoordinatedOmission (param $0 i32) (param $1 i32) (param $2 i64)
  (local $3 i32)
  (local $4 i32)
  (local $5 i64)
  (local $6 i64)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $4
   local.get $3
   local.get $4
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $4
   local.get $3
   local.get $4
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $1
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#constructor
  local.set $3
  loop $while-continue|0
   local.get $3
   call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#hasNext
   if
    local.get $0
    local.get $3
    call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#next
    local.tee $4
    i64.load offset=16
    local.tee $6
    local.get $4
    i64.load
    local.tee $5
    call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordCountAtValue
    i32.const 1
    local.get $5
    local.get $2
    i64.le_u
    local.get $2
    i64.const 0
    i64.le_u
    select
    i32.eqz
    if
     local.get $5
     local.get $2
     i64.sub
     local.set $5
     loop $for-loop|0
      local.get $5
      local.get $2
      i64.ge_u
      if
       local.get $0
       local.get $6
       local.get $5
       call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordCountAtValue
       local.get $5
       local.get $2
       i64.sub
       local.set $5
       br $for-loop|0
      end
     end
    end
    local.get $4
    i32.const 16700
    i32.gt_u
    if
     local.get $4
     i32.const 16
     i32.sub
     call $~lib/rt/pure/decrement
    end
    br $while-continue|0
   end
  end
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#copyCorrectedForCoordinatedOmission (param $0 i32) (param $1 f64) (result i32)
  (local $2 i32)
  (local $3 i64)
  local.get $1
  i64.trunc_f64_u
  local.set $3
  local.get $0
  i32.load
  local.tee $2
  i64.load offset=24
  local.get $2
  i64.load offset=16
  local.get $2
  i32.load8_u offset=32
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#constructor
  local.tee $0
  local.get $2
  local.get $3
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#addWhileCorrectingForCoordinatedOmission
  i32.const 0
  f64.const 0
  f64.const 0
  f64.const 0
  i32.const 0
  local.get $0
  call $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#constructor
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#add<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i32)
  (local $4 i64)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $5
   local.get $3
   local.get $5
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $0
  i32.load offset=116
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $5
  local.get $0
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  i32.add
  local.set $3
  local.get $5
  local.get $0
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.tee $5
  i32.const 0
  i32.lt_s
  if
   i32.const 0
   local.set $5
   local.get $3
   local.get $0
   i32.load offset=116
   i32.sub
   local.set $3
  end
  local.get $0
  i32.load offset=104
  local.get $3
  i64.extend_i32_s
  local.get $5
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  local.tee $2
  local.get $0
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  local.set $3
  local.get $2
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shr_u
  i32.wrap_i64
  i64.extend_i32_s
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.const 1
  local.get $0
  i32.load offset=112
  local.get $0
  i32.load offset=104
  local.get $2
  local.get $0
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.add
  i64.const 1
  i64.sub
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 14000
    i32.const 9952
    i32.const 639
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   loop $for-loop|0
    local.get $6
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $6
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     i32.add
     i32.load8_u
     i64.extend_i32_u
     local.tee $2
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $6
      local.get $2
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#addToCountAtIndex
      local.get $2
      local.get $4
      i64.add
      local.set $4
     end
     local.get $6
     i32.const 1
     i32.add
     local.set $6
     br $for-loop|0
    end
   end
   local.get $0
   local.get $4
   local.get $0
   i64.load offset=168
   i64.add
   i64.store offset=168
   local.get $0
   local.get $0
   i64.load offset=136
   local.get $0
   i64.load offset=144
   local.tee $2
   local.get $1
   i64.load offset=144
   local.tee $4
   local.get $2
   local.get $4
   i64.gt_u
   select
   i64.add
   i64.store offset=144
   local.get $0
   i64.load offset=152
   local.tee $2
   local.get $1
   i64.load offset=152
   local.tee $4
   local.get $2
   local.get $4
   i64.lt_u
   select
   local.tee $2
   local.get $0
   i64.load offset=136
   i64.gt_u
   if
    local.get $0
    local.get $2
    local.get $0
    i64.load offset=136
    i64.const -1
    i64.xor
    i64.and
    i64.store offset=152
   end
  else
   local.get $1
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex
   local.set $5
   local.get $1
   i32.load offset=116
   local.get $5
   local.get $1
   i32.load offset=116
   i32.const 1
   i32.sub
   i32.and
   i32.add
   local.set $3
   local.get $5
   local.get $1
   i32.load offset=160
   i32.load
   i32.load offset=4
   i32.add
   i32.load8_u
   i64.extend_i32_u
   local.set $2
   local.get $5
   local.get $1
   i32.load offset=108
   i32.shr_s
   i32.const 1
   i32.sub
   local.tee $6
   i32.const 0
   i32.lt_s
   if
    i32.const 0
    local.set $6
    local.get $3
    local.get $1
    i32.load offset=116
    i32.sub
    local.set $3
   end
   local.get $0
   local.get $2
   local.get $3
   i64.extend_i32_s
   local.get $6
   local.get $1
   i32.load offset=112
   i32.add
   i64.extend_i32_s
   i64.shl
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordCountAtValue
   loop $for-loop|1
    local.get $7
    local.get $5
    i32.lt_s
    if
     local.get $7
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     i32.add
     i32.load8_u
     i64.extend_i32_u
     local.tee $4
     local.set $2
     local.get $4
     i64.const 0
     i64.gt_u
     if
      local.get $1
      i32.load offset=116
      local.get $7
      local.get $1
      i32.load offset=116
      i32.const 1
      i32.sub
      i32.and
      i32.add
      local.set $3
      local.get $7
      local.get $1
      i32.load offset=108
      i32.shr_s
      i32.const 1
      i32.sub
      local.tee $6
      i32.const 0
      i32.lt_s
      if
       i32.const 0
       local.set $6
       local.get $3
       local.get $1
       i32.load offset=116
       i32.sub
       local.set $3
      end
      local.get $0
      local.get $2
      local.get $3
      i64.extend_i32_s
      local.get $6
      local.get $1
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shl
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordCountAtValue
     end
     local.get $7
     i32.const 1
     i32.add
     local.set $7
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=64
  local.tee $2
  local.get $1
  i64.load offset=64
  local.tee $4
  local.get $2
  local.get $4
  i64.lt_u
  select
  i64.store offset=64
  local.get $0
  local.get $0
  i64.load offset=72
  local.tee $2
  local.get $1
  i64.load offset=72
  local.tee $4
  local.get $2
  local.get $4
  i64.gt_u
  select
  i64.store offset=72
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#addHistogram8 (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#add<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#add<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i32)
  (local $4 i64)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $5
   local.get $3
   local.get $5
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $0
  i32.load offset=116
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $5
  local.get $0
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  i32.add
  local.set $3
  local.get $5
  local.get $0
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.tee $5
  i32.const 0
  i32.lt_s
  if
   i32.const 0
   local.set $5
   local.get $3
   local.get $0
   i32.load offset=116
   i32.sub
   local.set $3
  end
  local.get $0
  i32.load offset=104
  local.get $3
  i64.extend_i32_s
  local.get $5
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  local.tee $2
  local.get $0
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  local.set $3
  local.get $2
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shr_u
  i32.wrap_i64
  i64.extend_i32_s
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.const 1
  local.get $0
  i32.load offset=112
  local.get $0
  i32.load offset=104
  local.get $2
  local.get $0
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.add
  i64.const 1
  i64.sub
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 14000
    i32.const 9952
    i32.const 639
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   loop $for-loop|0
    local.get $6
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $6
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u
     i64.extend_i32_u
     local.tee $2
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $6
      local.get $2
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#addToCountAtIndex
      local.get $2
      local.get $4
      i64.add
      local.set $4
     end
     local.get $6
     i32.const 1
     i32.add
     local.set $6
     br $for-loop|0
    end
   end
   local.get $0
   local.get $4
   local.get $0
   i64.load offset=168
   i64.add
   i64.store offset=168
   local.get $0
   local.get $0
   i64.load offset=136
   local.get $0
   i64.load offset=144
   local.tee $2
   local.get $1
   i64.load offset=144
   local.tee $4
   local.get $2
   local.get $4
   i64.gt_u
   select
   i64.add
   i64.store offset=144
   local.get $0
   i64.load offset=152
   local.tee $2
   local.get $1
   i64.load offset=152
   local.tee $4
   local.get $2
   local.get $4
   i64.lt_u
   select
   local.tee $2
   local.get $0
   i64.load offset=136
   i64.gt_u
   if
    local.get $0
    local.get $2
    local.get $0
    i64.load offset=136
    i64.const -1
    i64.xor
    i64.and
    i64.store offset=152
   end
  else
   local.get $1
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex
   local.set $5
   local.get $1
   i32.load offset=116
   local.get $5
   local.get $1
   i32.load offset=116
   i32.const 1
   i32.sub
   i32.and
   i32.add
   local.set $3
   local.get $1
   i32.load offset=160
   i32.load
   i32.load offset=4
   local.get $5
   i32.const 1
   i32.shl
   i32.add
   i32.load16_u
   i64.extend_i32_u
   local.set $2
   local.get $5
   local.get $1
   i32.load offset=108
   i32.shr_s
   i32.const 1
   i32.sub
   local.tee $6
   i32.const 0
   i32.lt_s
   if
    i32.const 0
    local.set $6
    local.get $3
    local.get $1
    i32.load offset=116
    i32.sub
    local.set $3
   end
   local.get $0
   local.get $2
   local.get $3
   i64.extend_i32_s
   local.get $6
   local.get $1
   i32.load offset=112
   i32.add
   i64.extend_i32_s
   i64.shl
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordCountAtValue
   loop $for-loop|1
    local.get $7
    local.get $5
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $7
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u
     i64.extend_i32_u
     local.tee $4
     local.set $2
     local.get $4
     i64.const 0
     i64.gt_u
     if
      local.get $1
      i32.load offset=116
      local.get $7
      local.get $1
      i32.load offset=116
      i32.const 1
      i32.sub
      i32.and
      i32.add
      local.set $3
      local.get $7
      local.get $1
      i32.load offset=108
      i32.shr_s
      i32.const 1
      i32.sub
      local.tee $6
      i32.const 0
      i32.lt_s
      if
       i32.const 0
       local.set $6
       local.get $3
       local.get $1
       i32.load offset=116
       i32.sub
       local.set $3
      end
      local.get $0
      local.get $2
      local.get $3
      i64.extend_i32_s
      local.get $6
      local.get $1
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shl
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordCountAtValue
     end
     local.get $7
     i32.const 1
     i32.add
     local.set $7
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=64
  local.tee $2
  local.get $1
  i64.load offset=64
  local.tee $4
  local.get $2
  local.get $4
  i64.lt_u
  select
  i64.store offset=64
  local.get $0
  local.get $0
  i64.load offset=72
  local.tee $2
  local.get $1
  i64.load offset=72
  local.tee $4
  local.get $2
  local.get $4
  i64.gt_u
  select
  i64.store offset=72
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#addHistogram16 (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#add<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#add<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i32)
  (local $4 i64)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $5
   local.get $3
   local.get $5
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $0
  i32.load offset=116
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $5
  local.get $0
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  i32.add
  local.set $3
  local.get $5
  local.get $0
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.tee $5
  i32.const 0
  i32.lt_s
  if
   i32.const 0
   local.set $5
   local.get $3
   local.get $0
   i32.load offset=116
   i32.sub
   local.set $3
  end
  local.get $0
  i32.load offset=104
  local.get $3
  i64.extend_i32_s
  local.get $5
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  local.tee $2
  local.get $0
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  local.set $3
  local.get $2
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shr_u
  i32.wrap_i64
  i64.extend_i32_s
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.const 1
  local.get $0
  i32.load offset=112
  local.get $0
  i32.load offset=104
  local.get $2
  local.get $0
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.add
  i64.const 1
  i64.sub
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 14000
    i32.const 9952
    i32.const 639
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   loop $for-loop|0
    local.get $6
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $6
     i32.const 2
     i32.shl
     i32.add
     i32.load
     i64.extend_i32_u
     local.tee $2
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $6
      local.get $2
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#addToCountAtIndex
      local.get $2
      local.get $4
      i64.add
      local.set $4
     end
     local.get $6
     i32.const 1
     i32.add
     local.set $6
     br $for-loop|0
    end
   end
   local.get $0
   local.get $4
   local.get $0
   i64.load offset=168
   i64.add
   i64.store offset=168
   local.get $0
   local.get $0
   i64.load offset=136
   local.get $0
   i64.load offset=144
   local.tee $2
   local.get $1
   i64.load offset=144
   local.tee $4
   local.get $2
   local.get $4
   i64.gt_u
   select
   i64.add
   i64.store offset=144
   local.get $0
   i64.load offset=152
   local.tee $2
   local.get $1
   i64.load offset=152
   local.tee $4
   local.get $2
   local.get $4
   i64.lt_u
   select
   local.tee $2
   local.get $0
   i64.load offset=136
   i64.gt_u
   if
    local.get $0
    local.get $2
    local.get $0
    i64.load offset=136
    i64.const -1
    i64.xor
    i64.and
    i64.store offset=152
   end
  else
   local.get $1
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex
   local.set $5
   local.get $1
   i32.load offset=116
   local.get $5
   local.get $1
   i32.load offset=116
   i32.const 1
   i32.sub
   i32.and
   i32.add
   local.set $3
   local.get $1
   i32.load offset=160
   i32.load
   i32.load offset=4
   local.get $5
   i32.const 2
   i32.shl
   i32.add
   i32.load
   i64.extend_i32_u
   local.set $2
   local.get $5
   local.get $1
   i32.load offset=108
   i32.shr_s
   i32.const 1
   i32.sub
   local.tee $6
   i32.const 0
   i32.lt_s
   if
    i32.const 0
    local.set $6
    local.get $3
    local.get $1
    i32.load offset=116
    i32.sub
    local.set $3
   end
   local.get $0
   local.get $2
   local.get $3
   i64.extend_i32_s
   local.get $6
   local.get $1
   i32.load offset=112
   i32.add
   i64.extend_i32_s
   i64.shl
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordCountAtValue
   loop $for-loop|1
    local.get $7
    local.get $5
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $7
     i32.const 2
     i32.shl
     i32.add
     i32.load
     i64.extend_i32_u
     local.tee $4
     local.set $2
     local.get $4
     i64.const 0
     i64.gt_u
     if
      local.get $1
      i32.load offset=116
      local.get $7
      local.get $1
      i32.load offset=116
      i32.const 1
      i32.sub
      i32.and
      i32.add
      local.set $3
      local.get $7
      local.get $1
      i32.load offset=108
      i32.shr_s
      i32.const 1
      i32.sub
      local.tee $6
      i32.const 0
      i32.lt_s
      if
       i32.const 0
       local.set $6
       local.get $3
       local.get $1
       i32.load offset=116
       i32.sub
       local.set $3
      end
      local.get $0
      local.get $2
      local.get $3
      i64.extend_i32_s
      local.get $6
      local.get $1
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shl
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordCountAtValue
     end
     local.get $7
     i32.const 1
     i32.add
     local.set $7
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=64
  local.tee $2
  local.get $1
  i64.load offset=64
  local.tee $4
  local.get $2
  local.get $4
  i64.lt_u
  select
  i64.store offset=64
  local.get $0
  local.get $0
  i64.load offset=72
  local.tee $2
  local.get $1
  i64.load offset=72
  local.tee $4
  local.get $2
  local.get $4
  i64.gt_u
  select
  i64.store offset=72
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#addHistogram32 (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#add<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#add<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i32)
  (local $4 i64)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $5
   local.get $3
   local.get $5
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $0
  i32.load offset=116
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $5
  local.get $0
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  i32.add
  local.set $3
  local.get $5
  local.get $0
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.tee $5
  i32.const 0
  i32.lt_s
  if
   i32.const 0
   local.set $5
   local.get $3
   local.get $0
   i32.load offset=116
   i32.sub
   local.set $3
  end
  local.get $0
  i32.load offset=104
  local.get $3
  i64.extend_i32_s
  local.get $5
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  local.tee $2
  local.get $0
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  local.set $3
  local.get $2
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shr_u
  i32.wrap_i64
  i64.extend_i32_s
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.const 1
  local.get $0
  i32.load offset=112
  local.get $0
  i32.load offset=104
  local.get $2
  local.get $0
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.add
  i64.const 1
  i64.sub
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 14000
    i32.const 9952
    i32.const 639
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   loop $for-loop|0
    local.get $6
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $6
     i32.const 3
     i32.shl
     i32.add
     i64.load
     local.tee $2
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $6
      local.get $2
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#addToCountAtIndex
      local.get $2
      local.get $4
      i64.add
      local.set $4
     end
     local.get $6
     i32.const 1
     i32.add
     local.set $6
     br $for-loop|0
    end
   end
   local.get $0
   local.get $4
   local.get $0
   i64.load offset=168
   i64.add
   i64.store offset=168
   local.get $0
   local.get $0
   i64.load offset=136
   local.get $0
   i64.load offset=144
   local.tee $2
   local.get $1
   i64.load offset=144
   local.tee $4
   local.get $2
   local.get $4
   i64.gt_u
   select
   i64.add
   i64.store offset=144
   local.get $0
   i64.load offset=152
   local.tee $2
   local.get $1
   i64.load offset=152
   local.tee $4
   local.get $2
   local.get $4
   i64.lt_u
   select
   local.tee $2
   local.get $0
   i64.load offset=136
   i64.gt_u
   if
    local.get $0
    local.get $2
    local.get $0
    i64.load offset=136
    i64.const -1
    i64.xor
    i64.and
    i64.store offset=152
   end
  else
   local.get $1
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex
   local.set $5
   local.get $1
   i32.load offset=116
   local.get $5
   local.get $1
   i32.load offset=116
   i32.const 1
   i32.sub
   i32.and
   i32.add
   local.set $3
   local.get $1
   i32.load offset=160
   i32.load
   i32.load offset=4
   local.get $5
   i32.const 3
   i32.shl
   i32.add
   i64.load
   local.set $2
   local.get $5
   local.get $1
   i32.load offset=108
   i32.shr_s
   i32.const 1
   i32.sub
   local.tee $6
   i32.const 0
   i32.lt_s
   if
    i32.const 0
    local.set $6
    local.get $3
    local.get $1
    i32.load offset=116
    i32.sub
    local.set $3
   end
   local.get $0
   local.get $2
   local.get $3
   i64.extend_i32_s
   local.get $6
   local.get $1
   i32.load offset=112
   i32.add
   i64.extend_i32_s
   i64.shl
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordCountAtValue
   loop $for-loop|1
    local.get $7
    local.get $5
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $7
     i32.const 3
     i32.shl
     i32.add
     i64.load
     local.tee $4
     local.set $2
     local.get $4
     i64.const 0
     i64.gt_u
     if
      local.get $1
      i32.load offset=116
      local.get $7
      local.get $1
      i32.load offset=116
      i32.const 1
      i32.sub
      i32.and
      i32.add
      local.set $3
      local.get $7
      local.get $1
      i32.load offset=108
      i32.shr_s
      i32.const 1
      i32.sub
      local.tee $6
      i32.const 0
      i32.lt_s
      if
       i32.const 0
       local.set $6
       local.get $3
       local.get $1
       i32.load offset=116
       i32.sub
       local.set $3
      end
      local.get $0
      local.get $2
      local.get $3
      i64.extend_i32_s
      local.get $6
      local.get $1
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shl
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordCountAtValue
     end
     local.get $7
     i32.const 1
     i32.add
     local.set $7
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=64
  local.tee $2
  local.get $1
  i64.load offset=64
  local.tee $4
  local.get $2
  local.get $4
  i64.lt_u
  select
  i64.store offset=64
  local.get $0
  local.get $0
  i64.load offset=72
  local.tee $2
  local.get $1
  i64.load offset=72
  local.tee $4
  local.get $2
  local.get $4
  i64.gt_u
  select
  i64.store offset=72
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#addHistogram64 (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#add<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#add<assembly/packedarray/PackedArray/PackedArray,u64> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i32)
  (local $4 i64)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $5
   local.get $3
   local.get $5
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $0
  i32.load offset=116
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $5
  local.get $0
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  i32.add
  local.set $3
  local.get $5
  local.get $0
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.tee $5
  i32.const 0
  i32.lt_s
  if
   i32.const 0
   local.set $5
   local.get $3
   local.get $0
   i32.load offset=116
   i32.sub
   local.set $3
  end
  local.get $0
  i32.load offset=104
  local.get $3
  i64.extend_i32_s
  local.get $5
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  local.tee $2
  local.get $0
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  local.set $3
  local.get $2
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shr_u
  i32.wrap_i64
  i64.extend_i32_s
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.const 1
  local.get $0
  i32.load offset=112
  local.get $0
  i32.load offset=104
  local.get $2
  local.get $0
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.add
  i64.const 1
  i64.sub
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 14000
    i32.const 9952
    i32.const 639
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   loop $for-loop|0
    local.get $6
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     local.get $6
     call $assembly/packedarray/PackedArray/PackedArray#get
     local.tee $2
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $6
      local.get $2
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#addToCountAtIndex
      local.get $2
      local.get $4
      i64.add
      local.set $4
     end
     local.get $6
     i32.const 1
     i32.add
     local.set $6
     br $for-loop|0
    end
   end
   local.get $0
   local.get $4
   local.get $0
   i64.load offset=168
   i64.add
   i64.store offset=168
   local.get $0
   local.get $0
   i64.load offset=136
   local.get $0
   i64.load offset=144
   local.tee $2
   local.get $1
   i64.load offset=144
   local.tee $4
   local.get $2
   local.get $4
   i64.gt_u
   select
   i64.add
   i64.store offset=144
   local.get $0
   i64.load offset=152
   local.tee $2
   local.get $1
   i64.load offset=152
   local.tee $4
   local.get $2
   local.get $4
   i64.lt_u
   select
   local.tee $2
   local.get $0
   i64.load offset=136
   i64.gt_u
   if
    local.get $0
    local.get $2
    local.get $0
    i64.load offset=136
    i64.const -1
    i64.xor
    i64.and
    i64.store offset=152
   end
  else
   local.get $1
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex
   local.set $5
   local.get $1
   i32.load offset=160
   local.get $5
   call $assembly/packedarray/PackedArray/PackedArray#get
   local.set $2
   local.get $1
   i32.load offset=116
   local.get $5
   local.get $1
   i32.load offset=116
   i32.const 1
   i32.sub
   i32.and
   i32.add
   local.set $3
   local.get $5
   local.get $1
   i32.load offset=108
   i32.shr_s
   i32.const 1
   i32.sub
   local.tee $6
   i32.const 0
   i32.lt_s
   if
    i32.const 0
    local.set $6
    local.get $3
    local.get $1
    i32.load offset=116
    i32.sub
    local.set $3
   end
   local.get $0
   local.get $2
   local.get $3
   i64.extend_i32_s
   local.get $6
   local.get $1
   i32.load offset=112
   i32.add
   i64.extend_i32_s
   i64.shl
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordCountAtValue
   loop $for-loop|1
    local.get $7
    local.get $5
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     local.get $7
     call $assembly/packedarray/PackedArray/PackedArray#get
     local.tee $4
     local.set $2
     local.get $4
     i64.const 0
     i64.gt_u
     if
      local.get $1
      i32.load offset=116
      local.get $7
      local.get $1
      i32.load offset=116
      i32.const 1
      i32.sub
      i32.and
      i32.add
      local.set $3
      local.get $7
      local.get $1
      i32.load offset=108
      i32.shr_s
      i32.const 1
      i32.sub
      local.tee $6
      i32.const 0
      i32.lt_s
      if
       i32.const 0
       local.set $6
       local.get $3
       local.get $1
       i32.load offset=116
       i32.sub
       local.set $3
      end
      local.get $0
      local.get $2
      local.get $3
      i64.extend_i32_s
      local.get $6
      local.get $1
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shl
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordCountAtValue
     end
     local.get $7
     i32.const 1
     i32.add
     local.set $7
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=64
  local.tee $2
  local.get $1
  i64.load offset=64
  local.tee $4
  local.get $2
  local.get $4
  i64.lt_u
  select
  i64.store offset=64
  local.get $0
  local.get $0
  i64.load offset=72
  local.tee $2
  local.get $1
  i64.load offset=72
  local.tee $4
  local.get $2
  local.get $4
  i64.gt_u
  select
  i64.store offset=72
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#addPackedHistogram (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#add<assembly/packedarray/PackedArray/PackedArray,u64>
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtValue (param $0 i32) (param $1 i64) (result i64)
  (local $2 i32)
  i32.const 0
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex
  local.tee $2
  i32.const 0
  local.get $2
  i32.gt_s
  select
  local.set $2
  local.get $0
  i32.load offset=160
  i32.load
  i32.load offset=4
  local.get $2
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $0
  local.get $2
  local.get $0
  i32.lt_s
  select
  i32.const 2
  i32.shl
  i32.add
  i32.load
  i64.extend_i32_u
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#establishInternalTackingValues (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i64)
  (local $5 i64)
  (local $6 i32)
  local.get $0
  i64.const 0
  i64.store offset=144
  local.get $0
  i64.const -1
  i64.store offset=152
  i32.const -1
  local.set $2
  i32.const -1
  local.set $6
  loop $for-loop|0
   local.get $3
   local.get $1
   i32.lt_s
   if
    local.get $0
    i32.load offset=160
    i32.load
    i32.load offset=4
    local.get $3
    i32.const 2
    i32.shl
    i32.add
    i32.load
    i64.extend_i32_u
    local.tee $5
    i64.const 0
    i64.gt_u
    if
     local.get $4
     local.get $5
     i64.add
     local.set $4
     local.get $3
     local.get $6
     local.get $3
     i32.const 0
     local.get $6
     i32.const -1
     i32.eq
     select
     select
     local.set $6
     local.get $3
     local.set $2
    end
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|0
   end
  end
  local.get $2
  i32.const 0
  i32.ge_s
  if
   local.get $0
   i32.load offset=116
   local.get $2
   local.get $0
   i32.load offset=116
   i32.const 1
   i32.sub
   i32.and
   i32.add
   local.set $3
   local.get $2
   local.get $0
   i32.load offset=108
   i32.shr_s
   i32.const 1
   i32.sub
   local.tee $2
   i32.const 0
   i32.lt_s
   if
    local.get $3
    local.get $0
    i32.load offset=116
    i32.sub
    local.set $3
    i32.const 0
    local.set $2
   end
   local.get $0
   i32.load offset=104
   local.get $3
   i64.extend_i32_s
   local.get $2
   local.get $0
   i32.load offset=112
   i32.add
   i64.extend_i32_s
   i64.shl
   local.tee $5
   local.get $0
   i64.load offset=128
   i64.or
   i64.clz
   i32.wrap_i64
   i32.sub
   local.set $2
   local.get $0
   local.get $0
   i64.load offset=136
   local.get $5
   local.get $2
   local.get $0
   i32.load offset=112
   i32.add
   i64.extend_i32_s
   i64.shr_u
   i32.wrap_i64
   i64.extend_i32_s
   local.get $2
   local.get $0
   i32.load offset=112
   i32.add
   i64.extend_i32_s
   i64.shl
   i64.const 1
   local.get $0
   i32.load offset=112
   local.get $0
   i32.load offset=104
   local.get $5
   local.get $0
   i64.load offset=128
   i64.or
   i64.clz
   i32.wrap_i64
   i32.sub
   i32.add
   i64.extend_i32_s
   i64.shl
   i64.add
   i64.const 1
   i64.sub
   i64.add
   i64.store offset=144
  end
  local.get $6
  i32.const 0
  i32.ge_s
  if
   block $__inlined_func$assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#updateMinNonZeroValue
    local.get $0
    i32.load offset=116
    local.get $6
    local.get $0
    i32.load offset=116
    i32.const 1
    i32.sub
    i32.and
    i32.add
    local.set $1
    local.get $6
    local.get $0
    i32.load offset=108
    i32.shr_s
    i32.const 1
    i32.sub
    local.tee $3
    i32.const 0
    i32.lt_s
    if
     i32.const 0
     local.set $3
     local.get $1
     local.get $0
     i32.load offset=116
     i32.sub
     local.set $1
    end
    local.get $1
    i64.extend_i32_s
    local.get $3
    local.get $0
    i32.load offset=112
    i32.add
    i64.extend_i32_s
    i64.shl
    local.tee $5
    local.get $0
    i64.load offset=136
    i64.le_u
    br_if $__inlined_func$assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#updateMinNonZeroValue
    local.get $0
    local.get $5
    local.get $0
    i64.load offset=136
    i64.const -1
    i64.xor
    i64.and
    i64.store offset=152
   end
  end
  local.get $0
  local.get $4
  i64.store offset=168
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#establishInternalTackingValues@varargs (param $0 i32)
  (local $1 i32)
  block $1of1
   block $0of1
    block $outOfRange
     global.get $~argumentsLength
     br_table $0of1 $1of1 $outOfRange
    end
    unreachable
   end
   local.get $0
   i32.load offset=52
   local.set $1
  end
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#establishInternalTackingValues
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8> (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i64)
  (local $6 i64)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $4
   i32.load offset=4
   local.set $3
   local.get $4
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $4
   i32.load
   drop
  end
  local.get $0
  i32.load offset=116
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $3
  local.get $0
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  i32.add
  local.set $4
  local.get $3
  local.get $0
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.tee $3
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 0
   local.set $3
   local.get $4
   local.get $0
   i32.load offset=116
   i32.sub
  else
   local.get $4
  end
  i64.extend_i32_s
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 14000
    i32.const 9952
    i32.const 748
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   loop $for-loop|0
    local.get $2
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $2
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     i32.add
     i32.load8_u
     i64.extend_i32_u
     local.tee $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $2
      i64.const 0
      local.get $6
      i64.sub
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#addToCountAtIndex
      local.get $5
      local.get $6
      i64.add
      local.set $5
     end
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $5
   i64.sub
   i64.store offset=168
  else
   loop $for-loop|1
    local.get $2
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $2
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     i32.add
     i32.load8_u
     i64.extend_i32_u
     local.tee $6
     i64.const 0
     i64.gt_u
     if
      local.get $1
      i32.load offset=116
      local.get $2
      local.get $1
      i32.load offset=116
      i32.const 1
      i32.sub
      i32.and
      i32.add
      local.set $4
      local.get $0
      local.get $2
      local.get $1
      i32.load offset=108
      i32.shr_s
      i32.const 1
      i32.sub
      local.tee $3
      i32.const 0
      i32.lt_s
      if (result i32)
       i32.const 0
       local.set $3
       local.get $4
       local.get $1
       i32.load offset=116
       i32.sub
      else
       local.get $4
      end
      i64.extend_i32_s
      local.get $3
      local.get $1
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shl
      local.tee $5
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtValue
      local.get $6
      i64.lt_u
      if
       i32.const 14608
       local.get $6
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14672
       call $~lib/string/String.__concat
       local.get $5
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14720
       call $~lib/string/String.__concat
       local.get $0
       local.get $5
       call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtValue
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14800
       call $~lib/string/String.__concat
       i32.const 9952
       i32.const 777
       i32.const 13
       call $~lib/builtins/abort
       unreachable
      end
      local.get $0
      i64.const 0
      local.get $6
      i64.sub
      local.get $5
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordCountAtValue
     end
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=144
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtValue
  i64.const 0
  i64.le_u
  if (result i32)
   i32.const 1
  else
   local.get $0
   local.get $0
   i64.load offset=152
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtValue
   i64.const 0
   i64.le_u
  end
  if
   i32.const 0
   global.set $~argumentsLength
   local.get $0
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#establishInternalTackingValues@varargs
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#subtractHistogram8 (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16> (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i64)
  (local $6 i64)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $4
   i32.load offset=4
   local.set $3
   local.get $4
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $4
   i32.load
   drop
  end
  local.get $0
  i32.load offset=116
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $3
  local.get $0
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  i32.add
  local.set $4
  local.get $3
  local.get $0
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.tee $3
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 0
   local.set $3
   local.get $4
   local.get $0
   i32.load offset=116
   i32.sub
  else
   local.get $4
  end
  i64.extend_i32_s
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 14000
    i32.const 9952
    i32.const 748
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   loop $for-loop|0
    local.get $2
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $2
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u
     i64.extend_i32_u
     local.tee $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $2
      i64.const 0
      local.get $6
      i64.sub
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#addToCountAtIndex
      local.get $5
      local.get $6
      i64.add
      local.set $5
     end
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $5
   i64.sub
   i64.store offset=168
  else
   loop $for-loop|1
    local.get $2
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $2
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u
     i64.extend_i32_u
     local.tee $6
     i64.const 0
     i64.gt_u
     if
      local.get $1
      i32.load offset=116
      local.get $2
      local.get $1
      i32.load offset=116
      i32.const 1
      i32.sub
      i32.and
      i32.add
      local.set $4
      local.get $0
      local.get $2
      local.get $1
      i32.load offset=108
      i32.shr_s
      i32.const 1
      i32.sub
      local.tee $3
      i32.const 0
      i32.lt_s
      if (result i32)
       i32.const 0
       local.set $3
       local.get $4
       local.get $1
       i32.load offset=116
       i32.sub
      else
       local.get $4
      end
      i64.extend_i32_s
      local.get $3
      local.get $1
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shl
      local.tee $5
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtValue
      local.get $6
      i64.lt_u
      if
       i32.const 14608
       local.get $6
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14672
       call $~lib/string/String.__concat
       local.get $5
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14720
       call $~lib/string/String.__concat
       local.get $0
       local.get $5
       call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtValue
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14800
       call $~lib/string/String.__concat
       i32.const 9952
       i32.const 777
       i32.const 13
       call $~lib/builtins/abort
       unreachable
      end
      local.get $0
      i64.const 0
      local.get $6
      i64.sub
      local.get $5
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordCountAtValue
     end
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=144
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtValue
  i64.const 0
  i64.le_u
  if (result i32)
   i32.const 1
  else
   local.get $0
   local.get $0
   i64.load offset=152
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtValue
   i64.const 0
   i64.le_u
  end
  if
   i32.const 0
   global.set $~argumentsLength
   local.get $0
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#establishInternalTackingValues@varargs
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#subtractHistogram16 (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32> (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i64)
  (local $6 i64)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $4
   i32.load offset=4
   local.set $3
   local.get $4
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $4
   i32.load
   drop
  end
  local.get $0
  i32.load offset=116
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $3
  local.get $0
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  i32.add
  local.set $4
  local.get $3
  local.get $0
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.tee $3
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 0
   local.set $3
   local.get $4
   local.get $0
   i32.load offset=116
   i32.sub
  else
   local.get $4
  end
  i64.extend_i32_s
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 14000
    i32.const 9952
    i32.const 748
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   loop $for-loop|0
    local.get $2
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $2
     i32.const 2
     i32.shl
     i32.add
     i32.load
     i64.extend_i32_u
     local.tee $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $2
      i64.const 0
      local.get $6
      i64.sub
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#addToCountAtIndex
      local.get $5
      local.get $6
      i64.add
      local.set $5
     end
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $5
   i64.sub
   i64.store offset=168
  else
   loop $for-loop|1
    local.get $2
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $2
     i32.const 2
     i32.shl
     i32.add
     i32.load
     i64.extend_i32_u
     local.tee $6
     i64.const 0
     i64.gt_u
     if
      local.get $1
      i32.load offset=116
      local.get $2
      local.get $1
      i32.load offset=116
      i32.const 1
      i32.sub
      i32.and
      i32.add
      local.set $4
      local.get $0
      local.get $2
      local.get $1
      i32.load offset=108
      i32.shr_s
      i32.const 1
      i32.sub
      local.tee $3
      i32.const 0
      i32.lt_s
      if (result i32)
       i32.const 0
       local.set $3
       local.get $4
       local.get $1
       i32.load offset=116
       i32.sub
      else
       local.get $4
      end
      i64.extend_i32_s
      local.get $3
      local.get $1
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shl
      local.tee $5
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtValue
      local.get $6
      i64.lt_u
      if
       i32.const 14608
       local.get $6
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14672
       call $~lib/string/String.__concat
       local.get $5
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14720
       call $~lib/string/String.__concat
       local.get $0
       local.get $5
       call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtValue
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14800
       call $~lib/string/String.__concat
       i32.const 9952
       i32.const 777
       i32.const 13
       call $~lib/builtins/abort
       unreachable
      end
      local.get $0
      i64.const 0
      local.get $6
      i64.sub
      local.get $5
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordCountAtValue
     end
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=144
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtValue
  i64.const 0
  i64.le_u
  if (result i32)
   i32.const 1
  else
   local.get $0
   local.get $0
   i64.load offset=152
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtValue
   i64.const 0
   i64.le_u
  end
  if
   i32.const 0
   global.set $~argumentsLength
   local.get $0
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#establishInternalTackingValues@varargs
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#subtractHistogram32 (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64> (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i64)
  (local $6 i64)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $4
   i32.load offset=4
   local.set $3
   local.get $4
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $4
   i32.load
   drop
  end
  local.get $0
  i32.load offset=116
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $3
  local.get $0
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  i32.add
  local.set $4
  local.get $3
  local.get $0
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.tee $3
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 0
   local.set $3
   local.get $4
   local.get $0
   i32.load offset=116
   i32.sub
  else
   local.get $4
  end
  i64.extend_i32_s
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 14000
    i32.const 9952
    i32.const 748
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   loop $for-loop|0
    local.get $2
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $2
     i32.const 3
     i32.shl
     i32.add
     i64.load
     local.tee $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $2
      i64.const 0
      local.get $6
      i64.sub
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#addToCountAtIndex
      local.get $5
      local.get $6
      i64.add
      local.set $5
     end
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $5
   i64.sub
   i64.store offset=168
  else
   loop $for-loop|1
    local.get $2
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $2
     i32.const 3
     i32.shl
     i32.add
     i64.load
     local.tee $6
     i64.const 0
     i64.gt_u
     if
      local.get $1
      i32.load offset=116
      local.get $2
      local.get $1
      i32.load offset=116
      i32.const 1
      i32.sub
      i32.and
      i32.add
      local.set $4
      local.get $0
      local.get $2
      local.get $1
      i32.load offset=108
      i32.shr_s
      i32.const 1
      i32.sub
      local.tee $3
      i32.const 0
      i32.lt_s
      if (result i32)
       i32.const 0
       local.set $3
       local.get $4
       local.get $1
       i32.load offset=116
       i32.sub
      else
       local.get $4
      end
      i64.extend_i32_s
      local.get $3
      local.get $1
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shl
      local.tee $5
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtValue
      local.get $6
      i64.lt_u
      if
       i32.const 14608
       local.get $6
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14672
       call $~lib/string/String.__concat
       local.get $5
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14720
       call $~lib/string/String.__concat
       local.get $0
       local.get $5
       call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtValue
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14800
       call $~lib/string/String.__concat
       i32.const 9952
       i32.const 777
       i32.const 13
       call $~lib/builtins/abort
       unreachable
      end
      local.get $0
      i64.const 0
      local.get $6
      i64.sub
      local.get $5
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordCountAtValue
     end
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=144
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtValue
  i64.const 0
  i64.le_u
  if (result i32)
   i32.const 1
  else
   local.get $0
   local.get $0
   i64.load offset=152
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtValue
   i64.const 0
   i64.le_u
  end
  if
   i32.const 0
   global.set $~argumentsLength
   local.get $0
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#establishInternalTackingValues@varargs
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#subtractHistogram64 (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#subtract<assembly/packedarray/PackedArray/PackedArray,u64> (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i64)
  (local $6 i64)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $4
   i32.load offset=4
   local.set $3
   local.get $4
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $4
   i32.load
   drop
  end
  local.get $0
  i32.load offset=116
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $3
  local.get $0
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  i32.add
  local.set $4
  local.get $3
  local.get $0
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.tee $3
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 0
   local.set $3
   local.get $4
   local.get $0
   i32.load offset=116
   i32.sub
  else
   local.get $4
  end
  i64.extend_i32_s
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 14000
    i32.const 9952
    i32.const 748
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   loop $for-loop|0
    local.get $2
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     local.get $2
     call $assembly/packedarray/PackedArray/PackedArray#get
     local.tee $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $2
      i64.const 0
      local.get $6
      i64.sub
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#addToCountAtIndex
      local.get $5
      local.get $6
      i64.add
      local.set $5
     end
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $5
   i64.sub
   i64.store offset=168
  else
   loop $for-loop|1
    local.get $2
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     local.get $2
     call $assembly/packedarray/PackedArray/PackedArray#get
     local.tee $6
     i64.const 0
     i64.gt_u
     if
      local.get $1
      i32.load offset=116
      local.get $2
      local.get $1
      i32.load offset=116
      i32.const 1
      i32.sub
      i32.and
      i32.add
      local.set $4
      local.get $0
      local.get $2
      local.get $1
      i32.load offset=108
      i32.shr_s
      i32.const 1
      i32.sub
      local.tee $3
      i32.const 0
      i32.lt_s
      if (result i32)
       i32.const 0
       local.set $3
       local.get $4
       local.get $1
       i32.load offset=116
       i32.sub
      else
       local.get $4
      end
      i64.extend_i32_s
      local.get $3
      local.get $1
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shl
      local.tee $5
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtValue
      local.get $6
      i64.lt_u
      if
       i32.const 14608
       local.get $6
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14672
       call $~lib/string/String.__concat
       local.get $5
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14720
       call $~lib/string/String.__concat
       local.get $0
       local.get $5
       call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtValue
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14800
       call $~lib/string/String.__concat
       i32.const 9952
       i32.const 777
       i32.const 13
       call $~lib/builtins/abort
       unreachable
      end
      local.get $0
      i64.const 0
      local.get $6
      i64.sub
      local.get $5
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordCountAtValue
     end
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=144
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtValue
  i64.const 0
  i64.le_u
  if (result i32)
   i32.const 1
  else
   local.get $0
   local.get $0
   i64.load offset=152
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtValue
   i64.const 0
   i64.le_u
  end
  if
   i32.const 0
   global.set $~argumentsLength
   local.get $0
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#establishInternalTackingValues@varargs
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#subtractPackedHistogram (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#subtract<assembly/packedarray/PackedArray/PackedArray,u64>
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/encoding/fillBufferFromCountsArray<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32> (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i64)
  (local $6 i32)
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $4
   local.get $2
   local.get $4
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  local.set $2
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $0
   i32.load offset=4
   local.set $4
   local.get $0
   local.get $4
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $0
   i32.load
   drop
  end
  local.get $2
  local.get $2
  i64.load offset=144
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex
  i32.const 1
  i32.add
  local.set $4
  loop $while-continue|0
   local.get $3
   local.get $4
   i32.lt_s
   if
    local.get $3
    local.tee $0
    i32.const 1
    i32.add
    local.set $3
    local.get $2
    i32.load offset=160
    i32.load
    i32.load offset=4
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load
    i64.extend_i32_u
    local.tee $5
    i64.const 0
    i64.lt_u
    if
     i32.const 14832
     local.get $5
     call $~lib/util/number/utoa64
     call $~lib/string/String.__concat
     i32.const 14960
     call $~lib/string/String.__concat
     local.get $3
     call $~lib/util/number/itoa32
     call $~lib/string/String.__concat
     i32.const 15008
     call $~lib/string/String.__concat
     local.get $2
     i32.load offset=116
     local.get $3
     local.get $2
     i32.load offset=116
     i32.const 1
     i32.sub
     i32.and
     i32.add
     local.set $0
     local.get $2
     i32.load offset=104
     local.get $3
     local.get $2
     i32.load offset=108
     i32.shr_s
     i32.const 1
     i32.sub
     local.tee $1
     i32.const 0
     i32.lt_s
     if
      i32.const 0
      local.set $1
      local.get $0
      local.get $2
      i32.load offset=116
      i32.sub
      local.set $0
     end
     local.get $0
     i64.extend_i32_s
     local.get $1
     local.get $2
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shl
     local.tee $5
     local.get $2
     i64.load offset=128
     i64.or
     i64.clz
     i32.wrap_i64
     i32.sub
     local.set $0
     local.get $5
     local.get $0
     local.get $2
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shr_u
     i32.wrap_i64
     i64.extend_i32_s
     local.get $0
     local.get $2
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shl
     call $~lib/util/number/utoa64
     call $~lib/string/String.__concat
     i32.const 15104
     call $~lib/string/String.__concat
     local.get $2
     i32.load offset=116
     local.get $3
     local.get $2
     i32.load offset=116
     i32.const 1
     i32.sub
     i32.and
     i32.add
     local.set $1
     local.get $3
     local.get $2
     local.tee $0
     i32.load offset=108
     i32.shr_s
     i32.const 1
     i32.sub
     local.tee $3
     i32.const 0
     i32.lt_s
     if
      i32.const 0
      local.set $3
      local.get $1
      local.get $0
      i32.load offset=116
      i32.sub
      local.set $1
     end
     local.get $0
     i32.load offset=104
     local.get $1
     i64.extend_i32_s
     local.get $3
     local.get $0
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shl
     local.tee $5
     local.get $0
     i64.load offset=128
     i64.or
     i64.clz
     i32.wrap_i64
     i32.sub
     local.set $1
     local.get $5
     local.get $1
     local.get $0
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shr_u
     i32.wrap_i64
     i64.extend_i32_s
     local.get $1
     local.get $0
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shl
     i64.const 1
     local.get $0
     i32.load offset=112
     local.get $0
     i32.load offset=104
     local.get $5
     local.get $0
     i64.load offset=128
     i64.or
     i64.clz
     i32.wrap_i64
     i32.sub
     i32.add
     i64.extend_i32_s
     i64.shl
     i64.add
     call $~lib/util/number/utoa64
     call $~lib/string/String.__concat
     i32.const 14800
     call $~lib/string/String.__concat
     i32.const 15136
     i32.const 31
     i32.const 7
     call $~lib/builtins/abort
     unreachable
    end
    i32.const 0
    local.set $0
    local.get $5
    i64.eqz
    if
     i32.const 1
     local.set $0
     loop $while-continue|1
      local.get $3
      local.get $4
      i32.lt_s
      if (result i32)
       local.get $2
       i32.load offset=160
       i32.load
       i32.load offset=4
       local.get $3
       i32.const 2
       i32.shl
       i32.add
       i32.load
       i64.extend_i32_u
       i64.eqz
      else
       i32.const 0
      end
      if
       local.get $0
       i32.const 1
       i32.add
       local.set $0
       local.get $3
       i32.const 1
       i32.add
       local.set $3
       br $while-continue|1
      end
     end
    end
    local.get $0
    i32.const 1
    i32.gt_s
    if
     local.get $1
     i32.const 0
     local.get $0
     i32.sub
     i64.extend_i32_s
     call $assembly/ZigZagEncoding/ZigZagEncoding.encode
    else
     local.get $1
     local.get $5
     call $assembly/ZigZagEncoding/ZigZagEncoding.encode
    end
    br $while-continue|0
   end
  end
  local.get $2
  i32.const 16700
  i32.gt_u
  if
   local.get $2
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/encoding/encodeIntoByteBuffer<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32> (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $1
  i32.load
  local.set $3
  local.get $1
  i32.const 478450451
  call $assembly/ByteBuffer/ByteBuffer#putInt32
  local.get $1
  i32.const 0
  call $assembly/ByteBuffer/ByteBuffer#putInt32
  local.get $1
  i32.const 1
  call $assembly/ByteBuffer/ByteBuffer#putInt32
  local.get $1
  local.get $0
  i32.load8_u offset=32
  call $assembly/ByteBuffer/ByteBuffer#putInt32
  local.get $1
  local.get $0
  i64.load offset=24
  call $assembly/ByteBuffer/ByteBuffer#putInt64
  local.get $1
  local.get $0
  i64.load offset=16
  call $assembly/ByteBuffer/ByteBuffer#putInt64
  local.get $1
  i64.const 1
  call $assembly/ByteBuffer/ByteBuffer#putInt64
  local.get $1
  i32.load
  local.set $4
  local.get $0
  local.get $1
  call $assembly/encoding/fillBufferFromCountsArray<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>
  local.get $1
  i32.load
  local.set $2
  local.get $1
  local.get $3
  i32.const 4
  i32.add
  i32.store
  local.get $1
  local.get $2
  local.get $4
  i32.sub
  call $assembly/ByteBuffer/ByteBuffer#putInt32
  local.get $1
  local.get $2
  i32.store
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#encode (param $0 i32) (result i32)
  (local $1 i32)
  local.get $0
  i32.load
  call $assembly/ByteBuffer/ByteBuffer.allocate
  local.tee $0
  call $assembly/encoding/encodeIntoByteBuffer<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>
  local.get $0
  i32.load offset=4
  i32.const 0
  local.get $0
  i32.load
  call $~lib/typedarray/Uint8Array#slice
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#reset (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  i32.load
  local.tee $3
  i32.load offset=160
  i32.load
  local.tee $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $1
   i32.load offset=4
   local.set $2
   local.get $1
   local.get $2
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $1
   i32.load
   drop
  end
  local.get $0
  i32.load offset=4
  local.set $4
  i32.const 0
  local.get $0
  i32.load offset=8
  i32.const 2
  i32.shr_u
  local.tee $2
  i32.const 0
  local.get $2
  i32.lt_s
  select
  local.set $1
  i32.const 2147483647
  local.get $2
  i32.const 2147483647
  local.get $2
  i32.lt_s
  select
  local.set $2
  loop $for-loop|0
   local.get $1
   local.get $2
   i32.lt_s
   if
    local.get $4
    local.get $1
    i32.const 2
    i32.shl
    i32.add
    i32.const 0
    i32.store
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0
   end
  end
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $3
  i64.const 0
  i64.store offset=168
  local.get $3
  i64.const 0
  i64.store offset=64
  local.get $3
  i64.const 0
  i64.store offset=72
  local.get $3
  i64.const 0
  i64.store offset=144
  local.get $3
  i64.const -1
  i64.store offset=152
 )
 (func $assembly/AbstractHistogramBase/AbstractHistogramBase<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#constructor (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.eqz
  if
   call $~lib/rt/tlsf/maybeInitialize
   i32.const 104
   i32.const 37
   call $~lib/rt/tlsf/allocateBlock
   i32.const 16
   i32.add
   local.tee $0
   i32.const 16700
   i32.gt_u
   if
    local.get $0
    i32.const 16
    i32.sub
    local.tee $1
    i32.load offset=4
    local.set $2
    local.get $1
    local.get $2
    i32.const 1
    i32.add
    i32.store offset=4
    local.get $1
    i32.load
    drop
   end
  end
  local.get $0
  f64.const 0
  f64.store
  local.get $0
  i32.const 0
  i32.store8 offset=8
  local.get $0
  i64.const 0
  i64.store offset=16
  local.get $0
  i64.const 0
  i64.store offset=24
  local.get $0
  i32.const 0
  i32.store8 offset=32
  local.get $0
  i64.const 0
  i64.store offset=40
  local.get $0
  i32.const 0
  i32.store offset=48
  local.get $0
  i32.const 0
  i32.store offset=52
  local.get $0
  i64.const 0
  i64.store offset=56
  local.get $0
  i64.const -1
  i64.store offset=64
  local.get $0
  i64.const 0
  i64.store offset=72
  local.get $0
  i32.const 1152
  i32.store offset=80
  local.get $0
  f64.const 1
  f64.store offset=88
  local.get $0
  i32.const 0
  i32.store offset=96
  local.get $0
  i32.const 0
  i32.store offset=100
  local.get $0
  f64.const 0
  f64.store
  local.get $0
  i64.const 0
  i64.store offset=16
  local.get $0
  i64.const 0
  i64.store offset=24
  local.get $0
  i32.const 0
  i32.store8 offset=32
  local.get $0
  i64.const 0
  i64.store offset=40
  local.get $0
  i32.const 0
  i32.store offset=48
  local.get $0
  i32.const 0
  i32.store offset=52
  local.get $0
  i64.const 0
  i64.store offset=56
  local.get $0
 )
 (func $assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>#constructor (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  call $~lib/rt/tlsf/maybeInitialize
  i32.const 4
  i32.const 34
  call $~lib/rt/tlsf/allocateBlock
  i32.const 16
  i32.add
  local.tee $2
  i32.const 16700
  i32.gt_u
  if
   local.get $2
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $1
   local.get $3
   local.get $1
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $2
  i32.const 0
  i32.store
  local.get $0
  call $~lib/typedarray/Uint64Array#constructor
  local.tee $0
  local.tee $1
  local.get $2
  i32.load
  local.tee $3
  i32.ne
  if
   local.get $1
   i32.const 16700
   i32.gt_u
   if
    local.get $1
    i32.const 16
    i32.sub
    local.tee $4
    i32.load offset=4
    local.set $5
    local.get $4
    local.get $5
    i32.const 1
    i32.add
    i32.store offset=4
    local.get $4
    i32.load
    drop
   end
   local.get $3
   i32.const 16700
   i32.gt_u
   if
    local.get $3
    i32.const 16
    i32.sub
    call $~lib/rt/pure/decrement
   end
  end
  local.get $2
  local.get $1
  i32.store
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $2
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#constructor (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  call $~lib/rt/tlsf/maybeInitialize
  i32.const 120
  i32.const 38
  call $~lib/rt/tlsf/allocateBlock
  i32.const 16
  i32.add
  local.tee $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $1
  i32.const 0
  i32.store
  local.get $1
  f64.const 0
  f64.store offset=8
  local.get $1
  f64.const 0
  f64.store offset=16
  local.get $1
  i32.const 0
  i32.store8 offset=24
  local.get $1
  i32.const 0
  i32.store offset=28
  local.get $1
  i64.const 0
  i64.store offset=32
  local.get $1
  i32.const 0
  i32.store offset=40
  local.get $1
  i64.const 0
  i64.store offset=48
  local.get $1
  i64.const 0
  i64.store offset=56
  local.get $1
  i64.const 0
  i64.store offset=64
  local.get $1
  i64.const 0
  i64.store offset=72
  local.get $1
  i64.const 0
  i64.store offset=80
  local.get $1
  i64.const 0
  i64.store offset=88
  local.get $1
  i64.const 0
  i64.store offset=96
  local.get $1
  i64.const 0
  i64.store offset=104
  local.get $1
  i32.const 0
  i32.store8 offset=112
  local.get $1
  call $assembly/HistogramIterationValue/HistogramIterationValue#constructor
  i32.store offset=116
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $1
  i32.const 0
  i32.store
  local.get $1
  f64.const 0
  f64.store offset=8
  local.get $1
  f64.const 0
  f64.store offset=16
  local.get $1
  i32.const 0
  i32.store8 offset=24
  local.get $1
  local.get $0
  i32.const 1
  call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#doReset
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $1
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#constructor (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  call $~lib/rt/tlsf/maybeInitialize
  i32.const 96
  i32.const 39
  call $~lib/rt/tlsf/allocateBlock
  i32.const 16
  i32.add
  local.tee $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $1
  i32.const 0
  i32.store
  local.get $1
  i32.const 0
  i32.store offset=4
  local.get $1
  i64.const 0
  i64.store offset=8
  local.get $1
  i32.const 0
  i32.store offset=16
  local.get $1
  i64.const 0
  i64.store offset=24
  local.get $1
  i64.const 0
  i64.store offset=32
  local.get $1
  i64.const 0
  i64.store offset=40
  local.get $1
  i64.const 0
  i64.store offset=48
  local.get $1
  i64.const 0
  i64.store offset=56
  local.get $1
  i64.const 0
  i64.store offset=64
  local.get $1
  i64.const 0
  i64.store offset=72
  local.get $1
  i64.const 0
  i64.store offset=80
  local.get $1
  i32.const 0
  i32.store8 offset=88
  local.get $1
  call $assembly/HistogramIterationValue/HistogramIterationValue#constructor
  i32.store offset=92
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $1
  local.get $0
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#doReset
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $1
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#init (param $0 i32) (param $1 i64) (param $2 i64) (param $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i64)
  (local $8 i32)
  local.get $0
  local.get $1
  i64.store offset=24
  local.get $0
  local.get $2
  i64.store offset=16
  local.get $0
  local.get $3
  i32.store8 offset=32
  local.get $0
  f64.const 1
  f64.store offset=88
  f64.const 10
  local.get $3
  f64.convert_i32_u
  call $~lib/math/NativeMath.pow
  i64.trunc_f64_u
  i64.const 2
  i64.mul
  local.set $7
  local.get $0
  local.get $1
  f64.convert_i64_u
  call $~lib/math/NativeMath.log2
  f64.floor
  i32.trunc_f64_s
  i32.store offset=112
  local.get $0
  i64.const 1
  local.get $0
  i32.load offset=112
  i64.extend_i32_s
  i64.shl
  i64.const 1
  i64.sub
  i64.store offset=136
  local.get $0
  local.get $7
  f64.convert_i64_u
  call $~lib/math/NativeMath.log2
  f64.ceil
  i32.trunc_f64_s
  local.tee $3
  i32.const 1
  i32.sub
  i32.store offset=108
  local.get $0
  i32.const 1
  local.get $3
  i32.shl
  i32.store offset=48
  local.get $0
  local.get $0
  i32.load offset=48
  i32.const 1
  i32.shr_s
  i32.store offset=116
  local.get $0
  local.get $0
  i32.load offset=48
  i64.extend_i32_s
  i64.const 1
  i64.sub
  local.get $0
  i32.load offset=112
  i64.extend_i32_s
  i64.shl
  i64.store offset=128
  local.get $0
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#establishSize
  local.get $0
  i32.load offset=52
  call $assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>#constructor
  local.tee $3
  local.set $4
  local.get $3
  local.get $0
  i32.load offset=160
  local.tee $5
  i32.ne
  if
   local.get $4
   i32.const 16700
   i32.gt_u
   if
    local.get $4
    i32.const 16
    i32.sub
    local.tee $6
    i32.load offset=4
    local.set $8
    local.get $6
    local.get $8
    i32.const 1
    i32.add
    i32.store offset=4
    local.get $6
    i32.load
    drop
   end
   local.get $5
   i32.const 16700
   i32.gt_u
   if
    local.get $5
    i32.const 16
    i32.sub
    call $~lib/rt/pure/decrement
   end
  end
  local.get $0
  local.get $4
  i32.store offset=160
  local.get $0
  i32.const 0
  local.get $0
  i32.load offset=112
  i32.sub
  local.get $0
  i32.load offset=108
  i32.sub
  i32.const 63
  i32.add
  i32.store offset=104
  local.get $0
  call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#constructor
  local.set $5
  local.get $0
  i32.load offset=96
  local.tee $4
  i32.const 16700
  i32.gt_u
  if
   local.get $4
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $0
  local.get $5
  i32.store offset=96
  local.get $0
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#constructor
  local.set $5
  local.get $0
  i32.load offset=100
  local.tee $4
  i32.const 16700
  i32.gt_u
  if
   local.get $4
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $0
  local.get $5
  i32.store offset=100
  local.get $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#constructor (param $0 i64) (param $1 i64) (param $2 i32) (result i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 f64)
  call $~lib/rt/tlsf/maybeInitialize
  i32.const 176
  i32.const 36
  call $~lib/rt/tlsf/allocateBlock
  i32.const 16
  i32.add
  local.tee $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   local.tee $4
   i32.load offset=4
   local.set $5
   local.get $4
   local.get $5
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $4
   i32.load
   drop
  end
  local.get $3
  i32.const 0
  i32.store offset=104
  local.get $3
  i32.const 0
  i32.store offset=108
  local.get $3
  i32.const 0
  i32.store offset=112
  local.get $3
  i32.const 0
  i32.store offset=116
  local.get $3
  i64.const 0
  i64.store offset=120
  local.get $3
  i64.const 0
  i64.store offset=128
  local.get $3
  i64.const 0
  i64.store offset=136
  local.get $3
  i64.const 0
  i64.store offset=144
  local.get $3
  i64.const -1
  i64.store offset=152
  local.get $3
  i32.const 0
  i32.store offset=160
  local.get $3
  i64.const 0
  i64.store offset=168
  local.get $3
  call $assembly/AbstractHistogramBase/AbstractHistogramBase<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#constructor
  local.set $3
  local.get $0
  i64.const 1
  i64.lt_u
  if
   i32.const 9856
   i32.const 9952
   i32.const 61
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $1
  local.get $0
  i64.const 2
  i64.mul
  i64.lt_u
  if
   i32.const 10016
   i32.const 9952
   i32.const 64
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  i32.const 1
  local.get $2
  i32.const 255
  i32.and
  local.tee $4
  i32.const 5
  i32.gt_u
  local.get $4
  i32.const 0
  i32.lt_u
  select
  if
   i32.const 10224
   i32.const 9952
   i32.const 72
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  global.get $assembly/AbstractHistogramBase/AbstractHistogramBase.identityBuilder
  local.tee $6
  f64.const 1
  f64.add
  global.set $assembly/AbstractHistogramBase/AbstractHistogramBase.identityBuilder
  local.get $3
  local.get $6
  f64.store
  local.get $3
  local.get $0
  local.get $1
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#init
  local.get $3
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#constructor (param $0 i32) (param $1 f64) (param $2 f64) (param $3 f64) (param $4 i32) (param $5 i32) (result i32)
  (local $6 i32)
  (local $7 i32)
  local.get $0
  i32.eqz
  if
   call $~lib/rt/tlsf/maybeInitialize
   i32.const 4
   i32.const 35
   call $~lib/rt/tlsf/allocateBlock
   i32.const 16
   i32.add
   local.tee $0
   i32.const 16700
   i32.gt_u
   if
    local.get $0
    i32.const 16
    i32.sub
    local.tee $6
    i32.load offset=4
    local.set $7
    local.get $6
    local.get $7
    i32.const 1
    i32.add
    i32.store offset=4
    local.get $6
    i32.load
    drop
   end
  end
  local.get $0
  i32.const 0
  i32.store
  local.get $5
  i32.const 16700
  i32.gt_u
  if
   local.get $5
   i32.const 16
   i32.sub
   local.tee $6
   i32.load offset=4
   local.set $7
   local.get $6
   local.get $7
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $6
   i32.load
   drop
  end
  local.get $5
  if
   local.get $5
   local.get $0
   i32.load
   local.tee $4
   i32.ne
   if
    local.get $5
    i32.const 16700
    i32.gt_u
    if
     local.get $5
     i32.const 16
     i32.sub
     local.tee $6
     i32.load offset=4
     local.set $7
     local.get $6
     local.get $7
     i32.const 1
     i32.add
     i32.store offset=4
     local.get $6
     i32.load
     drop
    end
    local.get $4
    i32.const 16700
    i32.gt_u
    if
     local.get $4
     i32.const 16
     i32.sub
     call $~lib/rt/pure/decrement
    end
   end
   local.get $0
   local.get $5
   i32.store
  else
   local.get $1
   i64.trunc_f64_u
   local.get $2
   i64.trunc_f64_u
   local.get $3
   i32.trunc_f64_u
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#constructor
   local.set $6
   local.get $0
   i32.load
   local.tee $7
   i32.const 16700
   i32.gt_u
   if
    local.get $7
    i32.const 16
    i32.sub
    call $~lib/rt/pure/decrement
   end
   local.get $0
   local.get $6
   i32.store
   local.get $0
   i32.load
   local.get $4
   i32.store8 offset=8
  end
  local.get $5
  i32.const 16700
  i32.gt_u
  if
   local.get $5
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $0
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#next (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i64)
  (local $3 i32)
  loop $while-continue|0
   local.get $0
   i32.load offset=16
   local.get $0
   i32.load offset=4
   i32.load offset=52
   i32.lt_s
   if
    local.get $0
    local.get $0
    i32.load offset=4
    i32.load offset=160
    i32.load
    i32.load offset=4
    local.get $0
    i32.load offset=16
    i32.const 3
    i32.shl
    i32.add
    i64.load
    i64.store offset=80
    local.get $0
    i32.load8_u offset=88
    if
     local.get $0
     local.get $0
     i64.load offset=56
     local.get $0
     i64.load offset=80
     i64.add
     i64.store offset=56
     local.get $0
     i32.load offset=4
     local.tee $1
     i32.load offset=104
     local.get $0
     i64.load offset=24
     local.tee $2
     local.get $1
     i64.load offset=128
     i64.or
     i64.clz
     i32.wrap_i64
     i32.sub
     local.set $3
     local.get $0
     local.get $0
     i64.load offset=64
     local.get $0
     i64.load offset=80
     local.get $2
     local.get $3
     local.get $1
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shr_u
     i32.wrap_i64
     i64.extend_i32_s
     local.get $3
     local.get $1
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shl
     i64.const 1
     local.get $1
     i32.load offset=112
     local.get $1
     i32.load offset=104
     local.get $2
     local.get $1
     i64.load offset=128
     i64.or
     i64.clz
     i32.wrap_i64
     i32.sub
     i32.add
     i64.extend_i32_s
     i64.shl
     i64.add
     i64.const 1
     i64.sub
     i64.mul
     i64.add
     i64.store offset=64
     local.get $0
     i32.const 0
     i32.store8 offset=88
    end
    local.get $0
    i32.load offset=4
    i32.load offset=160
    i32.load
    i32.load offset=4
    local.get $0
    i32.load offset=16
    i32.const 3
    i32.shl
    i32.add
    i64.load
    i64.const 0
    i64.ne
    if (result i32)
     local.get $0
     i32.load
     local.get $0
     i32.load offset=16
     i32.ne
    else
     i32.const 0
    end
    if
     local.get $0
     i32.load offset=4
     local.tee $1
     i32.load offset=104
     local.get $0
     i64.load offset=24
     local.tee $2
     local.get $1
     i64.load offset=128
     i64.or
     i64.clz
     i32.wrap_i64
     i32.sub
     local.set $3
     local.get $0
     i32.load offset=92
     local.get $2
     local.get $3
     local.get $1
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shr_u
     i32.wrap_i64
     i64.extend_i32_s
     local.get $3
     local.get $1
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shl
     i64.const 1
     local.get $1
     i32.load offset=112
     local.get $1
     i32.load offset=104
     local.get $2
     local.get $1
     i64.load offset=128
     i64.or
     i64.clz
     i32.wrap_i64
     i32.sub
     i32.add
     i64.extend_i32_s
     i64.shl
     i64.add
     i64.const 1
     i64.sub
     local.tee $2
     i64.store
     local.get $0
     i32.load offset=92
     local.get $0
     i64.load offset=40
     i64.store offset=8
     local.get $0
     i32.load offset=92
     local.get $0
     i64.load offset=80
     i64.store offset=16
     local.get $0
     i32.load offset=92
     local.get $0
     i64.load offset=56
     local.get $0
     i64.load offset=48
     i64.sub
     i64.store offset=24
     local.get $0
     i32.load offset=92
     local.get $0
     i64.load offset=56
     i64.store offset=32
     local.get $0
     i32.load offset=92
     local.get $0
     i64.load offset=64
     i64.store offset=40
     local.get $0
     i32.load offset=92
     f64.const 100
     local.get $0
     i64.load offset=56
     f64.convert_i64_u
     f64.mul
     local.get $0
     i64.load offset=72
     f64.convert_i64_u
     f64.div
     f64.store offset=48
     local.get $0
     i32.load offset=92
     f64.const 100
     local.get $0
     i64.load offset=56
     f64.convert_i64_u
     f64.mul
     local.get $0
     i64.load offset=72
     f64.convert_i64_u
     f64.div
     f64.store offset=56
     local.get $0
     local.get $2
     i64.store offset=40
     local.get $0
     local.get $0
     i64.load offset=56
     i64.store offset=48
     local.get $0
     local.get $0
     i32.load offset=16
     i32.store
     local.get $0
     i32.load offset=4
     i64.load offset=168
     local.get $0
     i64.load offset=8
     i64.ne
     if
      i32.const 12704
      i32.const 12608
      i32.const 128
      i32.const 11
      call $~lib/builtins/abort
      unreachable
     end
     local.get $0
     i32.load offset=92
     local.tee $0
     i32.const 16700
     i32.gt_u
     if
      local.get $0
      i32.const 16
      i32.sub
      local.tee $1
      i32.load offset=4
      local.set $3
      local.get $1
      local.get $3
      i32.const 1
      i32.add
      i32.store offset=4
      local.get $1
      i32.load
      drop
     end
     local.get $0
     return
    end
    local.get $0
    call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#incrementSubBucket
    br $while-continue|0
   end
  end
  i32.const 12800
  i32.const 12608
  i32.const 134
  i32.const 5
  call $~lib/builtins/abort
  unreachable
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getMean (param $0 i32) (result f64)
  (local $1 i32)
  (local $2 i64)
  (local $3 i32)
  local.get $0
  i64.load offset=168
  i64.eqz
  if
   f64.const 0
   return
  end
  local.get $0
  i32.load offset=100
  local.tee $1
  local.get $1
  i32.load offset=4
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#doReset
  loop $while-continue|0
   local.get $0
   i32.load offset=100
   call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#hasNext
   if
    local.get $2
    local.get $0
    i32.load offset=100
    call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#next
    local.tee $1
    i64.load
    local.tee $2
    local.get $0
    i32.load offset=104
    local.get $2
    local.get $0
    i64.load offset=128
    i64.or
    i64.clz
    i32.wrap_i64
    i32.sub
    local.tee $3
    local.get $0
    i32.load offset=112
    i32.add
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    i64.extend_i32_s
    local.get $3
    local.get $0
    i32.load offset=112
    i32.add
    i64.extend_i32_s
    i64.shl
    i64.const 1
    local.get $0
    i32.load offset=112
    local.get $0
    i32.load offset=104
    local.get $2
    local.get $0
    i64.load offset=128
    i64.or
    i64.clz
    i32.wrap_i64
    i32.sub
    i32.add
    i64.extend_i32_s
    i64.shl
    i64.const 1
    i64.shr_u
    i64.add
    local.get $1
    i64.load offset=16
    i64.mul
    i64.add
    local.set $2
    local.get $1
    i32.const 16700
    i32.gt_u
    if
     local.get $1
     i32.const 16
     i32.sub
     call $~lib/rt/pure/decrement
    end
    br $while-continue|0
   end
  end
  local.get $2
  f64.convert_i64_u
  local.get $0
  i64.load offset=168
  f64.convert_i64_u
  f64.div
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#computeStdDeviation (param $0 i32) (param $1 f64) (result f64)
  (local $2 i32)
  (local $3 f64)
  (local $4 i64)
  (local $5 i32)
  local.get $0
  i64.load offset=168
  i64.eqz
  if
   f64.const 0
   return
  end
  local.get $0
  i32.load offset=100
  local.tee $2
  local.get $2
  i32.load offset=4
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#doReset
  loop $while-continue|0
   local.get $0
   i32.load offset=100
   call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#hasNext
   if
    local.get $3
    local.get $0
    i32.load offset=100
    call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#next
    local.tee $2
    i64.load
    local.tee $4
    local.get $0
    i32.load offset=104
    local.get $4
    local.get $0
    i64.load offset=128
    i64.or
    i64.clz
    i32.wrap_i64
    i32.sub
    local.tee $5
    local.get $0
    i32.load offset=112
    i32.add
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    i64.extend_i32_s
    local.get $5
    local.get $0
    i32.load offset=112
    i32.add
    i64.extend_i32_s
    i64.shl
    i64.const 1
    local.get $0
    i32.load offset=112
    local.get $0
    i32.load offset=104
    local.get $4
    local.get $0
    i64.load offset=128
    i64.or
    i64.clz
    i32.wrap_i64
    i32.sub
    i32.add
    i64.extend_i32_s
    i64.shl
    i64.const 1
    i64.shr_u
    i64.add
    f64.convert_i64_u
    local.get $1
    f64.sub
    local.tee $3
    local.get $3
    f64.mul
    local.get $2
    i64.load offset=24
    f64.convert_i64_u
    f64.mul
    f64.add
    local.set $3
    local.get $2
    i32.const 16700
    i32.gt_u
    if
     local.get $2
     i32.const 16
     i32.sub
     call $~lib/rt/pure/decrement
    end
    br $while-continue|0
   end
  end
  local.get $3
  local.get $0
  i64.load offset=168
  f64.convert_i64_u
  f64.div
  f64.sqrt
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#get:stdDeviation (param $0 i32) (result f64)
  block $__inlined_func$assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getStdDeviation (result f64)
   f64.const 0
   local.get $0
   i32.load
   local.tee $0
   i64.load offset=168
   i64.eqz
   br_if $__inlined_func$assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getStdDeviation
   drop
   local.get $0
   local.get $0
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getMean
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#computeStdDeviation
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#get:mean (param $0 i32) (result f64)
  local.get $0
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getMean
 )
 (func $~lib/typedarray/Uint64Array#set<~lib/typedarray/Uint64Array> (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $1
  i32.load offset=8
  i32.const 3
  i32.shr_u
  local.get $0
  i32.load offset=8
  i32.const 3
  i32.shr_u
  i32.gt_s
  if
   i32.const 13120
   i32.const 13184
   i32.const 1775
   i32.const 47
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i32.load offset=4
  local.get $1
  i32.load offset=4
  local.get $1
  i32.load offset=8
  call $~lib/memory/memory.copy
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#resize (param $0 i32) (param $1 i64)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#establishSize
  local.get $0
  i32.load offset=160
  local.set $2
  local.get $0
  i32.load offset=52
  call $assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>#constructor
  local.tee $3
  i32.load
  local.get $2
  i32.load
  call $~lib/typedarray/Uint64Array#set<~lib/typedarray/Uint64Array>
  local.get $0
  i32.load offset=160
  local.tee $2
  i32.const 16700
  i32.gt_u
  if
   local.get $2
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $0
  local.get $3
  i32.store offset=160
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#addToCountAtIndex (param $0 i32) (param $1 i32) (param $2 i64)
  local.get $2
  local.get $0
  i32.load offset=160
  i32.load
  i32.load offset=4
  local.get $1
  i32.const 3
  i32.shl
  i32.add
  i64.load
  i64.add
  local.tee $2
  i64.const 0
  i64.lt_u
  if
   i32.const 0
   i32.const 9952
   i32.const 611
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i32.load offset=160
  i32.load
  i32.load offset=4
  local.get $1
  i32.const 3
  i32.shl
  i32.add
  local.get $2
  i64.store
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#handleRecordException (param $0 i32) (param $1 i64) (param $2 i64)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  local.get $0
  i32.load8_u offset=8
  i32.eqz
  if
   i32.const 12992
   local.get $2
   call $~lib/util/number/utoa64
   call $~lib/string/String.__concat
   i32.const 13024
   call $~lib/string/String.__concat
   i32.const 9952
   i32.const 225
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#resize
  local.get $0
  local.get $0
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#addToCountAtIndex
  local.get $0
  i32.load offset=116
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $5
  local.get $0
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  i32.add
  local.set $6
  local.get $5
  local.get $0
  local.tee $3
  local.tee $4
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.tee $5
  i32.const 0
  i32.lt_s
  if
   i32.const 0
   local.set $5
   local.get $6
   local.get $3
   i32.load offset=116
   i32.sub
   local.set $6
  end
  local.get $4
  i32.load offset=104
  local.get $6
  i64.extend_i32_s
  local.get $5
  local.get $3
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  local.tee $1
  local.get $4
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  local.set $0
  local.get $3
  local.get $1
  local.get $0
  local.get $4
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shr_u
  i32.wrap_i64
  i64.extend_i32_s
  local.get $0
  local.get $4
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.const 1
  local.get $4
  i32.load offset=112
  local.get $4
  i32.load offset=104
  local.get $1
  local.get $4
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.add
  i64.const 1
  i64.sub
  i64.store offset=16
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordSingleValue (param $0 i32) (param $1 i64)
  (local $2 i32)
  (local $3 i64)
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex
  local.tee $2
  local.get $0
  i32.load offset=52
  i32.ge_s
  if
   local.get $0
   i64.const 1
   local.get $1
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#handleRecordException
  else
   local.get $0
   i32.load offset=160
   i32.load
   i32.load offset=4
   local.get $2
   i32.const 3
   i32.shl
   i32.add
   i64.load
   i64.const 1
   i64.add
   local.tee $3
   i64.const 0
   i64.lt_u
   if
    local.get $3
    call $~lib/util/number/utoa64
    i32.const 13248
    call $~lib/string/String.__concat
    i32.const 9952
    i32.const 593
    i32.const 7
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   i32.load offset=160
   i32.load
   i32.load offset=4
   local.get $2
   i32.const 3
   i32.shl
   i32.add
   local.get $3
   i64.store
  end
  local.get $1
  local.get $0
  i64.load offset=144
  i64.gt_u
  if
   local.get $0
   local.get $1
   local.get $0
   i64.load offset=136
   i64.add
   i64.store offset=144
  end
  local.get $1
  local.get $0
  i64.load offset=152
  i64.lt_u
  if (result i32)
   local.get $1
   i64.const 0
   i64.ne
  else
   i32.const 0
  end
  if
   local.get $1
   local.get $0
   i64.load offset=136
   i64.gt_u
   if
    local.get $0
    local.get $1
    local.get $0
    i64.load offset=136
    i64.const -1
    i64.xor
    i64.and
    i64.store offset=152
   end
  end
  local.get $0
  local.get $0
  i64.load offset=168
  i64.const 1
  i64.add
  i64.store offset=168
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordValue (param $0 i32) (param $1 f64)
  local.get $0
  i32.load
  local.get $1
  i64.trunc_f64_u
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordSingleValue
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordCountAtValue (param $0 i32) (param $1 i64) (param $2 i64)
  (local $3 i32)
  local.get $0
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex
  local.tee $3
  local.get $0
  i32.load offset=52
  i32.ge_s
  if
   local.get $0
   local.get $1
   local.get $2
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#handleRecordException
  else
   local.get $0
   local.get $3
   local.get $1
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#addToCountAtIndex
  end
  local.get $2
  local.get $0
  i64.load offset=144
  i64.gt_u
  if
   local.get $0
   local.get $2
   local.get $0
   i64.load offset=136
   i64.add
   i64.store offset=144
  end
  local.get $2
  local.get $0
  i64.load offset=152
  i64.lt_u
  if (result i32)
   local.get $2
   i64.const 0
   i64.ne
  else
   i32.const 0
  end
  if
   local.get $2
   local.get $0
   i64.load offset=136
   i64.gt_u
   if
    local.get $0
    local.get $2
    local.get $0
    i64.load offset=136
    i64.const -1
    i64.xor
    i64.and
    i64.store offset=152
   end
  end
  local.get $0
  local.get $1
  local.get $0
  i64.load offset=168
  i64.add
  i64.store offset=168
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordValueWithCount (param $0 i32) (param $1 f64) (param $2 f64)
  local.get $0
  i32.load
  local.get $2
  i64.trunc_f64_u
  local.get $1
  i64.trunc_f64_u
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordCountAtValue
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordValueWithExpectedInterval (param $0 i32) (param $1 f64) (param $2 f64)
  (local $3 i64)
  (local $4 i64)
  block $__inlined_func$assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordSingleValueWithExpectedInterval
   local.get $2
   i64.trunc_f64_u
   local.set $4
   local.get $0
   i32.load
   local.tee $0
   local.get $1
   i64.trunc_f64_u
   local.tee $3
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordSingleValue
   i32.const 1
   local.get $4
   i64.eqz
   local.get $3
   local.get $4
   i64.lt_u
   select
   br_if $__inlined_func$assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordSingleValueWithExpectedInterval
   local.get $3
   local.get $4
   i64.sub
   local.set $3
   loop $for-loop|0
    local.get $3
    local.get $4
    i64.ge_u
    if
     local.get $0
     local.get $3
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordSingleValue
     local.get $3
     local.get $4
     i64.sub
     local.set $3
     br $for-loop|0
    end
   end
  end
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getValueAtPercentile (param $0 i32) (param $1 f64) (result i64)
  (local $2 i32)
  (local $3 i64)
  (local $4 f64)
  (local $5 i32)
  (local $6 i64)
  local.get $1
  f64.const 100
  f64.min
  f64.const 100
  f64.div
  local.get $0
  i64.load offset=168
  f64.convert_i64_u
  f64.mul
  local.set $4
  i32.const 1
  global.set $~argumentsLength
  local.get $4
  local.get $4
  local.get $4
  i64.reinterpret_f64
  i64.const 1
  i64.xor
  f64.reinterpret_i64
  f64.sub
  f64.abs
  f64.sub
  f64.ceil
  f64.const 1
  f64.max
  i64.trunc_f64_u
  local.set $3
  loop $for-loop|0
   local.get $2
   local.get $0
   i32.load offset=52
   i32.lt_s
   if
    local.get $6
    local.get $0
    i32.load offset=160
    i32.load
    i32.load offset=4
    local.get $2
    i32.const 3
    i32.shl
    i32.add
    i64.load
    i64.add
    local.tee $6
    local.get $3
    i64.ge_u
    if
     local.get $0
     i32.load offset=116
     local.get $2
     local.get $0
     i32.load offset=116
     i32.const 1
     i32.sub
     i32.and
     i32.add
     local.set $5
     local.get $2
     local.get $0
     i32.load offset=108
     i32.shr_s
     i32.const 1
     i32.sub
     local.tee $2
     i32.const 0
     i32.lt_s
     if
      local.get $5
      local.get $0
      i32.load offset=116
      i32.sub
      local.set $5
      i32.const 0
      local.set $2
     end
     local.get $5
     i64.extend_i32_s
     local.get $2
     local.get $0
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shl
     local.set $3
     local.get $1
     f64.const 0
     f64.eq
     if (result i64)
      local.get $3
      local.get $0
      i32.load offset=104
      local.get $3
      local.get $0
      i64.load offset=128
      i64.or
      i64.clz
      i32.wrap_i64
      i32.sub
      local.tee $2
      local.get $0
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shr_u
      i32.wrap_i64
      i64.extend_i32_s
      local.get $2
      local.get $0
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shl
     else
      local.get $3
      local.get $0
      i32.load offset=104
      local.get $3
      local.get $0
      i64.load offset=128
      i64.or
      i64.clz
      i32.wrap_i64
      i32.sub
      local.tee $2
      local.get $0
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shr_u
      i32.wrap_i64
      i64.extend_i32_s
      local.get $2
      local.get $0
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shl
      i64.const 1
      local.get $0
      i32.load offset=112
      local.get $0
      i32.load offset=104
      local.get $3
      local.get $0
      i64.load offset=128
      i64.or
      i64.clz
      i32.wrap_i64
      i32.sub
      i32.add
      i64.extend_i32_s
      i64.shl
      i64.add
      i64.const 1
      i64.sub
     end
     return
    end
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|0
   end
  end
  i64.const 0
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getValueAtPercentile (param $0 i32) (param $1 f64) (result f64)
  local.get $0
  i32.load
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getValueAtPercentile
  f64.convert_i64_u
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#next (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i64)
  (local $3 i32)
  loop $while-continue|0
   local.get $0
   i32.load offset=40
   local.get $0
   i32.load offset=28
   i32.load offset=52
   i32.lt_s
   if
    local.get $0
    local.get $0
    i32.load offset=28
    i32.load offset=160
    i32.load
    i32.load offset=4
    local.get $0
    i32.load offset=40
    i32.const 3
    i32.shl
    i32.add
    i64.load
    i64.store offset=104
    local.get $0
    i32.load8_u offset=112
    if
     local.get $0
     local.get $0
     i64.load offset=80
     local.get $0
     i64.load offset=104
     i64.add
     i64.store offset=80
     local.get $0
     i32.load offset=28
     local.tee $1
     i32.load offset=104
     local.get $0
     i64.load offset=48
     local.tee $2
     local.get $1
     i64.load offset=128
     i64.or
     i64.clz
     i32.wrap_i64
     i32.sub
     local.set $3
     local.get $0
     local.get $0
     i64.load offset=88
     local.get $0
     i64.load offset=104
     local.get $2
     local.get $3
     local.get $1
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shr_u
     i32.wrap_i64
     i64.extend_i32_s
     local.get $3
     local.get $1
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shl
     i64.const 1
     local.get $1
     i32.load offset=112
     local.get $1
     i32.load offset=104
     local.get $2
     local.get $1
     i64.load offset=128
     i64.or
     i64.clz
     i32.wrap_i64
     i32.sub
     i32.add
     i64.extend_i32_s
     i64.shl
     i64.add
     i64.const 1
     i64.sub
     i64.mul
     i64.add
     i64.store offset=88
     local.get $0
     i32.const 0
     i32.store8 offset=112
    end
    block $__inlined_func$assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#reachedIterationLevel (result i32)
     i32.const 0
     local.get $0
     i64.load offset=104
     i64.eqz
     br_if $__inlined_func$assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#reachedIterationLevel
     drop
     f64.const 100
     local.get $0
     i64.load offset=80
     f64.convert_i64_u
     f64.mul
     local.get $0
     i64.load offset=96
     f64.convert_i64_u
     f64.div
     local.get $0
     f64.load offset=8
     f64.ge
    end
    if
     local.get $0
     i32.load offset=28
     local.tee $1
     i32.load offset=104
     local.get $0
     i64.load offset=48
     local.tee $2
     local.get $1
     i64.load offset=128
     i64.or
     i64.clz
     i32.wrap_i64
     i32.sub
     local.set $3
     local.get $0
     i32.load offset=116
     local.get $2
     local.get $3
     local.get $1
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shr_u
     i32.wrap_i64
     i64.extend_i32_s
     local.get $3
     local.get $1
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shl
     i64.const 1
     local.get $1
     i32.load offset=112
     local.get $1
     i32.load offset=104
     local.get $2
     local.get $1
     i64.load offset=128
     i64.or
     i64.clz
     i32.wrap_i64
     i32.sub
     i32.add
     i64.extend_i32_s
     i64.shl
     i64.add
     i64.const 1
     i64.sub
     local.tee $2
     i64.store
     local.get $0
     i32.load offset=116
     local.get $0
     i64.load offset=64
     i64.store offset=8
     local.get $0
     i32.load offset=116
     local.get $0
     i64.load offset=104
     i64.store offset=16
     local.get $0
     i32.load offset=116
     local.get $0
     i64.load offset=80
     local.get $0
     i64.load offset=72
     i64.sub
     i64.store offset=24
     local.get $0
     i32.load offset=116
     local.get $0
     i64.load offset=80
     i64.store offset=32
     local.get $0
     i32.load offset=116
     local.get $0
     i64.load offset=88
     i64.store offset=40
     local.get $0
     i32.load offset=116
     f64.const 100
     local.get $0
     i64.load offset=80
     f64.convert_i64_u
     f64.mul
     local.get $0
     i64.load offset=96
     f64.convert_i64_u
     f64.div
     f64.store offset=48
     local.get $0
     i32.load offset=116
     local.get $0
     f64.load offset=8
     f64.store offset=56
     local.get $0
     local.get $2
     i64.store offset=64
     local.get $0
     local.get $0
     i64.load offset=80
     i64.store offset=72
     local.get $0
     call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#incrementIterationLevel
     local.get $0
     i32.load offset=28
     i64.load offset=168
     local.get $0
     i64.load offset=32
     i64.ne
     if
      i32.const 12704
      i32.const 13488
      i32.const 187
      i32.const 11
      call $~lib/builtins/abort
      unreachable
     end
     local.get $0
     i32.load offset=116
     local.tee $0
     i32.const 16700
     i32.gt_u
     if
      local.get $0
      i32.const 16
      i32.sub
      local.tee $1
      i32.load offset=4
      local.set $3
      local.get $1
      local.get $3
      i32.const 1
      i32.add
      i32.store offset=4
      local.get $1
      i32.load
      drop
     end
     local.get $0
     return
    end
    local.get $0
    call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#incrementSubBucket
    br $while-continue|0
   end
  end
  i32.const 12800
  i32.const 13488
  i32.const 193
  i32.const 5
  call $~lib/builtins/abort
  unreachable
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#outputPercentileDistribution (param $0 i32) (param $1 i32) (param $2 f64) (result i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  (local $15 i32)
  (local $16 i32)
  (local $17 i32)
  (local $18 i32)
  (local $19 i32)
  (local $20 i32)
  (local $21 i32)
  (local $22 i32)
  (local $23 i32)
  (local $24 i32)
  (local $25 i32)
  (local $26 i32)
  (local $27 i32)
  (local $28 i32)
  (local $29 i32)
  (local $30 i32)
  (local $31 i32)
  (local $32 i32)
  (local $33 f64)
  (local $34 i32)
  i32.const 1312
  i32.const 13344
  call $~lib/string/String.__concat
  local.tee $24
  local.tee $3
  i32.const 1312
  i32.ne
  if
   local.get $3
   i32.const 16700
   i32.gt_u
   if
    local.get $3
    i32.const 16
    i32.sub
    local.tee $15
    i32.load offset=4
    local.set $5
    local.get $15
    local.get $5
    i32.const 1
    i32.add
    i32.store offset=4
    local.get $15
    i32.load
    drop
   end
  end
  local.get $0
  i32.load offset=96
  local.tee $15
  i32.const 16700
  i32.gt_u
  if
   local.get $15
   i32.const 16
   i32.sub
   local.tee $5
   i32.load offset=4
   local.set $10
   local.get $5
   local.get $10
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $5
   i32.load
   drop
  end
  local.get $15
  local.get $15
  i32.load offset=28
  local.get $1
  call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#doReset
  i32.const 12
  local.get $0
  i32.load8_u offset=32
  call $assembly/formatters/FloatFormatter#constructor
  local.set $19
  i32.const 2
  i32.const 12
  call $assembly/formatters/FloatFormatter#constructor
  local.set $20
  i32.const 10
  call $assembly/formatters/IntegerFormatter#constructor
  local.set $21
  i32.const 14
  i32.const 2
  call $assembly/formatters/FloatFormatter#constructor
  local.set $23
  loop $while-continue|0
   local.get $15
   call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#hasNext
   if
    local.get $15
    call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#next
    local.tee $5
    f64.load offset=56
    f64.const 100
    f64.lt
    if
     local.get $3
     local.tee $1
     local.get $19
     local.get $5
     i64.load
     f64.convert_i64_u
     local.get $2
     f64.div
     call $assembly/formatters/FloatFormatter#format
     local.tee $10
     i32.const 1184
     call $~lib/string/String.__concat
     local.tee $11
     local.get $20
     local.get $5
     f64.load offset=56
     f64.const 100
     f64.div
     call $assembly/formatters/FloatFormatter#format
     local.tee $12
     call $~lib/string/String.__concat
     local.tee $6
     i32.const 1184
     call $~lib/string/String.__concat
     local.tee $7
     local.get $21
     local.get $5
     i64.load offset=32
     call $assembly/formatters/IntegerFormatter#format
     local.tee $8
     call $~lib/string/String.__concat
     local.tee $4
     i32.const 1184
     call $~lib/string/String.__concat
     local.tee $13
     local.get $23
     f64.const 1
     f64.const 1
     local.get $5
     f64.load offset=56
     f64.const 100
     f64.div
     f64.sub
     f64.div
     call $assembly/formatters/FloatFormatter#format
     local.tee $14
     call $~lib/string/String.__concat
     local.tee $9
     i32.const 13600
     call $~lib/string/String.__concat
     local.tee $16
     call $~lib/string/String.__concat
     local.tee $17
     local.tee $3
     local.get $1
     i32.ne
     if
      local.get $3
      i32.const 16700
      i32.gt_u
      if
       local.get $3
       i32.const 16
       i32.sub
       local.tee $18
       i32.load offset=4
       local.set $22
       local.get $18
       local.get $22
       i32.const 1
       i32.add
       i32.store offset=4
       local.get $18
       i32.load
       drop
      end
      local.get $1
      i32.const 16700
      i32.gt_u
      if
       local.get $1
       i32.const 16
       i32.sub
       call $~lib/rt/pure/decrement
      end
     end
     local.get $10
     i32.const 16700
     i32.gt_u
     if
      local.get $10
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $11
     i32.const 16700
     i32.gt_u
     if
      local.get $11
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $12
     i32.const 16700
     i32.gt_u
     if
      local.get $12
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $6
     i32.const 16700
     i32.gt_u
     if
      local.get $6
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $7
     i32.const 16700
     i32.gt_u
     if
      local.get $7
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $8
     i32.const 16700
     i32.gt_u
     if
      local.get $8
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $4
     i32.const 16700
     i32.gt_u
     if
      local.get $4
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $13
     i32.const 16700
     i32.gt_u
     if
      local.get $13
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $14
     i32.const 16700
     i32.gt_u
     if
      local.get $14
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $9
     i32.const 16700
     i32.gt_u
     if
      local.get $9
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $16
     i32.const 16700
     i32.gt_u
     if
      local.get $16
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $17
     i32.const 16700
     i32.gt_u
     if
      local.get $17
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
    else
     local.get $3
     local.tee $1
     local.get $19
     local.get $5
     i64.load
     f64.convert_i64_u
     local.get $2
     f64.div
     call $assembly/formatters/FloatFormatter#format
     local.tee $10
     i32.const 1184
     call $~lib/string/String.__concat
     local.tee $11
     local.get $20
     local.get $5
     f64.load offset=56
     f64.const 100
     f64.div
     call $assembly/formatters/FloatFormatter#format
     local.tee $12
     call $~lib/string/String.__concat
     local.tee $6
     i32.const 1184
     call $~lib/string/String.__concat
     local.tee $7
     local.get $21
     local.get $5
     i64.load offset=32
     call $assembly/formatters/IntegerFormatter#format
     local.tee $8
     call $~lib/string/String.__concat
     local.tee $4
     i32.const 13600
     call $~lib/string/String.__concat
     local.tee $13
     call $~lib/string/String.__concat
     local.tee $14
     local.tee $3
     local.get $1
     i32.ne
     if
      local.get $3
      i32.const 16700
      i32.gt_u
      if
       local.get $3
       i32.const 16
       i32.sub
       local.tee $9
       i32.load offset=4
       local.set $16
       local.get $9
       local.get $16
       i32.const 1
       i32.add
       i32.store offset=4
       local.get $9
       i32.load
       drop
      end
      local.get $1
      i32.const 16700
      i32.gt_u
      if
       local.get $1
       i32.const 16
       i32.sub
       call $~lib/rt/pure/decrement
      end
     end
     local.get $10
     i32.const 16700
     i32.gt_u
     if
      local.get $10
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $11
     i32.const 16700
     i32.gt_u
     if
      local.get $11
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $12
     i32.const 16700
     i32.gt_u
     if
      local.get $12
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $6
     i32.const 16700
     i32.gt_u
     if
      local.get $6
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $7
     i32.const 16700
     i32.gt_u
     if
      local.get $7
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $8
     i32.const 16700
     i32.gt_u
     if
      local.get $8
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $4
     i32.const 16700
     i32.gt_u
     if
      local.get $4
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $13
     i32.const 16700
     i32.gt_u
     if
      local.get $13
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $14
     i32.const 16700
     i32.gt_u
     if
      local.get $14
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
    end
    local.get $5
    i32.const 16700
    i32.gt_u
    if
     local.get $5
     i32.const 16
     i32.sub
     call $~lib/rt/pure/decrement
    end
    br $while-continue|0
   end
  end
  i32.const 12
  local.get $0
  i32.load8_u offset=32
  call $assembly/formatters/FloatFormatter#constructor
  local.tee $16
  local.get $0
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getMean
  local.tee $33
  local.get $2
  f64.div
  call $assembly/formatters/FloatFormatter#format
  local.set $11
  local.get $16
  local.get $0
  local.get $33
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#computeStdDeviation
  local.get $2
  f64.div
  call $assembly/formatters/FloatFormatter#format
  local.set $12
  local.get $16
  local.get $0
  i64.load offset=144
  f64.convert_i64_u
  local.get $2
  f64.div
  call $assembly/formatters/FloatFormatter#format
  i32.const 12
  call $assembly/formatters/IntegerFormatter#constructor
  local.tee $17
  local.get $0
  i64.load offset=168
  call $assembly/formatters/IntegerFormatter#format
  local.set $5
  local.get $17
  local.get $0
  i64.load offset=40
  call $assembly/formatters/IntegerFormatter#format
  local.set $10
  local.get $17
  local.get $0
  i32.load offset=48
  i64.extend_i32_s
  call $assembly/formatters/IntegerFormatter#format
  local.set $0
  local.get $3
  local.set $4
  local.get $11
  local.tee $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   local.tee $6
   i32.load offset=4
   local.set $7
   local.get $6
   local.get $7
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $6
   i32.load
   drop
  end
  i32.const 13632
  local.get $3
  local.tee $13
  call $~lib/string/String.__concat
  local.tee $18
  i32.const 13680
  call $~lib/string/String.__concat
  local.tee $25
  local.get $12
  local.tee $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   local.tee $6
   i32.load offset=4
   local.set $8
   local.get $6
   local.get $8
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $6
   i32.load
   drop
  end
  local.get $3
  local.tee $14
  call $~lib/string/String.__concat
  local.tee $22
  i32.const 13744
  call $~lib/string/String.__concat
  local.tee $26
  local.set $7
  local.tee $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   local.tee $6
   i32.load offset=4
   local.set $8
   local.get $6
   local.get $8
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $6
   i32.load
   drop
  end
  local.get $7
  local.get $3
  call $~lib/string/String.__concat
  local.tee $27
  i32.const 13792
  call $~lib/string/String.__concat
  local.tee $28
  local.get $5
  local.tee $6
  i32.const 16700
  i32.gt_u
  if
   local.get $6
   i32.const 16
   i32.sub
   local.tee $7
   i32.load offset=4
   local.set $9
   local.get $7
   local.get $9
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $7
   i32.load
   drop
  end
  local.get $6
  call $~lib/string/String.__concat
  local.tee $29
  i32.const 13856
  call $~lib/string/String.__concat
  local.tee $30
  local.get $10
  local.tee $7
  i32.const 16700
  i32.gt_u
  if
   local.get $7
   i32.const 16
   i32.sub
   local.tee $8
   i32.load offset=4
   local.set $1
   local.get $8
   local.get $1
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $8
   i32.load
   drop
  end
  local.get $7
  call $~lib/string/String.__concat
  local.tee $1
  i32.const 13904
  call $~lib/string/String.__concat
  local.tee $31
  local.set $5
  local.get $0
  local.tee $8
  i32.const 16700
  i32.gt_u
  if
   local.get $8
   i32.const 16
   i32.sub
   local.tee $9
   i32.load offset=4
   local.set $0
   local.get $9
   local.get $0
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $9
   i32.load
   drop
  end
  local.get $4
  local.tee $9
  local.get $9
  local.get $5
  local.get $8
  call $~lib/string/String.__concat
  local.tee $4
  i32.const 13968
  call $~lib/string/String.__concat
  local.tee $5
  call $~lib/string/String.__concat
  local.tee $0
  local.tee $10
  i32.ne
  if
   local.get $10
   i32.const 16700
   i32.gt_u
   if
    local.get $10
    i32.const 16
    i32.sub
    local.tee $32
    i32.load offset=4
    local.set $34
    local.get $32
    local.get $34
    i32.const 1
    i32.add
    i32.store offset=4
    local.get $32
    i32.load
    drop
   end
   local.get $9
   i32.const 16700
   i32.gt_u
   if
    local.get $9
    i32.const 16
    i32.sub
    call $~lib/rt/pure/decrement
   end
  end
  local.get $24
  i32.const 16700
  i32.gt_u
  if
   local.get $24
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $15
  i32.const 16700
  i32.gt_u
  if
   local.get $15
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $19
  i32.const 16700
  i32.gt_u
  if
   local.get $19
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $20
  i32.const 16700
  i32.gt_u
  if
   local.get $20
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $21
  i32.const 16700
  i32.gt_u
  if
   local.get $21
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $23
  i32.const 16700
  i32.gt_u
  if
   local.get $23
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $16
  i32.const 16700
  i32.gt_u
  if
   local.get $16
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $11
  i32.const 16700
  i32.gt_u
  if
   local.get $11
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $12
  i32.const 16700
  i32.gt_u
  if
   local.get $12
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $17
  i32.const 16700
  i32.gt_u
  if
   local.get $17
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $6
  i32.const 16700
  i32.gt_u
  if
   local.get $6
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $7
  i32.const 16700
  i32.gt_u
  if
   local.get $7
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $8
  i32.const 16700
  i32.gt_u
  if
   local.get $8
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $13
  i32.const 16700
  i32.gt_u
  if
   local.get $13
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $18
  i32.const 16700
  i32.gt_u
  if
   local.get $18
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $25
  i32.const 16700
  i32.gt_u
  if
   local.get $25
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $14
  i32.const 16700
  i32.gt_u
  if
   local.get $14
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $22
  i32.const 16700
  i32.gt_u
  if
   local.get $22
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $26
  i32.const 16700
  i32.gt_u
  if
   local.get $26
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $27
  i32.const 16700
  i32.gt_u
  if
   local.get $27
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $28
  i32.const 16700
  i32.gt_u
  if
   local.get $28
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $6
  i32.const 16700
  i32.gt_u
  if
   local.get $6
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $29
  i32.const 16700
  i32.gt_u
  if
   local.get $29
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $30
  i32.const 16700
  i32.gt_u
  if
   local.get $30
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $7
  i32.const 16700
  i32.gt_u
  if
   local.get $7
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $31
  i32.const 16700
  i32.gt_u
  if
   local.get $31
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $8
  i32.const 16700
  i32.gt_u
  if
   local.get $8
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $4
  i32.const 16700
  i32.gt_u
  if
   local.get $4
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $5
  i32.const 16700
  i32.gt_u
  if
   local.get $5
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $10
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#outputPercentileDistribution (param $0 i32) (param $1 f64) (param $2 f64) (result i32)
  local.get $0
  i32.load
  local.get $1
  i32.trunc_f64_s
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#outputPercentileDistribution
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#addWhileCorrectingForCoordinatedOmission (param $0 i32) (param $1 i32) (param $2 i64)
  (local $3 i32)
  (local $4 i32)
  (local $5 i64)
  (local $6 i64)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $4
   local.get $3
   local.get $4
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $4
   local.get $3
   local.get $4
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $1
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#constructor
  local.set $3
  loop $while-continue|0
   local.get $3
   call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#hasNext
   if
    local.get $0
    local.get $3
    call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#next
    local.tee $4
    i64.load offset=16
    local.tee $6
    local.get $4
    i64.load
    local.tee $5
    call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordCountAtValue
    i32.const 1
    local.get $5
    local.get $2
    i64.le_u
    local.get $2
    i64.const 0
    i64.le_u
    select
    i32.eqz
    if
     local.get $5
     local.get $2
     i64.sub
     local.set $5
     loop $for-loop|0
      local.get $5
      local.get $2
      i64.ge_u
      if
       local.get $0
       local.get $6
       local.get $5
       call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordCountAtValue
       local.get $5
       local.get $2
       i64.sub
       local.set $5
       br $for-loop|0
      end
     end
    end
    local.get $4
    i32.const 16700
    i32.gt_u
    if
     local.get $4
     i32.const 16
     i32.sub
     call $~lib/rt/pure/decrement
    end
    br $while-continue|0
   end
  end
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#copyCorrectedForCoordinatedOmission (param $0 i32) (param $1 f64) (result i32)
  (local $2 i32)
  (local $3 i64)
  local.get $1
  i64.trunc_f64_u
  local.set $3
  local.get $0
  i32.load
  local.tee $2
  i64.load offset=24
  local.get $2
  i64.load offset=16
  local.get $2
  i32.load8_u offset=32
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#constructor
  local.tee $0
  local.get $2
  local.get $3
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#addWhileCorrectingForCoordinatedOmission
  i32.const 0
  f64.const 0
  f64.const 0
  f64.const 0
  i32.const 0
  local.get $0
  call $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#constructor
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#add<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i32)
  (local $4 i64)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $5
   local.get $3
   local.get $5
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $0
  i32.load offset=116
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $5
  local.get $0
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  i32.add
  local.set $3
  local.get $5
  local.get $0
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.tee $5
  i32.const 0
  i32.lt_s
  if
   i32.const 0
   local.set $5
   local.get $3
   local.get $0
   i32.load offset=116
   i32.sub
   local.set $3
  end
  local.get $0
  i32.load offset=104
  local.get $3
  i64.extend_i32_s
  local.get $5
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  local.tee $2
  local.get $0
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  local.set $3
  local.get $2
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shr_u
  i32.wrap_i64
  i64.extend_i32_s
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.const 1
  local.get $0
  i32.load offset=112
  local.get $0
  i32.load offset=104
  local.get $2
  local.get $0
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.add
  i64.const 1
  i64.sub
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 14000
    i32.const 9952
    i32.const 639
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   loop $for-loop|0
    local.get $6
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $6
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     i32.add
     i32.load8_u
     i64.extend_i32_u
     local.tee $2
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $6
      local.get $2
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#addToCountAtIndex
      local.get $2
      local.get $4
      i64.add
      local.set $4
     end
     local.get $6
     i32.const 1
     i32.add
     local.set $6
     br $for-loop|0
    end
   end
   local.get $0
   local.get $4
   local.get $0
   i64.load offset=168
   i64.add
   i64.store offset=168
   local.get $0
   local.get $0
   i64.load offset=136
   local.get $0
   i64.load offset=144
   local.tee $2
   local.get $1
   i64.load offset=144
   local.tee $4
   local.get $2
   local.get $4
   i64.gt_u
   select
   i64.add
   i64.store offset=144
   local.get $0
   i64.load offset=152
   local.tee $2
   local.get $1
   i64.load offset=152
   local.tee $4
   local.get $2
   local.get $4
   i64.lt_u
   select
   local.tee $2
   local.get $0
   i64.load offset=136
   i64.gt_u
   if
    local.get $0
    local.get $2
    local.get $0
    i64.load offset=136
    i64.const -1
    i64.xor
    i64.and
    i64.store offset=152
   end
  else
   local.get $1
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex
   local.set $5
   local.get $1
   i32.load offset=116
   local.get $5
   local.get $1
   i32.load offset=116
   i32.const 1
   i32.sub
   i32.and
   i32.add
   local.set $3
   local.get $5
   local.get $1
   i32.load offset=160
   i32.load
   i32.load offset=4
   i32.add
   i32.load8_u
   i64.extend_i32_u
   local.set $2
   local.get $5
   local.get $1
   i32.load offset=108
   i32.shr_s
   i32.const 1
   i32.sub
   local.tee $6
   i32.const 0
   i32.lt_s
   if
    i32.const 0
    local.set $6
    local.get $3
    local.get $1
    i32.load offset=116
    i32.sub
    local.set $3
   end
   local.get $0
   local.get $2
   local.get $3
   i64.extend_i32_s
   local.get $6
   local.get $1
   i32.load offset=112
   i32.add
   i64.extend_i32_s
   i64.shl
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordCountAtValue
   loop $for-loop|1
    local.get $7
    local.get $5
    i32.lt_s
    if
     local.get $7
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     i32.add
     i32.load8_u
     i64.extend_i32_u
     local.tee $4
     local.set $2
     local.get $4
     i64.const 0
     i64.gt_u
     if
      local.get $1
      i32.load offset=116
      local.get $7
      local.get $1
      i32.load offset=116
      i32.const 1
      i32.sub
      i32.and
      i32.add
      local.set $3
      local.get $7
      local.get $1
      i32.load offset=108
      i32.shr_s
      i32.const 1
      i32.sub
      local.tee $6
      i32.const 0
      i32.lt_s
      if
       i32.const 0
       local.set $6
       local.get $3
       local.get $1
       i32.load offset=116
       i32.sub
       local.set $3
      end
      local.get $0
      local.get $2
      local.get $3
      i64.extend_i32_s
      local.get $6
      local.get $1
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shl
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordCountAtValue
     end
     local.get $7
     i32.const 1
     i32.add
     local.set $7
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=64
  local.tee $2
  local.get $1
  i64.load offset=64
  local.tee $4
  local.get $2
  local.get $4
  i64.lt_u
  select
  i64.store offset=64
  local.get $0
  local.get $0
  i64.load offset=72
  local.tee $2
  local.get $1
  i64.load offset=72
  local.tee $4
  local.get $2
  local.get $4
  i64.gt_u
  select
  i64.store offset=72
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#addHistogram8 (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#add<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#add<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i32)
  (local $4 i64)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $5
   local.get $3
   local.get $5
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $0
  i32.load offset=116
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $5
  local.get $0
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  i32.add
  local.set $3
  local.get $5
  local.get $0
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.tee $5
  i32.const 0
  i32.lt_s
  if
   i32.const 0
   local.set $5
   local.get $3
   local.get $0
   i32.load offset=116
   i32.sub
   local.set $3
  end
  local.get $0
  i32.load offset=104
  local.get $3
  i64.extend_i32_s
  local.get $5
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  local.tee $2
  local.get $0
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  local.set $3
  local.get $2
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shr_u
  i32.wrap_i64
  i64.extend_i32_s
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.const 1
  local.get $0
  i32.load offset=112
  local.get $0
  i32.load offset=104
  local.get $2
  local.get $0
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.add
  i64.const 1
  i64.sub
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 14000
    i32.const 9952
    i32.const 639
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   loop $for-loop|0
    local.get $6
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $6
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u
     i64.extend_i32_u
     local.tee $2
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $6
      local.get $2
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#addToCountAtIndex
      local.get $2
      local.get $4
      i64.add
      local.set $4
     end
     local.get $6
     i32.const 1
     i32.add
     local.set $6
     br $for-loop|0
    end
   end
   local.get $0
   local.get $4
   local.get $0
   i64.load offset=168
   i64.add
   i64.store offset=168
   local.get $0
   local.get $0
   i64.load offset=136
   local.get $0
   i64.load offset=144
   local.tee $2
   local.get $1
   i64.load offset=144
   local.tee $4
   local.get $2
   local.get $4
   i64.gt_u
   select
   i64.add
   i64.store offset=144
   local.get $0
   i64.load offset=152
   local.tee $2
   local.get $1
   i64.load offset=152
   local.tee $4
   local.get $2
   local.get $4
   i64.lt_u
   select
   local.tee $2
   local.get $0
   i64.load offset=136
   i64.gt_u
   if
    local.get $0
    local.get $2
    local.get $0
    i64.load offset=136
    i64.const -1
    i64.xor
    i64.and
    i64.store offset=152
   end
  else
   local.get $1
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex
   local.set $5
   local.get $1
   i32.load offset=116
   local.get $5
   local.get $1
   i32.load offset=116
   i32.const 1
   i32.sub
   i32.and
   i32.add
   local.set $3
   local.get $1
   i32.load offset=160
   i32.load
   i32.load offset=4
   local.get $5
   i32.const 1
   i32.shl
   i32.add
   i32.load16_u
   i64.extend_i32_u
   local.set $2
   local.get $5
   local.get $1
   i32.load offset=108
   i32.shr_s
   i32.const 1
   i32.sub
   local.tee $6
   i32.const 0
   i32.lt_s
   if
    i32.const 0
    local.set $6
    local.get $3
    local.get $1
    i32.load offset=116
    i32.sub
    local.set $3
   end
   local.get $0
   local.get $2
   local.get $3
   i64.extend_i32_s
   local.get $6
   local.get $1
   i32.load offset=112
   i32.add
   i64.extend_i32_s
   i64.shl
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordCountAtValue
   loop $for-loop|1
    local.get $7
    local.get $5
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $7
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u
     i64.extend_i32_u
     local.tee $4
     local.set $2
     local.get $4
     i64.const 0
     i64.gt_u
     if
      local.get $1
      i32.load offset=116
      local.get $7
      local.get $1
      i32.load offset=116
      i32.const 1
      i32.sub
      i32.and
      i32.add
      local.set $3
      local.get $7
      local.get $1
      i32.load offset=108
      i32.shr_s
      i32.const 1
      i32.sub
      local.tee $6
      i32.const 0
      i32.lt_s
      if
       i32.const 0
       local.set $6
       local.get $3
       local.get $1
       i32.load offset=116
       i32.sub
       local.set $3
      end
      local.get $0
      local.get $2
      local.get $3
      i64.extend_i32_s
      local.get $6
      local.get $1
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shl
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordCountAtValue
     end
     local.get $7
     i32.const 1
     i32.add
     local.set $7
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=64
  local.tee $2
  local.get $1
  i64.load offset=64
  local.tee $4
  local.get $2
  local.get $4
  i64.lt_u
  select
  i64.store offset=64
  local.get $0
  local.get $0
  i64.load offset=72
  local.tee $2
  local.get $1
  i64.load offset=72
  local.tee $4
  local.get $2
  local.get $4
  i64.gt_u
  select
  i64.store offset=72
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#addHistogram16 (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#add<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#add<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i32)
  (local $4 i64)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $5
   local.get $3
   local.get $5
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $0
  i32.load offset=116
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $5
  local.get $0
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  i32.add
  local.set $3
  local.get $5
  local.get $0
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.tee $5
  i32.const 0
  i32.lt_s
  if
   i32.const 0
   local.set $5
   local.get $3
   local.get $0
   i32.load offset=116
   i32.sub
   local.set $3
  end
  local.get $0
  i32.load offset=104
  local.get $3
  i64.extend_i32_s
  local.get $5
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  local.tee $2
  local.get $0
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  local.set $3
  local.get $2
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shr_u
  i32.wrap_i64
  i64.extend_i32_s
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.const 1
  local.get $0
  i32.load offset=112
  local.get $0
  i32.load offset=104
  local.get $2
  local.get $0
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.add
  i64.const 1
  i64.sub
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 14000
    i32.const 9952
    i32.const 639
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   loop $for-loop|0
    local.get $6
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $6
     i32.const 2
     i32.shl
     i32.add
     i32.load
     i64.extend_i32_u
     local.tee $2
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $6
      local.get $2
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#addToCountAtIndex
      local.get $2
      local.get $4
      i64.add
      local.set $4
     end
     local.get $6
     i32.const 1
     i32.add
     local.set $6
     br $for-loop|0
    end
   end
   local.get $0
   local.get $4
   local.get $0
   i64.load offset=168
   i64.add
   i64.store offset=168
   local.get $0
   local.get $0
   i64.load offset=136
   local.get $0
   i64.load offset=144
   local.tee $2
   local.get $1
   i64.load offset=144
   local.tee $4
   local.get $2
   local.get $4
   i64.gt_u
   select
   i64.add
   i64.store offset=144
   local.get $0
   i64.load offset=152
   local.tee $2
   local.get $1
   i64.load offset=152
   local.tee $4
   local.get $2
   local.get $4
   i64.lt_u
   select
   local.tee $2
   local.get $0
   i64.load offset=136
   i64.gt_u
   if
    local.get $0
    local.get $2
    local.get $0
    i64.load offset=136
    i64.const -1
    i64.xor
    i64.and
    i64.store offset=152
   end
  else
   local.get $1
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex
   local.set $5
   local.get $1
   i32.load offset=116
   local.get $5
   local.get $1
   i32.load offset=116
   i32.const 1
   i32.sub
   i32.and
   i32.add
   local.set $3
   local.get $1
   i32.load offset=160
   i32.load
   i32.load offset=4
   local.get $5
   i32.const 2
   i32.shl
   i32.add
   i32.load
   i64.extend_i32_u
   local.set $2
   local.get $5
   local.get $1
   i32.load offset=108
   i32.shr_s
   i32.const 1
   i32.sub
   local.tee $6
   i32.const 0
   i32.lt_s
   if
    i32.const 0
    local.set $6
    local.get $3
    local.get $1
    i32.load offset=116
    i32.sub
    local.set $3
   end
   local.get $0
   local.get $2
   local.get $3
   i64.extend_i32_s
   local.get $6
   local.get $1
   i32.load offset=112
   i32.add
   i64.extend_i32_s
   i64.shl
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordCountAtValue
   loop $for-loop|1
    local.get $7
    local.get $5
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $7
     i32.const 2
     i32.shl
     i32.add
     i32.load
     i64.extend_i32_u
     local.tee $4
     local.set $2
     local.get $4
     i64.const 0
     i64.gt_u
     if
      local.get $1
      i32.load offset=116
      local.get $7
      local.get $1
      i32.load offset=116
      i32.const 1
      i32.sub
      i32.and
      i32.add
      local.set $3
      local.get $7
      local.get $1
      i32.load offset=108
      i32.shr_s
      i32.const 1
      i32.sub
      local.tee $6
      i32.const 0
      i32.lt_s
      if
       i32.const 0
       local.set $6
       local.get $3
       local.get $1
       i32.load offset=116
       i32.sub
       local.set $3
      end
      local.get $0
      local.get $2
      local.get $3
      i64.extend_i32_s
      local.get $6
      local.get $1
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shl
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordCountAtValue
     end
     local.get $7
     i32.const 1
     i32.add
     local.set $7
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=64
  local.tee $2
  local.get $1
  i64.load offset=64
  local.tee $4
  local.get $2
  local.get $4
  i64.lt_u
  select
  i64.store offset=64
  local.get $0
  local.get $0
  i64.load offset=72
  local.tee $2
  local.get $1
  i64.load offset=72
  local.tee $4
  local.get $2
  local.get $4
  i64.gt_u
  select
  i64.store offset=72
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#addHistogram32 (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#add<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#add<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i32)
  (local $4 i64)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $5
   local.get $3
   local.get $5
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $0
  i32.load offset=116
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $5
  local.get $0
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  i32.add
  local.set $3
  local.get $5
  local.get $0
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.tee $5
  i32.const 0
  i32.lt_s
  if
   i32.const 0
   local.set $5
   local.get $3
   local.get $0
   i32.load offset=116
   i32.sub
   local.set $3
  end
  local.get $0
  i32.load offset=104
  local.get $3
  i64.extend_i32_s
  local.get $5
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  local.tee $2
  local.get $0
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  local.set $3
  local.get $2
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shr_u
  i32.wrap_i64
  i64.extend_i32_s
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.const 1
  local.get $0
  i32.load offset=112
  local.get $0
  i32.load offset=104
  local.get $2
  local.get $0
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.add
  i64.const 1
  i64.sub
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 14000
    i32.const 9952
    i32.const 639
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   loop $for-loop|0
    local.get $6
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $6
     i32.const 3
     i32.shl
     i32.add
     i64.load
     local.tee $2
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $6
      local.get $2
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#addToCountAtIndex
      local.get $2
      local.get $4
      i64.add
      local.set $4
     end
     local.get $6
     i32.const 1
     i32.add
     local.set $6
     br $for-loop|0
    end
   end
   local.get $0
   local.get $4
   local.get $0
   i64.load offset=168
   i64.add
   i64.store offset=168
   local.get $0
   local.get $0
   i64.load offset=136
   local.get $0
   i64.load offset=144
   local.tee $2
   local.get $1
   i64.load offset=144
   local.tee $4
   local.get $2
   local.get $4
   i64.gt_u
   select
   i64.add
   i64.store offset=144
   local.get $0
   i64.load offset=152
   local.tee $2
   local.get $1
   i64.load offset=152
   local.tee $4
   local.get $2
   local.get $4
   i64.lt_u
   select
   local.tee $2
   local.get $0
   i64.load offset=136
   i64.gt_u
   if
    local.get $0
    local.get $2
    local.get $0
    i64.load offset=136
    i64.const -1
    i64.xor
    i64.and
    i64.store offset=152
   end
  else
   local.get $1
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex
   local.set $5
   local.get $1
   i32.load offset=116
   local.get $5
   local.get $1
   i32.load offset=116
   i32.const 1
   i32.sub
   i32.and
   i32.add
   local.set $3
   local.get $1
   i32.load offset=160
   i32.load
   i32.load offset=4
   local.get $5
   i32.const 3
   i32.shl
   i32.add
   i64.load
   local.set $2
   local.get $5
   local.get $1
   i32.load offset=108
   i32.shr_s
   i32.const 1
   i32.sub
   local.tee $6
   i32.const 0
   i32.lt_s
   if
    i32.const 0
    local.set $6
    local.get $3
    local.get $1
    i32.load offset=116
    i32.sub
    local.set $3
   end
   local.get $0
   local.get $2
   local.get $3
   i64.extend_i32_s
   local.get $6
   local.get $1
   i32.load offset=112
   i32.add
   i64.extend_i32_s
   i64.shl
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordCountAtValue
   loop $for-loop|1
    local.get $7
    local.get $5
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $7
     i32.const 3
     i32.shl
     i32.add
     i64.load
     local.tee $4
     local.set $2
     local.get $4
     i64.const 0
     i64.gt_u
     if
      local.get $1
      i32.load offset=116
      local.get $7
      local.get $1
      i32.load offset=116
      i32.const 1
      i32.sub
      i32.and
      i32.add
      local.set $3
      local.get $7
      local.get $1
      i32.load offset=108
      i32.shr_s
      i32.const 1
      i32.sub
      local.tee $6
      i32.const 0
      i32.lt_s
      if
       i32.const 0
       local.set $6
       local.get $3
       local.get $1
       i32.load offset=116
       i32.sub
       local.set $3
      end
      local.get $0
      local.get $2
      local.get $3
      i64.extend_i32_s
      local.get $6
      local.get $1
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shl
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordCountAtValue
     end
     local.get $7
     i32.const 1
     i32.add
     local.set $7
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=64
  local.tee $2
  local.get $1
  i64.load offset=64
  local.tee $4
  local.get $2
  local.get $4
  i64.lt_u
  select
  i64.store offset=64
  local.get $0
  local.get $0
  i64.load offset=72
  local.tee $2
  local.get $1
  i64.load offset=72
  local.tee $4
  local.get $2
  local.get $4
  i64.gt_u
  select
  i64.store offset=72
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#addHistogram64 (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#add<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#add<assembly/packedarray/PackedArray/PackedArray,u64> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i32)
  (local $4 i64)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $5
   local.get $3
   local.get $5
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $0
  i32.load offset=116
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $5
  local.get $0
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  i32.add
  local.set $3
  local.get $5
  local.get $0
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.tee $5
  i32.const 0
  i32.lt_s
  if
   i32.const 0
   local.set $5
   local.get $3
   local.get $0
   i32.load offset=116
   i32.sub
   local.set $3
  end
  local.get $0
  i32.load offset=104
  local.get $3
  i64.extend_i32_s
  local.get $5
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  local.tee $2
  local.get $0
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  local.set $3
  local.get $2
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shr_u
  i32.wrap_i64
  i64.extend_i32_s
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.const 1
  local.get $0
  i32.load offset=112
  local.get $0
  i32.load offset=104
  local.get $2
  local.get $0
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.add
  i64.const 1
  i64.sub
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 14000
    i32.const 9952
    i32.const 639
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   loop $for-loop|0
    local.get $6
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     local.get $6
     call $assembly/packedarray/PackedArray/PackedArray#get
     local.tee $2
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $6
      local.get $2
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#addToCountAtIndex
      local.get $2
      local.get $4
      i64.add
      local.set $4
     end
     local.get $6
     i32.const 1
     i32.add
     local.set $6
     br $for-loop|0
    end
   end
   local.get $0
   local.get $4
   local.get $0
   i64.load offset=168
   i64.add
   i64.store offset=168
   local.get $0
   local.get $0
   i64.load offset=136
   local.get $0
   i64.load offset=144
   local.tee $2
   local.get $1
   i64.load offset=144
   local.tee $4
   local.get $2
   local.get $4
   i64.gt_u
   select
   i64.add
   i64.store offset=144
   local.get $0
   i64.load offset=152
   local.tee $2
   local.get $1
   i64.load offset=152
   local.tee $4
   local.get $2
   local.get $4
   i64.lt_u
   select
   local.tee $2
   local.get $0
   i64.load offset=136
   i64.gt_u
   if
    local.get $0
    local.get $2
    local.get $0
    i64.load offset=136
    i64.const -1
    i64.xor
    i64.and
    i64.store offset=152
   end
  else
   local.get $1
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex
   local.set $5
   local.get $1
   i32.load offset=160
   local.get $5
   call $assembly/packedarray/PackedArray/PackedArray#get
   local.set $2
   local.get $1
   i32.load offset=116
   local.get $5
   local.get $1
   i32.load offset=116
   i32.const 1
   i32.sub
   i32.and
   i32.add
   local.set $3
   local.get $5
   local.get $1
   i32.load offset=108
   i32.shr_s
   i32.const 1
   i32.sub
   local.tee $6
   i32.const 0
   i32.lt_s
   if
    i32.const 0
    local.set $6
    local.get $3
    local.get $1
    i32.load offset=116
    i32.sub
    local.set $3
   end
   local.get $0
   local.get $2
   local.get $3
   i64.extend_i32_s
   local.get $6
   local.get $1
   i32.load offset=112
   i32.add
   i64.extend_i32_s
   i64.shl
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordCountAtValue
   loop $for-loop|1
    local.get $7
    local.get $5
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     local.get $7
     call $assembly/packedarray/PackedArray/PackedArray#get
     local.tee $4
     local.set $2
     local.get $4
     i64.const 0
     i64.gt_u
     if
      local.get $1
      i32.load offset=116
      local.get $7
      local.get $1
      i32.load offset=116
      i32.const 1
      i32.sub
      i32.and
      i32.add
      local.set $3
      local.get $7
      local.get $1
      i32.load offset=108
      i32.shr_s
      i32.const 1
      i32.sub
      local.tee $6
      i32.const 0
      i32.lt_s
      if
       i32.const 0
       local.set $6
       local.get $3
       local.get $1
       i32.load offset=116
       i32.sub
       local.set $3
      end
      local.get $0
      local.get $2
      local.get $3
      i64.extend_i32_s
      local.get $6
      local.get $1
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shl
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordCountAtValue
     end
     local.get $7
     i32.const 1
     i32.add
     local.set $7
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=64
  local.tee $2
  local.get $1
  i64.load offset=64
  local.tee $4
  local.get $2
  local.get $4
  i64.lt_u
  select
  i64.store offset=64
  local.get $0
  local.get $0
  i64.load offset=72
  local.tee $2
  local.get $1
  i64.load offset=72
  local.tee $4
  local.get $2
  local.get $4
  i64.gt_u
  select
  i64.store offset=72
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#addPackedHistogram (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#add<assembly/packedarray/PackedArray/PackedArray,u64>
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtValue (param $0 i32) (param $1 i64) (result i64)
  (local $2 i32)
  i32.const 0
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex
  local.tee $2
  i32.const 0
  local.get $2
  i32.gt_s
  select
  local.set $2
  local.get $0
  i32.load offset=160
  i32.load
  i32.load offset=4
  local.get $2
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $0
  local.get $2
  local.get $0
  i32.lt_s
  select
  i32.const 3
  i32.shl
  i32.add
  i64.load
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#establishInternalTackingValues (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i64)
  (local $5 i64)
  (local $6 i32)
  local.get $0
  i64.const 0
  i64.store offset=144
  local.get $0
  i64.const -1
  i64.store offset=152
  i32.const -1
  local.set $2
  i32.const -1
  local.set $6
  loop $for-loop|0
   local.get $3
   local.get $1
   i32.lt_s
   if
    local.get $0
    i32.load offset=160
    i32.load
    i32.load offset=4
    local.get $3
    i32.const 3
    i32.shl
    i32.add
    i64.load
    local.tee $5
    i64.const 0
    i64.gt_u
    if
     local.get $4
     local.get $5
     i64.add
     local.set $4
     local.get $3
     local.get $6
     local.get $3
     i32.const 0
     local.get $6
     i32.const -1
     i32.eq
     select
     select
     local.set $6
     local.get $3
     local.set $2
    end
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|0
   end
  end
  local.get $2
  i32.const 0
  i32.ge_s
  if
   local.get $0
   i32.load offset=116
   local.get $2
   local.get $0
   i32.load offset=116
   i32.const 1
   i32.sub
   i32.and
   i32.add
   local.set $3
   local.get $2
   local.get $0
   i32.load offset=108
   i32.shr_s
   i32.const 1
   i32.sub
   local.tee $2
   i32.const 0
   i32.lt_s
   if
    local.get $3
    local.get $0
    i32.load offset=116
    i32.sub
    local.set $3
    i32.const 0
    local.set $2
   end
   local.get $0
   i32.load offset=104
   local.get $3
   i64.extend_i32_s
   local.get $2
   local.get $0
   i32.load offset=112
   i32.add
   i64.extend_i32_s
   i64.shl
   local.tee $5
   local.get $0
   i64.load offset=128
   i64.or
   i64.clz
   i32.wrap_i64
   i32.sub
   local.set $2
   local.get $0
   local.get $0
   i64.load offset=136
   local.get $5
   local.get $2
   local.get $0
   i32.load offset=112
   i32.add
   i64.extend_i32_s
   i64.shr_u
   i32.wrap_i64
   i64.extend_i32_s
   local.get $2
   local.get $0
   i32.load offset=112
   i32.add
   i64.extend_i32_s
   i64.shl
   i64.const 1
   local.get $0
   i32.load offset=112
   local.get $0
   i32.load offset=104
   local.get $5
   local.get $0
   i64.load offset=128
   i64.or
   i64.clz
   i32.wrap_i64
   i32.sub
   i32.add
   i64.extend_i32_s
   i64.shl
   i64.add
   i64.const 1
   i64.sub
   i64.add
   i64.store offset=144
  end
  local.get $6
  i32.const 0
  i32.ge_s
  if
   block $__inlined_func$assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#updateMinNonZeroValue
    local.get $0
    i32.load offset=116
    local.get $6
    local.get $0
    i32.load offset=116
    i32.const 1
    i32.sub
    i32.and
    i32.add
    local.set $1
    local.get $6
    local.get $0
    i32.load offset=108
    i32.shr_s
    i32.const 1
    i32.sub
    local.tee $3
    i32.const 0
    i32.lt_s
    if
     i32.const 0
     local.set $3
     local.get $1
     local.get $0
     i32.load offset=116
     i32.sub
     local.set $1
    end
    local.get $1
    i64.extend_i32_s
    local.get $3
    local.get $0
    i32.load offset=112
    i32.add
    i64.extend_i32_s
    i64.shl
    local.tee $5
    local.get $0
    i64.load offset=136
    i64.le_u
    br_if $__inlined_func$assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#updateMinNonZeroValue
    local.get $0
    local.get $5
    local.get $0
    i64.load offset=136
    i64.const -1
    i64.xor
    i64.and
    i64.store offset=152
   end
  end
  local.get $0
  local.get $4
  i64.store offset=168
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#establishInternalTackingValues@varargs (param $0 i32)
  (local $1 i32)
  block $1of1
   block $0of1
    block $outOfRange
     global.get $~argumentsLength
     br_table $0of1 $1of1 $outOfRange
    end
    unreachable
   end
   local.get $0
   i32.load offset=52
   local.set $1
  end
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#establishInternalTackingValues
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8> (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i64)
  (local $6 i64)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $4
   i32.load offset=4
   local.set $3
   local.get $4
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $4
   i32.load
   drop
  end
  local.get $0
  i32.load offset=116
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $3
  local.get $0
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  i32.add
  local.set $4
  local.get $3
  local.get $0
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.tee $3
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 0
   local.set $3
   local.get $4
   local.get $0
   i32.load offset=116
   i32.sub
  else
   local.get $4
  end
  i64.extend_i32_s
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 14000
    i32.const 9952
    i32.const 748
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   loop $for-loop|0
    local.get $2
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $2
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     i32.add
     i32.load8_u
     i64.extend_i32_u
     local.tee $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $2
      i64.const 0
      local.get $6
      i64.sub
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#addToCountAtIndex
      local.get $5
      local.get $6
      i64.add
      local.set $5
     end
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $5
   i64.sub
   i64.store offset=168
  else
   loop $for-loop|1
    local.get $2
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $2
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     i32.add
     i32.load8_u
     i64.extend_i32_u
     local.tee $6
     i64.const 0
     i64.gt_u
     if
      local.get $1
      i32.load offset=116
      local.get $2
      local.get $1
      i32.load offset=116
      i32.const 1
      i32.sub
      i32.and
      i32.add
      local.set $4
      local.get $0
      local.get $2
      local.get $1
      i32.load offset=108
      i32.shr_s
      i32.const 1
      i32.sub
      local.tee $3
      i32.const 0
      i32.lt_s
      if (result i32)
       i32.const 0
       local.set $3
       local.get $4
       local.get $1
       i32.load offset=116
       i32.sub
      else
       local.get $4
      end
      i64.extend_i32_s
      local.get $3
      local.get $1
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shl
      local.tee $5
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtValue
      local.get $6
      i64.lt_u
      if
       i32.const 14608
       local.get $6
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14672
       call $~lib/string/String.__concat
       local.get $5
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14720
       call $~lib/string/String.__concat
       local.get $0
       local.get $5
       call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtValue
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14800
       call $~lib/string/String.__concat
       i32.const 9952
       i32.const 777
       i32.const 13
       call $~lib/builtins/abort
       unreachable
      end
      local.get $0
      i64.const 0
      local.get $6
      i64.sub
      local.get $5
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordCountAtValue
     end
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=144
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtValue
  i64.const 0
  i64.le_u
  if (result i32)
   i32.const 1
  else
   local.get $0
   local.get $0
   i64.load offset=152
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtValue
   i64.const 0
   i64.le_u
  end
  if
   i32.const 0
   global.set $~argumentsLength
   local.get $0
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#establishInternalTackingValues@varargs
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#subtractHistogram8 (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16> (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i64)
  (local $6 i64)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $4
   i32.load offset=4
   local.set $3
   local.get $4
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $4
   i32.load
   drop
  end
  local.get $0
  i32.load offset=116
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $3
  local.get $0
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  i32.add
  local.set $4
  local.get $3
  local.get $0
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.tee $3
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 0
   local.set $3
   local.get $4
   local.get $0
   i32.load offset=116
   i32.sub
  else
   local.get $4
  end
  i64.extend_i32_s
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 14000
    i32.const 9952
    i32.const 748
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   loop $for-loop|0
    local.get $2
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $2
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u
     i64.extend_i32_u
     local.tee $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $2
      i64.const 0
      local.get $6
      i64.sub
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#addToCountAtIndex
      local.get $5
      local.get $6
      i64.add
      local.set $5
     end
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $5
   i64.sub
   i64.store offset=168
  else
   loop $for-loop|1
    local.get $2
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $2
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u
     i64.extend_i32_u
     local.tee $6
     i64.const 0
     i64.gt_u
     if
      local.get $1
      i32.load offset=116
      local.get $2
      local.get $1
      i32.load offset=116
      i32.const 1
      i32.sub
      i32.and
      i32.add
      local.set $4
      local.get $0
      local.get $2
      local.get $1
      i32.load offset=108
      i32.shr_s
      i32.const 1
      i32.sub
      local.tee $3
      i32.const 0
      i32.lt_s
      if (result i32)
       i32.const 0
       local.set $3
       local.get $4
       local.get $1
       i32.load offset=116
       i32.sub
      else
       local.get $4
      end
      i64.extend_i32_s
      local.get $3
      local.get $1
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shl
      local.tee $5
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtValue
      local.get $6
      i64.lt_u
      if
       i32.const 14608
       local.get $6
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14672
       call $~lib/string/String.__concat
       local.get $5
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14720
       call $~lib/string/String.__concat
       local.get $0
       local.get $5
       call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtValue
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14800
       call $~lib/string/String.__concat
       i32.const 9952
       i32.const 777
       i32.const 13
       call $~lib/builtins/abort
       unreachable
      end
      local.get $0
      i64.const 0
      local.get $6
      i64.sub
      local.get $5
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordCountAtValue
     end
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=144
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtValue
  i64.const 0
  i64.le_u
  if (result i32)
   i32.const 1
  else
   local.get $0
   local.get $0
   i64.load offset=152
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtValue
   i64.const 0
   i64.le_u
  end
  if
   i32.const 0
   global.set $~argumentsLength
   local.get $0
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#establishInternalTackingValues@varargs
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#subtractHistogram16 (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32> (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i64)
  (local $6 i64)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $4
   i32.load offset=4
   local.set $3
   local.get $4
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $4
   i32.load
   drop
  end
  local.get $0
  i32.load offset=116
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $3
  local.get $0
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  i32.add
  local.set $4
  local.get $3
  local.get $0
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.tee $3
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 0
   local.set $3
   local.get $4
   local.get $0
   i32.load offset=116
   i32.sub
  else
   local.get $4
  end
  i64.extend_i32_s
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 14000
    i32.const 9952
    i32.const 748
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   loop $for-loop|0
    local.get $2
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $2
     i32.const 2
     i32.shl
     i32.add
     i32.load
     i64.extend_i32_u
     local.tee $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $2
      i64.const 0
      local.get $6
      i64.sub
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#addToCountAtIndex
      local.get $5
      local.get $6
      i64.add
      local.set $5
     end
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $5
   i64.sub
   i64.store offset=168
  else
   loop $for-loop|1
    local.get $2
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $2
     i32.const 2
     i32.shl
     i32.add
     i32.load
     i64.extend_i32_u
     local.tee $6
     i64.const 0
     i64.gt_u
     if
      local.get $1
      i32.load offset=116
      local.get $2
      local.get $1
      i32.load offset=116
      i32.const 1
      i32.sub
      i32.and
      i32.add
      local.set $4
      local.get $0
      local.get $2
      local.get $1
      i32.load offset=108
      i32.shr_s
      i32.const 1
      i32.sub
      local.tee $3
      i32.const 0
      i32.lt_s
      if (result i32)
       i32.const 0
       local.set $3
       local.get $4
       local.get $1
       i32.load offset=116
       i32.sub
      else
       local.get $4
      end
      i64.extend_i32_s
      local.get $3
      local.get $1
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shl
      local.tee $5
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtValue
      local.get $6
      i64.lt_u
      if
       i32.const 14608
       local.get $6
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14672
       call $~lib/string/String.__concat
       local.get $5
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14720
       call $~lib/string/String.__concat
       local.get $0
       local.get $5
       call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtValue
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14800
       call $~lib/string/String.__concat
       i32.const 9952
       i32.const 777
       i32.const 13
       call $~lib/builtins/abort
       unreachable
      end
      local.get $0
      i64.const 0
      local.get $6
      i64.sub
      local.get $5
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordCountAtValue
     end
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=144
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtValue
  i64.const 0
  i64.le_u
  if (result i32)
   i32.const 1
  else
   local.get $0
   local.get $0
   i64.load offset=152
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtValue
   i64.const 0
   i64.le_u
  end
  if
   i32.const 0
   global.set $~argumentsLength
   local.get $0
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#establishInternalTackingValues@varargs
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#subtractHistogram32 (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64> (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i64)
  (local $6 i64)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $4
   i32.load offset=4
   local.set $3
   local.get $4
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $4
   i32.load
   drop
  end
  local.get $0
  i32.load offset=116
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $3
  local.get $0
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  i32.add
  local.set $4
  local.get $3
  local.get $0
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.tee $3
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 0
   local.set $3
   local.get $4
   local.get $0
   i32.load offset=116
   i32.sub
  else
   local.get $4
  end
  i64.extend_i32_s
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 14000
    i32.const 9952
    i32.const 748
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   loop $for-loop|0
    local.get $2
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $2
     i32.const 3
     i32.shl
     i32.add
     i64.load
     local.tee $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $2
      i64.const 0
      local.get $6
      i64.sub
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#addToCountAtIndex
      local.get $5
      local.get $6
      i64.add
      local.set $5
     end
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $5
   i64.sub
   i64.store offset=168
  else
   loop $for-loop|1
    local.get $2
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $2
     i32.const 3
     i32.shl
     i32.add
     i64.load
     local.tee $6
     i64.const 0
     i64.gt_u
     if
      local.get $1
      i32.load offset=116
      local.get $2
      local.get $1
      i32.load offset=116
      i32.const 1
      i32.sub
      i32.and
      i32.add
      local.set $4
      local.get $0
      local.get $2
      local.get $1
      i32.load offset=108
      i32.shr_s
      i32.const 1
      i32.sub
      local.tee $3
      i32.const 0
      i32.lt_s
      if (result i32)
       i32.const 0
       local.set $3
       local.get $4
       local.get $1
       i32.load offset=116
       i32.sub
      else
       local.get $4
      end
      i64.extend_i32_s
      local.get $3
      local.get $1
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shl
      local.tee $5
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtValue
      local.get $6
      i64.lt_u
      if
       i32.const 14608
       local.get $6
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14672
       call $~lib/string/String.__concat
       local.get $5
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14720
       call $~lib/string/String.__concat
       local.get $0
       local.get $5
       call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtValue
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14800
       call $~lib/string/String.__concat
       i32.const 9952
       i32.const 777
       i32.const 13
       call $~lib/builtins/abort
       unreachable
      end
      local.get $0
      i64.const 0
      local.get $6
      i64.sub
      local.get $5
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordCountAtValue
     end
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=144
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtValue
  i64.const 0
  i64.le_u
  if (result i32)
   i32.const 1
  else
   local.get $0
   local.get $0
   i64.load offset=152
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtValue
   i64.const 0
   i64.le_u
  end
  if
   i32.const 0
   global.set $~argumentsLength
   local.get $0
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#establishInternalTackingValues@varargs
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#subtractHistogram64 (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#subtract<assembly/packedarray/PackedArray/PackedArray,u64> (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i64)
  (local $6 i64)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $4
   i32.load offset=4
   local.set $3
   local.get $4
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $4
   i32.load
   drop
  end
  local.get $0
  i32.load offset=116
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $3
  local.get $0
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  i32.add
  local.set $4
  local.get $3
  local.get $0
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.tee $3
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 0
   local.set $3
   local.get $4
   local.get $0
   i32.load offset=116
   i32.sub
  else
   local.get $4
  end
  i64.extend_i32_s
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 14000
    i32.const 9952
    i32.const 748
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   loop $for-loop|0
    local.get $2
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     local.get $2
     call $assembly/packedarray/PackedArray/PackedArray#get
     local.tee $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $2
      i64.const 0
      local.get $6
      i64.sub
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#addToCountAtIndex
      local.get $5
      local.get $6
      i64.add
      local.set $5
     end
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $5
   i64.sub
   i64.store offset=168
  else
   loop $for-loop|1
    local.get $2
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     local.get $2
     call $assembly/packedarray/PackedArray/PackedArray#get
     local.tee $6
     i64.const 0
     i64.gt_u
     if
      local.get $1
      i32.load offset=116
      local.get $2
      local.get $1
      i32.load offset=116
      i32.const 1
      i32.sub
      i32.and
      i32.add
      local.set $4
      local.get $0
      local.get $2
      local.get $1
      i32.load offset=108
      i32.shr_s
      i32.const 1
      i32.sub
      local.tee $3
      i32.const 0
      i32.lt_s
      if (result i32)
       i32.const 0
       local.set $3
       local.get $4
       local.get $1
       i32.load offset=116
       i32.sub
      else
       local.get $4
      end
      i64.extend_i32_s
      local.get $3
      local.get $1
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shl
      local.tee $5
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtValue
      local.get $6
      i64.lt_u
      if
       i32.const 14608
       local.get $6
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14672
       call $~lib/string/String.__concat
       local.get $5
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14720
       call $~lib/string/String.__concat
       local.get $0
       local.get $5
       call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtValue
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14800
       call $~lib/string/String.__concat
       i32.const 9952
       i32.const 777
       i32.const 13
       call $~lib/builtins/abort
       unreachable
      end
      local.get $0
      i64.const 0
      local.get $6
      i64.sub
      local.get $5
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordCountAtValue
     end
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=144
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtValue
  i64.const 0
  i64.le_u
  if (result i32)
   i32.const 1
  else
   local.get $0
   local.get $0
   i64.load offset=152
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtValue
   i64.const 0
   i64.le_u
  end
  if
   i32.const 0
   global.set $~argumentsLength
   local.get $0
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#establishInternalTackingValues@varargs
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#subtractPackedHistogram (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#subtract<assembly/packedarray/PackedArray/PackedArray,u64>
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/encoding/fillBufferFromCountsArray<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64> (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i64)
  (local $6 i32)
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $4
   local.get $2
   local.get $4
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  local.set $2
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $0
   i32.load offset=4
   local.set $4
   local.get $0
   local.get $4
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $0
   i32.load
   drop
  end
  local.get $2
  local.get $2
  i64.load offset=144
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex
  i32.const 1
  i32.add
  local.set $4
  loop $while-continue|0
   local.get $3
   local.get $4
   i32.lt_s
   if
    local.get $3
    local.tee $0
    i32.const 1
    i32.add
    local.set $3
    local.get $2
    i32.load offset=160
    i32.load
    i32.load offset=4
    local.get $0
    i32.const 3
    i32.shl
    i32.add
    i64.load
    local.tee $5
    i64.const 0
    i64.lt_u
    if
     i32.const 14832
     local.get $5
     call $~lib/util/number/utoa64
     call $~lib/string/String.__concat
     i32.const 14960
     call $~lib/string/String.__concat
     local.get $3
     call $~lib/util/number/itoa32
     call $~lib/string/String.__concat
     i32.const 15008
     call $~lib/string/String.__concat
     local.get $2
     i32.load offset=116
     local.get $3
     local.get $2
     i32.load offset=116
     i32.const 1
     i32.sub
     i32.and
     i32.add
     local.set $0
     local.get $2
     i32.load offset=104
     local.get $3
     local.get $2
     i32.load offset=108
     i32.shr_s
     i32.const 1
     i32.sub
     local.tee $1
     i32.const 0
     i32.lt_s
     if
      i32.const 0
      local.set $1
      local.get $0
      local.get $2
      i32.load offset=116
      i32.sub
      local.set $0
     end
     local.get $0
     i64.extend_i32_s
     local.get $1
     local.get $2
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shl
     local.tee $5
     local.get $2
     i64.load offset=128
     i64.or
     i64.clz
     i32.wrap_i64
     i32.sub
     local.set $0
     local.get $5
     local.get $0
     local.get $2
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shr_u
     i32.wrap_i64
     i64.extend_i32_s
     local.get $0
     local.get $2
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shl
     call $~lib/util/number/utoa64
     call $~lib/string/String.__concat
     i32.const 15104
     call $~lib/string/String.__concat
     local.get $2
     i32.load offset=116
     local.get $3
     local.get $2
     i32.load offset=116
     i32.const 1
     i32.sub
     i32.and
     i32.add
     local.set $1
     local.get $3
     local.get $2
     local.tee $0
     i32.load offset=108
     i32.shr_s
     i32.const 1
     i32.sub
     local.tee $3
     i32.const 0
     i32.lt_s
     if
      i32.const 0
      local.set $3
      local.get $1
      local.get $0
      i32.load offset=116
      i32.sub
      local.set $1
     end
     local.get $0
     i32.load offset=104
     local.get $1
     i64.extend_i32_s
     local.get $3
     local.get $0
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shl
     local.tee $5
     local.get $0
     i64.load offset=128
     i64.or
     i64.clz
     i32.wrap_i64
     i32.sub
     local.set $1
     local.get $5
     local.get $1
     local.get $0
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shr_u
     i32.wrap_i64
     i64.extend_i32_s
     local.get $1
     local.get $0
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shl
     i64.const 1
     local.get $0
     i32.load offset=112
     local.get $0
     i32.load offset=104
     local.get $5
     local.get $0
     i64.load offset=128
     i64.or
     i64.clz
     i32.wrap_i64
     i32.sub
     i32.add
     i64.extend_i32_s
     i64.shl
     i64.add
     call $~lib/util/number/utoa64
     call $~lib/string/String.__concat
     i32.const 14800
     call $~lib/string/String.__concat
     i32.const 15136
     i32.const 31
     i32.const 7
     call $~lib/builtins/abort
     unreachable
    end
    i32.const 0
    local.set $0
    local.get $5
    i64.eqz
    if
     i32.const 1
     local.set $0
     loop $while-continue|1
      local.get $3
      local.get $4
      i32.lt_s
      if (result i32)
       local.get $2
       i32.load offset=160
       i32.load
       i32.load offset=4
       local.get $3
       i32.const 3
       i32.shl
       i32.add
       i64.load
       i64.eqz
      else
       i32.const 0
      end
      if
       local.get $0
       i32.const 1
       i32.add
       local.set $0
       local.get $3
       i32.const 1
       i32.add
       local.set $3
       br $while-continue|1
      end
     end
    end
    local.get $0
    i32.const 1
    i32.gt_s
    if
     local.get $1
     i32.const 0
     local.get $0
     i32.sub
     i64.extend_i32_s
     call $assembly/ZigZagEncoding/ZigZagEncoding.encode
    else
     local.get $1
     local.get $5
     call $assembly/ZigZagEncoding/ZigZagEncoding.encode
    end
    br $while-continue|0
   end
  end
  local.get $2
  i32.const 16700
  i32.gt_u
  if
   local.get $2
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/encoding/encodeIntoByteBuffer<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64> (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $1
  i32.load
  local.set $3
  local.get $1
  i32.const 478450451
  call $assembly/ByteBuffer/ByteBuffer#putInt32
  local.get $1
  i32.const 0
  call $assembly/ByteBuffer/ByteBuffer#putInt32
  local.get $1
  i32.const 1
  call $assembly/ByteBuffer/ByteBuffer#putInt32
  local.get $1
  local.get $0
  i32.load8_u offset=32
  call $assembly/ByteBuffer/ByteBuffer#putInt32
  local.get $1
  local.get $0
  i64.load offset=24
  call $assembly/ByteBuffer/ByteBuffer#putInt64
  local.get $1
  local.get $0
  i64.load offset=16
  call $assembly/ByteBuffer/ByteBuffer#putInt64
  local.get $1
  i64.const 1
  call $assembly/ByteBuffer/ByteBuffer#putInt64
  local.get $1
  i32.load
  local.set $4
  local.get $0
  local.get $1
  call $assembly/encoding/fillBufferFromCountsArray<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>
  local.get $1
  i32.load
  local.set $2
  local.get $1
  local.get $3
  i32.const 4
  i32.add
  i32.store
  local.get $1
  local.get $2
  local.get $4
  i32.sub
  call $assembly/ByteBuffer/ByteBuffer#putInt32
  local.get $1
  local.get $2
  i32.store
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#encode (param $0 i32) (result i32)
  (local $1 i32)
  local.get $0
  i32.load
  call $assembly/ByteBuffer/ByteBuffer.allocate
  local.tee $0
  call $assembly/encoding/encodeIntoByteBuffer<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>
  local.get $0
  i32.load offset=4
  i32.const 0
  local.get $0
  i32.load
  call $~lib/typedarray/Uint8Array#slice
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#reset (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  i32.load
  local.tee $3
  i32.load offset=160
  i32.load
  local.tee $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $1
   i32.load offset=4
   local.set $2
   local.get $1
   local.get $2
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $1
   i32.load
   drop
  end
  local.get $0
  i32.load offset=4
  local.set $4
  i32.const 0
  local.get $0
  i32.load offset=8
  i32.const 3
  i32.shr_u
  local.tee $2
  i32.const 0
  local.get $2
  i32.lt_s
  select
  local.set $1
  i32.const 2147483647
  local.get $2
  i32.const 2147483647
  local.get $2
  i32.lt_s
  select
  local.set $2
  loop $for-loop|0
   local.get $1
   local.get $2
   i32.lt_s
   if
    local.get $4
    local.get $1
    i32.const 3
    i32.shl
    i32.add
    i64.const 0
    i64.store
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0
   end
  end
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $3
  i64.const 0
  i64.store offset=168
  local.get $3
  i64.const 0
  i64.store offset=64
  local.get $3
  i64.const 0
  i64.store offset=72
  local.get $3
  i64.const 0
  i64.store offset=144
  local.get $3
  i64.const -1
  i64.store offset=152
 )
 (func $assembly/AbstractHistogramBase/AbstractHistogramBase<assembly/packedarray/PackedArray/PackedArray,u64>#constructor (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.eqz
  if
   call $~lib/rt/tlsf/maybeInitialize
   i32.const 104
   i32.const 45
   call $~lib/rt/tlsf/allocateBlock
   i32.const 16
   i32.add
   local.tee $0
   i32.const 16700
   i32.gt_u
   if
    local.get $0
    i32.const 16
    i32.sub
    local.tee $1
    i32.load offset=4
    local.set $2
    local.get $1
    local.get $2
    i32.const 1
    i32.add
    i32.store offset=4
    local.get $1
    i32.load
    drop
   end
  end
  local.get $0
  f64.const 0
  f64.store
  local.get $0
  i32.const 0
  i32.store8 offset=8
  local.get $0
  i64.const 0
  i64.store offset=16
  local.get $0
  i64.const 0
  i64.store offset=24
  local.get $0
  i32.const 0
  i32.store8 offset=32
  local.get $0
  i64.const 0
  i64.store offset=40
  local.get $0
  i32.const 0
  i32.store offset=48
  local.get $0
  i32.const 0
  i32.store offset=52
  local.get $0
  i64.const 0
  i64.store offset=56
  local.get $0
  i64.const -1
  i64.store offset=64
  local.get $0
  i64.const 0
  i64.store offset=72
  local.get $0
  i32.const 1152
  i32.store offset=80
  local.get $0
  f64.const 1
  f64.store offset=88
  local.get $0
  i32.const 0
  i32.store offset=96
  local.get $0
  i32.const 0
  i32.store offset=100
  local.get $0
  f64.const 0
  f64.store
  local.get $0
  i64.const 0
  i64.store offset=16
  local.get $0
  i64.const 0
  i64.store offset=24
  local.get $0
  i32.const 0
  i32.store8 offset=32
  local.get $0
  i64.const 0
  i64.store offset=40
  local.get $0
  i32.const 0
  i32.store offset=48
  local.get $0
  i32.const 0
  i32.store offset=52
  local.get $0
  i64.const 0
  i64.store offset=56
  local.get $0
 )
 (func $assembly/packedarray/PackedArrayContext/PackedArrayContext#determineTopLevelShiftForVirtualLength (param $0 i32) (result i32)
  local.get $0
  f64.convert_i32_s
  call $~lib/math/NativeMath.log2
  f64.ceil
  i32.trunc_f64_s
  i32.const 3
  i32.sub
  f64.convert_i32_s
  f64.const 4
  f64.div
  f64.ceil
  i32.trunc_f64_s
  i32.const 2
  i32.shl
  local.tee $0
  i32.const 8
  local.get $0
  i32.const 8
  i32.gt_s
  select
  i32.const -1
  i32.add
 )
 (func $assembly/packedarray/PackedArrayContext/PackedArrayContext#setVirtualLength (param $0 i32) (param $1 i32)
  local.get $0
  i32.load8_u
  i32.eqz
  if
   i32.const 15200
   i32.const 14368
   i32.const 440
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  local.get $1
  call $assembly/packedarray/PackedArrayContext/PackedArrayContext#determineTopLevelShiftForVirtualLength
  i32.store offset=32
  local.get $0
  local.get $1
  i32.store offset=28
 )
 (func $assembly/packedarray/PackedArrayContext/PackedArrayContext#init (param $0 i32) (param $1 i32)
  (local $2 i32)
  local.get $0
  i32.load8_u
  i32.eqz
  if
   local.get $0
   local.get $1
   i32.store offset=28
   return
  end
  local.get $0
  i32.const 8
  i32.store offset=24
  loop $for-loop|0
   local.get $2
   i32.const 8
   i32.lt_s
   if
    local.get $0
    local.get $2
    i32.const 0
    call $assembly/packedarray/PackedArrayContext/PackedArrayContext#setAtShortIndex
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|0
   end
  end
  local.get $0
  local.get $1
  call $assembly/packedarray/PackedArrayContext/PackedArrayContext#setVirtualLength
 )
 (func $assembly/packedarray/PackedArrayContext/PackedArrayContext#constructor (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  call $~lib/rt/tlsf/maybeInitialize
  i32.const 36
  i32.const 42
  call $~lib/rt/tlsf/allocateBlock
  i32.const 16
  i32.add
  local.tee $2
  i32.const 16700
  i32.gt_u
  if
   local.get $2
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $4
   local.get $3
   local.get $4
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $2
  i32.const 0
  i32.store8
  local.get $2
  i32.const 0
  i32.store offset=4
  local.get $2
  i32.const 0
  i32.store offset=8
  local.get $2
  i32.const 0
  i32.store offset=12
  local.get $2
  i32.const 0
  i32.store offset=16
  local.get $2
  i32.const 0
  i32.store offset=20
  local.get $2
  i32.const 0
  i32.store offset=24
  local.get $2
  i32.const 0
  i32.store offset=28
  local.get $2
  i32.const 2147483647
  i32.store offset=32
  local.get $2
  local.get $1
  f64.convert_i32_s
  f64.const 16
  f64.max
  i32.trunc_f64_s
  i32.store offset=4
  local.get $2
  local.get $2
  i32.load offset=4
  f64.convert_i32_s
  global.get $assembly/packedarray/PackedArrayContext/MAX_SUPPORTED_PACKED_COUNTS_ARRAY_LENGTH
  f64.le
  i32.store8
  local.get $2
  i32.load8_u
  i32.eqz
  if
   local.get $2
   local.get $0
   i32.store offset=4
  end
  local.get $2
  i32.load offset=4
  i32.const 3
  i32.shl
  local.tee $3
  i32.const 1073741808
  i32.gt_u
  if
   i32.const 1216
   i32.const 12544
   i32.const 49
   i32.const 43
   call $~lib/builtins/abort
   unreachable
  end
  call $~lib/rt/tlsf/maybeInitialize
  local.get $3
  i32.const 0
  call $~lib/rt/tlsf/allocateBlock
  i32.const 16
  i32.add
  local.tee $1
  local.get $3
  call $~lib/memory/memory.fill
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $4
   local.get $3
   local.get $4
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $2
  i32.load offset=8
  local.tee $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $2
  local.get $1
  i32.store offset=8
  local.get $2
  local.get $2
  i32.load offset=8
  call $assembly/packedarray/PackedArrayContext/PackedArrayContext#initArrayViews
  local.get $2
  local.get $0
  call $assembly/packedarray/PackedArrayContext/PackedArrayContext#init
  local.get $2
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/packedarray/PackedArray/PackedArray,u64>#constructor (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  call $~lib/rt/tlsf/maybeInitialize
  i32.const 120
  i32.const 46
  call $~lib/rt/tlsf/allocateBlock
  i32.const 16
  i32.add
  local.tee $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $1
  i32.const 0
  i32.store
  local.get $1
  f64.const 0
  f64.store offset=8
  local.get $1
  f64.const 0
  f64.store offset=16
  local.get $1
  i32.const 0
  i32.store8 offset=24
  local.get $1
  i32.const 0
  i32.store offset=28
  local.get $1
  i64.const 0
  i64.store offset=32
  local.get $1
  i32.const 0
  i32.store offset=40
  local.get $1
  i64.const 0
  i64.store offset=48
  local.get $1
  i64.const 0
  i64.store offset=56
  local.get $1
  i64.const 0
  i64.store offset=64
  local.get $1
  i64.const 0
  i64.store offset=72
  local.get $1
  i64.const 0
  i64.store offset=80
  local.get $1
  i64.const 0
  i64.store offset=88
  local.get $1
  i64.const 0
  i64.store offset=96
  local.get $1
  i64.const 0
  i64.store offset=104
  local.get $1
  i32.const 0
  i32.store8 offset=112
  local.get $1
  call $assembly/HistogramIterationValue/HistogramIterationValue#constructor
  i32.store offset=116
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $1
  i32.const 0
  i32.store
  local.get $1
  f64.const 0
  f64.store offset=8
  local.get $1
  f64.const 0
  f64.store offset=16
  local.get $1
  i32.const 0
  i32.store8 offset=24
  local.get $1
  local.get $0
  i32.const 1
  call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#doReset
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $1
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/packedarray/PackedArray/PackedArray,u64>#constructor (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  call $~lib/rt/tlsf/maybeInitialize
  i32.const 96
  i32.const 47
  call $~lib/rt/tlsf/allocateBlock
  i32.const 16
  i32.add
  local.tee $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $1
  i32.const 0
  i32.store
  local.get $1
  i32.const 0
  i32.store offset=4
  local.get $1
  i64.const 0
  i64.store offset=8
  local.get $1
  i32.const 0
  i32.store offset=16
  local.get $1
  i64.const 0
  i64.store offset=24
  local.get $1
  i64.const 0
  i64.store offset=32
  local.get $1
  i64.const 0
  i64.store offset=40
  local.get $1
  i64.const 0
  i64.store offset=48
  local.get $1
  i64.const 0
  i64.store offset=56
  local.get $1
  i64.const 0
  i64.store offset=64
  local.get $1
  i64.const 0
  i64.store offset=72
  local.get $1
  i64.const 0
  i64.store offset=80
  local.get $1
  i32.const 0
  i32.store8 offset=88
  local.get $1
  call $assembly/HistogramIterationValue/HistogramIterationValue#constructor
  i32.store offset=92
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $1
  local.get $0
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#doReset
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $1
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#init (param $0 i32) (param $1 i64) (param $2 i64) (param $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i64)
  local.get $0
  local.get $1
  i64.store offset=24
  local.get $0
  local.get $2
  i64.store offset=16
  local.get $0
  local.get $3
  i32.store8 offset=32
  local.get $0
  f64.const 1
  f64.store offset=88
  f64.const 10
  local.get $3
  f64.convert_i32_u
  call $~lib/math/NativeMath.pow
  i64.trunc_f64_u
  i64.const 2
  i64.mul
  local.set $7
  local.get $0
  local.get $1
  f64.convert_i64_u
  call $~lib/math/NativeMath.log2
  f64.floor
  i32.trunc_f64_s
  i32.store offset=112
  local.get $0
  i64.const 1
  local.get $0
  i32.load offset=112
  i64.extend_i32_s
  i64.shl
  i64.const 1
  i64.sub
  i64.store offset=136
  local.get $0
  local.get $7
  f64.convert_i64_u
  call $~lib/math/NativeMath.log2
  f64.ceil
  i32.trunc_f64_s
  local.tee $3
  i32.const 1
  i32.sub
  i32.store offset=108
  local.get $0
  i32.const 1
  local.get $3
  i32.shl
  i32.store offset=48
  local.get $0
  local.get $0
  i32.load offset=48
  i32.const 1
  i32.shr_s
  i32.store offset=116
  local.get $0
  local.get $0
  i32.load offset=48
  i64.extend_i32_s
  i64.const 1
  i64.sub
  local.get $0
  i32.load offset=112
  i64.extend_i32_s
  i64.shl
  i64.store offset=128
  local.get $0
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#establishSize
  local.get $0
  i32.load offset=52
  call $~lib/rt/tlsf/maybeInitialize
  i32.const 4
  i32.const 41
  call $~lib/rt/tlsf/allocateBlock
  i32.const 16
  i32.add
  local.tee $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   local.tee $4
   i32.load offset=4
   local.set $6
   local.get $4
   local.get $6
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $4
   i32.load
   drop
  end
  local.get $3
  i32.const 0
  i32.store
  i32.const 16
  call $assembly/packedarray/PackedArrayContext/PackedArrayContext#constructor
  local.set $4
  local.get $3
  i32.load
  local.tee $5
  i32.const 16700
  i32.gt_u
  if
   local.get $5
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $3
  local.get $4
  i32.store
  local.get $3
  local.get $0
  i32.load offset=160
  local.tee $4
  i32.ne
  if
   local.get $3
   i32.const 16700
   i32.gt_u
   if
    local.get $3
    i32.const 16
    i32.sub
    local.tee $5
    i32.load offset=4
    local.set $6
    local.get $5
    local.get $6
    i32.const 1
    i32.add
    i32.store offset=4
    local.get $5
    i32.load
    drop
   end
   local.get $4
   i32.const 16700
   i32.gt_u
   if
    local.get $4
    i32.const 16
    i32.sub
    call $~lib/rt/pure/decrement
   end
  end
  local.get $0
  local.get $3
  i32.store offset=160
  local.get $0
  i32.const 0
  local.get $0
  i32.load offset=112
  i32.sub
  local.get $0
  i32.load offset=108
  i32.sub
  i32.const 63
  i32.add
  i32.store offset=104
  local.get $0
  call $assembly/PercentileIterator/PercentileIterator<assembly/packedarray/PackedArray/PackedArray,u64>#constructor
  local.set $4
  local.get $0
  i32.load offset=96
  local.tee $5
  i32.const 16700
  i32.gt_u
  if
   local.get $5
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $0
  local.get $4
  i32.store offset=96
  local.get $0
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/packedarray/PackedArray/PackedArray,u64>#constructor
  local.set $4
  local.get $0
  i32.load offset=100
  local.tee $5
  i32.const 16700
  i32.gt_u
  if
   local.get $5
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $0
  local.get $4
  i32.store offset=100
  local.get $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#constructor (param $0 i64) (param $1 i64) (param $2 i32) (result i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 f64)
  call $~lib/rt/tlsf/maybeInitialize
  i32.const 176
  i32.const 44
  call $~lib/rt/tlsf/allocateBlock
  i32.const 16
  i32.add
  local.tee $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   local.tee $4
   i32.load offset=4
   local.set $5
   local.get $4
   local.get $5
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $4
   i32.load
   drop
  end
  local.get $3
  i32.const 0
  i32.store offset=104
  local.get $3
  i32.const 0
  i32.store offset=108
  local.get $3
  i32.const 0
  i32.store offset=112
  local.get $3
  i32.const 0
  i32.store offset=116
  local.get $3
  i64.const 0
  i64.store offset=120
  local.get $3
  i64.const 0
  i64.store offset=128
  local.get $3
  i64.const 0
  i64.store offset=136
  local.get $3
  i64.const 0
  i64.store offset=144
  local.get $3
  i64.const -1
  i64.store offset=152
  local.get $3
  i32.const 0
  i32.store offset=160
  local.get $3
  i64.const 0
  i64.store offset=168
  local.get $3
  call $assembly/AbstractHistogramBase/AbstractHistogramBase<assembly/packedarray/PackedArray/PackedArray,u64>#constructor
  local.set $3
  local.get $0
  i64.const 1
  i64.lt_u
  if
   i32.const 9856
   i32.const 9952
   i32.const 61
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $1
  local.get $0
  i64.const 2
  i64.mul
  i64.lt_u
  if
   i32.const 10016
   i32.const 9952
   i32.const 64
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  i32.const 1
  local.get $2
  i32.const 255
  i32.and
  local.tee $4
  i32.const 5
  i32.gt_u
  local.get $4
  i32.const 0
  i32.lt_u
  select
  if
   i32.const 10224
   i32.const 9952
   i32.const 72
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  global.get $assembly/AbstractHistogramBase/AbstractHistogramBase.identityBuilder
  local.tee $6
  f64.const 1
  f64.add
  global.set $assembly/AbstractHistogramBase/AbstractHistogramBase.identityBuilder
  local.get $3
  local.get $6
  f64.store
  local.get $3
  local.get $0
  local.get $1
  local.get $2
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#init
  local.get $3
 )
 (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#constructor (param $0 i32) (param $1 f64) (param $2 f64) (param $3 f64) (param $4 i32) (param $5 i32) (result i32)
  (local $6 i32)
  (local $7 i32)
  local.get $0
  i32.eqz
  if
   call $~lib/rt/tlsf/maybeInitialize
   i32.const 4
   i32.const 43
   call $~lib/rt/tlsf/allocateBlock
   i32.const 16
   i32.add
   local.tee $0
   i32.const 16700
   i32.gt_u
   if
    local.get $0
    i32.const 16
    i32.sub
    local.tee $6
    i32.load offset=4
    local.set $7
    local.get $6
    local.get $7
    i32.const 1
    i32.add
    i32.store offset=4
    local.get $6
    i32.load
    drop
   end
  end
  local.get $0
  i32.const 0
  i32.store
  local.get $5
  i32.const 16700
  i32.gt_u
  if
   local.get $5
   i32.const 16
   i32.sub
   local.tee $6
   i32.load offset=4
   local.set $7
   local.get $6
   local.get $7
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $6
   i32.load
   drop
  end
  local.get $5
  if
   local.get $5
   local.get $0
   i32.load
   local.tee $4
   i32.ne
   if
    local.get $5
    i32.const 16700
    i32.gt_u
    if
     local.get $5
     i32.const 16
     i32.sub
     local.tee $6
     i32.load offset=4
     local.set $7
     local.get $6
     local.get $7
     i32.const 1
     i32.add
     i32.store offset=4
     local.get $6
     i32.load
     drop
    end
    local.get $4
    i32.const 16700
    i32.gt_u
    if
     local.get $4
     i32.const 16
     i32.sub
     call $~lib/rt/pure/decrement
    end
   end
   local.get $0
   local.get $5
   i32.store
  else
   local.get $1
   i64.trunc_f64_u
   local.get $2
   i64.trunc_f64_u
   local.get $3
   i32.trunc_f64_u
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#constructor
   local.set $6
   local.get $0
   i32.load
   local.tee $7
   i32.const 16700
   i32.gt_u
   if
    local.get $7
    i32.const 16
    i32.sub
    call $~lib/rt/pure/decrement
   end
   local.get $0
   local.get $6
   i32.store
   local.get $0
   i32.load
   local.get $4
   i32.store8 offset=8
  end
  local.get $5
  i32.const 16700
  i32.gt_u
  if
   local.get $5
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $0
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/packedarray/PackedArray/PackedArray,u64>#next (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i64)
  (local $3 i32)
  loop $while-continue|0
   local.get $0
   i32.load offset=16
   local.get $0
   i32.load offset=4
   i32.load offset=52
   i32.lt_s
   if
    local.get $0
    local.get $0
    i32.load offset=4
    i32.load offset=160
    local.get $0
    i32.load offset=16
    call $assembly/packedarray/PackedArray/PackedArray#get
    i64.store offset=80
    local.get $0
    i32.load8_u offset=88
    if
     local.get $0
     local.get $0
     i64.load offset=56
     local.get $0
     i64.load offset=80
     i64.add
     i64.store offset=56
     local.get $0
     i32.load offset=4
     local.tee $1
     i32.load offset=104
     local.get $0
     i64.load offset=24
     local.tee $2
     local.get $1
     i64.load offset=128
     i64.or
     i64.clz
     i32.wrap_i64
     i32.sub
     local.set $3
     local.get $0
     local.get $0
     i64.load offset=64
     local.get $0
     i64.load offset=80
     local.get $2
     local.get $3
     local.get $1
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shr_u
     i32.wrap_i64
     i64.extend_i32_s
     local.get $3
     local.get $1
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shl
     i64.const 1
     local.get $1
     i32.load offset=112
     local.get $1
     i32.load offset=104
     local.get $2
     local.get $1
     i64.load offset=128
     i64.or
     i64.clz
     i32.wrap_i64
     i32.sub
     i32.add
     i64.extend_i32_s
     i64.shl
     i64.add
     i64.const 1
     i64.sub
     i64.mul
     i64.add
     i64.store offset=64
     local.get $0
     i32.const 0
     i32.store8 offset=88
    end
    local.get $0
    i32.load offset=4
    i32.load offset=160
    local.get $0
    i32.load offset=16
    call $assembly/packedarray/PackedArray/PackedArray#get
    i64.const 0
    i64.ne
    if (result i32)
     local.get $0
     i32.load
     local.get $0
     i32.load offset=16
     i32.ne
    else
     i32.const 0
    end
    if
     local.get $0
     i32.load offset=4
     local.tee $1
     i32.load offset=104
     local.get $0
     i64.load offset=24
     local.tee $2
     local.get $1
     i64.load offset=128
     i64.or
     i64.clz
     i32.wrap_i64
     i32.sub
     local.set $3
     local.get $0
     i32.load offset=92
     local.get $2
     local.get $3
     local.get $1
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shr_u
     i32.wrap_i64
     i64.extend_i32_s
     local.get $3
     local.get $1
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shl
     i64.const 1
     local.get $1
     i32.load offset=112
     local.get $1
     i32.load offset=104
     local.get $2
     local.get $1
     i64.load offset=128
     i64.or
     i64.clz
     i32.wrap_i64
     i32.sub
     i32.add
     i64.extend_i32_s
     i64.shl
     i64.add
     i64.const 1
     i64.sub
     local.tee $2
     i64.store
     local.get $0
     i32.load offset=92
     local.get $0
     i64.load offset=40
     i64.store offset=8
     local.get $0
     i32.load offset=92
     local.get $0
     i64.load offset=80
     i64.store offset=16
     local.get $0
     i32.load offset=92
     local.get $0
     i64.load offset=56
     local.get $0
     i64.load offset=48
     i64.sub
     i64.store offset=24
     local.get $0
     i32.load offset=92
     local.get $0
     i64.load offset=56
     i64.store offset=32
     local.get $0
     i32.load offset=92
     local.get $0
     i64.load offset=64
     i64.store offset=40
     local.get $0
     i32.load offset=92
     f64.const 100
     local.get $0
     i64.load offset=56
     f64.convert_i64_u
     f64.mul
     local.get $0
     i64.load offset=72
     f64.convert_i64_u
     f64.div
     f64.store offset=48
     local.get $0
     i32.load offset=92
     f64.const 100
     local.get $0
     i64.load offset=56
     f64.convert_i64_u
     f64.mul
     local.get $0
     i64.load offset=72
     f64.convert_i64_u
     f64.div
     f64.store offset=56
     local.get $0
     local.get $2
     i64.store offset=40
     local.get $0
     local.get $0
     i64.load offset=56
     i64.store offset=48
     local.get $0
     local.get $0
     i32.load offset=16
     i32.store
     local.get $0
     i32.load offset=4
     i64.load offset=168
     local.get $0
     i64.load offset=8
     i64.ne
     if
      i32.const 12704
      i32.const 12608
      i32.const 128
      i32.const 11
      call $~lib/builtins/abort
      unreachable
     end
     local.get $0
     i32.load offset=92
     local.tee $0
     i32.const 16700
     i32.gt_u
     if
      local.get $0
      i32.const 16
      i32.sub
      local.tee $1
      i32.load offset=4
      local.set $3
      local.get $1
      local.get $3
      i32.const 1
      i32.add
      i32.store offset=4
      local.get $1
      i32.load
      drop
     end
     local.get $0
     return
    end
    local.get $0
    call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#incrementSubBucket
    br $while-continue|0
   end
  end
  i32.const 12800
  i32.const 12608
  i32.const 134
  i32.const 5
  call $~lib/builtins/abort
  unreachable
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getMean (param $0 i32) (result f64)
  (local $1 i32)
  (local $2 i64)
  (local $3 i32)
  local.get $0
  i64.load offset=168
  i64.eqz
  if
   f64.const 0
   return
  end
  local.get $0
  i32.load offset=100
  local.tee $1
  local.get $1
  i32.load offset=4
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#doReset
  loop $while-continue|0
   local.get $0
   i32.load offset=100
   call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#hasNext
   if
    local.get $2
    local.get $0
    i32.load offset=100
    call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/packedarray/PackedArray/PackedArray,u64>#next
    local.tee $1
    i64.load
    local.tee $2
    local.get $0
    i32.load offset=104
    local.get $2
    local.get $0
    i64.load offset=128
    i64.or
    i64.clz
    i32.wrap_i64
    i32.sub
    local.tee $3
    local.get $0
    i32.load offset=112
    i32.add
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    i64.extend_i32_s
    local.get $3
    local.get $0
    i32.load offset=112
    i32.add
    i64.extend_i32_s
    i64.shl
    i64.const 1
    local.get $0
    i32.load offset=112
    local.get $0
    i32.load offset=104
    local.get $2
    local.get $0
    i64.load offset=128
    i64.or
    i64.clz
    i32.wrap_i64
    i32.sub
    i32.add
    i64.extend_i32_s
    i64.shl
    i64.const 1
    i64.shr_u
    i64.add
    local.get $1
    i64.load offset=16
    i64.mul
    i64.add
    local.set $2
    local.get $1
    i32.const 16700
    i32.gt_u
    if
     local.get $1
     i32.const 16
     i32.sub
     call $~lib/rt/pure/decrement
    end
    br $while-continue|0
   end
  end
  local.get $2
  f64.convert_i64_u
  local.get $0
  i64.load offset=168
  f64.convert_i64_u
  f64.div
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#computeStdDeviation (param $0 i32) (param $1 f64) (result f64)
  (local $2 i32)
  (local $3 f64)
  (local $4 i64)
  (local $5 i32)
  local.get $0
  i64.load offset=168
  i64.eqz
  if
   f64.const 0
   return
  end
  local.get $0
  i32.load offset=100
  local.tee $2
  local.get $2
  i32.load offset=4
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#doReset
  loop $while-continue|0
   local.get $0
   i32.load offset=100
   call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#hasNext
   if
    local.get $3
    local.get $0
    i32.load offset=100
    call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/packedarray/PackedArray/PackedArray,u64>#next
    local.tee $2
    i64.load
    local.tee $4
    local.get $0
    i32.load offset=104
    local.get $4
    local.get $0
    i64.load offset=128
    i64.or
    i64.clz
    i32.wrap_i64
    i32.sub
    local.tee $5
    local.get $0
    i32.load offset=112
    i32.add
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    i64.extend_i32_s
    local.get $5
    local.get $0
    i32.load offset=112
    i32.add
    i64.extend_i32_s
    i64.shl
    i64.const 1
    local.get $0
    i32.load offset=112
    local.get $0
    i32.load offset=104
    local.get $4
    local.get $0
    i64.load offset=128
    i64.or
    i64.clz
    i32.wrap_i64
    i32.sub
    i32.add
    i64.extend_i32_s
    i64.shl
    i64.const 1
    i64.shr_u
    i64.add
    f64.convert_i64_u
    local.get $1
    f64.sub
    local.tee $3
    local.get $3
    f64.mul
    local.get $2
    i64.load offset=24
    f64.convert_i64_u
    f64.mul
    f64.add
    local.set $3
    local.get $2
    i32.const 16700
    i32.gt_u
    if
     local.get $2
     i32.const 16
     i32.sub
     call $~lib/rt/pure/decrement
    end
    br $while-continue|0
   end
  end
  local.get $3
  local.get $0
  i64.load offset=168
  f64.convert_i64_u
  f64.div
  f64.sqrt
 )
 (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#get:stdDeviation (param $0 i32) (result f64)
  block $__inlined_func$assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getStdDeviation (result f64)
   f64.const 0
   local.get $0
   i32.load
   local.tee $0
   i64.load offset=168
   i64.eqz
   br_if $__inlined_func$assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getStdDeviation
   drop
   local.get $0
   local.get $0
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getMean
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#computeStdDeviation
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#get:mean (param $0 i32) (result f64)
  local.get $0
  i32.load
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getMean
 )
 (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#get:estimatedFootprintInBytes (param $0 i32) (result f64)
  local.get $0
  i32.load
  i32.load offset=160
  i32.load
  i32.load offset=4
  i32.const 184
  i32.add
  f64.convert_i32_u
 )
 (func $assembly/packedarray/PackedArrayContext/PackedArrayContext#copyEntriesAtLevelFromOther (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (param $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $5
   i32.load offset=4
   local.set $7
   local.get $5
   local.get $7
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $5
   i32.load
   drop
  end
  local.get $4
  i32.const 3
  i32.eq
  local.set $8
  local.get $1
  i32.load offset=16
  local.get $2
  call $~lib/typedarray/Uint16Array#__get
  i32.const 65535
  i32.and
  local.set $5
  i32.const 1
  global.set $~argumentsLength
  local.get $0
  local.get $3
  local.get $0
  local.get $5
  i64.extend_i32_u
  call $start:assembly/packedarray/bitcount~anonymous|0
  local.tee $7
  i32.const 255
  i32.and
  i32.const 1
  i32.add
  i32.const 65535
  i32.and
  call $assembly/packedarray/PackedArrayContext/PackedArrayContext#newEntry
  local.tee $3
  call $assembly/packedarray/PackedArrayContext/PackedArrayContext#setAtShortIndex
  local.get $0
  local.get $3
  local.get $5
  call $assembly/packedarray/PackedArrayContext/PackedArrayContext#setAtShortIndex
  loop $for-loop|1
   local.get $6
   i32.const 255
   i32.and
   local.get $7
   i32.const 255
   i32.and
   i32.lt_u
   if
    local.get $8
    if
     local.get $0
     local.get $6
     i32.const 255
     i32.and
     local.tee $5
     local.get $3
     i32.const 1
     i32.add
     i32.add
     local.get $0
     call $assembly/packedarray/PackedArrayContext/PackedArrayContext#newLeafEntry
     local.tee $9
     call $assembly/packedarray/PackedArrayContext/PackedArrayContext#setAtShortIndex
     local.get $1
     i32.load offset=16
     local.get $5
     local.get $2
     i32.const 1
     i32.add
     i32.add
     call $~lib/typedarray/Uint16Array#__get
     local.set $5
     local.get $0
     i32.load offset=20
     local.get $9
     local.get $1
     i32.load offset=20
     local.get $5
     call $~lib/typedarray/Uint64Array#__get
     call $~lib/typedarray/Uint64Array#__set
    else
     local.get $0
     local.get $1
     local.get $1
     i32.load offset=16
     local.get $6
     i32.const 255
     i32.and
     local.tee $5
     local.get $2
     i32.const 1
     i32.add
     i32.add
     call $~lib/typedarray/Uint16Array#__get
     local.get $5
     local.get $3
     i32.const 1
     i32.add
     i32.add
     local.get $4
     i32.const 4
     i32.sub
     call $assembly/packedarray/PackedArrayContext/PackedArrayContext#copyEntriesAtLevelFromOther
    end
    local.get $6
    i32.const 1
    i32.add
    local.set $6
    br $for-loop|1
   end
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/packedarray/PackedArrayContext/PackedArrayContext#populateEquivalentEntriesWithEntriesFromOther (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $5
   i32.load offset=4
   local.set $3
   local.get $5
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $5
   i32.load
   drop
  end
  local.get $0
  i32.load offset=28
  local.get $1
  i32.load offset=28
  i32.lt_s
  if
   i32.const 15680
   i32.const 14368
   i32.const 476
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  loop $for-loop|0
   local.get $2
   i32.const 8
   i32.lt_s
   if
    local.get $1
    i32.load offset=16
    local.get $2
    call $~lib/typedarray/Uint16Array#__get
    local.tee $3
    local.set $5
    local.get $3
    if
     local.get $2
     local.set $3
     local.get $0
     i32.load offset=32
     local.set $4
     loop $for-loop|1
      local.get $4
      local.get $1
      i32.load offset=32
      i32.gt_s
      if
       local.get $0
       local.get $3
       local.get $0
       i32.const 2
       call $assembly/packedarray/PackedArrayContext/PackedArrayContext#newEntry
       local.tee $3
       call $assembly/packedarray/PackedArrayContext/PackedArrayContext#setAtShortIndex
       local.get $0
       local.get $3
       i32.const 1
       call $assembly/packedarray/PackedArrayContext/PackedArrayContext#setAtShortIndex
       local.get $3
       i32.const 1
       i32.add
       local.set $3
       local.get $4
       i32.const 4
       i32.sub
       local.set $4
       br $for-loop|1
      end
     end
     local.get $0
     local.get $1
     local.get $5
     local.get $3
     local.get $1
     i32.load offset=32
     call $assembly/packedarray/PackedArrayContext/PackedArrayContext#copyEntriesAtLevelFromOther
    end
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|0
   end
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/packedarray/PackedArray/PackedArray#setVirtualLength (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $1
  local.get $0
  i32.load
  i32.load offset=28
  i32.lt_s
  if
   i32.const 15360
   local.get $1
   call $~lib/util/number/itoa32
   call $~lib/string/String.__concat
   i32.const 15472
   call $~lib/string/String.__concat
   local.get $0
   i32.load
   i32.load offset=28
   call $~lib/util/number/itoa32
   call $~lib/string/String.__concat
   i32.const 15584
   i32.const 49
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i32.load
  local.tee $2
  i32.const 16700
  i32.gt_u
  if
   local.get $2
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $4
   local.get $3
   local.get $4
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $2
  i32.load8_u
  if (result i32)
   local.get $1
   call $assembly/packedarray/PackedArrayContext/PackedArrayContext#determineTopLevelShiftForVirtualLength
   local.get $2
   i32.load offset=32
   i32.eq
  else
   i32.const 0
  end
  if
   local.get $2
   local.get $1
   call $assembly/packedarray/PackedArrayContext/PackedArrayContext#setVirtualLength
   local.get $2
   i32.const 16700
   i32.gt_u
   if
    local.get $2
    i32.const 16
    i32.sub
    call $~lib/rt/pure/decrement
   end
   return
  end
  local.get $1
  local.get $0
  i32.load
  i32.load offset=4
  call $assembly/packedarray/PackedArrayContext/PackedArrayContext#constructor
  local.set $1
  local.get $2
  i32.load8_u
  if
   local.get $1
   local.get $2
   call $assembly/packedarray/PackedArrayContext/PackedArrayContext#populateEquivalentEntriesWithEntriesFromOther
  end
  local.get $0
  i32.load
  local.tee $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $0
  local.get $1
  i32.store
  local.get $2
  i32.const 16700
  i32.gt_u
  if
   local.get $2
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#resize (param $0 i32) (param $1 i64)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#establishSize
  local.get $0
  i32.load offset=160
  local.tee $3
  local.get $0
  i32.load offset=52
  call $assembly/packedarray/PackedArray/PackedArray#setVirtualLength
  local.get $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $4
   local.get $2
   local.get $4
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  i32.load offset=160
  local.tee $2
  i32.const 16700
  i32.gt_u
  if
   local.get $2
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $0
  local.get $3
  i32.store offset=160
 )
 (func $assembly/packedarray/PackedArray/PackedArray#set (param $0 i32) (param $1 i32) (param $2 i64)
  (local $3 i64)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  local.get $2
  local.set $3
  loop $for-loop|1
   local.get $4
   i32.const 255
   i32.and
   i32.const 8
   i32.lt_u
   if
    local.get $0
    i32.load
    i32.load8_u
    i32.eqz
    if
     local.get $0
     i32.load
     i32.load offset=20
     local.get $1
     local.get $2
     call $~lib/typedarray/Uint64Array#__set
     return
    end
    local.get $3
    i64.eqz
    if
     local.get $0
     i32.load
     local.get $4
     i32.const 255
     i32.and
     local.get $1
     i32.const 0
     call $assembly/packedarray/PackedArrayContext/PackedArrayContext#getPackedIndex
     i32.const 0
     i32.lt_s
     if
      return
     end
    end
    local.get $0
    i32.load
    local.get $4
    i32.const 255
    i32.and
    local.tee $5
    local.get $1
    i32.const 1
    call $assembly/packedarray/PackedArrayContext/PackedArrayContext#getPackedIndex
    local.set $8
    local.get $3
    i64.const 255
    i64.and
    i32.wrap_i64
    local.set $6
    local.get $3
    i64.const 8
    i64.shr_u
    local.set $3
    local.get $5
    local.get $7
    i32.const 255
    i32.and
    i32.ge_u
    if
     local.get $6
     i32.const 255
     i32.and
     local.set $5
     local.get $8
     local.get $0
     i32.load
     i32.load offset=12
     local.tee $6
     i32.load offset=8
     i32.ge_u
     if
      i32.const 13120
      i32.const 13184
      i32.const 163
      i32.const 45
      call $~lib/builtins/abort
      unreachable
     end
     local.get $8
     local.get $6
     i32.load offset=4
     i32.add
     local.get $5
     i32.store8
     local.get $7
     i32.const 1
     i32.add
     local.set $7
    end
    local.get $4
    i32.const 1
    i32.add
    local.set $4
    br $for-loop|1
   end
  end
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#addToCountAtIndex (param $0 i32) (param $1 i32) (param $2 i64)
  local.get $0
  i32.load offset=160
  local.get $1
  call $assembly/packedarray/PackedArray/PackedArray#get
  local.get $2
  i64.add
  local.tee $2
  i64.const 0
  i64.lt_u
  if
   i32.const 0
   i32.const 9952
   i32.const 611
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i32.load offset=160
  local.get $1
  local.get $2
  call $assembly/packedarray/PackedArray/PackedArray#set
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#handleRecordException (param $0 i32) (param $1 i64) (param $2 i64)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  local.get $0
  i32.load8_u offset=8
  i32.eqz
  if
   i32.const 12992
   local.get $2
   call $~lib/util/number/utoa64
   call $~lib/string/String.__concat
   i32.const 13024
   call $~lib/string/String.__concat
   i32.const 9952
   i32.const 225
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  local.get $2
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#resize
  local.get $0
  local.get $0
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex
  local.get $1
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#addToCountAtIndex
  local.get $0
  i32.load offset=116
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $5
  local.get $0
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  i32.add
  local.set $6
  local.get $5
  local.get $0
  local.tee $3
  local.tee $4
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.tee $5
  i32.const 0
  i32.lt_s
  if
   i32.const 0
   local.set $5
   local.get $6
   local.get $3
   i32.load offset=116
   i32.sub
   local.set $6
  end
  local.get $4
  i32.load offset=104
  local.get $6
  i64.extend_i32_s
  local.get $5
  local.get $3
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  local.tee $1
  local.get $4
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  local.set $0
  local.get $3
  local.get $1
  local.get $0
  local.get $4
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shr_u
  i32.wrap_i64
  i64.extend_i32_s
  local.get $0
  local.get $4
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.const 1
  local.get $4
  i32.load offset=112
  local.get $4
  i32.load offset=104
  local.get $1
  local.get $4
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.add
  i64.const 1
  i64.sub
  i64.store offset=16
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#recordSingleValue (param $0 i32) (param $1 i64)
  (local $2 i32)
  (local $3 i64)
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex
  local.tee $2
  local.get $0
  i32.load offset=52
  i32.ge_s
  if
   local.get $0
   i64.const 1
   local.get $1
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#handleRecordException
  else
   local.get $0
   i32.load offset=160
   local.get $2
   call $assembly/packedarray/PackedArray/PackedArray#get
   i64.const 1
   i64.add
   local.tee $3
   i64.const 0
   i64.lt_u
   if
    local.get $3
    call $~lib/util/number/utoa64
    i32.const 13248
    call $~lib/string/String.__concat
    i32.const 9952
    i32.const 593
    i32.const 7
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   i32.load offset=160
   local.get $2
   local.get $3
   call $assembly/packedarray/PackedArray/PackedArray#set
  end
  local.get $1
  local.get $0
  i64.load offset=144
  i64.gt_u
  if
   local.get $0
   local.get $1
   local.get $0
   i64.load offset=136
   i64.add
   i64.store offset=144
  end
  local.get $1
  local.get $0
  i64.load offset=152
  i64.lt_u
  if (result i32)
   local.get $1
   i64.const 0
   i64.ne
  else
   i32.const 0
  end
  if
   local.get $1
   local.get $0
   i64.load offset=136
   i64.gt_u
   if
    local.get $0
    local.get $1
    local.get $0
    i64.load offset=136
    i64.const -1
    i64.xor
    i64.and
    i64.store offset=152
   end
  end
  local.get $0
  local.get $0
  i64.load offset=168
  i64.const 1
  i64.add
  i64.store offset=168
 )
 (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#recordValue (param $0 i32) (param $1 f64)
  local.get $0
  i32.load
  local.get $1
  i64.trunc_f64_u
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#recordSingleValue
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#recordCountAtValue (param $0 i32) (param $1 i64) (param $2 i64)
  (local $3 i32)
  local.get $0
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex
  local.tee $3
  local.get $0
  i32.load offset=52
  i32.ge_s
  if
   local.get $0
   local.get $1
   local.get $2
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#handleRecordException
  else
   local.get $0
   local.get $3
   local.get $1
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#addToCountAtIndex
  end
  local.get $2
  local.get $0
  i64.load offset=144
  i64.gt_u
  if
   local.get $0
   local.get $2
   local.get $0
   i64.load offset=136
   i64.add
   i64.store offset=144
  end
  local.get $2
  local.get $0
  i64.load offset=152
  i64.lt_u
  if (result i32)
   local.get $2
   i64.const 0
   i64.ne
  else
   i32.const 0
  end
  if
   local.get $2
   local.get $0
   i64.load offset=136
   i64.gt_u
   if
    local.get $0
    local.get $2
    local.get $0
    i64.load offset=136
    i64.const -1
    i64.xor
    i64.and
    i64.store offset=152
   end
  end
  local.get $0
  local.get $1
  local.get $0
  i64.load offset=168
  i64.add
  i64.store offset=168
 )
 (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#recordValueWithCount (param $0 i32) (param $1 f64) (param $2 f64)
  local.get $0
  i32.load
  local.get $2
  i64.trunc_f64_u
  local.get $1
  i64.trunc_f64_u
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#recordCountAtValue
 )
 (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#recordValueWithExpectedInterval (param $0 i32) (param $1 f64) (param $2 f64)
  (local $3 i64)
  (local $4 i64)
  block $__inlined_func$assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#recordSingleValueWithExpectedInterval
   local.get $2
   i64.trunc_f64_u
   local.set $4
   local.get $0
   i32.load
   local.tee $0
   local.get $1
   i64.trunc_f64_u
   local.tee $3
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#recordSingleValue
   i32.const 1
   local.get $4
   i64.eqz
   local.get $3
   local.get $4
   i64.lt_u
   select
   br_if $__inlined_func$assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#recordSingleValueWithExpectedInterval
   local.get $3
   local.get $4
   i64.sub
   local.set $3
   loop $for-loop|0
    local.get $3
    local.get $4
    i64.ge_u
    if
     local.get $0
     local.get $3
     call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#recordSingleValue
     local.get $3
     local.get $4
     i64.sub
     local.set $3
     br $for-loop|0
    end
   end
  end
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getValueAtPercentile (param $0 i32) (param $1 f64) (result i64)
  (local $2 i32)
  (local $3 i64)
  (local $4 f64)
  (local $5 i32)
  (local $6 i64)
  local.get $1
  f64.const 100
  f64.min
  f64.const 100
  f64.div
  local.get $0
  i64.load offset=168
  f64.convert_i64_u
  f64.mul
  local.set $4
  i32.const 1
  global.set $~argumentsLength
  local.get $4
  local.get $4
  local.get $4
  i64.reinterpret_f64
  i64.const 1
  i64.xor
  f64.reinterpret_i64
  f64.sub
  f64.abs
  f64.sub
  f64.ceil
  f64.const 1
  f64.max
  i64.trunc_f64_u
  local.set $3
  loop $for-loop|0
   local.get $2
   local.get $0
   i32.load offset=52
   i32.lt_s
   if
    local.get $0
    i32.load offset=160
    local.get $2
    call $assembly/packedarray/PackedArray/PackedArray#get
    local.get $6
    i64.add
    local.tee $6
    local.get $3
    i64.ge_u
    if
     local.get $0
     i32.load offset=116
     local.get $2
     local.get $0
     i32.load offset=116
     i32.const 1
     i32.sub
     i32.and
     i32.add
     local.set $5
     local.get $2
     local.get $0
     i32.load offset=108
     i32.shr_s
     i32.const 1
     i32.sub
     local.tee $2
     i32.const 0
     i32.lt_s
     if
      local.get $5
      local.get $0
      i32.load offset=116
      i32.sub
      local.set $5
      i32.const 0
      local.set $2
     end
     local.get $5
     i64.extend_i32_s
     local.get $2
     local.get $0
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shl
     local.set $3
     local.get $1
     f64.const 0
     f64.eq
     if (result i64)
      local.get $3
      local.get $0
      i32.load offset=104
      local.get $3
      local.get $0
      i64.load offset=128
      i64.or
      i64.clz
      i32.wrap_i64
      i32.sub
      local.tee $2
      local.get $0
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shr_u
      i32.wrap_i64
      i64.extend_i32_s
      local.get $2
      local.get $0
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shl
     else
      local.get $3
      local.get $0
      i32.load offset=104
      local.get $3
      local.get $0
      i64.load offset=128
      i64.or
      i64.clz
      i32.wrap_i64
      i32.sub
      local.tee $2
      local.get $0
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shr_u
      i32.wrap_i64
      i64.extend_i32_s
      local.get $2
      local.get $0
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shl
      i64.const 1
      local.get $0
      i32.load offset=112
      local.get $0
      i32.load offset=104
      local.get $3
      local.get $0
      i64.load offset=128
      i64.or
      i64.clz
      i32.wrap_i64
      i32.sub
      i32.add
      i64.extend_i32_s
      i64.shl
      i64.add
      i64.const 1
      i64.sub
     end
     return
    end
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|0
   end
  end
  i64.const 0
 )
 (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#getValueAtPercentile (param $0 i32) (param $1 f64) (result f64)
  local.get $0
  i32.load
  local.get $1
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getValueAtPercentile
  f64.convert_i64_u
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/packedarray/PackedArray/PackedArray,u64>#next (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i64)
  (local $3 i32)
  loop $while-continue|0
   local.get $0
   i32.load offset=40
   local.get $0
   i32.load offset=28
   i32.load offset=52
   i32.lt_s
   if
    local.get $0
    local.get $0
    i32.load offset=28
    i32.load offset=160
    local.get $0
    i32.load offset=40
    call $assembly/packedarray/PackedArray/PackedArray#get
    i64.store offset=104
    local.get $0
    i32.load8_u offset=112
    if
     local.get $0
     local.get $0
     i64.load offset=80
     local.get $0
     i64.load offset=104
     i64.add
     i64.store offset=80
     local.get $0
     i32.load offset=28
     local.tee $1
     i32.load offset=104
     local.get $0
     i64.load offset=48
     local.tee $2
     local.get $1
     i64.load offset=128
     i64.or
     i64.clz
     i32.wrap_i64
     i32.sub
     local.set $3
     local.get $0
     local.get $0
     i64.load offset=88
     local.get $0
     i64.load offset=104
     local.get $2
     local.get $3
     local.get $1
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shr_u
     i32.wrap_i64
     i64.extend_i32_s
     local.get $3
     local.get $1
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shl
     i64.const 1
     local.get $1
     i32.load offset=112
     local.get $1
     i32.load offset=104
     local.get $2
     local.get $1
     i64.load offset=128
     i64.or
     i64.clz
     i32.wrap_i64
     i32.sub
     i32.add
     i64.extend_i32_s
     i64.shl
     i64.add
     i64.const 1
     i64.sub
     i64.mul
     i64.add
     i64.store offset=88
     local.get $0
     i32.const 0
     i32.store8 offset=112
    end
    block $__inlined_func$assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#reachedIterationLevel (result i32)
     i32.const 0
     local.get $0
     i64.load offset=104
     i64.eqz
     br_if $__inlined_func$assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#reachedIterationLevel
     drop
     f64.const 100
     local.get $0
     i64.load offset=80
     f64.convert_i64_u
     f64.mul
     local.get $0
     i64.load offset=96
     f64.convert_i64_u
     f64.div
     local.get $0
     f64.load offset=8
     f64.ge
    end
    if
     local.get $0
     i32.load offset=28
     local.tee $1
     i32.load offset=104
     local.get $0
     i64.load offset=48
     local.tee $2
     local.get $1
     i64.load offset=128
     i64.or
     i64.clz
     i32.wrap_i64
     i32.sub
     local.set $3
     local.get $0
     i32.load offset=116
     local.get $2
     local.get $3
     local.get $1
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shr_u
     i32.wrap_i64
     i64.extend_i32_s
     local.get $3
     local.get $1
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shl
     i64.const 1
     local.get $1
     i32.load offset=112
     local.get $1
     i32.load offset=104
     local.get $2
     local.get $1
     i64.load offset=128
     i64.or
     i64.clz
     i32.wrap_i64
     i32.sub
     i32.add
     i64.extend_i32_s
     i64.shl
     i64.add
     i64.const 1
     i64.sub
     local.tee $2
     i64.store
     local.get $0
     i32.load offset=116
     local.get $0
     i64.load offset=64
     i64.store offset=8
     local.get $0
     i32.load offset=116
     local.get $0
     i64.load offset=104
     i64.store offset=16
     local.get $0
     i32.load offset=116
     local.get $0
     i64.load offset=80
     local.get $0
     i64.load offset=72
     i64.sub
     i64.store offset=24
     local.get $0
     i32.load offset=116
     local.get $0
     i64.load offset=80
     i64.store offset=32
     local.get $0
     i32.load offset=116
     local.get $0
     i64.load offset=88
     i64.store offset=40
     local.get $0
     i32.load offset=116
     f64.const 100
     local.get $0
     i64.load offset=80
     f64.convert_i64_u
     f64.mul
     local.get $0
     i64.load offset=96
     f64.convert_i64_u
     f64.div
     f64.store offset=48
     local.get $0
     i32.load offset=116
     local.get $0
     f64.load offset=8
     f64.store offset=56
     local.get $0
     local.get $2
     i64.store offset=64
     local.get $0
     local.get $0
     i64.load offset=80
     i64.store offset=72
     local.get $0
     call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#incrementIterationLevel
     local.get $0
     i32.load offset=28
     i64.load offset=168
     local.get $0
     i64.load offset=32
     i64.ne
     if
      i32.const 12704
      i32.const 13488
      i32.const 187
      i32.const 11
      call $~lib/builtins/abort
      unreachable
     end
     local.get $0
     i32.load offset=116
     local.tee $0
     i32.const 16700
     i32.gt_u
     if
      local.get $0
      i32.const 16
      i32.sub
      local.tee $1
      i32.load offset=4
      local.set $3
      local.get $1
      local.get $3
      i32.const 1
      i32.add
      i32.store offset=4
      local.get $1
      i32.load
      drop
     end
     local.get $0
     return
    end
    local.get $0
    call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#incrementSubBucket
    br $while-continue|0
   end
  end
  i32.const 12800
  i32.const 13488
  i32.const 193
  i32.const 5
  call $~lib/builtins/abort
  unreachable
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#outputPercentileDistribution (param $0 i32) (param $1 i32) (param $2 f64) (result i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  (local $15 i32)
  (local $16 i32)
  (local $17 i32)
  (local $18 i32)
  (local $19 i32)
  (local $20 i32)
  (local $21 i32)
  (local $22 i32)
  (local $23 i32)
  (local $24 i32)
  (local $25 i32)
  (local $26 i32)
  (local $27 i32)
  (local $28 i32)
  (local $29 i32)
  (local $30 i32)
  (local $31 i32)
  (local $32 i32)
  (local $33 f64)
  (local $34 i32)
  i32.const 1312
  i32.const 13344
  call $~lib/string/String.__concat
  local.tee $24
  local.tee $3
  i32.const 1312
  i32.ne
  if
   local.get $3
   i32.const 16700
   i32.gt_u
   if
    local.get $3
    i32.const 16
    i32.sub
    local.tee $15
    i32.load offset=4
    local.set $5
    local.get $15
    local.get $5
    i32.const 1
    i32.add
    i32.store offset=4
    local.get $15
    i32.load
    drop
   end
  end
  local.get $0
  i32.load offset=96
  local.tee $15
  i32.const 16700
  i32.gt_u
  if
   local.get $15
   i32.const 16
   i32.sub
   local.tee $5
   i32.load offset=4
   local.set $10
   local.get $5
   local.get $10
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $5
   i32.load
   drop
  end
  local.get $15
  local.get $15
  i32.load offset=28
  local.get $1
  call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#doReset
  i32.const 12
  local.get $0
  i32.load8_u offset=32
  call $assembly/formatters/FloatFormatter#constructor
  local.set $19
  i32.const 2
  i32.const 12
  call $assembly/formatters/FloatFormatter#constructor
  local.set $20
  i32.const 10
  call $assembly/formatters/IntegerFormatter#constructor
  local.set $21
  i32.const 14
  i32.const 2
  call $assembly/formatters/FloatFormatter#constructor
  local.set $23
  loop $while-continue|0
   local.get $15
   call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#hasNext
   if
    local.get $15
    call $assembly/PercentileIterator/PercentileIterator<assembly/packedarray/PackedArray/PackedArray,u64>#next
    local.tee $5
    f64.load offset=56
    f64.const 100
    f64.lt
    if
     local.get $3
     local.tee $1
     local.get $19
     local.get $5
     i64.load
     f64.convert_i64_u
     local.get $2
     f64.div
     call $assembly/formatters/FloatFormatter#format
     local.tee $10
     i32.const 1184
     call $~lib/string/String.__concat
     local.tee $11
     local.get $20
     local.get $5
     f64.load offset=56
     f64.const 100
     f64.div
     call $assembly/formatters/FloatFormatter#format
     local.tee $12
     call $~lib/string/String.__concat
     local.tee $6
     i32.const 1184
     call $~lib/string/String.__concat
     local.tee $7
     local.get $21
     local.get $5
     i64.load offset=32
     call $assembly/formatters/IntegerFormatter#format
     local.tee $8
     call $~lib/string/String.__concat
     local.tee $4
     i32.const 1184
     call $~lib/string/String.__concat
     local.tee $13
     local.get $23
     f64.const 1
     f64.const 1
     local.get $5
     f64.load offset=56
     f64.const 100
     f64.div
     f64.sub
     f64.div
     call $assembly/formatters/FloatFormatter#format
     local.tee $14
     call $~lib/string/String.__concat
     local.tee $9
     i32.const 13600
     call $~lib/string/String.__concat
     local.tee $16
     call $~lib/string/String.__concat
     local.tee $17
     local.tee $3
     local.get $1
     i32.ne
     if
      local.get $3
      i32.const 16700
      i32.gt_u
      if
       local.get $3
       i32.const 16
       i32.sub
       local.tee $18
       i32.load offset=4
       local.set $22
       local.get $18
       local.get $22
       i32.const 1
       i32.add
       i32.store offset=4
       local.get $18
       i32.load
       drop
      end
      local.get $1
      i32.const 16700
      i32.gt_u
      if
       local.get $1
       i32.const 16
       i32.sub
       call $~lib/rt/pure/decrement
      end
     end
     local.get $10
     i32.const 16700
     i32.gt_u
     if
      local.get $10
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $11
     i32.const 16700
     i32.gt_u
     if
      local.get $11
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $12
     i32.const 16700
     i32.gt_u
     if
      local.get $12
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $6
     i32.const 16700
     i32.gt_u
     if
      local.get $6
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $7
     i32.const 16700
     i32.gt_u
     if
      local.get $7
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $8
     i32.const 16700
     i32.gt_u
     if
      local.get $8
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $4
     i32.const 16700
     i32.gt_u
     if
      local.get $4
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $13
     i32.const 16700
     i32.gt_u
     if
      local.get $13
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $14
     i32.const 16700
     i32.gt_u
     if
      local.get $14
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $9
     i32.const 16700
     i32.gt_u
     if
      local.get $9
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $16
     i32.const 16700
     i32.gt_u
     if
      local.get $16
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $17
     i32.const 16700
     i32.gt_u
     if
      local.get $17
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
    else
     local.get $3
     local.tee $1
     local.get $19
     local.get $5
     i64.load
     f64.convert_i64_u
     local.get $2
     f64.div
     call $assembly/formatters/FloatFormatter#format
     local.tee $10
     i32.const 1184
     call $~lib/string/String.__concat
     local.tee $11
     local.get $20
     local.get $5
     f64.load offset=56
     f64.const 100
     f64.div
     call $assembly/formatters/FloatFormatter#format
     local.tee $12
     call $~lib/string/String.__concat
     local.tee $6
     i32.const 1184
     call $~lib/string/String.__concat
     local.tee $7
     local.get $21
     local.get $5
     i64.load offset=32
     call $assembly/formatters/IntegerFormatter#format
     local.tee $8
     call $~lib/string/String.__concat
     local.tee $4
     i32.const 13600
     call $~lib/string/String.__concat
     local.tee $13
     call $~lib/string/String.__concat
     local.tee $14
     local.tee $3
     local.get $1
     i32.ne
     if
      local.get $3
      i32.const 16700
      i32.gt_u
      if
       local.get $3
       i32.const 16
       i32.sub
       local.tee $9
       i32.load offset=4
       local.set $16
       local.get $9
       local.get $16
       i32.const 1
       i32.add
       i32.store offset=4
       local.get $9
       i32.load
       drop
      end
      local.get $1
      i32.const 16700
      i32.gt_u
      if
       local.get $1
       i32.const 16
       i32.sub
       call $~lib/rt/pure/decrement
      end
     end
     local.get $10
     i32.const 16700
     i32.gt_u
     if
      local.get $10
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $11
     i32.const 16700
     i32.gt_u
     if
      local.get $11
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $12
     i32.const 16700
     i32.gt_u
     if
      local.get $12
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $6
     i32.const 16700
     i32.gt_u
     if
      local.get $6
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $7
     i32.const 16700
     i32.gt_u
     if
      local.get $7
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $8
     i32.const 16700
     i32.gt_u
     if
      local.get $8
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $4
     i32.const 16700
     i32.gt_u
     if
      local.get $4
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $13
     i32.const 16700
     i32.gt_u
     if
      local.get $13
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
     local.get $14
     i32.const 16700
     i32.gt_u
     if
      local.get $14
      i32.const 16
      i32.sub
      call $~lib/rt/pure/decrement
     end
    end
    local.get $5
    i32.const 16700
    i32.gt_u
    if
     local.get $5
     i32.const 16
     i32.sub
     call $~lib/rt/pure/decrement
    end
    br $while-continue|0
   end
  end
  i32.const 12
  local.get $0
  i32.load8_u offset=32
  call $assembly/formatters/FloatFormatter#constructor
  local.tee $16
  local.get $0
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getMean
  local.tee $33
  local.get $2
  f64.div
  call $assembly/formatters/FloatFormatter#format
  local.set $11
  local.get $16
  local.get $0
  local.get $33
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#computeStdDeviation
  local.get $2
  f64.div
  call $assembly/formatters/FloatFormatter#format
  local.set $12
  local.get $16
  local.get $0
  i64.load offset=144
  f64.convert_i64_u
  local.get $2
  f64.div
  call $assembly/formatters/FloatFormatter#format
  i32.const 12
  call $assembly/formatters/IntegerFormatter#constructor
  local.tee $17
  local.get $0
  i64.load offset=168
  call $assembly/formatters/IntegerFormatter#format
  local.set $5
  local.get $17
  local.get $0
  i64.load offset=40
  call $assembly/formatters/IntegerFormatter#format
  local.set $10
  local.get $17
  local.get $0
  i32.load offset=48
  i64.extend_i32_s
  call $assembly/formatters/IntegerFormatter#format
  local.set $0
  local.get $3
  local.set $4
  local.get $11
  local.tee $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   local.tee $6
   i32.load offset=4
   local.set $7
   local.get $6
   local.get $7
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $6
   i32.load
   drop
  end
  i32.const 13632
  local.get $3
  local.tee $13
  call $~lib/string/String.__concat
  local.tee $18
  i32.const 13680
  call $~lib/string/String.__concat
  local.tee $25
  local.get $12
  local.tee $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   local.tee $6
   i32.load offset=4
   local.set $8
   local.get $6
   local.get $8
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $6
   i32.load
   drop
  end
  local.get $3
  local.tee $14
  call $~lib/string/String.__concat
  local.tee $22
  i32.const 13744
  call $~lib/string/String.__concat
  local.tee $26
  local.set $7
  local.tee $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   local.tee $6
   i32.load offset=4
   local.set $8
   local.get $6
   local.get $8
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $6
   i32.load
   drop
  end
  local.get $7
  local.get $3
  call $~lib/string/String.__concat
  local.tee $27
  i32.const 13792
  call $~lib/string/String.__concat
  local.tee $28
  local.get $5
  local.tee $6
  i32.const 16700
  i32.gt_u
  if
   local.get $6
   i32.const 16
   i32.sub
   local.tee $7
   i32.load offset=4
   local.set $9
   local.get $7
   local.get $9
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $7
   i32.load
   drop
  end
  local.get $6
  call $~lib/string/String.__concat
  local.tee $29
  i32.const 13856
  call $~lib/string/String.__concat
  local.tee $30
  local.get $10
  local.tee $7
  i32.const 16700
  i32.gt_u
  if
   local.get $7
   i32.const 16
   i32.sub
   local.tee $8
   i32.load offset=4
   local.set $1
   local.get $8
   local.get $1
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $8
   i32.load
   drop
  end
  local.get $7
  call $~lib/string/String.__concat
  local.tee $1
  i32.const 13904
  call $~lib/string/String.__concat
  local.tee $31
  local.set $5
  local.get $0
  local.tee $8
  i32.const 16700
  i32.gt_u
  if
   local.get $8
   i32.const 16
   i32.sub
   local.tee $9
   i32.load offset=4
   local.set $0
   local.get $9
   local.get $0
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $9
   i32.load
   drop
  end
  local.get $4
  local.tee $9
  local.get $9
  local.get $5
  local.get $8
  call $~lib/string/String.__concat
  local.tee $4
  i32.const 13968
  call $~lib/string/String.__concat
  local.tee $5
  call $~lib/string/String.__concat
  local.tee $0
  local.tee $10
  i32.ne
  if
   local.get $10
   i32.const 16700
   i32.gt_u
   if
    local.get $10
    i32.const 16
    i32.sub
    local.tee $32
    i32.load offset=4
    local.set $34
    local.get $32
    local.get $34
    i32.const 1
    i32.add
    i32.store offset=4
    local.get $32
    i32.load
    drop
   end
   local.get $9
   i32.const 16700
   i32.gt_u
   if
    local.get $9
    i32.const 16
    i32.sub
    call $~lib/rt/pure/decrement
   end
  end
  local.get $24
  i32.const 16700
  i32.gt_u
  if
   local.get $24
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $15
  i32.const 16700
  i32.gt_u
  if
   local.get $15
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $19
  i32.const 16700
  i32.gt_u
  if
   local.get $19
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $20
  i32.const 16700
  i32.gt_u
  if
   local.get $20
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $21
  i32.const 16700
  i32.gt_u
  if
   local.get $21
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $23
  i32.const 16700
  i32.gt_u
  if
   local.get $23
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $16
  i32.const 16700
  i32.gt_u
  if
   local.get $16
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $11
  i32.const 16700
  i32.gt_u
  if
   local.get $11
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $12
  i32.const 16700
  i32.gt_u
  if
   local.get $12
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $17
  i32.const 16700
  i32.gt_u
  if
   local.get $17
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $6
  i32.const 16700
  i32.gt_u
  if
   local.get $6
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $7
  i32.const 16700
  i32.gt_u
  if
   local.get $7
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $8
  i32.const 16700
  i32.gt_u
  if
   local.get $8
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $13
  i32.const 16700
  i32.gt_u
  if
   local.get $13
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $18
  i32.const 16700
  i32.gt_u
  if
   local.get $18
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $25
  i32.const 16700
  i32.gt_u
  if
   local.get $25
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $14
  i32.const 16700
  i32.gt_u
  if
   local.get $14
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $22
  i32.const 16700
  i32.gt_u
  if
   local.get $22
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $26
  i32.const 16700
  i32.gt_u
  if
   local.get $26
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $27
  i32.const 16700
  i32.gt_u
  if
   local.get $27
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $28
  i32.const 16700
  i32.gt_u
  if
   local.get $28
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $6
  i32.const 16700
  i32.gt_u
  if
   local.get $6
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $29
  i32.const 16700
  i32.gt_u
  if
   local.get $29
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $30
  i32.const 16700
  i32.gt_u
  if
   local.get $30
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $7
  i32.const 16700
  i32.gt_u
  if
   local.get $7
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $31
  i32.const 16700
  i32.gt_u
  if
   local.get $31
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $8
  i32.const 16700
  i32.gt_u
  if
   local.get $8
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $4
  i32.const 16700
  i32.gt_u
  if
   local.get $4
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $5
  i32.const 16700
  i32.gt_u
  if
   local.get $5
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $10
 )
 (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#outputPercentileDistribution (param $0 i32) (param $1 f64) (param $2 f64) (result i32)
  local.get $0
  i32.load
  local.get $1
  i32.trunc_f64_s
  local.get $2
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#outputPercentileDistribution
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#addWhileCorrectingForCoordinatedOmission (param $0 i32) (param $1 i32) (param $2 i64)
  (local $3 i32)
  (local $4 i32)
  (local $5 i64)
  (local $6 i64)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $4
   local.get $3
   local.get $4
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $4
   local.get $3
   local.get $4
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $1
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/packedarray/PackedArray/PackedArray,u64>#constructor
  local.set $3
  loop $while-continue|0
   local.get $3
   call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#hasNext
   if
    local.get $0
    local.get $3
    call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/packedarray/PackedArray/PackedArray,u64>#next
    local.tee $4
    i64.load offset=16
    local.tee $6
    local.get $4
    i64.load
    local.tee $5
    call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#recordCountAtValue
    i32.const 1
    local.get $5
    local.get $2
    i64.le_u
    local.get $2
    i64.const 0
    i64.le_u
    select
    i32.eqz
    if
     local.get $5
     local.get $2
     i64.sub
     local.set $5
     loop $for-loop|0
      local.get $5
      local.get $2
      i64.ge_u
      if
       local.get $0
       local.get $6
       local.get $5
       call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#recordCountAtValue
       local.get $5
       local.get $2
       i64.sub
       local.set $5
       br $for-loop|0
      end
     end
    end
    local.get $4
    i32.const 16700
    i32.gt_u
    if
     local.get $4
     i32.const 16
     i32.sub
     call $~lib/rt/pure/decrement
    end
    br $while-continue|0
   end
  end
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#copyCorrectedForCoordinatedOmission (param $0 i32) (param $1 f64) (result i32)
  (local $2 i32)
  (local $3 i64)
  local.get $1
  i64.trunc_f64_u
  local.set $3
  local.get $0
  i32.load
  local.tee $2
  i64.load offset=24
  local.get $2
  i64.load offset=16
  local.get $2
  i32.load8_u offset=32
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#constructor
  local.tee $0
  local.get $2
  local.get $3
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#addWhileCorrectingForCoordinatedOmission
  i32.const 0
  f64.const 0
  f64.const 0
  f64.const 0
  i32.const 0
  local.get $0
  call $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#constructor
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#add<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i32)
  (local $4 i64)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $5
   local.get $3
   local.get $5
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $0
  i32.load offset=116
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $5
  local.get $0
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  i32.add
  local.set $3
  local.get $5
  local.get $0
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.tee $5
  i32.const 0
  i32.lt_s
  if
   i32.const 0
   local.set $5
   local.get $3
   local.get $0
   i32.load offset=116
   i32.sub
   local.set $3
  end
  local.get $0
  i32.load offset=104
  local.get $3
  i64.extend_i32_s
  local.get $5
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  local.tee $2
  local.get $0
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  local.set $3
  local.get $2
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shr_u
  i32.wrap_i64
  i64.extend_i32_s
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.const 1
  local.get $0
  i32.load offset=112
  local.get $0
  i32.load offset=104
  local.get $2
  local.get $0
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.add
  i64.const 1
  i64.sub
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 14000
    i32.const 9952
    i32.const 639
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   loop $for-loop|0
    local.get $6
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $6
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     i32.add
     i32.load8_u
     i64.extend_i32_u
     local.tee $2
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $6
      local.get $2
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#addToCountAtIndex
      local.get $2
      local.get $4
      i64.add
      local.set $4
     end
     local.get $6
     i32.const 1
     i32.add
     local.set $6
     br $for-loop|0
    end
   end
   local.get $0
   local.get $4
   local.get $0
   i64.load offset=168
   i64.add
   i64.store offset=168
   local.get $0
   local.get $0
   i64.load offset=136
   local.get $0
   i64.load offset=144
   local.tee $2
   local.get $1
   i64.load offset=144
   local.tee $4
   local.get $2
   local.get $4
   i64.gt_u
   select
   i64.add
   i64.store offset=144
   local.get $0
   i64.load offset=152
   local.tee $2
   local.get $1
   i64.load offset=152
   local.tee $4
   local.get $2
   local.get $4
   i64.lt_u
   select
   local.tee $2
   local.get $0
   i64.load offset=136
   i64.gt_u
   if
    local.get $0
    local.get $2
    local.get $0
    i64.load offset=136
    i64.const -1
    i64.xor
    i64.and
    i64.store offset=152
   end
  else
   local.get $1
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex
   local.set $5
   local.get $1
   i32.load offset=116
   local.get $5
   local.get $1
   i32.load offset=116
   i32.const 1
   i32.sub
   i32.and
   i32.add
   local.set $3
   local.get $5
   local.get $1
   i32.load offset=160
   i32.load
   i32.load offset=4
   i32.add
   i32.load8_u
   i64.extend_i32_u
   local.set $2
   local.get $5
   local.get $1
   i32.load offset=108
   i32.shr_s
   i32.const 1
   i32.sub
   local.tee $6
   i32.const 0
   i32.lt_s
   if
    i32.const 0
    local.set $6
    local.get $3
    local.get $1
    i32.load offset=116
    i32.sub
    local.set $3
   end
   local.get $0
   local.get $2
   local.get $3
   i64.extend_i32_s
   local.get $6
   local.get $1
   i32.load offset=112
   i32.add
   i64.extend_i32_s
   i64.shl
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#recordCountAtValue
   loop $for-loop|1
    local.get $7
    local.get $5
    i32.lt_s
    if
     local.get $7
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     i32.add
     i32.load8_u
     i64.extend_i32_u
     local.tee $4
     local.set $2
     local.get $4
     i64.const 0
     i64.gt_u
     if
      local.get $1
      i32.load offset=116
      local.get $7
      local.get $1
      i32.load offset=116
      i32.const 1
      i32.sub
      i32.and
      i32.add
      local.set $3
      local.get $7
      local.get $1
      i32.load offset=108
      i32.shr_s
      i32.const 1
      i32.sub
      local.tee $6
      i32.const 0
      i32.lt_s
      if
       i32.const 0
       local.set $6
       local.get $3
       local.get $1
       i32.load offset=116
       i32.sub
       local.set $3
      end
      local.get $0
      local.get $2
      local.get $3
      i64.extend_i32_s
      local.get $6
      local.get $1
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shl
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#recordCountAtValue
     end
     local.get $7
     i32.const 1
     i32.add
     local.set $7
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=64
  local.tee $2
  local.get $1
  i64.load offset=64
  local.tee $4
  local.get $2
  local.get $4
  i64.lt_u
  select
  i64.store offset=64
  local.get $0
  local.get $0
  i64.load offset=72
  local.tee $2
  local.get $1
  i64.load offset=72
  local.tee $4
  local.get $2
  local.get $4
  i64.gt_u
  select
  i64.store offset=72
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#addHistogram8 (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#add<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#add<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i32)
  (local $4 i64)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $5
   local.get $3
   local.get $5
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $0
  i32.load offset=116
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $5
  local.get $0
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  i32.add
  local.set $3
  local.get $5
  local.get $0
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.tee $5
  i32.const 0
  i32.lt_s
  if
   i32.const 0
   local.set $5
   local.get $3
   local.get $0
   i32.load offset=116
   i32.sub
   local.set $3
  end
  local.get $0
  i32.load offset=104
  local.get $3
  i64.extend_i32_s
  local.get $5
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  local.tee $2
  local.get $0
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  local.set $3
  local.get $2
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shr_u
  i32.wrap_i64
  i64.extend_i32_s
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.const 1
  local.get $0
  i32.load offset=112
  local.get $0
  i32.load offset=104
  local.get $2
  local.get $0
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.add
  i64.const 1
  i64.sub
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 14000
    i32.const 9952
    i32.const 639
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   loop $for-loop|0
    local.get $6
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $6
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u
     i64.extend_i32_u
     local.tee $2
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $6
      local.get $2
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#addToCountAtIndex
      local.get $2
      local.get $4
      i64.add
      local.set $4
     end
     local.get $6
     i32.const 1
     i32.add
     local.set $6
     br $for-loop|0
    end
   end
   local.get $0
   local.get $4
   local.get $0
   i64.load offset=168
   i64.add
   i64.store offset=168
   local.get $0
   local.get $0
   i64.load offset=136
   local.get $0
   i64.load offset=144
   local.tee $2
   local.get $1
   i64.load offset=144
   local.tee $4
   local.get $2
   local.get $4
   i64.gt_u
   select
   i64.add
   i64.store offset=144
   local.get $0
   i64.load offset=152
   local.tee $2
   local.get $1
   i64.load offset=152
   local.tee $4
   local.get $2
   local.get $4
   i64.lt_u
   select
   local.tee $2
   local.get $0
   i64.load offset=136
   i64.gt_u
   if
    local.get $0
    local.get $2
    local.get $0
    i64.load offset=136
    i64.const -1
    i64.xor
    i64.and
    i64.store offset=152
   end
  else
   local.get $1
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex
   local.set $5
   local.get $1
   i32.load offset=116
   local.get $5
   local.get $1
   i32.load offset=116
   i32.const 1
   i32.sub
   i32.and
   i32.add
   local.set $3
   local.get $1
   i32.load offset=160
   i32.load
   i32.load offset=4
   local.get $5
   i32.const 1
   i32.shl
   i32.add
   i32.load16_u
   i64.extend_i32_u
   local.set $2
   local.get $5
   local.get $1
   i32.load offset=108
   i32.shr_s
   i32.const 1
   i32.sub
   local.tee $6
   i32.const 0
   i32.lt_s
   if
    i32.const 0
    local.set $6
    local.get $3
    local.get $1
    i32.load offset=116
    i32.sub
    local.set $3
   end
   local.get $0
   local.get $2
   local.get $3
   i64.extend_i32_s
   local.get $6
   local.get $1
   i32.load offset=112
   i32.add
   i64.extend_i32_s
   i64.shl
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#recordCountAtValue
   loop $for-loop|1
    local.get $7
    local.get $5
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $7
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u
     i64.extend_i32_u
     local.tee $4
     local.set $2
     local.get $4
     i64.const 0
     i64.gt_u
     if
      local.get $1
      i32.load offset=116
      local.get $7
      local.get $1
      i32.load offset=116
      i32.const 1
      i32.sub
      i32.and
      i32.add
      local.set $3
      local.get $7
      local.get $1
      i32.load offset=108
      i32.shr_s
      i32.const 1
      i32.sub
      local.tee $6
      i32.const 0
      i32.lt_s
      if
       i32.const 0
       local.set $6
       local.get $3
       local.get $1
       i32.load offset=116
       i32.sub
       local.set $3
      end
      local.get $0
      local.get $2
      local.get $3
      i64.extend_i32_s
      local.get $6
      local.get $1
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shl
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#recordCountAtValue
     end
     local.get $7
     i32.const 1
     i32.add
     local.set $7
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=64
  local.tee $2
  local.get $1
  i64.load offset=64
  local.tee $4
  local.get $2
  local.get $4
  i64.lt_u
  select
  i64.store offset=64
  local.get $0
  local.get $0
  i64.load offset=72
  local.tee $2
  local.get $1
  i64.load offset=72
  local.tee $4
  local.get $2
  local.get $4
  i64.gt_u
  select
  i64.store offset=72
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#addHistogram16 (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#add<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#add<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i32)
  (local $4 i64)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $5
   local.get $3
   local.get $5
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $0
  i32.load offset=116
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $5
  local.get $0
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  i32.add
  local.set $3
  local.get $5
  local.get $0
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.tee $5
  i32.const 0
  i32.lt_s
  if
   i32.const 0
   local.set $5
   local.get $3
   local.get $0
   i32.load offset=116
   i32.sub
   local.set $3
  end
  local.get $0
  i32.load offset=104
  local.get $3
  i64.extend_i32_s
  local.get $5
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  local.tee $2
  local.get $0
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  local.set $3
  local.get $2
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shr_u
  i32.wrap_i64
  i64.extend_i32_s
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.const 1
  local.get $0
  i32.load offset=112
  local.get $0
  i32.load offset=104
  local.get $2
  local.get $0
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.add
  i64.const 1
  i64.sub
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 14000
    i32.const 9952
    i32.const 639
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   loop $for-loop|0
    local.get $6
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $6
     i32.const 2
     i32.shl
     i32.add
     i32.load
     i64.extend_i32_u
     local.tee $2
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $6
      local.get $2
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#addToCountAtIndex
      local.get $2
      local.get $4
      i64.add
      local.set $4
     end
     local.get $6
     i32.const 1
     i32.add
     local.set $6
     br $for-loop|0
    end
   end
   local.get $0
   local.get $4
   local.get $0
   i64.load offset=168
   i64.add
   i64.store offset=168
   local.get $0
   local.get $0
   i64.load offset=136
   local.get $0
   i64.load offset=144
   local.tee $2
   local.get $1
   i64.load offset=144
   local.tee $4
   local.get $2
   local.get $4
   i64.gt_u
   select
   i64.add
   i64.store offset=144
   local.get $0
   i64.load offset=152
   local.tee $2
   local.get $1
   i64.load offset=152
   local.tee $4
   local.get $2
   local.get $4
   i64.lt_u
   select
   local.tee $2
   local.get $0
   i64.load offset=136
   i64.gt_u
   if
    local.get $0
    local.get $2
    local.get $0
    i64.load offset=136
    i64.const -1
    i64.xor
    i64.and
    i64.store offset=152
   end
  else
   local.get $1
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex
   local.set $5
   local.get $1
   i32.load offset=116
   local.get $5
   local.get $1
   i32.load offset=116
   i32.const 1
   i32.sub
   i32.and
   i32.add
   local.set $3
   local.get $1
   i32.load offset=160
   i32.load
   i32.load offset=4
   local.get $5
   i32.const 2
   i32.shl
   i32.add
   i32.load
   i64.extend_i32_u
   local.set $2
   local.get $5
   local.get $1
   i32.load offset=108
   i32.shr_s
   i32.const 1
   i32.sub
   local.tee $6
   i32.const 0
   i32.lt_s
   if
    i32.const 0
    local.set $6
    local.get $3
    local.get $1
    i32.load offset=116
    i32.sub
    local.set $3
   end
   local.get $0
   local.get $2
   local.get $3
   i64.extend_i32_s
   local.get $6
   local.get $1
   i32.load offset=112
   i32.add
   i64.extend_i32_s
   i64.shl
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#recordCountAtValue
   loop $for-loop|1
    local.get $7
    local.get $5
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $7
     i32.const 2
     i32.shl
     i32.add
     i32.load
     i64.extend_i32_u
     local.tee $4
     local.set $2
     local.get $4
     i64.const 0
     i64.gt_u
     if
      local.get $1
      i32.load offset=116
      local.get $7
      local.get $1
      i32.load offset=116
      i32.const 1
      i32.sub
      i32.and
      i32.add
      local.set $3
      local.get $7
      local.get $1
      i32.load offset=108
      i32.shr_s
      i32.const 1
      i32.sub
      local.tee $6
      i32.const 0
      i32.lt_s
      if
       i32.const 0
       local.set $6
       local.get $3
       local.get $1
       i32.load offset=116
       i32.sub
       local.set $3
      end
      local.get $0
      local.get $2
      local.get $3
      i64.extend_i32_s
      local.get $6
      local.get $1
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shl
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#recordCountAtValue
     end
     local.get $7
     i32.const 1
     i32.add
     local.set $7
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=64
  local.tee $2
  local.get $1
  i64.load offset=64
  local.tee $4
  local.get $2
  local.get $4
  i64.lt_u
  select
  i64.store offset=64
  local.get $0
  local.get $0
  i64.load offset=72
  local.tee $2
  local.get $1
  i64.load offset=72
  local.tee $4
  local.get $2
  local.get $4
  i64.gt_u
  select
  i64.store offset=72
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#addHistogram32 (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#add<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#add<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i32)
  (local $4 i64)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $5
   local.get $3
   local.get $5
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $0
  i32.load offset=116
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $5
  local.get $0
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  i32.add
  local.set $3
  local.get $5
  local.get $0
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.tee $5
  i32.const 0
  i32.lt_s
  if
   i32.const 0
   local.set $5
   local.get $3
   local.get $0
   i32.load offset=116
   i32.sub
   local.set $3
  end
  local.get $0
  i32.load offset=104
  local.get $3
  i64.extend_i32_s
  local.get $5
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  local.tee $2
  local.get $0
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  local.set $3
  local.get $2
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shr_u
  i32.wrap_i64
  i64.extend_i32_s
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.const 1
  local.get $0
  i32.load offset=112
  local.get $0
  i32.load offset=104
  local.get $2
  local.get $0
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.add
  i64.const 1
  i64.sub
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 14000
    i32.const 9952
    i32.const 639
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   loop $for-loop|0
    local.get $6
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $6
     i32.const 3
     i32.shl
     i32.add
     i64.load
     local.tee $2
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $6
      local.get $2
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#addToCountAtIndex
      local.get $2
      local.get $4
      i64.add
      local.set $4
     end
     local.get $6
     i32.const 1
     i32.add
     local.set $6
     br $for-loop|0
    end
   end
   local.get $0
   local.get $4
   local.get $0
   i64.load offset=168
   i64.add
   i64.store offset=168
   local.get $0
   local.get $0
   i64.load offset=136
   local.get $0
   i64.load offset=144
   local.tee $2
   local.get $1
   i64.load offset=144
   local.tee $4
   local.get $2
   local.get $4
   i64.gt_u
   select
   i64.add
   i64.store offset=144
   local.get $0
   i64.load offset=152
   local.tee $2
   local.get $1
   i64.load offset=152
   local.tee $4
   local.get $2
   local.get $4
   i64.lt_u
   select
   local.tee $2
   local.get $0
   i64.load offset=136
   i64.gt_u
   if
    local.get $0
    local.get $2
    local.get $0
    i64.load offset=136
    i64.const -1
    i64.xor
    i64.and
    i64.store offset=152
   end
  else
   local.get $1
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex
   local.set $5
   local.get $1
   i32.load offset=116
   local.get $5
   local.get $1
   i32.load offset=116
   i32.const 1
   i32.sub
   i32.and
   i32.add
   local.set $3
   local.get $1
   i32.load offset=160
   i32.load
   i32.load offset=4
   local.get $5
   i32.const 3
   i32.shl
   i32.add
   i64.load
   local.set $2
   local.get $5
   local.get $1
   i32.load offset=108
   i32.shr_s
   i32.const 1
   i32.sub
   local.tee $6
   i32.const 0
   i32.lt_s
   if
    i32.const 0
    local.set $6
    local.get $3
    local.get $1
    i32.load offset=116
    i32.sub
    local.set $3
   end
   local.get $0
   local.get $2
   local.get $3
   i64.extend_i32_s
   local.get $6
   local.get $1
   i32.load offset=112
   i32.add
   i64.extend_i32_s
   i64.shl
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#recordCountAtValue
   loop $for-loop|1
    local.get $7
    local.get $5
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $7
     i32.const 3
     i32.shl
     i32.add
     i64.load
     local.tee $4
     local.set $2
     local.get $4
     i64.const 0
     i64.gt_u
     if
      local.get $1
      i32.load offset=116
      local.get $7
      local.get $1
      i32.load offset=116
      i32.const 1
      i32.sub
      i32.and
      i32.add
      local.set $3
      local.get $7
      local.get $1
      i32.load offset=108
      i32.shr_s
      i32.const 1
      i32.sub
      local.tee $6
      i32.const 0
      i32.lt_s
      if
       i32.const 0
       local.set $6
       local.get $3
       local.get $1
       i32.load offset=116
       i32.sub
       local.set $3
      end
      local.get $0
      local.get $2
      local.get $3
      i64.extend_i32_s
      local.get $6
      local.get $1
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shl
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#recordCountAtValue
     end
     local.get $7
     i32.const 1
     i32.add
     local.set $7
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=64
  local.tee $2
  local.get $1
  i64.load offset=64
  local.tee $4
  local.get $2
  local.get $4
  i64.lt_u
  select
  i64.store offset=64
  local.get $0
  local.get $0
  i64.load offset=72
  local.tee $2
  local.get $1
  i64.load offset=72
  local.tee $4
  local.get $2
  local.get $4
  i64.gt_u
  select
  i64.store offset=72
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#addHistogram64 (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#add<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#add<assembly/packedarray/PackedArray/PackedArray,u64> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i32)
  (local $4 i64)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $5
   local.get $3
   local.get $5
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $0
  i32.load offset=116
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $5
  local.get $0
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  i32.add
  local.set $3
  local.get $5
  local.get $0
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.tee $5
  i32.const 0
  i32.lt_s
  if
   i32.const 0
   local.set $5
   local.get $3
   local.get $0
   i32.load offset=116
   i32.sub
   local.set $3
  end
  local.get $0
  i32.load offset=104
  local.get $3
  i64.extend_i32_s
  local.get $5
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  local.tee $2
  local.get $0
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  local.set $3
  local.get $2
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shr_u
  i32.wrap_i64
  i64.extend_i32_s
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.const 1
  local.get $0
  i32.load offset=112
  local.get $0
  i32.load offset=104
  local.get $2
  local.get $0
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
  i32.add
  i64.extend_i32_s
  i64.shl
  i64.add
  i64.const 1
  i64.sub
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 14000
    i32.const 9952
    i32.const 639
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   loop $for-loop|0
    local.get $6
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     local.get $6
     call $assembly/packedarray/PackedArray/PackedArray#get
     local.tee $2
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $6
      local.get $2
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#addToCountAtIndex
      local.get $2
      local.get $4
      i64.add
      local.set $4
     end
     local.get $6
     i32.const 1
     i32.add
     local.set $6
     br $for-loop|0
    end
   end
   local.get $0
   local.get $4
   local.get $0
   i64.load offset=168
   i64.add
   i64.store offset=168
   local.get $0
   local.get $0
   i64.load offset=136
   local.get $0
   i64.load offset=144
   local.tee $2
   local.get $1
   i64.load offset=144
   local.tee $4
   local.get $2
   local.get $4
   i64.gt_u
   select
   i64.add
   i64.store offset=144
   local.get $0
   i64.load offset=152
   local.tee $2
   local.get $1
   i64.load offset=152
   local.tee $4
   local.get $2
   local.get $4
   i64.lt_u
   select
   local.tee $2
   local.get $0
   i64.load offset=136
   i64.gt_u
   if
    local.get $0
    local.get $2
    local.get $0
    i64.load offset=136
    i64.const -1
    i64.xor
    i64.and
    i64.store offset=152
   end
  else
   local.get $1
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex
   local.set $5
   local.get $1
   i32.load offset=160
   local.get $5
   call $assembly/packedarray/PackedArray/PackedArray#get
   local.set $2
   local.get $1
   i32.load offset=116
   local.get $5
   local.get $1
   i32.load offset=116
   i32.const 1
   i32.sub
   i32.and
   i32.add
   local.set $3
   local.get $5
   local.get $1
   i32.load offset=108
   i32.shr_s
   i32.const 1
   i32.sub
   local.tee $6
   i32.const 0
   i32.lt_s
   if
    i32.const 0
    local.set $6
    local.get $3
    local.get $1
    i32.load offset=116
    i32.sub
    local.set $3
   end
   local.get $0
   local.get $2
   local.get $3
   i64.extend_i32_s
   local.get $6
   local.get $1
   i32.load offset=112
   i32.add
   i64.extend_i32_s
   i64.shl
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#recordCountAtValue
   loop $for-loop|1
    local.get $7
    local.get $5
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     local.get $7
     call $assembly/packedarray/PackedArray/PackedArray#get
     local.tee $4
     local.set $2
     local.get $4
     i64.const 0
     i64.gt_u
     if
      local.get $1
      i32.load offset=116
      local.get $7
      local.get $1
      i32.load offset=116
      i32.const 1
      i32.sub
      i32.and
      i32.add
      local.set $3
      local.get $7
      local.get $1
      i32.load offset=108
      i32.shr_s
      i32.const 1
      i32.sub
      local.tee $6
      i32.const 0
      i32.lt_s
      if
       i32.const 0
       local.set $6
       local.get $3
       local.get $1
       i32.load offset=116
       i32.sub
       local.set $3
      end
      local.get $0
      local.get $2
      local.get $3
      i64.extend_i32_s
      local.get $6
      local.get $1
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shl
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#recordCountAtValue
     end
     local.get $7
     i32.const 1
     i32.add
     local.set $7
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=64
  local.tee $2
  local.get $1
  i64.load offset=64
  local.tee $4
  local.get $2
  local.get $4
  i64.lt_u
  select
  i64.store offset=64
  local.get $0
  local.get $0
  i64.load offset=72
  local.tee $2
  local.get $1
  i64.load offset=72
  local.tee $4
  local.get $2
  local.get $4
  i64.gt_u
  select
  i64.store offset=72
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#addPackedHistogram (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#add<assembly/packedarray/PackedArray/PackedArray,u64>
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtValue (param $0 i32) (param $1 i64) (result i64)
  (local $2 i32)
  i32.const 0
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex
  local.tee $2
  i32.const 0
  local.get $2
  i32.gt_s
  select
  local.set $2
  local.get $0
  i32.load offset=160
  local.get $2
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $0
  local.get $2
  local.get $0
  i32.lt_s
  select
  call $assembly/packedarray/PackedArray/PackedArray#get
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#establishInternalTackingValues (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i64)
  (local $5 i64)
  (local $6 i32)
  local.get $0
  i64.const 0
  i64.store offset=144
  local.get $0
  i64.const -1
  i64.store offset=152
  i32.const -1
  local.set $2
  i32.const -1
  local.set $6
  loop $for-loop|0
   local.get $3
   local.get $1
   i32.lt_s
   if
    local.get $0
    i32.load offset=160
    local.get $3
    call $assembly/packedarray/PackedArray/PackedArray#get
    local.tee $5
    i64.const 0
    i64.gt_u
    if
     local.get $4
     local.get $5
     i64.add
     local.set $4
     local.get $3
     local.get $6
     local.get $3
     i32.const 0
     local.get $6
     i32.const -1
     i32.eq
     select
     select
     local.set $6
     local.get $3
     local.set $2
    end
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|0
   end
  end
  local.get $2
  i32.const 0
  i32.ge_s
  if
   local.get $0
   i32.load offset=116
   local.get $2
   local.get $0
   i32.load offset=116
   i32.const 1
   i32.sub
   i32.and
   i32.add
   local.set $3
   local.get $2
   local.get $0
   i32.load offset=108
   i32.shr_s
   i32.const 1
   i32.sub
   local.tee $2
   i32.const 0
   i32.lt_s
   if
    local.get $3
    local.get $0
    i32.load offset=116
    i32.sub
    local.set $3
    i32.const 0
    local.set $2
   end
   local.get $0
   i32.load offset=104
   local.get $3
   i64.extend_i32_s
   local.get $2
   local.get $0
   i32.load offset=112
   i32.add
   i64.extend_i32_s
   i64.shl
   local.tee $5
   local.get $0
   i64.load offset=128
   i64.or
   i64.clz
   i32.wrap_i64
   i32.sub
   local.set $2
   local.get $0
   local.get $0
   i64.load offset=136
   local.get $5
   local.get $2
   local.get $0
   i32.load offset=112
   i32.add
   i64.extend_i32_s
   i64.shr_u
   i32.wrap_i64
   i64.extend_i32_s
   local.get $2
   local.get $0
   i32.load offset=112
   i32.add
   i64.extend_i32_s
   i64.shl
   i64.const 1
   local.get $0
   i32.load offset=112
   local.get $0
   i32.load offset=104
   local.get $5
   local.get $0
   i64.load offset=128
   i64.or
   i64.clz
   i32.wrap_i64
   i32.sub
   i32.add
   i64.extend_i32_s
   i64.shl
   i64.add
   i64.const 1
   i64.sub
   i64.add
   i64.store offset=144
  end
  local.get $6
  i32.const 0
  i32.ge_s
  if
   block $__inlined_func$assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#updateMinNonZeroValue
    local.get $0
    i32.load offset=116
    local.get $6
    local.get $0
    i32.load offset=116
    i32.const 1
    i32.sub
    i32.and
    i32.add
    local.set $1
    local.get $6
    local.get $0
    i32.load offset=108
    i32.shr_s
    i32.const 1
    i32.sub
    local.tee $3
    i32.const 0
    i32.lt_s
    if
     i32.const 0
     local.set $3
     local.get $1
     local.get $0
     i32.load offset=116
     i32.sub
     local.set $1
    end
    local.get $1
    i64.extend_i32_s
    local.get $3
    local.get $0
    i32.load offset=112
    i32.add
    i64.extend_i32_s
    i64.shl
    local.tee $5
    local.get $0
    i64.load offset=136
    i64.le_u
    br_if $__inlined_func$assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#updateMinNonZeroValue
    local.get $0
    local.get $5
    local.get $0
    i64.load offset=136
    i64.const -1
    i64.xor
    i64.and
    i64.store offset=152
   end
  end
  local.get $0
  local.get $4
  i64.store offset=168
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#establishInternalTackingValues@varargs (param $0 i32)
  (local $1 i32)
  block $1of1
   block $0of1
    block $outOfRange
     global.get $~argumentsLength
     br_table $0of1 $1of1 $outOfRange
    end
    unreachable
   end
   local.get $0
   i32.load offset=52
   local.set $1
  end
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#establishInternalTackingValues
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8> (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i64)
  (local $6 i64)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $4
   i32.load offset=4
   local.set $3
   local.get $4
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $4
   i32.load
   drop
  end
  local.get $0
  i32.load offset=116
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $3
  local.get $0
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  i32.add
  local.set $4
  local.get $3
  local.get $0
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.tee $3
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 0
   local.set $3
   local.get $4
   local.get $0
   i32.load offset=116
   i32.sub
  else
   local.get $4
  end
  i64.extend_i32_s
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 14000
    i32.const 9952
    i32.const 748
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   loop $for-loop|0
    local.get $2
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $2
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     i32.add
     i32.load8_u
     i64.extend_i32_u
     local.tee $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $2
      i64.const 0
      local.get $6
      i64.sub
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#addToCountAtIndex
      local.get $5
      local.get $6
      i64.add
      local.set $5
     end
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $5
   i64.sub
   i64.store offset=168
  else
   loop $for-loop|1
    local.get $2
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $2
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     i32.add
     i32.load8_u
     i64.extend_i32_u
     local.tee $6
     i64.const 0
     i64.gt_u
     if
      local.get $1
      i32.load offset=116
      local.get $2
      local.get $1
      i32.load offset=116
      i32.const 1
      i32.sub
      i32.and
      i32.add
      local.set $4
      local.get $0
      local.get $2
      local.get $1
      i32.load offset=108
      i32.shr_s
      i32.const 1
      i32.sub
      local.tee $3
      i32.const 0
      i32.lt_s
      if (result i32)
       i32.const 0
       local.set $3
       local.get $4
       local.get $1
       i32.load offset=116
       i32.sub
      else
       local.get $4
      end
      i64.extend_i32_s
      local.get $3
      local.get $1
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shl
      local.tee $5
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtValue
      local.get $6
      i64.lt_u
      if
       i32.const 14608
       local.get $6
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14672
       call $~lib/string/String.__concat
       local.get $5
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14720
       call $~lib/string/String.__concat
       local.get $0
       local.get $5
       call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtValue
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14800
       call $~lib/string/String.__concat
       i32.const 9952
       i32.const 777
       i32.const 13
       call $~lib/builtins/abort
       unreachable
      end
      local.get $0
      i64.const 0
      local.get $6
      i64.sub
      local.get $5
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#recordCountAtValue
     end
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=144
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtValue
  i64.const 0
  i64.le_u
  if (result i32)
   i32.const 1
  else
   local.get $0
   local.get $0
   i64.load offset=152
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtValue
   i64.const 0
   i64.le_u
  end
  if
   i32.const 0
   global.set $~argumentsLength
   local.get $0
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#establishInternalTackingValues@varargs
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#subtractHistogram8 (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16> (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i64)
  (local $6 i64)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $4
   i32.load offset=4
   local.set $3
   local.get $4
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $4
   i32.load
   drop
  end
  local.get $0
  i32.load offset=116
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $3
  local.get $0
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  i32.add
  local.set $4
  local.get $3
  local.get $0
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.tee $3
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 0
   local.set $3
   local.get $4
   local.get $0
   i32.load offset=116
   i32.sub
  else
   local.get $4
  end
  i64.extend_i32_s
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 14000
    i32.const 9952
    i32.const 748
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   loop $for-loop|0
    local.get $2
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $2
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u
     i64.extend_i32_u
     local.tee $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $2
      i64.const 0
      local.get $6
      i64.sub
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#addToCountAtIndex
      local.get $5
      local.get $6
      i64.add
      local.set $5
     end
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $5
   i64.sub
   i64.store offset=168
  else
   loop $for-loop|1
    local.get $2
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $2
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u
     i64.extend_i32_u
     local.tee $6
     i64.const 0
     i64.gt_u
     if
      local.get $1
      i32.load offset=116
      local.get $2
      local.get $1
      i32.load offset=116
      i32.const 1
      i32.sub
      i32.and
      i32.add
      local.set $4
      local.get $0
      local.get $2
      local.get $1
      i32.load offset=108
      i32.shr_s
      i32.const 1
      i32.sub
      local.tee $3
      i32.const 0
      i32.lt_s
      if (result i32)
       i32.const 0
       local.set $3
       local.get $4
       local.get $1
       i32.load offset=116
       i32.sub
      else
       local.get $4
      end
      i64.extend_i32_s
      local.get $3
      local.get $1
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shl
      local.tee $5
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtValue
      local.get $6
      i64.lt_u
      if
       i32.const 14608
       local.get $6
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14672
       call $~lib/string/String.__concat
       local.get $5
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14720
       call $~lib/string/String.__concat
       local.get $0
       local.get $5
       call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtValue
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14800
       call $~lib/string/String.__concat
       i32.const 9952
       i32.const 777
       i32.const 13
       call $~lib/builtins/abort
       unreachable
      end
      local.get $0
      i64.const 0
      local.get $6
      i64.sub
      local.get $5
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#recordCountAtValue
     end
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=144
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtValue
  i64.const 0
  i64.le_u
  if (result i32)
   i32.const 1
  else
   local.get $0
   local.get $0
   i64.load offset=152
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtValue
   i64.const 0
   i64.le_u
  end
  if
   i32.const 0
   global.set $~argumentsLength
   local.get $0
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#establishInternalTackingValues@varargs
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#subtractHistogram16 (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32> (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i64)
  (local $6 i64)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $4
   i32.load offset=4
   local.set $3
   local.get $4
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $4
   i32.load
   drop
  end
  local.get $0
  i32.load offset=116
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $3
  local.get $0
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  i32.add
  local.set $4
  local.get $3
  local.get $0
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.tee $3
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 0
   local.set $3
   local.get $4
   local.get $0
   i32.load offset=116
   i32.sub
  else
   local.get $4
  end
  i64.extend_i32_s
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 14000
    i32.const 9952
    i32.const 748
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   loop $for-loop|0
    local.get $2
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $2
     i32.const 2
     i32.shl
     i32.add
     i32.load
     i64.extend_i32_u
     local.tee $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $2
      i64.const 0
      local.get $6
      i64.sub
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#addToCountAtIndex
      local.get $5
      local.get $6
      i64.add
      local.set $5
     end
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $5
   i64.sub
   i64.store offset=168
  else
   loop $for-loop|1
    local.get $2
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $2
     i32.const 2
     i32.shl
     i32.add
     i32.load
     i64.extend_i32_u
     local.tee $6
     i64.const 0
     i64.gt_u
     if
      local.get $1
      i32.load offset=116
      local.get $2
      local.get $1
      i32.load offset=116
      i32.const 1
      i32.sub
      i32.and
      i32.add
      local.set $4
      local.get $0
      local.get $2
      local.get $1
      i32.load offset=108
      i32.shr_s
      i32.const 1
      i32.sub
      local.tee $3
      i32.const 0
      i32.lt_s
      if (result i32)
       i32.const 0
       local.set $3
       local.get $4
       local.get $1
       i32.load offset=116
       i32.sub
      else
       local.get $4
      end
      i64.extend_i32_s
      local.get $3
      local.get $1
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shl
      local.tee $5
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtValue
      local.get $6
      i64.lt_u
      if
       i32.const 14608
       local.get $6
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14672
       call $~lib/string/String.__concat
       local.get $5
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14720
       call $~lib/string/String.__concat
       local.get $0
       local.get $5
       call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtValue
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14800
       call $~lib/string/String.__concat
       i32.const 9952
       i32.const 777
       i32.const 13
       call $~lib/builtins/abort
       unreachable
      end
      local.get $0
      i64.const 0
      local.get $6
      i64.sub
      local.get $5
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#recordCountAtValue
     end
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=144
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtValue
  i64.const 0
  i64.le_u
  if (result i32)
   i32.const 1
  else
   local.get $0
   local.get $0
   i64.load offset=152
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtValue
   i64.const 0
   i64.le_u
  end
  if
   i32.const 0
   global.set $~argumentsLength
   local.get $0
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#establishInternalTackingValues@varargs
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#subtractHistogram32 (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64> (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i64)
  (local $6 i64)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $4
   i32.load offset=4
   local.set $3
   local.get $4
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $4
   i32.load
   drop
  end
  local.get $0
  i32.load offset=116
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $3
  local.get $0
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  i32.add
  local.set $4
  local.get $3
  local.get $0
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.tee $3
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 0
   local.set $3
   local.get $4
   local.get $0
   i32.load offset=116
   i32.sub
  else
   local.get $4
  end
  i64.extend_i32_s
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 14000
    i32.const 9952
    i32.const 748
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   loop $for-loop|0
    local.get $2
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $2
     i32.const 3
     i32.shl
     i32.add
     i64.load
     local.tee $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $2
      i64.const 0
      local.get $6
      i64.sub
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#addToCountAtIndex
      local.get $5
      local.get $6
      i64.add
      local.set $5
     end
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $5
   i64.sub
   i64.store offset=168
  else
   loop $for-loop|1
    local.get $2
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $2
     i32.const 3
     i32.shl
     i32.add
     i64.load
     local.tee $6
     i64.const 0
     i64.gt_u
     if
      local.get $1
      i32.load offset=116
      local.get $2
      local.get $1
      i32.load offset=116
      i32.const 1
      i32.sub
      i32.and
      i32.add
      local.set $4
      local.get $0
      local.get $2
      local.get $1
      i32.load offset=108
      i32.shr_s
      i32.const 1
      i32.sub
      local.tee $3
      i32.const 0
      i32.lt_s
      if (result i32)
       i32.const 0
       local.set $3
       local.get $4
       local.get $1
       i32.load offset=116
       i32.sub
      else
       local.get $4
      end
      i64.extend_i32_s
      local.get $3
      local.get $1
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shl
      local.tee $5
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtValue
      local.get $6
      i64.lt_u
      if
       i32.const 14608
       local.get $6
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14672
       call $~lib/string/String.__concat
       local.get $5
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14720
       call $~lib/string/String.__concat
       local.get $0
       local.get $5
       call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtValue
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14800
       call $~lib/string/String.__concat
       i32.const 9952
       i32.const 777
       i32.const 13
       call $~lib/builtins/abort
       unreachable
      end
      local.get $0
      i64.const 0
      local.get $6
      i64.sub
      local.get $5
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#recordCountAtValue
     end
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=144
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtValue
  i64.const 0
  i64.le_u
  if (result i32)
   i32.const 1
  else
   local.get $0
   local.get $0
   i64.load offset=152
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtValue
   i64.const 0
   i64.le_u
  end
  if
   i32.const 0
   global.set $~argumentsLength
   local.get $0
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#establishInternalTackingValues@varargs
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#subtractHistogram64 (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#subtract<assembly/packedarray/PackedArray/PackedArray,u64> (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i64)
  (local $6 i64)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $4
   i32.load offset=4
   local.set $3
   local.get $4
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $4
   i32.load
   drop
  end
  local.get $0
  i32.load offset=116
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $3
  local.get $0
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  i32.add
  local.set $4
  local.get $3
  local.get $0
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.tee $3
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 0
   local.set $3
   local.get $4
   local.get $0
   i32.load offset=116
   i32.sub
  else
   local.get $4
  end
  i64.extend_i32_s
  local.get $3
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 14000
    i32.const 9952
    i32.const 748
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   loop $for-loop|0
    local.get $2
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     local.get $2
     call $assembly/packedarray/PackedArray/PackedArray#get
     local.tee $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $2
      i64.const 0
      local.get $6
      i64.sub
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#addToCountAtIndex
      local.get $5
      local.get $6
      i64.add
      local.set $5
     end
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $5
   i64.sub
   i64.store offset=168
  else
   loop $for-loop|1
    local.get $2
    local.get $1
    i32.load offset=52
    i32.lt_s
    if
     local.get $1
     i32.load offset=160
     local.get $2
     call $assembly/packedarray/PackedArray/PackedArray#get
     local.tee $6
     i64.const 0
     i64.gt_u
     if
      local.get $1
      i32.load offset=116
      local.get $2
      local.get $1
      i32.load offset=116
      i32.const 1
      i32.sub
      i32.and
      i32.add
      local.set $4
      local.get $0
      local.get $2
      local.get $1
      i32.load offset=108
      i32.shr_s
      i32.const 1
      i32.sub
      local.tee $3
      i32.const 0
      i32.lt_s
      if (result i32)
       i32.const 0
       local.set $3
       local.get $4
       local.get $1
       i32.load offset=116
       i32.sub
      else
       local.get $4
      end
      i64.extend_i32_s
      local.get $3
      local.get $1
      i32.load offset=112
      i32.add
      i64.extend_i32_s
      i64.shl
      local.tee $5
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtValue
      local.get $6
      i64.lt_u
      if
       i32.const 14608
       local.get $6
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14672
       call $~lib/string/String.__concat
       local.get $5
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14720
       call $~lib/string/String.__concat
       local.get $0
       local.get $5
       call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtValue
       call $~lib/util/number/utoa64
       call $~lib/string/String.__concat
       i32.const 14800
       call $~lib/string/String.__concat
       i32.const 9952
       i32.const 777
       i32.const 13
       call $~lib/builtins/abort
       unreachable
      end
      local.get $0
      i64.const 0
      local.get $6
      i64.sub
      local.get $5
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#recordCountAtValue
     end
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=144
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtValue
  i64.const 0
  i64.le_u
  if (result i32)
   i32.const 1
  else
   local.get $0
   local.get $0
   i64.load offset=152
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtValue
   i64.const 0
   i64.le_u
  end
  if
   i32.const 0
   global.set $~argumentsLength
   local.get $0
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#establishInternalTackingValues@varargs
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#subtractPackedHistogram (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#subtract<assembly/packedarray/PackedArray/PackedArray,u64>
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/encoding/fillBufferFromCountsArray<assembly/packedarray/PackedArray/PackedArray,u64> (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i64)
  (local $6 i32)
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $4
   local.get $2
   local.get $4
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  local.set $2
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $0
   i32.load offset=4
   local.set $4
   local.get $0
   local.get $4
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $0
   i32.load
   drop
  end
  local.get $2
  local.get $2
  i64.load offset=144
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex
  i32.const 1
  i32.add
  local.set $4
  loop $while-continue|0
   local.get $3
   local.get $4
   i32.lt_s
   if
    local.get $3
    local.tee $0
    i32.const 1
    i32.add
    local.set $3
    local.get $2
    i32.load offset=160
    local.get $0
    call $assembly/packedarray/PackedArray/PackedArray#get
    local.tee $5
    i64.const 0
    i64.lt_u
    if
     i32.const 14832
     local.get $5
     call $~lib/util/number/utoa64
     call $~lib/string/String.__concat
     i32.const 14960
     call $~lib/string/String.__concat
     local.get $3
     call $~lib/util/number/itoa32
     call $~lib/string/String.__concat
     i32.const 15008
     call $~lib/string/String.__concat
     local.get $2
     i32.load offset=116
     local.get $3
     local.get $2
     i32.load offset=116
     i32.const 1
     i32.sub
     i32.and
     i32.add
     local.set $0
     local.get $2
     i32.load offset=104
     local.get $3
     local.get $2
     i32.load offset=108
     i32.shr_s
     i32.const 1
     i32.sub
     local.tee $1
     i32.const 0
     i32.lt_s
     if
      i32.const 0
      local.set $1
      local.get $0
      local.get $2
      i32.load offset=116
      i32.sub
      local.set $0
     end
     local.get $0
     i64.extend_i32_s
     local.get $1
     local.get $2
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shl
     local.tee $5
     local.get $2
     i64.load offset=128
     i64.or
     i64.clz
     i32.wrap_i64
     i32.sub
     local.set $0
     local.get $5
     local.get $0
     local.get $2
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shr_u
     i32.wrap_i64
     i64.extend_i32_s
     local.get $0
     local.get $2
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shl
     call $~lib/util/number/utoa64
     call $~lib/string/String.__concat
     i32.const 15104
     call $~lib/string/String.__concat
     local.get $2
     i32.load offset=116
     local.get $3
     local.get $2
     i32.load offset=116
     i32.const 1
     i32.sub
     i32.and
     i32.add
     local.set $1
     local.get $3
     local.get $2
     local.tee $0
     i32.load offset=108
     i32.shr_s
     i32.const 1
     i32.sub
     local.tee $3
     i32.const 0
     i32.lt_s
     if
      i32.const 0
      local.set $3
      local.get $1
      local.get $0
      i32.load offset=116
      i32.sub
      local.set $1
     end
     local.get $0
     i32.load offset=104
     local.get $1
     i64.extend_i32_s
     local.get $3
     local.get $0
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shl
     local.tee $5
     local.get $0
     i64.load offset=128
     i64.or
     i64.clz
     i32.wrap_i64
     i32.sub
     local.set $1
     local.get $5
     local.get $1
     local.get $0
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shr_u
     i32.wrap_i64
     i64.extend_i32_s
     local.get $1
     local.get $0
     i32.load offset=112
     i32.add
     i64.extend_i32_s
     i64.shl
     i64.const 1
     local.get $0
     i32.load offset=112
     local.get $0
     i32.load offset=104
     local.get $5
     local.get $0
     i64.load offset=128
     i64.or
     i64.clz
     i32.wrap_i64
     i32.sub
     i32.add
     i64.extend_i32_s
     i64.shl
     i64.add
     call $~lib/util/number/utoa64
     call $~lib/string/String.__concat
     i32.const 14800
     call $~lib/string/String.__concat
     i32.const 15136
     i32.const 31
     i32.const 7
     call $~lib/builtins/abort
     unreachable
    end
    i32.const 0
    local.set $0
    local.get $5
    i64.eqz
    if
     i32.const 1
     local.set $0
     loop $while-continue|1
      local.get $3
      local.get $4
      i32.lt_s
      if (result i32)
       local.get $2
       i32.load offset=160
       local.get $3
       call $assembly/packedarray/PackedArray/PackedArray#get
       i64.eqz
      else
       i32.const 0
      end
      if
       local.get $0
       i32.const 1
       i32.add
       local.set $0
       local.get $3
       i32.const 1
       i32.add
       local.set $3
       br $while-continue|1
      end
     end
    end
    local.get $0
    i32.const 1
    i32.gt_s
    if
     local.get $1
     i32.const 0
     local.get $0
     i32.sub
     i64.extend_i32_s
     call $assembly/ZigZagEncoding/ZigZagEncoding.encode
    else
     local.get $1
     local.get $5
     call $assembly/ZigZagEncoding/ZigZagEncoding.encode
    end
    br $while-continue|0
   end
  end
  local.get $2
  i32.const 16700
  i32.gt_u
  if
   local.get $2
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/encoding/encodeIntoByteBuffer<assembly/packedarray/PackedArray/PackedArray,u64> (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $1
  i32.load
  local.set $3
  local.get $1
  i32.const 478450451
  call $assembly/ByteBuffer/ByteBuffer#putInt32
  local.get $1
  i32.const 0
  call $assembly/ByteBuffer/ByteBuffer#putInt32
  local.get $1
  i32.const 1
  call $assembly/ByteBuffer/ByteBuffer#putInt32
  local.get $1
  local.get $0
  i32.load8_u offset=32
  call $assembly/ByteBuffer/ByteBuffer#putInt32
  local.get $1
  local.get $0
  i64.load offset=24
  call $assembly/ByteBuffer/ByteBuffer#putInt64
  local.get $1
  local.get $0
  i64.load offset=16
  call $assembly/ByteBuffer/ByteBuffer#putInt64
  local.get $1
  i64.const 1
  call $assembly/ByteBuffer/ByteBuffer#putInt64
  local.get $1
  i32.load
  local.set $4
  local.get $0
  local.get $1
  call $assembly/encoding/fillBufferFromCountsArray<assembly/packedarray/PackedArray/PackedArray,u64>
  local.get $1
  i32.load
  local.set $2
  local.get $1
  local.get $3
  i32.const 4
  i32.add
  i32.store
  local.get $1
  local.get $2
  local.get $4
  i32.sub
  call $assembly/ByteBuffer/ByteBuffer#putInt32
  local.get $1
  local.get $2
  i32.store
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#encode (param $0 i32) (result i32)
  (local $1 i32)
  local.get $0
  i32.load
  call $assembly/ByteBuffer/ByteBuffer.allocate
  local.tee $0
  call $assembly/encoding/encodeIntoByteBuffer<assembly/packedarray/PackedArray/PackedArray,u64>
  local.get $0
  i32.load offset=4
  i32.const 0
  local.get $0
  i32.load
  call $~lib/typedarray/Uint8Array#slice
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#reset (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load
  local.tee $0
  i32.load offset=160
  i32.load
  local.tee $1
  i32.load offset=12
  call $~lib/typedarray/Uint8Array#fill
  local.tee $2
  i32.const 16700
  i32.gt_u
  if
   local.get $2
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $1
  local.get $1
  i32.load offset=28
  call $assembly/packedarray/PackedArrayContext/PackedArrayContext#init
  local.get $0
  i64.const 0
  i64.store offset=168
  local.get $0
  i64.const 0
  i64.store offset=64
  local.get $0
  i64.const 0
  i64.store offset=72
  local.get $0
  i64.const 0
  i64.store offset=144
  local.get $0
  i64.const -1
  i64.store offset=152
 )
 (func $assembly/ByteBuffer/ByteBuffer#getInt32 (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  i32.load offset=16
  local.get $0
  i32.load offset=4
  local.get $0
  i32.load
  local.get $0
  i32.load
  i32.const 4
  i32.add
  call $~lib/typedarray/Uint8Array#slice
  local.tee $1
  call $~lib/typedarray/Uint8Array#reverse
  local.tee $2
  i32.const 0
  call $~lib/typedarray/Uint8Array#set<~lib/typedarray/Uint8Array>
  local.get $0
  i32.load offset=12
  i32.load offset=4
  i32.load
  local.get $0
  local.get $0
  i32.load
  i32.const 4
  i32.add
  i32.store
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $2
  i32.const 16700
  i32.gt_u
  if
   local.get $2
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/ByteBuffer/ByteBuffer#getInt64 (param $0 i32) (result i64)
  (local $1 i32)
  (local $2 i32)
  (local $3 i64)
  local.get $0
  i32.load offset=20
  local.get $0
  i32.load offset=4
  local.get $0
  i32.load
  local.get $0
  i32.load
  i32.const 8
  i32.add
  call $~lib/typedarray/Uint8Array#slice
  local.tee $1
  call $~lib/typedarray/Uint8Array#reverse
  local.tee $2
  i32.const 0
  call $~lib/typedarray/Uint8Array#set<~lib/typedarray/Uint8Array>
  local.get $0
  i32.load offset=8
  i32.load offset=4
  i64.load
  local.get $0
  local.get $0
  i32.load
  i32.const 8
  i32.add
  i32.store
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $2
  i32.const 16700
  i32.gt_u
  if
   local.get $2
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/ZigZagEncoding/ZigZagEncoding.decode (param $0 i32) (result i64)
  (local $1 i32)
  (local $2 i64)
  (local $3 i64)
  (local $4 i32)
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $4
   i32.load offset=4
   local.set $1
   local.get $4
   local.get $1
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $4
   i32.load
   drop
  end
  local.get $0
  i32.load
  local.get $0
  i32.load offset=4
  i32.load offset=4
  i32.add
  i32.load8_u
  local.get $0
  local.get $0
  i32.load
  i32.const 1
  i32.add
  i32.store
  i64.extend_i32_u
  local.tee $3
  i64.const 127
  i64.and
  local.set $2
  local.get $3
  i64.const 128
  i64.and
  i64.const 0
  i64.ne
  if
   local.get $0
   i32.load
   local.get $0
   i32.load offset=4
   i32.load offset=4
   i32.add
   i32.load8_u
   local.set $1
   local.get $0
   local.get $0
   i32.load
   i32.const 1
   i32.add
   i32.store
   local.get $2
   local.get $1
   i64.extend_i32_u
   local.tee $3
   i64.const 127
   i64.and
   i64.const 7
   i64.shl
   i64.or
   local.set $2
   local.get $3
   i64.const 128
   i64.and
   i64.const 0
   i64.ne
   if
    local.get $0
    i32.load
    local.get $0
    i32.load offset=4
    i32.load offset=4
    i32.add
    i32.load8_u
    local.set $1
    local.get $0
    local.get $0
    i32.load
    i32.const 1
    i32.add
    i32.store
    local.get $2
    local.get $1
    i64.extend_i32_u
    local.tee $3
    i64.const 127
    i64.and
    i64.const 14
    i64.shl
    i64.or
    local.set $2
    local.get $3
    i64.const 128
    i64.and
    i64.const 0
    i64.ne
    if
     local.get $0
     i32.load
     local.get $0
     i32.load offset=4
     i32.load offset=4
     i32.add
     i32.load8_u
     local.set $1
     local.get $0
     local.get $0
     i32.load
     i32.const 1
     i32.add
     i32.store
     local.get $2
     local.get $1
     i64.extend_i32_u
     local.tee $3
     i64.const 127
     i64.and
     i64.const 21
     i64.shl
     i64.or
     local.set $2
     local.get $3
     i64.const 128
     i64.and
     i64.const 0
     i64.ne
     if
      local.get $0
      i32.load
      local.get $0
      i32.load offset=4
      i32.load offset=4
      i32.add
      i32.load8_u
      local.set $1
      local.get $0
      local.get $0
      i32.load
      i32.const 1
      i32.add
      i32.store
      local.get $2
      local.get $1
      i64.extend_i32_u
      local.tee $3
      i64.const 127
      i64.and
      i64.const 28
      i64.shl
      i64.or
      local.set $2
      local.get $3
      i64.const 128
      i64.and
      i64.const 0
      i64.ne
      if
       local.get $0
       i32.load
       local.get $0
       i32.load offset=4
       i32.load offset=4
       i32.add
       i32.load8_u
       local.set $1
       local.get $0
       local.get $0
       i32.load
       i32.const 1
       i32.add
       i32.store
       local.get $2
       local.get $1
       i64.extend_i32_u
       local.tee $3
       i64.const 127
       i64.and
       i64.const 35
       i64.shl
       i64.or
       local.set $2
       local.get $3
       i64.const 128
       i64.and
       i64.const 0
       i64.ne
       if
        local.get $0
        i32.load
        local.get $0
        i32.load offset=4
        i32.load offset=4
        i32.add
        i32.load8_u
        local.set $1
        local.get $0
        local.get $0
        i32.load
        i32.const 1
        i32.add
        i32.store
        local.get $2
        local.get $1
        i64.extend_i32_u
        local.tee $3
        i64.const 127
        i64.and
        i64.const 42
        i64.shl
        i64.or
        local.set $2
        local.get $3
        i64.const 128
        i64.and
        i64.const 0
        i64.ne
        if
         local.get $0
         i32.load
         local.get $0
         i32.load offset=4
         i32.load offset=4
         i32.add
         i32.load8_u
         local.set $1
         local.get $0
         local.get $0
         i32.load
         i32.const 1
         i32.add
         i32.store
         local.get $2
         local.get $1
         i64.extend_i32_u
         local.tee $3
         i64.const 127
         i64.and
         i64.const 49
         i64.shl
         i64.or
         local.set $2
         local.get $3
         i64.const 128
         i64.and
         i64.const 0
         i64.ne
         if
          local.get $0
          i32.load
          local.get $0
          i32.load offset=4
          i32.load offset=4
          i32.add
          i32.load8_u
          local.set $1
          local.get $0
          local.get $0
          i32.load
          i32.const 1
          i32.add
          i32.store
          local.get $2
          local.get $1
          i64.extend_i32_u
          i64.const 56
          i64.shl
          i64.or
          local.set $2
         end
        end
       end
      end
     end
    end
   end
  end
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  i64.const 0
  local.get $2
  i64.const 1
  i64.and
  i64.sub
  local.get $2
  i64.const 1
  i64.shr_u
  i64.xor
 )
 (func $assembly/encoding/fillCountsArrayFromSourceBuffer<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8> (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $5
   local.get $3
   local.get $5
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $5
   local.get $3
   local.get $5
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $2
  local.get $1
  i32.load
  i32.add
  local.set $3
  loop $while-continue|0
   local.get $1
   i32.load
   local.get $3
   i32.lt_s
   if
    local.get $1
    call $assembly/ZigZagEncoding/ZigZagEncoding.decode
    i32.wrap_i64
    local.tee $2
    i32.const 0
    i32.lt_s
    if (result i32)
     local.get $4
     local.get $2
     i32.sub
    else
     local.get $4
     local.get $0
     i32.load offset=160
     i32.load
     i32.load offset=4
     i32.add
     local.get $2
     i64.extend_i32_s
     i64.store8
     local.get $4
     i32.const 1
     i32.add
    end
    local.set $4
    br $while-continue|0
   end
  end
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $4
 )
 (func $assembly/encoding/decodeFromByteBuffer<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8> (param $0 i32) (param $1 i64) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i64)
  (local $5 i32)
  (local $6 i32)
  (local $7 i64)
  (local $8 i32)
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  call $assembly/ByteBuffer/ByteBuffer#getInt32
  local.tee $2
  i32.const -241
  i32.and
  i32.const 478450435
  i32.eq
  if
   block $__inlined_func$assembly/encoding/getWordSizeInBytesFromCookie (result i32)
    i32.const 9
    i32.const 1
    local.get $2
    i32.const -241
    i32.and
    local.tee $3
    i32.const 478450436
    i32.eq
    local.get $3
    i32.const 478450435
    i32.eq
    select
    br_if $__inlined_func$assembly/encoding/getWordSizeInBytesFromCookie
    drop
    local.get $2
    i32.const 240
    i32.and
    i32.const 4
    i32.shr_u
    i32.const 14
    i32.and
   end
   i32.const 9
   i32.ne
   if
    i32.const 15792
    i32.const 15136
    i32.const 153
    i32.const 7
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#getInt32
   local.set $6
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#getInt32
   drop
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#getInt32
   local.set $2
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#getInt64
   local.set $7
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#getInt64
   local.set $4
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#getInt64
   drop
  else
   i32.const 15936
   i32.const 15136
   i32.const 164
   i32.const 5
   call $~lib/builtins/abort
   unreachable
  end
  local.get $7
  local.get $4
  local.get $1
  local.get $4
  local.get $1
  i64.gt_u
  select
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#constructor
  local.tee $3
  local.tee $2
  i32.const 16700
  i32.gt_u
  if
   local.get $2
   i32.const 16
   i32.sub
   local.tee $5
   i32.load offset=4
   local.set $8
   local.get $5
   local.get $8
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $5
   i32.load
   drop
  end
  local.get $2
  local.get $2
  local.get $0
  local.get $6
  call $assembly/encoding/fillCountsArrayFromSourceBuffer<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#establishInternalTackingValues
  local.get $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $2
 )
 (func $assembly/index/decodeHistogram8 (param $0 i32) (param $1 f64) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  local.tee $2
  i32.const 16700
  i32.gt_u
  if
   local.get $2
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $0
   local.get $3
   local.get $0
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  i32.const 0
  f64.const 0
  f64.const 0
  f64.const 0
  i32.const 0
  local.get $2
  call $assembly/ByteBuffer/ByteBuffer#constructor
  local.tee $3
  local.get $1
  i64.trunc_f64_u
  call $assembly/encoding/decodeFromByteBuffer<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>
  local.tee $0
  call $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#constructor
  local.get $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $2
  i32.const 16700
  i32.gt_u
  if
   local.get $2
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $2
  i32.const 16700
  i32.gt_u
  if
   local.get $2
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/encoding/fillCountsArrayFromSourceBuffer<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16> (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $5
   local.get $3
   local.get $5
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $5
   local.get $3
   local.get $5
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $2
  local.get $1
  i32.load
  i32.add
  local.set $3
  loop $while-continue|0
   local.get $1
   i32.load
   local.get $3
   i32.lt_s
   if
    local.get $1
    call $assembly/ZigZagEncoding/ZigZagEncoding.decode
    i32.wrap_i64
    local.tee $2
    i32.const 0
    i32.lt_s
    if (result i32)
     local.get $4
     local.get $2
     i32.sub
    else
     local.get $0
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $4
     i32.const 1
     i32.shl
     i32.add
     local.get $2
     i64.extend_i32_s
     i64.store16
     local.get $4
     i32.const 1
     i32.add
    end
    local.set $4
    br $while-continue|0
   end
  end
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $4
 )
 (func $assembly/encoding/decodeFromByteBuffer<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16> (param $0 i32) (param $1 i64) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i64)
  (local $5 i32)
  (local $6 i32)
  (local $7 i64)
  (local $8 i32)
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  call $assembly/ByteBuffer/ByteBuffer#getInt32
  local.tee $2
  i32.const -241
  i32.and
  i32.const 478450435
  i32.eq
  if
   block $__inlined_func$assembly/encoding/getWordSizeInBytesFromCookie (result i32)
    i32.const 9
    i32.const 1
    local.get $2
    i32.const -241
    i32.and
    local.tee $3
    i32.const 478450436
    i32.eq
    local.get $3
    i32.const 478450435
    i32.eq
    select
    br_if $__inlined_func$assembly/encoding/getWordSizeInBytesFromCookie
    drop
    local.get $2
    i32.const 240
    i32.and
    i32.const 4
    i32.shr_u
    i32.const 14
    i32.and
   end
   i32.const 9
   i32.ne
   if
    i32.const 15792
    i32.const 15136
    i32.const 153
    i32.const 7
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#getInt32
   local.set $6
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#getInt32
   drop
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#getInt32
   local.set $2
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#getInt64
   local.set $7
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#getInt64
   local.set $4
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#getInt64
   drop
  else
   i32.const 15936
   i32.const 15136
   i32.const 164
   i32.const 5
   call $~lib/builtins/abort
   unreachable
  end
  local.get $7
  local.get $4
  local.get $1
  local.get $4
  local.get $1
  i64.gt_u
  select
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#constructor
  local.tee $3
  local.tee $2
  i32.const 16700
  i32.gt_u
  if
   local.get $2
   i32.const 16
   i32.sub
   local.tee $5
   i32.load offset=4
   local.set $8
   local.get $5
   local.get $8
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $5
   i32.load
   drop
  end
  local.get $2
  local.get $2
  local.get $0
  local.get $6
  call $assembly/encoding/fillCountsArrayFromSourceBuffer<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#establishInternalTackingValues
  local.get $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $2
 )
 (func $assembly/index/decodeHistogram16 (param $0 i32) (param $1 f64) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  local.tee $2
  i32.const 16700
  i32.gt_u
  if
   local.get $2
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $0
   local.get $3
   local.get $0
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  i32.const 0
  f64.const 0
  f64.const 0
  f64.const 0
  i32.const 0
  local.get $2
  call $assembly/ByteBuffer/ByteBuffer#constructor
  local.tee $3
  local.get $1
  i64.trunc_f64_u
  call $assembly/encoding/decodeFromByteBuffer<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>
  local.tee $0
  call $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#constructor
  local.get $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $2
  i32.const 16700
  i32.gt_u
  if
   local.get $2
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $2
  i32.const 16700
  i32.gt_u
  if
   local.get $2
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/encoding/fillCountsArrayFromSourceBuffer<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32> (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $5
   local.get $3
   local.get $5
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $5
   local.get $3
   local.get $5
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $2
  local.get $1
  i32.load
  i32.add
  local.set $3
  loop $while-continue|0
   local.get $1
   i32.load
   local.get $3
   i32.lt_s
   if
    local.get $1
    call $assembly/ZigZagEncoding/ZigZagEncoding.decode
    i32.wrap_i64
    local.tee $2
    i32.const 0
    i32.lt_s
    if (result i32)
     local.get $4
     local.get $2
     i32.sub
    else
     local.get $0
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $4
     i32.const 2
     i32.shl
     i32.add
     local.get $2
     i64.extend_i32_s
     i64.store32
     local.get $4
     i32.const 1
     i32.add
    end
    local.set $4
    br $while-continue|0
   end
  end
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $4
 )
 (func $assembly/encoding/decodeFromByteBuffer<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32> (param $0 i32) (param $1 i64) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i64)
  (local $5 i32)
  (local $6 i32)
  (local $7 i64)
  (local $8 i32)
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  call $assembly/ByteBuffer/ByteBuffer#getInt32
  local.tee $2
  i32.const -241
  i32.and
  i32.const 478450435
  i32.eq
  if
   block $__inlined_func$assembly/encoding/getWordSizeInBytesFromCookie (result i32)
    i32.const 9
    i32.const 1
    local.get $2
    i32.const -241
    i32.and
    local.tee $3
    i32.const 478450436
    i32.eq
    local.get $3
    i32.const 478450435
    i32.eq
    select
    br_if $__inlined_func$assembly/encoding/getWordSizeInBytesFromCookie
    drop
    local.get $2
    i32.const 240
    i32.and
    i32.const 4
    i32.shr_u
    i32.const 14
    i32.and
   end
   i32.const 9
   i32.ne
   if
    i32.const 15792
    i32.const 15136
    i32.const 153
    i32.const 7
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#getInt32
   local.set $6
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#getInt32
   drop
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#getInt32
   local.set $2
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#getInt64
   local.set $7
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#getInt64
   local.set $4
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#getInt64
   drop
  else
   i32.const 15936
   i32.const 15136
   i32.const 164
   i32.const 5
   call $~lib/builtins/abort
   unreachable
  end
  local.get $7
  local.get $4
  local.get $1
  local.get $4
  local.get $1
  i64.gt_u
  select
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#constructor
  local.tee $3
  local.tee $2
  i32.const 16700
  i32.gt_u
  if
   local.get $2
   i32.const 16
   i32.sub
   local.tee $5
   i32.load offset=4
   local.set $8
   local.get $5
   local.get $8
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $5
   i32.load
   drop
  end
  local.get $2
  local.get $2
  local.get $0
  local.get $6
  call $assembly/encoding/fillCountsArrayFromSourceBuffer<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#establishInternalTackingValues
  local.get $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $2
 )
 (func $assembly/index/decodeHistogram32 (param $0 i32) (param $1 f64) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  local.tee $2
  i32.const 16700
  i32.gt_u
  if
   local.get $2
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $0
   local.get $3
   local.get $0
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  i32.const 0
  f64.const 0
  f64.const 0
  f64.const 0
  i32.const 0
  local.get $2
  call $assembly/ByteBuffer/ByteBuffer#constructor
  local.tee $3
  local.get $1
  i64.trunc_f64_u
  call $assembly/encoding/decodeFromByteBuffer<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>
  local.tee $0
  call $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#constructor
  local.get $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $2
  i32.const 16700
  i32.gt_u
  if
   local.get $2
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $2
  i32.const 16700
  i32.gt_u
  if
   local.get $2
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/encoding/fillCountsArrayFromSourceBuffer<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64> (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $5
   local.get $3
   local.get $5
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $5
   local.get $3
   local.get $5
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $2
  local.get $1
  i32.load
  i32.add
  local.set $3
  loop $while-continue|0
   local.get $1
   i32.load
   local.get $3
   i32.lt_s
   if
    local.get $1
    call $assembly/ZigZagEncoding/ZigZagEncoding.decode
    i32.wrap_i64
    local.tee $2
    i32.const 0
    i32.lt_s
    if (result i32)
     local.get $4
     local.get $2
     i32.sub
    else
     local.get $0
     i32.load offset=160
     i32.load
     i32.load offset=4
     local.get $4
     i32.const 3
     i32.shl
     i32.add
     local.get $2
     i64.extend_i32_s
     i64.store
     local.get $4
     i32.const 1
     i32.add
    end
    local.set $4
    br $while-continue|0
   end
  end
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $4
 )
 (func $assembly/encoding/decodeFromByteBuffer<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64> (param $0 i32) (param $1 i64) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i64)
  (local $5 i32)
  (local $6 i32)
  (local $7 i64)
  (local $8 i32)
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  call $assembly/ByteBuffer/ByteBuffer#getInt32
  local.tee $2
  i32.const -241
  i32.and
  i32.const 478450435
  i32.eq
  if
   block $__inlined_func$assembly/encoding/getWordSizeInBytesFromCookie (result i32)
    i32.const 9
    i32.const 1
    local.get $2
    i32.const -241
    i32.and
    local.tee $3
    i32.const 478450436
    i32.eq
    local.get $3
    i32.const 478450435
    i32.eq
    select
    br_if $__inlined_func$assembly/encoding/getWordSizeInBytesFromCookie
    drop
    local.get $2
    i32.const 240
    i32.and
    i32.const 4
    i32.shr_u
    i32.const 14
    i32.and
   end
   i32.const 9
   i32.ne
   if
    i32.const 15792
    i32.const 15136
    i32.const 153
    i32.const 7
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#getInt32
   local.set $6
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#getInt32
   drop
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#getInt32
   local.set $2
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#getInt64
   local.set $7
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#getInt64
   local.set $4
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#getInt64
   drop
  else
   i32.const 15936
   i32.const 15136
   i32.const 164
   i32.const 5
   call $~lib/builtins/abort
   unreachable
  end
  local.get $7
  local.get $4
  local.get $1
  local.get $4
  local.get $1
  i64.gt_u
  select
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#constructor
  local.tee $3
  local.tee $2
  i32.const 16700
  i32.gt_u
  if
   local.get $2
   i32.const 16
   i32.sub
   local.tee $5
   i32.load offset=4
   local.set $8
   local.get $5
   local.get $8
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $5
   i32.load
   drop
  end
  local.get $2
  local.get $2
  local.get $0
  local.get $6
  call $assembly/encoding/fillCountsArrayFromSourceBuffer<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#establishInternalTackingValues
  local.get $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $2
 )
 (func $assembly/index/decodeHistogram64 (param $0 i32) (param $1 f64) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  local.tee $2
  i32.const 16700
  i32.gt_u
  if
   local.get $2
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $0
   local.get $3
   local.get $0
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  i32.const 0
  f64.const 0
  f64.const 0
  f64.const 0
  i32.const 0
  local.get $2
  call $assembly/ByteBuffer/ByteBuffer#constructor
  local.tee $3
  local.get $1
  i64.trunc_f64_u
  call $assembly/encoding/decodeFromByteBuffer<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>
  local.tee $0
  call $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#constructor
  local.get $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $2
  i32.const 16700
  i32.gt_u
  if
   local.get $2
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $2
  i32.const 16700
  i32.gt_u
  if
   local.get $2
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $assembly/encoding/fillCountsArrayFromSourceBuffer<assembly/packedarray/PackedArray/PackedArray,u64> (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $5
   local.get $3
   local.get $5
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $5
   local.get $3
   local.get $5
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  local.get $2
  local.get $1
  i32.load
  i32.add
  local.set $3
  loop $while-continue|0
   local.get $1
   i32.load
   local.get $3
   i32.lt_s
   if
    local.get $1
    call $assembly/ZigZagEncoding/ZigZagEncoding.decode
    i32.wrap_i64
    local.tee $2
    i32.const 0
    i32.lt_s
    if (result i32)
     local.get $4
     local.get $2
     i32.sub
    else
     local.get $0
     i32.load offset=160
     local.get $4
     local.get $2
     i64.extend_i32_s
     call $assembly/packedarray/PackedArray/PackedArray#set
     local.get $4
     i32.const 1
     i32.add
    end
    local.set $4
    br $while-continue|0
   end
  end
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $1
  i32.const 16700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $4
 )
 (func $assembly/encoding/decodeFromByteBuffer<assembly/packedarray/PackedArray/PackedArray,u64> (param $0 i32) (param $1 i64) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i64)
  (local $5 i32)
  (local $6 i32)
  (local $7 i64)
  (local $8 i32)
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  call $assembly/ByteBuffer/ByteBuffer#getInt32
  local.tee $2
  i32.const -241
  i32.and
  i32.const 478450435
  i32.eq
  if
   block $__inlined_func$assembly/encoding/getWordSizeInBytesFromCookie (result i32)
    i32.const 9
    i32.const 1
    local.get $2
    i32.const -241
    i32.and
    local.tee $3
    i32.const 478450436
    i32.eq
    local.get $3
    i32.const 478450435
    i32.eq
    select
    br_if $__inlined_func$assembly/encoding/getWordSizeInBytesFromCookie
    drop
    local.get $2
    i32.const 240
    i32.and
    i32.const 4
    i32.shr_u
    i32.const 14
    i32.and
   end
   i32.const 9
   i32.ne
   if
    i32.const 15792
    i32.const 15136
    i32.const 153
    i32.const 7
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#getInt32
   local.set $6
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#getInt32
   drop
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#getInt32
   local.set $2
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#getInt64
   local.set $7
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#getInt64
   local.set $4
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#getInt64
   drop
  else
   i32.const 15936
   i32.const 15136
   i32.const 164
   i32.const 5
   call $~lib/builtins/abort
   unreachable
  end
  local.get $7
  local.get $4
  local.get $1
  local.get $4
  local.get $1
  i64.gt_u
  select
  local.get $2
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#constructor
  local.tee $3
  local.tee $2
  i32.const 16700
  i32.gt_u
  if
   local.get $2
   i32.const 16
   i32.sub
   local.tee $5
   i32.load offset=4
   local.set $8
   local.get $5
   local.get $8
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $5
   i32.load
   drop
  end
  local.get $2
  local.get $2
  local.get $0
  local.get $6
  call $assembly/encoding/fillCountsArrayFromSourceBuffer<assembly/packedarray/PackedArray/PackedArray,u64>
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#establishInternalTackingValues
  local.get $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $2
 )
 (func $assembly/index/decodePackedHistogram (param $0 i32) (param $1 f64) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $2
   i32.load offset=4
   local.set $3
   local.get $2
   local.get $3
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $2
   i32.load
   drop
  end
  local.get $0
  local.tee $2
  i32.const 16700
  i32.gt_u
  if
   local.get $2
   i32.const 16
   i32.sub
   local.tee $3
   i32.load offset=4
   local.set $0
   local.get $3
   local.get $0
   i32.const 1
   i32.add
   i32.store offset=4
   local.get $3
   i32.load
   drop
  end
  i32.const 0
  f64.const 0
  f64.const 0
  f64.const 0
  i32.const 0
  local.get $2
  call $assembly/ByteBuffer/ByteBuffer#constructor
  local.tee $3
  local.get $1
  i64.trunc_f64_u
  call $assembly/encoding/decodeFromByteBuffer<assembly/packedarray/PackedArray/PackedArray,u64>
  local.tee $0
  call $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#constructor
  local.get $3
  i32.const 16700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $0
  i32.const 16700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $2
  i32.const 16700
  i32.gt_u
  if
   local.get $2
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
  local.get $2
  i32.const 16700
  i32.gt_u
  if
   local.get $2
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $~start
  f64.const 2
  f64.const 13
  call $~lib/math/NativeMath.pow
  f64.const 1
  f64.sub
  global.set $assembly/packedarray/PackedArrayContext/MAX_SUPPORTED_PACKED_COUNTS_ARRAY_LENGTH
 )
 (func $~lib/rt/pure/markGray (param $0 i32)
  (local $1 i32)
  local.get $0
  i32.load offset=4
  local.tee $1
  i32.const 1879048192
  i32.and
  i32.const 268435456
  i32.ne
  if
   local.get $0
   local.get $1
   i32.const -1879048193
   i32.and
   i32.const 268435456
   i32.or
   i32.store offset=4
   local.get $0
   i32.const 16
   i32.add
   i32.const 2
   call $~lib/rt/__visit_members
  end
 )
 (func $~lib/rt/pure/scan (param $0 i32)
  (local $1 i32)
  local.get $0
  i32.load offset=4
  local.tee $1
  i32.const 1879048192
  i32.and
  i32.const 268435456
  i32.eq
  if
   local.get $1
   i32.const 268435455
   i32.and
   i32.const 0
   i32.gt_u
   if
    local.get $0
    local.get $0
    i32.load offset=4
    i32.const -1879048193
    i32.and
    i32.store offset=4
    local.get $0
    i32.const 16
    i32.add
    i32.const 4
    call $~lib/rt/__visit_members
   else
    local.get $0
    local.get $1
    i32.const -1879048193
    i32.and
    i32.const 536870912
    i32.or
    i32.store offset=4
    local.get $0
    i32.const 16
    i32.add
    i32.const 3
    call $~lib/rt/__visit_members
   end
  end
 )
 (func $~lib/rt/pure/collectWhite (param $0 i32)
  (local $1 i32)
  local.get $0
  i32.load offset=4
  local.tee $1
  i32.const 1879048192
  i32.and
  i32.const 536870912
  i32.eq
  if (result i32)
   local.get $1
   i32.const -2147483648
   i32.and
   i32.eqz
  else
   i32.const 0
  end
  if
   local.get $0
   local.get $1
   i32.const -1879048193
   i32.and
   i32.store offset=4
   local.get $0
   i32.const 16
   i32.add
   i32.const 5
   call $~lib/rt/__visit_members
   local.get $0
   local.get $0
   i32.load
   i32.const 1
   i32.or
   i32.store
   global.get $~lib/rt/tlsf/ROOT
   local.get $0
   call $~lib/rt/tlsf/insertBlock
  end
 )
 (func $~lib/rt/pure/__collect
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  global.get $~lib/rt/pure/ROOTS
  local.tee $0
  local.tee $4
  local.set $2
  global.get $~lib/rt/pure/CUR
  local.set $1
  loop $for-loop|0
   local.get $2
   local.get $1
   i32.lt_u
   if
    local.get $2
    i32.load
    local.tee $3
    i32.load offset=4
    local.tee $5
    i32.const 1879048192
    i32.and
    i32.const 805306368
    i32.eq
    if (result i32)
     local.get $5
     i32.const 268435455
     i32.and
     i32.const 0
     i32.gt_u
    else
     i32.const 0
    end
    if
     local.get $3
     call $~lib/rt/pure/markGray
     local.get $4
     local.get $3
     i32.store
     local.get $4
     i32.const 4
     i32.add
     local.set $4
    else
     i32.const 0
     local.get $5
     i32.const 268435455
     i32.and
     i32.eqz
     local.get $5
     i32.const 1879048192
     i32.and
     select
     if
      local.get $3
      local.get $3
      i32.load
      i32.const 1
      i32.or
      i32.store
      global.get $~lib/rt/tlsf/ROOT
      local.get $3
      call $~lib/rt/tlsf/insertBlock
     else
      local.get $3
      local.get $5
      i32.const 2147483647
      i32.and
      i32.store offset=4
     end
    end
    local.get $2
    i32.const 4
    i32.add
    local.set $2
    br $for-loop|0
   end
  end
  local.get $4
  global.set $~lib/rt/pure/CUR
  local.get $0
  local.set $1
  loop $for-loop|1
   local.get $1
   local.get $4
   i32.lt_u
   if
    local.get $1
    i32.load
    call $~lib/rt/pure/scan
    local.get $1
    i32.const 4
    i32.add
    local.set $1
    br $for-loop|1
   end
  end
  local.get $0
  local.set $1
  loop $for-loop|2
   local.get $1
   local.get $4
   i32.lt_u
   if
    local.get $1
    i32.load
    local.tee $5
    local.get $5
    i32.load offset=4
    i32.const 2147483647
    i32.and
    i32.store offset=4
    local.get $5
    call $~lib/rt/pure/collectWhite
    local.get $1
    i32.const 4
    i32.add
    local.set $1
    br $for-loop|2
   end
  end
  local.get $0
  global.set $~lib/rt/pure/CUR
 )
 (func $~lib/rt/pure/growRoots
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  global.get $~lib/rt/pure/CUR
  global.get $~lib/rt/pure/ROOTS
  local.tee $1
  i32.sub
  local.tee $3
  i32.const 1
  i32.shl
  local.tee $0
  i32.const 256
  local.get $0
  i32.const 256
  i32.gt_u
  select
  local.set $4
  call $~lib/rt/tlsf/maybeInitialize
  local.get $4
  i32.const 0
  call $~lib/rt/tlsf/allocateBlock
  i32.const 16
  i32.add
  local.tee $2
  local.get $1
  local.get $3
  call $~lib/memory/memory.copy
  local.get $1
  if
   call $~lib/rt/tlsf/maybeInitialize
   local.get $1
   i32.const 16
   i32.sub
   local.set $0
   local.get $1
   i32.const 15
   i32.and
   i32.eqz
   i32.const 0
   local.get $1
   select
   if (result i32)
    local.get $0
    i32.load
    i32.const 1
    i32.and
    i32.eqz
   else
    i32.const 0
   end
   if
    local.get $0
    i32.load offset=4
    drop
   end
   local.get $0
   local.get $0
   i32.load
   i32.const 1
   i32.or
   i32.store
   local.get $0
   call $~lib/rt/tlsf/insertBlock
  end
  local.get $2
  global.set $~lib/rt/pure/ROOTS
  local.get $2
  local.get $3
  i32.add
  global.set $~lib/rt/pure/CUR
  local.get $2
  local.get $4
  i32.add
  global.set $~lib/rt/pure/END
 )
 (func $~lib/rt/pure/decrement (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  i32.load
  drop
  local.get $0
  i32.load offset=4
  local.tee $1
  i32.const 268435455
  i32.and
  local.tee $2
  i32.const 1
  i32.eq
  if
   local.get $0
   i32.const 16
   i32.add
   i32.const 1
   call $~lib/rt/__visit_members
   local.get $1
   i32.const -2147483648
   i32.and
   if
    local.get $0
    i32.const -2147483648
    i32.store offset=4
   else
    local.get $0
    local.get $0
    i32.load
    i32.const 1
    i32.or
    i32.store
    global.get $~lib/rt/tlsf/ROOT
    local.get $0
    call $~lib/rt/tlsf/insertBlock
   end
  else
   local.get $0
   i32.load offset=8
   local.tee $3
   i32.const 16304
   i32.load
   i32.gt_u
   if
    i32.const 13120
    i32.const 16272
    i32.const 22
    i32.const 28
    call $~lib/builtins/abort
    unreachable
   end
   local.get $3
   i32.const 3
   i32.shl
   i32.const 16308
   i32.add
   i32.load
   i32.const 32
   i32.and
   if
    local.get $0
    local.get $2
    i32.const 1
    i32.sub
    local.get $1
    i32.const -268435456
    i32.and
    i32.or
    i32.store offset=4
   else
    local.get $0
    local.get $2
    i32.const 1
    i32.sub
    i32.const -1342177280
    i32.or
    i32.store offset=4
    local.get $1
    i32.const -2147483648
    i32.and
    i32.eqz
    if
     global.get $~lib/rt/pure/CUR
     local.tee $1
     global.get $~lib/rt/pure/END
     i32.ge_u
     if
      call $~lib/rt/pure/growRoots
      global.get $~lib/rt/pure/CUR
      local.set $1
     end
     local.get $1
     local.get $0
     i32.store
     local.get $1
     i32.const 4
     i32.add
     global.set $~lib/rt/pure/CUR
    end
   end
  end
 )
 (func $~lib/rt/pure/__visit (param $0 i32) (param $1 i32)
  local.get $0
  i32.const 16700
  i32.lt_u
  if
   return
  end
  local.get $0
  i32.const 16
  i32.sub
  local.set $0
  block $break|0
   block $case4|0
    block $case3|0
     block $case2|0
      block $case1|0
       local.get $1
       i32.const 1
       i32.ne
       if
        local.get $1
        i32.const 2
        i32.sub
        br_table $case1|0 $case2|0 $case3|0 $case4|0 $break|0
       end
       local.get $0
       call $~lib/rt/pure/decrement
       br $break|0
      end
      local.get $0
      i32.load offset=4
      drop
      local.get $0
      local.get $0
      i32.load offset=4
      i32.const 1
      i32.sub
      i32.store offset=4
      local.get $0
      call $~lib/rt/pure/markGray
      br $break|0
     end
     local.get $0
     call $~lib/rt/pure/scan
     br $break|0
    end
    local.get $0
    local.get $0
    i32.load offset=4
    local.tee $1
    i32.const 1
    i32.add
    i32.store offset=4
    local.get $1
    i32.const 1879048192
    i32.and
    if
     local.get $0
     local.get $0
     i32.load offset=4
     i32.const -1879048193
     i32.and
     i32.store offset=4
     local.get $0
     i32.const 16
     i32.add
     i32.const 4
     call $~lib/rt/__visit_members
    end
    br $break|0
   end
   local.get $0
   call $~lib/rt/pure/collectWhite
  end
 )
 (func $~lib/rt/__visit_members (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  block $folding-inner1
   block $folding-inner0
    block $switch$1$default
     block $switch$1$case$50
      block $switch$1$case$22
       block $switch$1$case$14
        block $switch$1$case$12
         block $switch$1$case$10
          block $switch$1$case$5
           block $switch$1$case$4
            block $switch$1$case$2
             local.get $0
             i32.const 8
             i32.sub
             i32.load
             br_table $switch$1$case$2 $switch$1$case$2 $switch$1$case$4 $switch$1$case$5 $switch$1$case$4 $switch$1$case$4 $switch$1$case$4 $switch$1$case$4 $switch$1$case$10 $folding-inner1 $switch$1$case$12 $switch$1$case$2 $switch$1$case$14 $switch$1$case$4 $switch$1$case$2 $switch$1$case$2 $switch$1$case$4 $switch$1$case$4 $switch$1$case$4 $switch$1$case$4 $switch$1$case$22 $folding-inner1 $switch$1$case$12 $switch$1$case$14 $switch$1$case$4 $switch$1$case$4 $switch$1$case$4 $switch$1$case$4 $switch$1$case$22 $folding-inner1 $switch$1$case$12 $switch$1$case$14 $switch$1$case$4 $switch$1$case$4 $switch$1$case$4 $switch$1$case$4 $switch$1$case$22 $folding-inner1 $switch$1$case$12 $switch$1$case$14 $switch$1$case$4 $switch$1$case$4 $folding-inner0 $switch$1$case$4 $switch$1$case$22 $folding-inner1 $switch$1$case$12 $switch$1$case$14 $switch$1$case$50 $switch$1$default
            end
            return
           end
           local.get $0
           i32.load
           local.tee $0
           if
            local.get $0
            local.get $1
            call $~lib/rt/pure/__visit
           end
           return
          end
          local.get $0
          i32.load offset=4
          local.tee $2
          local.get $0
          i32.load offset=12
          i32.const 2
          i32.shl
          i32.add
          local.set $3
          loop $while-continue|0
           local.get $2
           local.get $3
           i32.lt_u
           if
            local.get $2
            i32.load
            local.tee $4
            if
             local.get $4
             local.get $1
             call $~lib/rt/pure/__visit
            end
            local.get $2
            i32.const 4
            i32.add
            local.set $2
            br $while-continue|0
           end
          end
          local.get $0
          i32.load
          local.get $1
          call $~lib/rt/pure/__visit
          return
         end
         local.get $0
         i32.load offset=160
         local.tee $2
         if
          local.get $2
          local.get $1
          call $~lib/rt/pure/__visit
         end
         br $folding-inner1
        end
        local.get $0
        i32.load offset=28
        local.tee $2
        if
         local.get $2
         local.get $1
         call $~lib/rt/pure/__visit
        end
        local.get $0
        i32.load offset=116
        local.tee $0
        if
         local.get $0
         local.get $1
         call $~lib/rt/pure/__visit
        end
        return
       end
       local.get $0
       i32.load offset=4
       local.tee $2
       if
        local.get $2
        local.get $1
        call $~lib/rt/pure/__visit
       end
       local.get $0
       i32.load offset=92
       local.tee $0
       if
        local.get $0
        local.get $1
        call $~lib/rt/pure/__visit
       end
       return
      end
      local.get $0
      i32.load offset=160
      local.tee $2
      if
       local.get $2
       local.get $1
       call $~lib/rt/pure/__visit
      end
      br $folding-inner1
     end
     local.get $0
     i32.load offset=4
     local.tee $2
     if
      local.get $2
      local.get $1
      call $~lib/rt/pure/__visit
     end
     br $folding-inner0
    end
    unreachable
   end
   local.get $0
   i32.load offset=8
   local.tee $2
   if
    local.get $2
    local.get $1
    call $~lib/rt/pure/__visit
   end
   local.get $0
   i32.load offset=12
   local.tee $2
   if
    local.get $2
    local.get $1
    call $~lib/rt/pure/__visit
   end
   local.get $0
   i32.load offset=16
   local.tee $2
   if
    local.get $2
    local.get $1
    call $~lib/rt/pure/__visit
   end
   local.get $0
   i32.load offset=20
   local.tee $0
   if
    local.get $0
    local.get $1
    call $~lib/rt/pure/__visit
   end
   return
  end
  local.get $0
  i32.load offset=80
  local.tee $2
  if
   local.get $2
   local.get $1
   call $~lib/rt/pure/__visit
  end
  local.get $0
  i32.load offset=96
  local.tee $2
  if
   local.get $2
   local.get $1
   call $~lib/rt/pure/__visit
  end
  local.get $0
  i32.load offset=100
  local.tee $0
  if
   local.get $0
   local.get $1
   call $~lib/rt/pure/__visit
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#constructor@varargs (param $0 i32) (param $1 f64) (param $2 f64) (param $3 f64) (param $4 i32) (param $5 i32) (result i32)
  block $1of1
   block $0of1
    block $outOfRange
     global.get $~argumentsLength
     i32.const 4
     i32.sub
     br_table $0of1 $1of1 $outOfRange
    end
    unreachable
   end
   i32.const 0
   local.set $5
  end
  local.get $0
  local.get $1
  local.get $2
  local.get $3
  local.get $4
  local.get $5
  call $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#constructor
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#constructor@varargs (param $0 i32) (param $1 f64) (param $2 f64) (param $3 f64) (param $4 i32) (param $5 i32) (result i32)
  block $1of1
   block $0of1
    block $outOfRange
     global.get $~argumentsLength
     i32.const 4
     i32.sub
     br_table $0of1 $1of1 $outOfRange
    end
    unreachable
   end
   i32.const 0
   local.set $5
  end
  local.get $0
  local.get $1
  local.get $2
  local.get $3
  local.get $4
  local.get $5
  call $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#constructor
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#constructor@varargs (param $0 i32) (param $1 f64) (param $2 f64) (param $3 f64) (param $4 i32) (param $5 i32) (result i32)
  block $1of1
   block $0of1
    block $outOfRange
     global.get $~argumentsLength
     i32.const 4
     i32.sub
     br_table $0of1 $1of1 $outOfRange
    end
    unreachable
   end
   i32.const 0
   local.set $5
  end
  local.get $0
  local.get $1
  local.get $2
  local.get $3
  local.get $4
  local.get $5
  call $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#constructor
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#constructor@varargs (param $0 i32) (param $1 f64) (param $2 f64) (param $3 f64) (param $4 i32) (param $5 i32) (result i32)
  block $1of1
   block $0of1
    block $outOfRange
     global.get $~argumentsLength
     i32.const 4
     i32.sub
     br_table $0of1 $1of1 $outOfRange
    end
    unreachable
   end
   i32.const 0
   local.set $5
  end
  local.get $0
  local.get $1
  local.get $2
  local.get $3
  local.get $4
  local.get $5
  call $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#constructor
 )
 (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#constructor@varargs (param $0 i32) (param $1 f64) (param $2 f64) (param $3 f64) (param $4 i32) (param $5 i32) (result i32)
  block $1of1
   block $0of1
    block $outOfRange
     global.get $~argumentsLength
     i32.const 4
     i32.sub
     br_table $0of1 $1of1 $outOfRange
    end
    unreachable
   end
   i32.const 0
   local.set $5
  end
  local.get $0
  local.get $1
  local.get $2
  local.get $3
  local.get $4
  local.get $5
  call $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#constructor
 )
 (func $~setArgumentsLength (param $0 i32)
  local.get $0
  global.set $~argumentsLength
 )
)
