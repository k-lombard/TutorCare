(module
 (type $i32_i32_=>_none (func (param i32 i32)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $i32_=>_f64 (func (param i32) (result f64)))
 (type $i32_=>_none (func (param i32)))
 (type $i32_i32_=>_i32 (func (param i32 i32) (result i32)))
 (type $i32_i64_=>_none (func (param i32 i64)))
 (type $i32_i64_=>_i32 (func (param i32 i64) (result i32)))
 (type $i32_i64_=>_i64 (func (param i32 i64) (result i64)))
 (type $i32_i32_i32_=>_i32 (func (param i32 i32 i32) (result i32)))
 (type $i32_i32_i32_=>_none (func (param i32 i32 i32)))
 (type $i32_i32_i64_=>_none (func (param i32 i32 i64)))
 (type $i32_f64_=>_none (func (param i32 f64)))
 (type $i32_f64_=>_i32 (func (param i32 f64) (result i32)))
 (type $i32_i32_=>_i64 (func (param i32 i32) (result i64)))
 (type $i32_i64_i64_=>_none (func (param i32 i64 i64)))
 (type $i32_f64_f64_f64_i32_i32_=>_i32 (func (param i32 f64 f64 f64 i32 i32) (result i32)))
 (type $i32_=>_i64 (func (param i32) (result i64)))
 (type $i32_f64_f64_=>_none (func (param i32 f64 f64)))
 (type $i32_f64_=>_f64 (func (param i32 f64) (result f64)))
 (type $i32_i32_i32_i32_=>_i32 (func (param i32 i32 i32 i32) (result i32)))
 (type $none_=>_none (func))
 (type $i64_=>_i32 (func (param i64) (result i32)))
 (type $f64_=>_f64 (func (param f64) (result f64)))
 (type $i32_i64_i64_i32_f64_=>_none (func (param i32 i64 i64 i32 f64)))
 (type $i32_i64_i64_i64_=>_none (func (param i32 i64 i64 i64)))
 (type $i32_i32_f64_=>_i32 (func (param i32 i32 f64) (result i32)))
 (type $i32_i64_i32_=>_i32 (func (param i32 i64 i32) (result i32)))
 (type $i32_i64_i64_i32_=>_i32 (func (param i32 i64 i64 i32) (result i32)))
 (type $i32_f64_f64_=>_i32 (func (param i32 f64 f64) (result i32)))
 (type $i32_i32_i32_=>_i64 (func (param i32 i32 i32) (result i64)))
 (type $i32_f64_=>_i64 (func (param i32 f64) (result i64)))
 (type $i32_i32_i32_i32_=>_none (func (param i32 i32 i32 i32)))
 (type $i64_i32_=>_i32 (func (param i64 i32) (result i32)))
 (type $i32_i64_i32_=>_none (func (param i32 i64 i32)))
 (type $i32_i32_i32_i32_i32_=>_none (func (param i32 i32 i32 i32 i32)))
 (type $i32_i64_i32_i32_=>_none (func (param i32 i64 i32 i32)))
 (type $none_=>_i32 (func (result i32)))
 (type $i32_i32_i32_i32_i32_i32_=>_i32 (func (param i32 i32 i32 i32 i32 i32) (result i32)))
 (type $i32_i64_i32_i32_=>_i32 (func (param i32 i64 i32 i32) (result i32)))
 (type $f64_f64_=>_f64 (func (param f64 f64) (result f64)))
 (import "env" "abort" (func $~lib/builtins/abort (param i32 i32 i32 i32)))
 (memory $0 1)
 (data (i32.const 16) "\1e\00\00\00\01\00\00\00\01\00\00\00\1e\00\00\00~\00l\00i\00b\00/\00r\00t\00/\00t\00l\00s\00f\00.\00t\00s\00")
 (data (i32.const 64) "(\00\00\00\01\00\00\00\01\00\00\00(\00\00\00a\00l\00l\00o\00c\00a\00t\00i\00o\00n\00 \00t\00o\00o\00 \00l\00a\00r\00g\00e\00")
 (data (i32.const 128) "\1e\00\00\00\01\00\00\00\01\00\00\00\1e\00\00\00~\00l\00i\00b\00/\00r\00t\00/\00p\00u\00r\00e\00.\00t\00s\00")
 (data (i32.const 176) "\0c\00\00\00\01\00\00\00\01\00\00\00\0c\00\00\00N\00O\00 \00T\00A\00G\00")
 (data (i32.const 208) "\02\00\00\00\01\00\00\00\01\00\00\00\02\00\00\00 \00")
 (data (i32.const 240) "\1c\00\00\00\01\00\00\00\01\00\00\00\1c\00\00\00I\00n\00v\00a\00l\00i\00d\00 \00l\00e\00n\00g\00t\00h\00")
 (data (i32.const 288) "\1c\00\00\00\01\00\00\00\01\00\00\00\1c\00\00\00~\00l\00i\00b\00/\00s\00t\00r\00i\00n\00g\00.\00t\00s\00")
 (data (i32.const 336) "\00\00\00\00\01\00\00\00\01\00\00\00\00\00\00\00")
 (data (i32.const 352) "\08\00\00\00\01\00\00\00\01\00\00\00\08\00\00\00n\00u\00l\00l\00")
 (data (i32.const 384) "d\00\00\00\01\00\00\00\01\00\00\00d\00\00\00t\00o\00S\00t\00r\00i\00n\00g\00(\00)\00 \00r\00a\00d\00i\00x\00 \00a\00r\00g\00u\00m\00e\00n\00t\00 \00m\00u\00s\00t\00 \00b\00e\00 \00b\00e\00t\00w\00e\00e\00n\00 \002\00 \00a\00n\00d\00 \003\006\00")
 (data (i32.const 512) "&\00\00\00\01\00\00\00\01\00\00\00&\00\00\00~\00l\00i\00b\00/\00u\00t\00i\00l\00/\00n\00u\00m\00b\00e\00r\00.\00t\00s\00")
 (data (i32.const 576) "\02\00\00\00\01\00\00\00\01\00\00\00\02\00\00\000\00")
 (data (i32.const
 (data (i32.const 1008) "\00\04\00\00\01\00\00\00\01\00\00\00\00\04\00\000\000\000\001\000\002\000\003\000\004\000\005\000\006\000\007\000\008\000\009\000\00a\000\00b\000\00c\000\00d\000\00e\000\00f\001\000\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\008\001\009\001\00a\001\00b\001\00c\001\00d\001\00e\001\00f\002\000\002\001\002\002\002\003\002\004\002\005\002\006\002\007\002\008\002\009\002\00a\002\00b\002\00c\002\00d\002\00e\002\00f\003\000\003\001\003\002\003\003\003\004\003\005\003\006\003\007\003\008\003\009\003\00a\003\00b\003\00c\003\00d\003\00e\003\00f\004\000\004\001\004\002\004\003\004\004\004\005\004\006\004\007\004\008\004\009\004\00a\004\00b\004\00c\004\00d\004\00e\004\00f\005\000\005\001\005\002\005\003\005\004\005\005\005\006\005\007\005\008\005\009\005\00a\005\00b\005\00c\005\00d\005\00e\005\00f\006\000\006\001\006\002\006\003\006\004\006\005\006\006\006\007\006\008\006\009\006\00a\006\00b\006\00c\006\00d\006\00e\006\00f\007\000\007\001\007\002\007\003\007\004\007\005\007\006\007\007\007\008\007\009\007\00a\007\00b\007\00c\007\00d\007\00e\007\00f\008\000\008\001\008\002\008\003\008\004\008\005\008\006\008\007\008\008\008\009\008\00a\008\00b\008\00c\008\00d\008\00e\008\00f\009\000\009\001\009\002\009\003\009\004\009\005\009\006\009\007\009\008\009\009\009\00a\009\00b\009\00c\009\00d\009\00e\009\00f\00a\000\00a\001\00a\002\00a\003\00a\004\00a\005\00a\006\00a\007\00a\008\00a\009\00a\00a\00a\00b\00a\00c\00a\00d\00a\00e\00a\00f\00b\000\00b\001\00b\002\00b\003\00b\004\00b\005\00b\006\00b\007\00b\008\00b\009\00b\00a\00b\00b\00b\00c\00b\00d\00b\00e\00b\00f\00c\000\00c\001\00c\002\00c\003\00c\004\00c\005\00c\006\00c\007\00c\008\00c\009\00c\00a\00c\00b\00c\00c\00c\00d\00c\00e\00c\00f\00d\000\00d\001\00d\002\00d\003\00d\004\00d\005\00d\006\00d\007\00d\008\00d\009\00d\00a\00d\00b\00d\00c\00d\00d\00d\00e\00d\00f\00e\000\00e\001\00e\002\00e\003\00e\004\00e\005\00e\006\00e\007\00e\008\00e\009\00e\00a\00e\00b\00e\00c\00e\00d\00e\00e\00e\00f\00f\000\00f\001\00f\002\00f\003\00f\004\00f\005\00f\006\00f\007\00f\008\00f\009\00f\00a\00f\00b\00f\00c\00f\00d\00f\00e\00f\00f\00")
 (data (i32.const 2048) "H\00\00\00\01\00\00\00\01\00\00\00H\00\00\000\001\002\003\004\005\006\007\008\009\00a\00b\00c\00d\00e\00f\00g\00h\00i\00j\00k\00l\00m\00n\00o\00p\00q\00r\00s\00t\00u\00v\00w\00x\00y\00z\00")
 (data (i32.const 2136) "\00\00\00\00\00\a0\f6?\00\00\00\00\00\00\00\00\00\c8\b9\f2\82,\d6\bf\80V7($\b4\fa<\00\00\00\00\00\80\f6?\00\00\00\00\00\00\00\00\00\08X\bf\bd\d1\d5\bf \f7\e0\d8\08\a5\1c\bd\00\00\00\00\00`\f6?\00\00\00\00\00\00\00\00\00XE\17wv\d5\bfmP\b6\d5\a4b#\bd\00\00\00\00\00@\f6?\00\00\00\00\00\00\00\00\00\f8-\87\ad\1a\d5\bf\d5g\b0\9e\e4\84\e6\bc\00\00\00\00\00 \f6?\00\00\00\00\00\00\00\00\00xw\95_\be\d4\bf\e0>)\93i\1b\04\bd\00\00\00\00\00\00\f6?\00\00\00\00\00\00\00\00\00`\1c\c2\8ba\d4\bf\cc\84LH/\d8\13=\00\00\00\00\00\e0\f5?\00\00\00\00\00\00\00\00\00\a8\86\860\04\d4\bf:\0b\82\ed\f3B\dc<\00\00\00\00\00\c0\f5?\00\00\00\00\00\00\00\00\00HiUL\a6\d3\bf`\94Q\86\c6\b1 =\00\00\00\00\00\a0\f5?\00\00\00\00\00\00\00\00\00\80\98\9a\ddG\d3\bf\92\80\c5\d4MY%=\00\00\00\00\00\80\f5?\00\00\00\00\00\00\00\00\00 \e1\ba\e2\e8\d2\bf\d8+\b7\99\1e{&=\00\00\00\00\00`\f5?\00\00\00\00\00\00\00\00\00\88\de\13Z\89\d2\bf?\b0\cf\b6\14\ca\15=\00\00\00\00\00`\f5?\00\00\00\00\00\00\00\00\00\88\de\13Z\89\d2\bf?\b0\cf\b6\14\ca\15=\00\00\00\00\00@\f5?\00\00\00\00\00\00\00\00\00x\cf\fbA)\d2\bfv\daS($Z\16\bd\00\00\00\00\00 \f5?\00\00\00\00\00\00\00\00\00\98i\c1\98\c8\d1\bf\04T\e7h\bc\af\1f\bd\00\00\00\00\00\00\f5?\00\00\00\00\00\00\00\00\00\a8\ab\ab\\g\d1\bf\f0\a8\823\c6\1f\1f=\00\00\00\00\00\e0\f4?\00\00\00\00\00\00\00\00\00H\ae\f9\8b\05\d1\bffZ\05\fd\c4\a8&\bd\00\00\00\00\00\c0\f4?\00\00\00\00\00\00\00\00\00\90s\e2$\a3\d0\bf\0e\03\f4~\eek\0c\bd\00\00\00\00\00\a0\f4?\00\00\00\00\00\00\00\00\00\d0\b4\94%@\d0\bf\7f-\f4\9e\b86\f0\bc\00\00\00\00\00\a0\f4?\00\00\00\00\00\00\00\00\00\d0\b4\94%@\d0\bf\7f-\f4\9e\b86\f0\bc\00\00\00\00\00\80\f4?\00\00\00\00\00\00\00\00\00@^m\18\b9\cf\bf\87<\99\ab*W\0d=\00\00\00\00\00`\f4?\00\00\00\00\00\00\00\00\00`\dc\cb\ad\f0\ce\bf$\af\86\9c\b7&+=\00\00\00\00\00@\f4?\00\00\00\00\00\00\00\00\00\f0*n\07\'\ce\bf\10\ff?TO/\17\bd\00\00\00\00\00 \f4?\00\00\00\00\00\00\00\00\00\c0Ok!\\\cd\bf\1bh\ca\bb\91\ba!=\00\00\00\00\00\00\f4?\00\00\00\00\00\00\00\00\00\a0\9a\c7\f7\8f\cc\bf4\84\9fhOy\'=\00\00\00\00\00\00\f4?\00\00\00\00\00\00\00\00\00\a0\9a\c7\f7\8f\cc\bf4\84\9fhOy\'=\00\00\00\00\00\e0\f3?\00\00\00\00\00\00\00\00\00\90-t\86\c2\cb\bf\8f\b7\8b1\b0N\19=\00\00\00\00\00\c0\f3?\00\00\00\00\00\00\00\00\00\c0\80N\c9\f3\ca\bff\90\cd?cN\ba<\00\00\00\00\00\a0\f3?\00\00\00\00\00\00\00\00\00\b0\e2\1f\bc#\ca\bf\ea\c1F\dcd\8c%\bd\00\00\00\00\00\a0\f3?\00\00\00\00\00\00\00\00\00\b0\e2\1f\bc#\ca\bf\ea\c1F\dcd\8c%\bd\00\00\00\00\00\80\f3?\00\00\00\00\00\00\00\00\00P\f4\9cZR\c9\bf\e3\d4\c1\04\d9\d1*\bd\00\00\00\00\00`\f3?\00\00\00\00\00\00\00\00\00\d0 e\a0\7f\c8\bf\t\fa\db\7f\bf\bd+=\00\00\00\00\00@\f3?\00\00\00\00\00\00\00\00\00\e0\10\02\89\ab\c7\bfXJSr\90\db+=\00\00\00\00\00@\f3?\00\00\00\00\00\00\00\00\00\e0\10\02\89\ab\c7\bfXJSr\90\db+=\00\00\00\00\00 \f3?\00\00\00\00\00\00\00\00\00\d0\19\e7\0f\d6\c6\bff\e2\b2\a3j\e4\10\bd\00\00\00\00\00\00\f3?\00\00\00\00\00\00\00\00\00\90\a7p0\ff\c5\bf9P\10\9fC\9e\1e\bd\00\00\00\00\00\00\f3?\00\00\00\00\00\00\00\00\00\90\a7p0\ff\c5\bf9P\10\9fC\9e\1e\bd\00\00\00\00\00\e0\f2?\00\00\00\00\00\00\00\00\00\b0\a1\e3\e5&\c5\bf\8f[\07\90\8b\de \bd\00\00\00\00\00\c0\f2?\00\00\00\00\00\00\00\00\00\80\cbl+M\c4\bf<x5a\c1\0c\17=\00\00\00\00\00\c0\f2?\00\00\00\00\00\00\00\00\00\80\cbl+M\c4\bf<x5a\c1\0c\17=\00\00\00\00\00\a0\f2?\00\00\00\00\00\00\00\00\00\90\1e \fcq\c3\bf:T\'M\86x\f1<\00\00\00\00\00\80\f2?\00\00\00\00\00\00\00\00\00\f0\1f\f8R\95\c2\bf\08\c4q\170\8d$\bd\00\00\00\00\00`\f2?\00\00\00\00\00\00\00\00\00`/\d5*\b7\c1\bf\96\a3\11\18\a4\80.\bd\00\00\00\00\00`\f2?\00\00\00\00\00\00\00\00\00`/\d5*\b7\c1\bf\96\a3\11\18\a4\80.\bd\00\00\00\00\00@\f2?\00\00\00\00\00\00\00\00\00\90\d0|~\d7\c0\bf\f4[\e8\88\96i\n=\00\00\00\00\00@\f2?\00\00\00\00\00\00\00\00\00\90\d0|~\d7\c0\bf\f4[\e8\88\96i\n=\00\00\00\00\00 \f2?\00\00\00\00\00\00\00\00\00\e0\db1\91\ec\bf\bf\f23\a3\\Tu%\bd\00\00\00\00\00\00\f2?\00\00\00\00\00\00\00\00\00\00+n\07\'\be\bf<\00\f0*,4*=\00\00\00\00\00\00\f2?\00\00\00\00\00\00\00\00\00\00+n\07\'\be\bf<\00\f0*,4*=\00\00\00\00\00\e0\f1?\00\00\00\00\00\00\00\00\00\c0[\8fT^\bc\bf\06\be_XW\0c\1d\bd\00\00\00\00\00\c0\f1?\00\00\00\00\00\00\00\00\00\e0J:m\92\ba\bf\c8\aa[\e859%=\00\00\00\00\00\c0\f1?\00\00\00\00\00\00\00\00\00\e0J:m\92\ba\bf\c8\aa[\e859%=\00\00\00\00\00\a0\f1?\00\00\00\00\00\00\00\00\00\a01\d6E\c3\b8\bfhV/M)|\13=\00\00\00\00\00\a0\f1?\00\00\00\00\00\00\00\00\00\a01\d6E\c3\b8\bfhV/M)|\13=\00\00\00\00\00\80\f1?\00\00\00\00\00\00\00\00\00`\e5\8a\d2\f0\b6\bf\das3\c97\97&\bd\00\00\00\00\00`\f1?\00\00\00\00\00\00\00\00\00 \06?\07\1b\b5\bfW^\c6a[\02\1f=\00\00\00\00\00`\f1?\00\00\00\00\00\00\00\00\00 \06?\07\1b\b5\bfW^\c6a[\02\1f=\00\00\00\00\00@\f1?\00\00\00\00\00\00\00\00\00\e0\1b\96\d7A\b3\bf\df\13\f9\cc\da^,=\00\00\00\00\00@\f1?\00\00\00\00\00\00\00\00\00\e0\1b\96\d7A\b3\bf\df\13\f9\cc\da^,=\00\00\00\00\00 \f1?\00\00\00\00\00\00\00\00\00\80\a3\ee6e\b1\bf\t\a3\8fv^|\14=\00\00\00\00\00\00\f1?\00\00\00\00\00\00\00\00\00\80\11\c00\n\af\bf\91\8e6\83\9eY-=\00\00\00\00\00\00\f1?\00\00\00\00\00\00\00\00\00\80\11\c00\n\af\bf\91\8e6\83\9eY-=\00\00\00\00\00\e0\f0?\00\00\00\00\00\00\00\00\00\80\19q\ddB\ab\bfLp\d6\e5z\82\1c=\00\00\00\00\00\e0\f0?\00\00\00\00\00\00\00\00\00\80\19q\ddB\ab\bfLp\d6\e5z\82\1c=\00\00\00\00\00\c0\f0?\00\00\00\00\00\00\00\00\00\c02\f6Xt\a7\bf\ee\a1\f24F\fc,\bd\00\00\00\00\00\c0\f0?\00\00\00\00\00\00\00\00\00\c02\f6Xt\a7\bf\ee\a1\f24F\fc,\bd\00\00\00\00\00\a0\f0?\00\00\00\00\00\00\00\00\00\c0\fe\b9\87\9e\a3\bf\aa\fe&\f5\b7\02\f5<\00\00\00\00\00\a0\f0?\00\00\00\00\00\00\00\00\00\c0\fe\b9\87\9e\a3\bf\aa\fe&\f5\b7\02\f5<\00\00\00\00\00\80\f0?\00\00\00\00\00\00\00\00\00\00x\0e\9b\82\9f\bf\e4\t~|&\80)\bd\00\00\00\00\00\80\f0?\00\00\00\00\00\00\00\00\00\00x\0e\9b\82\9f\bf\e4\t~|&\80)\bd\00\00\00\00\00`\f0?\00\00\00\00\00\00\00\00\00\80\d5\07\1b\b9\97\bf9\a6\fa\93T\8d(\bd\00\00\00\00\00@\f0?\00\00\00\00\00\00\00\00\00\00\fc\b0\a8\c0\8f\bf\9c\a6\d3\f6|\1e\df\bc\00\00\00\00\00@\f0?\00\00\00\00\00\00\00\00\00\00\fc\b0\a8\c0\8f\bf\9c\a6\d3\f6|\1e\df\bc\00\00\00\00\00 \f0?\00\00\00\00\00\00\00\00\00\00\10k*\e0\7f\bf\e4@\da\0d?\e2\19\bd\00\00\00\00\00 \f0?\00\00\00\00\00\00\00\00\00\00\10k*\e0\7f\bf\e4@\da\0d?\e2\19\bd\00\00\00\00\00\00\f0?\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\f0?\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\c0\ef?\00\00\00\00\00\00\00\00\00\00\89u\15\10\80?\e8+\9d\99k\c7\10\bd\00\00\00\00\00\80\ef?\00\00\00\00\00\00\00\00\00\80\93XV \90?\d2\f7\e2\06[\dc#\bd\00\00\00\00\00@\ef?\00\00\00\00\00\00\00\00\00\00\c9(%I\98?4\0cZ2\ba\a0*\bd\00\00\00\00\00\00\ef?\00\00\00\00\00\00\00\00\00@\e7\89]A\a0?S\d7\f1\\\c0\11\01=\00\00\00\00\00\c0\ee?\00\00\00\00\00\00\00\00\00\00.\d4\aef\a4?(\fd\bdus\16,\bd\00\00\00\00\00\80\ee?\00\00\00\00\00\00\00\00\00\c0\9f\14\aa\94\a8?}&Z\d0\95y\19\bd\00\00\00\00\00@\ee?\00\00\00\00\00\00\00\00\00\c0\dd\cds\cb\ac?\07(\d8G\f2h\1a\bd\00\00\00\00\00 \ee?\00\00\00\00\00\00\00\00\00\c0\06\c01\ea\ae?{;\c9O>\11\0e\bd\00\00\00\00\00\e0\ed?\00\00\00\00\00\00\00\00\00`F\d1;\97\b1?\9b\9e\0dV]2%\bd\00\00\00\00\00\a0\ed?\00\00\00\00\00\00\00\00\00\e0\d1\a7\f5\bd\b3?\d7N\db\a5^\c8,=\00\00\00\00\00`\ed?\00\00\00\00\00\00\00\00\00\a0\97MZ\e9\b5?\1e\1d]<\06i,\bd\00\00\00\00\00@\ed?\00\00\00\00\00\00\00\00\00\c0\ea\n\d3\00\b7?2\ed\9d\a9\8d\1e\ec<\00\00\00\00\00\00\ed?\00\00\00\00\00\00\00\00\00@Y]^3\b9?\daG\bd:\\\11#=\00\00\00\00\00\c0\ec?\00\00\00\00\00\00\00\00\00`\ad\8d\c8j\bb?\e5h\f7+\80\90\13\bd\00\00\00\00\00\a0\ec?\00\00\00\00\00\00\00\00\00@\bc\01X\88\bc?\d3\acZ\c6\d1F&=\00\00\00\00\00`\ec?\00\00\00\00\00\00\00\00\00 \n\839\c7\be?\e0E\e6\afh\c0-\bd\00\00\00\00\00@\ec?\00\00\00\00\00\00\00\00\00\e0\db9\91\e8\bf?\fd\n\a1O\d64%\bd\00\00\00\00\00\00\ec?\00\00\00\00\00\00\00\00\00\e0\'\82\8e\17\c1?\f2\07-\cex\ef!=\00\00\00\00\00\e0\eb?\00\00\00\00\00\00\00\00\00\f0#~+\aa\c1?4\998D\8e\a7,=\00\00\00\00\00\a0\eb?\00\00\00\00\00\00\00\00\00\80\86\0ca\d1\c2?\a1\b4\81\cbl\9d\03=\00\00\00\00\00\80\eb?\00\00\00\00\00\00\00\00\00\90\15\b0\fce\c3?\89rK#\a8/\c6<\00\00\00\00\00@\eb?\00\00\00\00\00\00\00\00\00\b03\83=\91\c4?x\b6\fdTy\83%=\00\00\00\00\00 \eb?\00\00\00\00\00\00\00\00\00\b0\a1\e4\e5\'\c5?\c7}i\e5\e83&=\00\00\00\00\00\e0\ea?\00\00\00\00\00\00\00\00\00\10\8c\beNW\c6?x.<,\8b\cf\19=\00\00\00\00\00\c0\ea?\00\00\00\00\00\00\00\00\00pu\8b\12\f0\c6?\e1!\9c\e5\8d\11%\bd\00\00\00\00\00\a0\ea?\00\00\00\00\00\00\00\00\00PD\85\8d\89\c7?\05C\91p\10f\1c\bd\00\00\00\00\00`\ea?\00\00\00\00\00\00\00\00\00\009\eb\af\be\c8?\d1,\e9\aaT=\07\bd\00\00\00\00\00@\ea?\00\00\00\00\00\00\00\00\00\00\f7\dcZZ\c9?o\ff\a0X(\f2\07=\00\00\00\00\00\00\ea?\00\00\00\00\00\00\00\00\00\e0\8a<\ed\93\ca?i!VPCr(\bd\00\00\00\00\00\e0\e9?\00\00\00\00\00\00\00\00\00\d0[W\d81\cb?\aa\e1\acN\8d5\0c\bd\00\00\00\00\00\c0\e9?\00\00\00\00\00\00\00\00\00\e0;8\87\d0\cb?\b6\12TY\c4K-\bd\00\00\00\00\00\a0\e9?\00\00\00\00\00\00\00\00\00\10\f0\c6\fbo\cc?\d2+\96\c5r\ec\f1\bc\00\00\00\00\00`\e9?\00\00\00\00\00\00\00\00\00\90\d4\b0=\b1\cd?5\b0\15\f7*\ff*\bd\00\00\00\00\00@\e9?\00\00\00\00\00\00\00\00\00\10\e7\ff\0eS\ce?0\f4A`\'\12\c2<\00\00\00\00\00 \e9?\00\00\00\00\00\00\00\00\00\00\dd\e4\ad\f5\ce?\11\8e\bbe\15!\ca\bc\00\00\00\00\00\00\e9?\00\00\00\00\00\00\00\00\00\b0\b3l\1c\99\cf?0\df\0c\ca\ec\cb\1b=\00\00\00\00\00\c0\e8?\00\00\00\00\00\00\00\00\00XM`8q\d0?\91N\ed\16\db\9c\f8<\00\00\00\00\00\a0\e8?\00\00\00\00\00\00\00\00\00`ag-\c4\d0?\e9\ea<\16\8b\18\'=\00\00\00\00\00\80\e8?\00\00\00\00\00\00\00\00\00\e8\'\82\8e\17\d1?\1c\f0\a5c\0e!,\bd\00\00\00\00\00`\e8?\00\00\00\00\00\00\00\00\00\f8\ac\cb\\k\d1?\81\16\a5\f7\cd\9a+=\00\00\00\00\00@\e8?\00\00\00\00\00\00\00\00\00hZc\99\bf\d1?\b7\bdGQ\ed\a6,=\00\00\00\00\00 \e8?\00\00\00\00\00\00\00\00\00\b8\0emE\14\d2?\ea\baF\ba\de\87\n=\00\00\00\00\00\e0\e7?\00\00\00\00\00\00\00\00\00\90\dc|\f0\be\d2?\f4\04PJ\fa\9c*=\00\00\00\00\00\c0\e7?\00\00\00\00\00\00\00\00\00`\d3\e1\f1\14\d3?\b8<!\d3z\e2(\bd\00\00\00\00\00\a0\e7?\00\00\00\00\00\00\00\00\00\10\bevgk\d3?\c8w\f1\b0\cdn\11=\00\00\00\00\00\80\e7?\00\00\00\00\00\00\00\00\0003wR\c2\d3?\\\bd\06\b6T;\18=\00\00\00\00\00`\e7?\00\00\00\00\00\00\00\00\00\e8\d5#\b4\19\d4?\9d\e0\90\ec6\e4\08=\00\00\00\00\00@\e7?\00\00\00\00\00\00\00\00\00\c8q\c2\8dq\d4?u\d6g\t\ce\'/\bd\00\00\00\00\00 \e7?\00\00\00\00\00\00\00\00\000\17\9e\e0\c9\d4?\a4\d8\n\1b\89 .\bd\00\00\00\00\00\00\e7?\00\00\00\00\00\00\00\00\00\a08\07\ae\"\d5?Y\c7d\81p\be.=\00\00\00\00\00\e0\e6?\00\00\00\00\00\00\00\00\00\d0\c8S\f7{\d5?\ef@]\ee\ed\ad\1f=\00\00\00\00\00\c0\e6?\00\00\00\00\00\00\00\00\00`Y\df\bd\d5\d5?\dce\a4\08*\0b\n\bd")
 (data (i32.const 6232) "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\f0?n\bf\88\1aO;\9b<53\fb\a9=\f6\ef?]\dc\d8\9c\13`q\bca\80w>\9a\ec\ef?\d1f\87\10z^\90\bc\85\7fn\e8\15\e3\ef?\13\f6g5R\d2\8c<t\85\15\d3\b0\d9\ef?\fa\8e\f9#\80\ce\8b\bc\de\f6\dd)k\d0\ef?a\c8\e6aN\f7`<\c8\9bu\18E\c7\ef?\99\d33[\e4\a3\90<\83\f3\c6\ca>\be\ef?m{\83]\a6\9a\97<\0f\89\f9lX\b5\ef?\fc\ef\fd\92\1a\b5\8e<\f7Gr+\92\ac\ef?\d1\9c/p=\be><\a2\d1\d32\ec\a3\ef?\0bn\90\894\03j\bc\1b\d3\fe\aff\9b\ef?\0e\bd/*RV\95\bcQ[\12\d0\01\93\ef?U\eaN\8c\ef\80P\bc\cc1l\c0\bd\8a\ef?\16\f4\d5\b9#\c9\91\bc\e0-\a9\ae\9a\82\ef?\afU\\\e9\e3\d3\80<Q\8e\a5\c8\98z\ef?H\93\a5\ea\15\1b\80\bc{Q}<\b8r\ef?=2\deU\f0\1f\8f\bc\ea\8d\8c8\f9j\ef?\bfS\13?\8c\89\8b<u\cbo\eb[c\ef?&\eb\11v\9c\d9\96\bc\d4\\\04\84\e0[\ef?`/:>\f7\ec\9a<\aa\b9h1\87T\ef?\9d8\86\cb\82\e7\8f\bc\1d\d9\fc\"PM\ef?\8d\c3\a6DAo\8a<\d6\8cb\88;F\ef?}\04\e4\b0\05z\80<\96\dc}\91I?\ef?\94\a8\a8\e3\fd\8e\96<8bunz8\ef?}Ht\f2\18^\87<?\a6\b2O\ce1\ef?\f2\e7\1f\98+G\80<\dd|\e2eE+\ef?^\08q?{\b8\96\bc\81c\f5\e1\df$\ef?1\ab\tm\e1\f7\82<\e1\de\1f\f5\9d\1e\ef?\fa\bfo\1a\9b!=\bc\90\d9\da\d0\7f\18\ef?\b4\n\0cr\827\8b<\0b\03\e4\a6\85\12\ef?\8f\cb\ce\89\92\14n<V/>\a9\af\0c\ef?\b6\ab\b0MuM\83<\15\b71\n\fe\06\ef?Lt\ac\e2\01B\86<1\d8L\fcp\01\ef?J\f8\d3]9\dd\8f<\ff\16d\b2\08\fc\ee?\04[\8e;\80\a3\86\bc\f1\9f\92_\c5\f6\ee?hPK\cc\edJ\92\bc\cb\a9:7\a7\f1\ee?\8e-Q\1b\f8\07\99\bcf\d8\05m\ae\ec\ee?\d26\94>\e8\d1q\bc\f7\9f\e54\db\e7\ee?\15\1b\ce\b3\19\19\99\bc\e5\a8\13\c3-\e3\ee?mL*\a7H\9f\85<\"4\12L\a6\de\ee?\8ai(z`\12\93\bc\1c\80\ac\04E\da\ee?[\89\17H\8f\a7X\bc*.\f7!\n\d6\ee?\1b\9aIg\9b,|\bc\97\a8P\d9\f5\d1\ee?\11\ac\c2`\edcC<-\89a`\08\ce\ee?\efd\06;\tf\96<W\00\1d\edA\ca\ee?y\03\a1\da\e1\ccn<\d0<\c1\b5\a2\c6\ee?0\12\0f?\8e\ff\93<\de\d3\d7\f0*\c3\ee?\b0\afz\bb\ce\90v<\'*6\d5\da\bf\ee?w\e0T\eb\bd\1d\93<\0d\dd\fd\99\b2\bc\ee?\8e\a3q\004\94\8f\bc\a7,\9dv\b2\b9\ee?I\a3\93\dc\cc\de\87\bcBf\cf\a2\da\b6\ee?_8\0f\bd\c6\dex\bc\82O\9dV+\b4\ee?\f6\\{\ecF\12\86\bc\0f\92]\ca\a4\b1\ee?\8e\d7\fd\18\055\93<\da\'\b56G\af\ee?\05\9b\8a/\b7\98{<\fd\c7\97\d4\12\ad\ee?\tT\1c\e2\e1c\90<)TH\dd\07\ab\ee?\ea\c6\19P\85\c74<\b7FY\8a&\a9\ee?5\c0d+\e62\94<H!\ad\15o\a7\ee?\9fv\99aJ\e4\8c\bc\t\dcv\b9\e1\a5\ee?\a8M\ef;\c53\8c\bc\85U:\b0~\a4\ee?\ae\e9+\89xS\84\bc \c3\cc4F\a3\ee?XXVx\dd\ce\93\bc%\"U\828\a2\ee?d\19~\80\aa\10W<s\a9L\d4U\a1\ee?(\"^\bf\ef\b3\93\bc\cd;\7ff\9e\a0\ee?\82\b94\87\ad\12j\bc\bf\da\0bu\12\a0\ee?\ee\a9m\b8\efgc\bc/\1ae<\b2\9f\ee?Q\88\e0T=\dc\80\bc\84\94Q\f9}\9f\ee?\cf>Z~d\1fx\bct_\ec\e8u\9f\ee?\b0}\8b\c0J\ee\86\bct\81\a5H\9a\9f\ee?\8a\e6U\1e2\19\86\bc\c9gBV\eb\9f\ee?\d3\d4\t^\cb\9c\90<?]\deOi\a0\ee?\1d\a5M\b9\dc2{\bc\87\01\ebs\14\a1\ee?k\c0gT\fd\ec\94<2\c10\01\ed\a1\ee?Ul\d6\ab\e1\ebe<bN\cf6\f3\a2\ee?B\cf\b3/\c5\a1\88\bc\12\1a>T\'\a4\ee?47;\f1\b6i\93\bc\13\ceL\99\89\a5\ee?\1e\ff\19:\84^\80\bc\ad\c7#F\1a\a7\ee?nWr\d8P\d4\94\bc\ed\92D\9b\d9\a8\ee?\00\8a\0e[g\ad\90<\99f\8a\d9\c7\aa\ee?\b4\ea\f0\c1/\b7\8d<\db\a0*B\e5\ac\ee?\ff\e7\c5\9c`\b6e\bc\8cD\b5\162\af\ee?D_\f3Y\83\f6{<6w\15\99\ae\b1\ee?\83=\1e\a7\1f\t\93\bc\c6\ff\91\0b[\b4\ee?)\1el\8b\b8\a9]\bc\e5\c5\cd\b07\b7\ee?Y\b9\90|\f9#l\bc\0fR\c8\cbD\ba\ee?\aa\f9\f4\"CC\92\bcPN\de\9f\82\bd\ee?K\8ef\d7l\ca\85\bc\ba\07\cap\f1\c0\ee?\'\ce\91+\fc\afq<\90\f0\a3\82\91\c4\ee?\bbs\n\e15\d2m<##\e3\19c\c8\ee?c\"b\"\04\c5\87\bce\e5]{f\cc\ee?\d51\e2\e3\86\1c\8b<3-J\ec\9b\d0\ee?\15\bb\bc\d3\d1\bb\91\bc]%>\b2\03\d5\ee?\d21\ee\9c1\cc\90<X\b30\13\9e\d9\ee?\b3Zsn\84i\84<\bf\fdyUk\de\ee?\b4\9d\8e\97\cd\df\82\bcz\f3\d3\bfk\e3\ee?\873\cb\92w\1a\8c<\ad\d3Z\99\9f\e8\ee?\fa\d9\d1J\8f{\90\bcf\b6\8d)\07\ee\ee?\ba\ae\dcV\d9\c3U\bc\fb\15O\b8\a2\f3\ee?@\f6\a6=\0e\a4\90\bc:Y\e5\8dr\f9\ee?4\93\ad8\f4\d6h\bcG^\fb\f2v\ff\ee?5\8aXk\e2\ee\91\bcJ\06\a10\b0\05\ef?\cd\dd_\n\d7\fft<\d2\c1K\90\1e\0c\ef?\ac\98\92\fa\fb\bd\91\bc\t\1e\d7[\c2\12\ef?\b3\0c\af0\aens<\9cR\85\dd\9b\19\ef?\94\fd\9f\\2\e3\8e<z\d0\ff_\ab \ef?\acY\t\d1\8f\e0\84<K\d1W.\f1\'\ef?g\1aN8\af\cdc<\b5\e7\06\94m/\ef?h\19\92l,kg<i\90\ef\dc 7\ef?\d2\b5\cc\83\18\8a\80\bc\fa\c3]U\0b?\ef?o\fa\ff?]\ad\8f\bc|\89\07J-G\ef?I\a9u8\ae\0d\90\bc\f2\89\0d\08\87O\ef?\a7\07=\a6\85\a3t<\87\a4\fb\dc\18X\ef?\0f\"@ \9e\91\82\bc\98\83\c9\16\e3`\ef?\ac\92\c1\d5PZ\8e<\852\db\03\e6i\ef?Kk\01\acY:\84<`\b4\01\f3!s\ef?\1f>\b4\07!\d5\82\bc_\9b{3\97|\ef?\c9\0dG;\b9*\89\bc)\a1\f5\14F\86\ef?\d3\88:`\04\b6t<\f6?\8b\e7.\90\ef?qr\9dQ\ec\c5\83<\83L\c7\fbQ\9a\ef?\f0\91\d3\8f\12\f7\8f\bc\da\90\a4\a2\af\a4\ef?}t#\e2\98\ae\8d\bc\f1g\8e-H\af\ef?\08 \aaA\bc\c3\8e<\'Za\ee\1b\ba\ef?2\eb\a9\c3\94+\84<\97\bak7+\c5\ef?\ee\85\d11\a9d\8a<@En[v\d0\ef?\ed\e3;\e4\ba7\8e\bc\14\be\9c\ad\fd\db\ef?\9d\cd\91M;\89w<\d8\90\9e\81\c1\e7\ef?\89\cc`A\c1\05S<\f1q\8f+\c2\f3\ef?")
 (data (i32.const 8288) "\02\00\00\00\01\00\00\00\01\00\00\00\02\00\00\001\00")
 (data (i32.const 8320) "\02\00\00\00\01\00\00\00\01\00\00\00\02\00\00\002\00")
 (data (i32.const 8352) "\02\00\00\00\01\00\00\00\01\00\00\00\02\00\00\003\00")
 (data (i32.const 8384) "\02\00\00\00\01\00\00\00\01\00\00\00\02\00\00\004\00")
 (data (i32.const 8416) "\02\00\00\00\01\00\00\00\01\00\00\00\02\00\00\005\00")
 (data (i32.const 8448) "\02\00\00\00\01\00\00\00\01\00\00\00\02\00\00\006\00")
 (data (i32.const 8480) "\02\00\00\00\01\00\00\00\01\00\00\00\02\00\00\007\00")
 (data (i32.const 8512) "\02\00\00\00\01\00\00\00\01\00\00\00\02\00\00\008\00")
 (data (i32.const 8544) "\02\00\00\00\01\00\00\00\01\00\00\00\02\00\00\009\00")
 (data (i32.const 8576) "\02\00\00\00\01\00\00\00\01\00\00\00\02\00\00\00a\00")
 (data (i32.const 8608) "\02\00\00\00\01\00\00\00\01\00\00\00\02\00\00\00b\00")
 (data (i32.const 8640) "\02\00\00\00\01\00\00\00\01\00\00\00\02\00\00\00c\00")
 (data (i32.const 8672) "\02\00\00\00\01\00\00\00\01\00\00\00\02\00\00\00d\00")
 (data (i32.const 8704) "\02\00\00\00\01\00\00\00\01\00\00\00\02\00\00\00e\00")
 (data (i32.const 8736) "\02\00\00\00\01\00\00\00\01\00\00\00\02\00\00\00f\00")
 (data (i32.const 8768) "@\00\00\00\01\00\00\00\00\00\00\00@\00\00\00P\02\00\00p \00\00\90 \00\00\b0 \00\00\d0 \00\00\f0 \00\00\10!\00\000!\00\00P!\00\00p!\00\00\90!\00\00\b0!\00\00\d0!\00\00\f0!\00\00\10\"\00\000\"\00\00")
 (data (i32.const 8848) "\10\00\00\00\01\00\00\00\03\00\00\00\10\00\00\00P\"\00\00P\"\00\00@\00\00\00\10\00\00\00")
 (data (i32.const 8880) "F\00\00\00\01\00\00\00\01\00\00\00F\00\00\00l\00o\00w\00e\00s\00t\00D\00i\00s\00c\00e\00r\00n\00i\00b\00l\00e\00V\00a\00l\00u\00e\00 \00m\00u\00s\00t\00 \00b\00e\00 \00>\00=\00 \001\00")
 (data (i32.const 8976) "*\00\00\00\01\00\00\00\01\00\00\00*\00\00\00a\00s\00s\00e\00m\00b\00l\00y\00/\00H\00i\00s\00t\00o\00g\00r\00a\00m\00.\00t\00s\00")
 (data (i32.const 9040) "\ba\00\00\00\01\00\00\00\01\00\00\00\ba\00\00\00h\00i\00g\00h\00e\00s\00t\00T\00r\00a\00c\00k\00a\00b\00l\00e\00V\00a\00l\00u\00e\00 \00m\00u\00s\00t\00 \00b\00e\00 \00>\00=\00 \002\00 \00*\00 \00l\00o\00w\00e\00s\00t\00D\00i\00s\00c\00e\00r\00n\00i\00b\00l\00e\00V\00a\00l\00u\00e\00 \00(\00 \002\00 \00*\00 \00$\00{\00l\00o\00w\00e\00s\00t\00D\00i\00s\00c\00e\00r\00n\00i\00b\00l\00e\00V\00a\00l\00u\00e\00}\00 \00)\00")
 (data (i32.const 9248) "l\00\00\00\01\00\00\00\01\00\00\00l\00\00\00n\00u\00m\00b\00e\00r\00O\00f\00S\00i\00g\00n\00i\00f\00i\00c\00a\00n\00t\00V\00a\00l\00u\00e\00D\00i\00g\00i\00t\00s\00 \00m\00u\00s\00t\00 \00b\00e\00 \00b\00e\00t\00w\00e\00e\00n\00 \000\00 \00a\00n\00d\00 \005\00")
 (data (i32.const 9376) "\f8\ac\b1k($\f7?\00\b0\cd\ee_\t\e1\bf\a1\cc\d2f\f7\e1\f6?\00\d0v\bd\94\84\e0\bf\8a\d40\0e=\a1\f6?\00\f8\e8\aeC\01\e0\bf\85l\d02\eca\f6?\00@\0b6\c5\fe\de\bf\f8\98\11\95\fa#\f6?\00\e0\b7\1a\d9\fd\dd\bfl\02\cf\a4[\e7\f5?\00\90\c7\0c\ae\ff\dc\bf\b8O!Z\05\ac\f5?\00\a0\fd\118\04\dc\bf\1en\16\0f\edq\f5?\00\e0:2g\0b\db\bf5\f8\0bY\t9\f5?\00\b0-Z/\15\da\bf\dd\ada\edO\01\f5?\00`\f8Z\7f!\d9\bf\d0{H\8e\b8\ca\f4?\00\90q\b0M0\d8\bf\eeO3\b49\95\f4?\00\e0\a9\f9\89A\d7\bfi\d5\af\df\cb`\f4?\00\90\19\b5+U\d6\bfS\b9\e4Nf-\f4?\00\10\9b\a2#k\d5\bf\a6\d8\1d\11\01\fb\f3?\00\a0_\0fe\83\d4\bf6X\0c\b7\95\c9\f3?\00\a0\f67\e9\9d\d3\bfJ\fd\b6J\1c\99\f3?\00`\8dS\a1\ba\d2\bf\b5\99\e0\0c\8ei\f3?\00@\ca@\83\d9\d1\bf\b2\e7\13\82\e4:\f3?\00\e0@:\85\fa\d0\bf\b1\bd\85\19\19\0d\f3?\000\e72\9c\1d\d0\bf\d7q\b2\ca%\e0\f2?\00`\fa\a2}\85\ce\bf\82\cd\13\cf\04\b4\f2?\00\80=c\c8\d3\cc\bfP\cb|,\b0\88\f2?\00\a0\14L\03&\cb\bf\e5M\94c\"^\f2?\00\e0O/\1c|\c9\bf\b1\15\86=V4\f2?\00\00\80?\02\d6\c7\bf8\af>\e3F\0b\f2?\00\e0\05\1a\a73\c6\bf\dd\a3\cd\fd\ee\e2\f1?\00\00W\e9\f5\94\c4\bf09\0bXJ\bb\f1?\00\a0\e0$\e4\f9\c2\bf\00\"\7f\84S\94\f1?\00\c0\fdZYb\c1\bf<\d7\d5\c0\06n\f1?\00\80\bdu\9a\9c\bf\bf\c2\e4\b7G_H\f1?\00\c0\f9[W{\bc\bf\d1\85\00\adX#\f1?\00\80\f4\0f\c6`\b9\bf\'\"S\0f\f0\fe\f0?\00\00\b6G\e2L\b6\bf\8f:\d0w \db\f0?\00@\01\b2x?\b3\bf\d9\80Y\d6\e6\b7\f0?\00\c0B\1a}8\b0\bf\8d@{\fe>\95\f0?\00\00\b5\08\92o\aa\bf\83;\c5\ca%s\f0?\00\00wO\95z\a4\bf\\\1b\0d\e4\97Q\f0?\00\00\0c\c5\a8#\9d\bf\a2\8e \c1\910\f0?\00\00x)&j\91\bf!~\b3%\10\10\f0?\00\00\e8\d8\f8 w\bfk\a7\ca\f9~\c0\ef?\00\00P\b1S\fe\86?\84\f1\f6\d3eD\ef?\00\80\0f\e1\cc\1c\a1?\7f\10\84\9f\07\cc\ee?\00\80\8b\8c\fcM\ac?\e8Z\97\99:W\ee?\00@W\1e2\aa\b3?\e6=\bd\f0\d6\e5\ed?\00\80\8b\d0\a0\18\b9?\b38\ff\81\b6w\ed?\00@\04\da\e9r\be?C\e9Mr\b5\0c\ed?\00`\7fP\d2\dc\c1?cu\0e\dc\b2\a4\ec?\00\a0\de\03\abv\c4?Q\cb\d6\e8\8e?\ec?\00 \e2wC\07\c7?L\0c\02O+\dd\eb?\00@\a9\8b\de\8e\c9?\ca\15`\00l}\eb?\00\e0\d2j\b8\0d\cc?\8f3.n6 \eb?\00\e0\ce\af\n\84\ce?9P)&p\c5\ea?\00\80g\b4\ny\d0?\dd1\'\bc\01m\ea?\00\c0\01h\05\ac\d1?\8b\f1?\bc\d3\16\ea?\00\e0\fe\d4\11\db\d2?\ad\fegI\d1\c2\e9?\00\80\c5NF\06\d4?\02\99|\f4\e4p\e9?\00\f0:\t\be-\d5?\f2\bc\829\fb \e9?\00\d0P \90Q\d6?\f1Y\f7\87\01\d3\e8?\00\f0\ea\cd\d2q\d7?m\f6\b9\eb\e5\86\e8?\00\90}\85\9c\8e\d8?\94\b9X\b6\97<\e8?\00`\e1U\01\a8\d9?\"\10\c6\ff\05\f4\e7?\00\d0\d3n\18\be\da?\ca\15\14\18\"\ad\e7?\00\e0\a0\ae\f2\d0\db?\8c\ff\9e\f9\dcg\e7?\00@\bf=\a4\e0\dc?")
 (data (i32.const 10400) "\8e\n\b9\12\00 \e6?\05\b6D\06\ab\04\89<\a64W\04\00`\e6?\a9\f7b\ea\9b\ffa<\c5\f2%\c3\ff\9f\e6?\ba\90<\cb\cf~\82<\04Z\b98\00\e0\e6?&\93sV\88\ff\88<\e3\94\99\e0\ff\1f\e7?\b1\82_\'@\fd\8a<\10\0eY\15\00`\e7?A\83#\b4u\fdr\bc\d5[e\12\00\a0\e7?v+$|\e6\08x<\a6\e9Y2\00\e0\e7?\b7\"\f6&\e4\08b\bc\d2\b2\b4\ed\ff\1f\e8?/\c9\a5\1eF\02\84\bc\c3\fc\fa-\00`\e8?\1f\9a\f2\a2\f4\f7m<Pk\8c\f7\ff\9f\e8?\fd\95I\tS\04\8e\bcf\15g9\00\e0\e8?E{\c7\be\f3\04\8a\bcE\17\bf\e2\ff\1f\e9?< \0e@4\faw\bc\d1\9f\\\cc\ff_\e9?]i\a0\05\80\ffv\bcgG\ba;\00\a0\e9?\03~\ec\c4\c4\f8p<\a5-\b9\e7\ff\df\e9?\02F\8cG\d9\7f\8e<\af\fd.\d7\ff\1f\ea?~\ae\cdMU\0cj\bc\95\ff\04\de\ff_\ea?k\b2\e9\8c\a9}\86<+\8d^\ca\ff\9f\ea?\de\13L\b5\c9\84\82\bc\ea\03\ad\dd\ff\df\ea?<.`\ea\c8\12X<M=\0d\f1\ff\1f\eb?\9cx\'\ad\dd\fa\8e\bcZ\16!\ce\ff_\eb?7\12\c6\19\17\cbS<t\e6P\d9\ff\9f\eb?\00\ce\94A\d9\f7s<\af\a8\9c\13\00\e0\eb?\c0\9b]!\c4\nu<\99\dfF[\00 \ec?\c9\c1\e9S\a6\eek<\ae\f7\b9@\00`\ec?\d6pJ\'\9f\07|\bc\8a\fdUb\00\a0\ec?\1fL\e8v@\0bz\bc]\tL\d9\ff\df\ec?\d7\b5\9a\f93\f9\88<\cf\d6u\f9\ff\1f\ed?\be\e1_f\08,X\bc\93\1cV\a2\ff_\ed?\f3\95\d2\9b(\04{\bc\0c\8b\"\9d\ff\9f\ed?6\a2\0f4Q\02\87<\16~\bce\00\e0\ed?\0c\d8\a4\16\1e\01u\bc\91G\f6\02\00 \ee?\e0b\ef\t/\80\89<\d8\a6\d7W\00`\ee?\fa\f7\0cXu\0b~\bc\0c\c0\ed\'\00\a0\ee?\11\98E\t\83\84\8c\bc|\cb\f5l\00\e0\ee?\f4v\15\95\'\80\8f\bc\cc}+x\00 \ef?\8fStr\d9\81\8f\bc\nE\0c&\00`\ef?\dc\ff\'\'\00q@\bc3\d5\8c\e8\ff\9f\ef?\b0\a8\fd\e1\dc\1bX\bc\89\86\0f\d5\ff\df\ef?n\8e\91\cb\1a\f9\87<g#)\04\00 \f0?\81F2e\f3\7f\9b<h\d6\e3\e3\ff_\f0?{\95\ae\dd\08\fa\86<W\a7\85\n\00\a0\f0?\91\fb\d3\80\de\e2W\bc\cc?_\1a\00\e0\f0?\14\f0\c5\053\82\91\bc\f5\ba\af\f8\ff\1f\f1?\c2\ba\80f\bb\fa\8b\bc\ad\91M\e5\ff_\f1?\ef\e77\17\12\7f\9d\bc\e16\ac\11\00\a0\f1?\ff\f5\16\05\n\00\9c<HB\c8\19\00\e0\f1?\a0]\da\e4\fb\82\90\bcn^\fe\0f\00 \f2?C\fb\9cL\d0\fd\88\bc\91\d8\9f&\00`\f2?\82\d1\94y*\fe\8c<\da\e6\a6)\00\a0\f2?\c5\8b^qs\02p\bc9>)\e0\ff\df\f2?\f9\a6\b2\da9|\9b<\82\f0\dc\f7\ff\1f\f3?TR\dcn3\f1}<`\8bZ\f0\ff_\f3?\eb1\cdLV\03\9e\bc\cc\ae\0e.\00\a0\f3?w\a4\d3K\e7\f0u<6\b2;\04\00\e0\f3?3\88\9d\14\cb}\9c<\ff\87\d1\02\00 \f4?(=-\cf\af\08~<\b1|8\0d\00`\f4?\a6\99e\857\08\82<\89\9fV\04\00\a0\f4?\d2\bcO\90\\\fa\89\bc\f3C5\04\00\e0\f4?)S\17\ed%\11x\bc\0f\7f\02\cc\ff\1f\f5?\dcTw\84\d8\83\98<o\b3\87\fd\ff_\f5?\07(\d01\e7\t\87\bc\ba\f7\1d\f2\ff\9f\f5?\02{rh\9f\f7\87<\814\fc\eb\ff\df\f5?>\e90.\90\80\91\bc")
 (data (i32.const 11424) "|\00\00\00\01\00\00\00\01\00\00\00|\00\00\00h\00i\00g\00h\00e\00s\00t\00T\00r\00a\00c\00k\00a\00b\00l\00e\00V\00a\00l\00u\00e\00 \00c\00a\00n\00n\00o\00t\00 \00b\00e\00 \00<\00 \00(\002\00 \00*\00 \00l\00o\00w\00e\00s\00t\00D\00i\00s\00c\00e\00r\00n\00i\00b\00l\00e\00V\00a\00l\00u\00e\00)\00")
 (data (i32.const 11568) "&\00\00\00\01\00\00\00\01\00\00\00&\00\00\00~\00l\00i\00b\00/\00a\00r\00r\00a\00y\00b\00u\00f\00f\00e\00r\00.\00t\00s\00")
 (data (i32.const 11632) "D\00\00\00\01\00\00\00\01\00\00\00D\00\00\00a\00s\00s\00e\00m\00b\00l\00y\00/\00R\00e\00c\00o\00r\00d\00e\00d\00V\00a\00l\00u\00e\00s\00I\00t\00e\00r\00a\00t\00o\00r\00.\00t\00s\00")
 (data (i32.const 11728) "B\00\00\00\01\00\00\00\01\00\00\00B\00\00\00C\00o\00n\00c\00u\00r\00r\00e\00n\00t\00 \00M\00o\00d\00i\00f\00i\00c\00a\00t\00i\00o\00n\00 \00E\00x\00c\00e\00p\00t\00i\00o\00n\00")
 (data (i32.const 11824) ":\00\00\00\01\00\00\00\01\00\00\00:\00\00\00I\00n\00d\00e\00x\00 \00O\00u\00t\00 \00O\00f\00 \00B\00o\00u\00n\00d\00s\00 \00E\00x\00c\00e\00p\00t\00i\00o\00n\00")
 (data (i32.const 11904) "X\00\00\00\01\00\00\00\01\00\00\00X\00\00\00H\00i\00s\00t\00o\00g\00r\00a\00m\00 \00r\00e\00c\00o\00r\00d\00e\00d\00 \00v\00a\00l\00u\00e\00 \00c\00a\00n\00n\00o\00t\00 \00b\00e\00 \00n\00e\00g\00a\00t\00i\00v\00e\00.\00")
 (data (i32.const 12016) "\0c\00\00\00\01\00\00\00\01\00\00\00\0c\00\00\00V\00a\00l\00u\00e\00 \00")
 (data (i32.const 12048) "L\00\00\00\01\00\00\00\01\00\00\00L\00\00\00 \00i\00s\00 \00o\00u\00t\00s\00i\00d\00e\00 \00o\00f\00 \00h\00i\00s\00t\00o\00g\00r\00a\00m\00 \00c\00o\00v\00e\00r\00e\00d\00 \00r\00a\00n\00g\00e\00")
 (data (i32.const 12144) "$\00\00\00\01\00\00\00\01\00\00\00$\00\00\00I\00n\00d\00e\00x\00 \00o\00u\00t\00 \00o\00f\00 \00r\00a\00n\00g\00e\00")
 (data (i32.const 12208) "$\00\00\00\01\00\00\00\01\00\00\00$\00\00\00~\00l\00i\00b\00/\00t\00y\00p\00e\00d\00a\00r\00r\00a\00y\00.\00t\00s\00")
 (data (i32.const 12272) "F\00\00\00\01\00\00\00\01\00\00\00F\00\00\00 \00w\00o\00u\00l\00d\00 \00o\00v\00e\00r\00f\00l\00o\00w\00 \00s\00h\00o\00r\00t\00 \00i\00n\00t\00e\00g\00e\00r\00 \00c\00o\00u\00n\00t\00")
 (data (i32.const 12368) "r\00\00\00\01\00\00\00\01\00\00\00r\00\00\00 \00 \00 \00 \00 \00 \00 \00V\00a\00l\00u\00e\00 \00 \00 \00 \00 \00P\00e\00r\00c\00e\00n\00t\00i\00l\00e\00 \00T\00o\00t\00a\00l\00C\00o\00u\00n\00t\00 \001\00/\00(\001\00-\00P\00e\00r\00c\00e\00n\00t\00i\00l\00e\00)\00\n\00\n\00")
 (data (i32.const 12512) "<\00\00\00\01\00\00\00\01\00\00\00<\00\00\00a\00s\00s\00e\00m\00b\00l\00y\00/\00P\00e\00r\00c\00e\00n\00t\00i\00l\00e\00I\00t\00e\00r\00a\00t\00o\00r\00.\00t\00s\00")
 (data (i32.const 12592) "\02\00\00\00\01\00\00\00\01\00\00\00\02\00\00\00.\00")
 (data (i32.const 12624) "\02\00\00\00\01\00\00\00\01\00\00\00\02\00\00\00\n\00")
 (data (i32.const 12656) "\18\00\00\00\01\00\00\00\01\00\00\00\18\00\00\00#\00[\00M\00e\00a\00n\00 \00 \00 \00 \00=\00 \00")
 (data (i32.const 12704) "&\00\00\00\01\00\00\00\01\00\00\00&\00\00\00,\00 \00S\00t\00d\00D\00e\00v\00i\00a\00t\00i\00o\00n\00 \00 \00 \00=\00 \00")
 (data (i32.const 12768) "\1c\00\00\00\01\00\00\00\01\00\00\00\1c\00\00\00]\00\n\00#\00[\00M\00a\00x\00 \00 \00 \00 \00 \00=\00 \00")
 (data (i32.const 12816) "&\00\00\00\01\00\00\00\01\00\00\00&\00\00\00,\00 \00T\00o\00t\00a\00l\00 \00c\00o\00u\00n\00t\00 \00 \00 \00 \00=\00 \00")
 (data (i32.const 12880) "\1c\00\00\00\01\00\00\00\01\00\00\00\1c\00\00\00]\00\n\00#\00[\00B\00u\00c\00k\00e\00t\00s\00 \00=\00 \00")
 (data (i32.const 12928) "&\00\00\00\01\00\00\00\01\00\00\00&\00\00\00,\00 \00S\00u\00b\00B\00u\00c\00k\00e\00t\00s\00 \00 \00 \00 \00 \00=\00 \00")
 (data (i32.const 12992) "\04\00\00\00\01\00\00\00\01\00\00\00\04\00\00\00]\00\n\00")
 (data (i32.const 13024) "\9c\00\00\00\01\00\00\00\01\00\00\00\9c\00\00\00T\00h\00e\00 \00o\00t\00h\00e\00r\00 \00h\00i\00s\00t\00o\00g\00r\00a\00m\00 \00i\00n\00c\00l\00u\00d\00e\00s\00 \00v\00a\00l\00u\00e\00s\00 \00t\00h\00a\00t\00 \00d\00o\00 \00n\00o\00t\00 \00f\00i\00t\00 \00i\00n\00 \00t\00h\00i\00s\00 \00h\00i\00s\00t\00o\00g\00r\00a\00m\00\'\00s\00 \00r\00a\00n\00g\00e\00.\00")
 (data (i32.const 13200) "\ac\00\00\00\01\00\00\00\01\00\00\00\ac\00\00\00A\00t\00t\00e\00m\00p\00t\00i\00n\00g\00 \00a\00c\00c\00e\00s\00s\00 \00a\00t\00 \00i\00n\00d\00e\00x\00 \00$\00{\00v\00i\00r\00t\00u\00a\00l\00I\00n\00d\00e\00x\00}\00,\00 \00b\00e\00y\00o\00n\00d\00 \00v\00i\00r\00t\00u\00a\00l\00L\00e\00n\00g\00t\00h\00 \00$\00{\00t\00h\00i\00s\00.\00v\00i\00r\00t\00u\00a\00l\00L\00e\00n\00g\00t\00h\00}\00")
 (data (i32.const 13392) "T\00\00\00\01\00\00\00\01\00\00\00T\00\00\00a\00s\00s\00e\00m\00b\00l\00y\00/\00p\00a\00c\00k\00e\00d\00a\00r\00r\00a\00y\00/\00P\00a\00c\00k\00e\00d\00A\00r\00r\00a\00y\00C\00o\00n\00t\00e\00x\00t\00.\00t\00s\00")
 (data (i32.const 13504) "p\00\00\00\01\00\00\00\01\00\00\00p\00\00\00i\00n\00s\00e\00r\00t\00e\00d\00 \00s\00l\00o\00t\00 \00i\00n\00d\00e\00x\00 \00i\00s\00 \00o\00u\00t\00 \00o\00f\00 \00r\00a\00n\00g\00e\00 \00g\00i\00v\00e\00n\00 \00p\00r\00o\00v\00i\00d\00e\00d\00 \00m\00a\00s\00k\00s\00")
 (data (i32.const 13632) ",\00\00\00\01\00\00\00\01\00\00\00,\00\00\00o\00t\00h\00e\00r\00H\00i\00s\00t\00o\00g\00r\00a\00m\00 \00c\00o\00u\00n\00t\00 \00(\00")
 (data (i32.const 13696) "\16\00\00\00\01\00\00\00\01\00\00\00\16\00\00\00)\00 \00a\00t\00 \00v\00a\00l\00u\00e\00 \00")
 (data (i32.const 13744) "8\00\00\00\01\00\00\00\01\00\00\008\00\00\00 \00i\00s\00 \00l\00a\00r\00g\00e\00r\00 \00t\00h\00a\00n\00 \00t\00h\00i\00s\00 \00o\00n\00e\00\'\00s\00 \00(\00")
 (data (i32.const 13824) "\02\00\00\00\01\00\00\00\01\00\00\00\02\00\00\00)\00")
 (data (i32.const 13856) "h\00\00\00\01\00\00\00\01\00\00\00h\00\00\00C\00a\00n\00n\00o\00t\00 \00e\00n\00c\00o\00d\00e\00 \00h\00i\00s\00t\00o\00g\00r\00a\00m\00 \00c\00o\00n\00t\00a\00i\00n\00i\00n\00g\00 \00n\00e\00g\00a\00t\00i\00v\00e\00 \00c\00o\00u\00n\00t\00s\00 \00(\00")
 (data (i32.const 13984) "\16\00\00\00\01\00\00\00\01\00\00\00\16\00\00\00)\00 \00a\00t\00 \00i\00n\00d\00e\00x\00 \00")
 (data (i32.const 14032) "B\00\00\00\01\00\00\00\01\00\00\00B\00\00\00,\00 \00c\00o\00r\00r\00e\00s\00p\00o\00n\00d\00i\00n\00g\00 \00t\00h\00e\00 \00v\00a\00l\00u\00e\00 \00r\00a\00n\00g\00e\00 \00[\00")
 (data (i32.const 14128) "\02\00\00\00\01\00\00\00\01\00\00\00\02\00\00\00,\00")
 (data (i32.const 14160) "(\00\00\00\01\00\00\00\01\00\00\00(\00\00\00a\00s\00s\00e\00m\00b\00l\00y\00/\00e\00n\00c\00o\00d\00i\00n\00g\00.\00t\00s\00")
 (data (i32.const 14224) "\84\00\00\00\01\00\00\00\01\00\00\00\84\00\00\00S\00h\00o\00u\00l\00d\00 \00n\00e\00v\00e\00r\00 \00b\00e\00 \00a\00d\00j\00u\00s\00t\00i\00n\00g\00 \00t\00h\00e\00 \00v\00i\00r\00t\00u\00a\00l\00 \00s\00i\00z\00e\00 \00o\00f\00 \00a\00 \00n\00o\00n\00-\00p\00a\00c\00k\00e\00d\00 \00c\00o\00n\00t\00e\00x\00t\00")
 (data (i32.const 14384) "^\00\00\00\01\00\00\00\01\00\00\00^\00\00\00C\00a\00n\00n\00o\00t\00 \00s\00e\00t\00 \00v\00i\00r\00t\00u\00a\00l\00 \00l\00e\00n\00g\00t\00h\00,\00 \00a\00s\00 \00r\00e\00q\00u\00e\00s\00t\00e\00d\00 \00l\00e\00n\00g\00t\00h\00 \00")
 (data (i32.const 14496) "X\00\00\00\01\00\00\00\01\00\00\00X\00\00\00 \00i\00s\00 \00s\00m\00a\00l\00l\00e\00r\00 \00t\00h\00a\00n\00 \00t\00h\00e\00 \00c\00u\00r\00r\00e\00n\00t\00 \00v\00i\00r\00t\00u\00a\00l\00 \00l\00e\00n\00g\00t\00h\00 \00")
 (data (i32.const 14608) "F\00\00\00\01\00\00\00\01\00\00\00F\00\00\00a\00s\00s\00e\00m\00b\00l\00y\00/\00p\00a\00c\00k\00e\00d\00a\00r\00r\00a\00y\00/\00P\00a\00c\00k\00e\00d\00A\00r\00r\00a\00y\00.\00t\00s\00")
 (data (i32.const 14704) "^\00\00\00\01\00\00\00\01\00\00\00^\00\00\00C\00a\00n\00n\00o\00t\00 \00p\00o\00p\00u\00l\00a\00t\00e\00 \00a\00r\00r\00a\00y\00 \00o\00f\00 \00s\00m\00a\00l\00l\00e\00r\00 \00v\00i\00r\00t\00u\00a\00l\00 \00l\00e\00n\00g\00t\00h\00")
 (data (i32.const 14816) "~\00\00\00\01\00\00\00\01\00\00\00~\00\00\00T\00h\00e\00 \00b\00u\00f\00f\00e\00r\00 \00d\00o\00e\00s\00 \00n\00o\00t\00 \00c\00o\00n\00t\00a\00i\00n\00 \00a\00 \00H\00i\00s\00t\00o\00g\00r\00a\00m\00 \00(\00n\00o\00 \00v\00a\00l\00i\00d\00 \00c\00o\00o\00k\00i\00e\00 \00f\00o\00u\00n\00d\00)\00")
 (data (i32.const 14960) "\96\00\00\00\01\00\00\00\01\00\00\00\96\00\00\00T\00h\00e\00 \00b\00u\00f\00f\00e\00r\00 \00d\00o\00e\00s\00 \00n\00o\00t\00 \00c\00o\00n\00t\00a\00i\00n\00 \00a\00 \00H\00i\00s\00t\00o\00g\00r\00a\00m\00 \00(\00n\00o\00 \00v\00a\00l\00i\00d\00 \00V\002\00 \00e\00n\00c\00o\00d\00i\00n\00g\00 \00c\00o\00o\00k\00i\00e\00 \00f\00o\00u\00n\00d\00)\00")
 (data (i32.const 15136) "h\00\00\00\01\00\00\00\01\00\00\00h\00\00\00w\00o\00r\00d\00 \00s\00i\00z\00e\00 \00m\00u\00s\00t\00 \00b\00e\00 \002\00,\00 \004\00,\00 \008\00,\00 \00o\00r\00 \00V\002\00m\00a\00x\00W\00o\00r\00d\00S\00i\00z\00e\00I\00n\00B\00y\00t\00e\00s\00 \00(\00")
 (data (i32.const 15264) "\0e\00\00\00\01\00\00\00\01\00\00\00\0e\00\00\00)\00 \00b\00y\00t\00e\00s\00")
 (data (i32.const 15296) "\14\00\00\00\01\00\00\00\01\00\00\00\14\00\00\00~\00l\00i\00b\00/\00r\00t\00.\00t\00s\00")
 (data (i32.const 15344) "1\00\00\00 \00\00\00\00\00\00\00 \00\00\00\00\00\00\00 \00\00\00\00\00\00\00\"A\00\00\00\00\00\00a\00\00\00\02\00\00\00 \00\00\00\07\00\00\00 \00\00\00\00\00\00\00 \00\00\00\00\00\00\00\00\00\00\00\t\00\00\00 \00\00\00\00\00\00\00\00\00\00\00\00\00\00\00 \00\00\00\00\00\00\00\00\00\00\00\00\00\00\00a\00\00\00\02\00\00\00 \00\00\00\00\00\00\00 \00\00\00\00\00\00\00 \00\00\00\13\00\00\00\a1\00\00\00\02\00\00\00 \00\00\00\00\00\00\00 \00\00\00\00\00\00\00\00\00\00\00\15\00\00\00 \00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00 \00\00\00\1b\00\00\00!\01\00\00\02\00\00\00 \00\00\00\00\00\00\00 \00\00\00\00\00\00\00\00\00\00\00\1d\00\00\00 \00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00 \00\00\00#\00\00\00!\02\00\00\02\00\00\00 \00\00\00\00\00\00\00 \00\00\00\00\00\00\00\00\00\00\00%\00\00\00 \00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00 \00\00\00+\00\00\00 \00\00\00\00\00\00\00 \00\00\00\00\00\00\00 \00\00\00\00\00\00\00\00\00\00\00-\00\00\00 \00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00 \00\00\00\00\00\00\00")
 (table $0 5 funcref)
 (elem (i32.const 1) $start:assembly/ulp~anonymous|0 $start:assembly/formatters~anonymous|0 $start:assembly/formatters~anonymous|1 $start:assembly/packedarray/bitcount~anonymous|0)
 (global $~lib/rt/tlsf/ROOT (mut i32) (i32.const 0))
 (global $~lib/ASC_LOW_MEMORY_LIMIT i32 (i32.const 0))
 (global $~lib/rt/tlsf/collectLock (mut i32) (i32.const 0))
 (global $~lib/gc/gc.auto (mut i32) (i32.const 1))
 (global $assembly/AbstractHistogramBase/NO_TAG i32 (i32.const 192))
 (global $assembly/AbstractHistogramBase/AbstractHistogramBase.identityBuilder (mut f64) (f64.const 0))
 (global $assembly/ulp/ulp i32 (i32.const 1))
 (global $~lib/ASC_SHRINK_LEVEL i32 (i32.const 0))
 (global $assembly/formatters/leftPadding i32 (i32.const 2))
 (global $~lib/builtins/u32.MAX_VALUE i32 (i32.const -1))
 (global $~argumentsLength (mut i32) (i32.const 0))
 (global $assembly/formatters/integerFormatter i32 (i32.const 3))
 (global $assembly/encoding/V2EncodingCookieBase i32 (i32.const 478450435))
 (global $assembly/encoding/V2CompressedEncodingCookieBase i32 (i32.const 478450436))
 (global $assembly/encoding/V2maxWordSizeInBytes i32 (i32.const 9))
 (global $assembly/encoding/encodingCookie i32 (i32.const 478450451))
 (global $assembly/encoding/compressedEncodingCookie i32 (i32.const 478450452))
 (global $assembly/packedarray/bitcount/bitCount i32 (i32.const 4))
 (global $assembly/packedarray/PackedArrayContext/MINIMUM_INITIAL_PACKED_ARRAY_CAPACITY i32 (i32.const 16))
 (global $~lib/util/math/log_tail (mut f64) (f64.const 0))
 (global $assembly/packedarray/PackedArrayContext/MAX_SUPPORTED_PACKED_COUNTS_ARRAY_LENGTH (mut f64) (f64.const 0))
 (global $assembly/packedarray/PackedArrayContext/SET_0_START_INDEX i32 (i32.const 0))
 (global $assembly/packedarray/PackedArrayContext/NUMBER_OF_SETS i32 (i32.const 8))
 (global $assembly/packedarray/PackedArrayContext/LEAF_LEVEL_SHIFT i32 (i32.const 3))
 (global $assembly/packedarray/PackedArrayContext/NON_LEAF_ENTRY_SLOT_INDICATORS_OFFSET i32 (i32.const 0))
 (global $assembly/packedarray/PackedArrayContext/NON_LEAF_ENTRY_HEADER_SIZE_IN_SHORTS i32 (i32.const 1))
 (global $assembly/packedarray/PackedArrayContext/PACKED_ARRAY_GROWTH_INCREMENT i32 (i32.const 16))
 (global $assembly/packedarray/PackedArrayContext/PACKED_ARRAY_GROWTH_FRACTION_POW2 i32 (i32.const 4))
 (global $assembly/packedarray/PackedArrayContext/hexaCode i32 (i32.const 8864))
 (global $assembly/packedarray/PackedArray/NUMBER_OF_SETS i32 (i32.const 8))
 (global $assembly/index/UINT8ARRAY_ID i32 (i32.const 4))
 (global $~lib/builtins/u64.MAX_VALUE i64 (i64.const -1))
 (global $~lib/number/U64.MAX_VALUE i64 (i64.const -1))
 (global $~lib/builtins/i32.MAX_VALUE i32 (i32.const 2147483647))
 (global $~lib/rt/pure/ROOTS (mut i32) (i32.const 0))
 (global $~lib/rt/pure/CUR (mut i32) (i32.const 0))
 (global $~lib/rt/pure/END (mut i32) (i32.const 0))
 (global $~lib/rt/__rtti_base i32 (i32.const 15344))
 (global $~lib/heap/__heap_base i32 (i32.const 15740))
 (global $assembly/index/Histogram8 i32 (i32.const 5))
 (global $assembly/index/Histogram16 i32 (i32.const 16))
 (global $assembly/index/Histogram32 i32 (i32.const 24))
 (global $assembly/index/Histogram64 i32 (i32.const 32))
 (global $assembly/index/PackedHistogram i32 (i32.const 40))
 (export "memory" (memory $0))
 (export "__alloc" (func $~lib/rt/tlsf/__alloc))
 (export "__retain" (func $~lib/rt/pure/__retain))
 (export "__release" (func $~lib/rt/pure/__release))
 (export "__collect" (func $~lib/rt/pure/__collect))
 (export "__rtti_base" (global $~lib/rt/__rtti_base))
 (export "UINT8ARRAY_ID" (global $assembly/index/UINT8ARRAY_ID))
 (export "Histogram8" (global $assembly/index/Histogram8))
 (export "Histogram8#constructor" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#constructor@varargs))
 (export "Histogram8#get:autoResize" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:autoResize))
 (export "Histogram8#set:autoResize" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#set:autoResize))
 (export "Histogram8#get:highestTrackableValue" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:highestTrackableValue))
 (export "Histogram8#set:highestTrackableValue" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#set:highestTrackableValue))
 (export "Histogram8#get:startTimeStampMsec" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:startTimeStampMsec))
 (export "Histogram8#set:startTimeStampMsec" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#set:startTimeStampMsec))
 (export "Histogram8#get:endTimeStampMsec" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:endTimeStampMsec))
 (export "Histogram8#set:endTimeStampMsec" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#set:endTimeStampMsec))
 (export "Histogram8#get:minNonZeroValue" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:minNonZeroValue))
 (export "Histogram8#get:maxValue" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:maxValue))
 (export "Histogram8#get:totalCount" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:totalCount))
 (export "Histogram8#get:stdDeviation" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:stdDeviation))
 (export "Histogram8#get:mean" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:mean))
 (export "Histogram8#get:estimatedFootprintInBytes" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:estimatedFootprintInBytes))
 (export "Histogram8#recordValue" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordValue))
 (export "Histogram8#recordValueWithCount" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordValueWithCount))
 (export "Histogram8#recordValueWithExpectedInterval" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordValueWithExpectedInterval))
 (export "Histogram8#getValueAtPercentile" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getValueAtPercentile))
 (export "Histogram8#outputPercentileDistribution" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#outputPercentileDistribution))
 (export "Histogram8#copyCorrectedForCoordinatedOmission" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#copyCorrectedForCoordinatedOmission))
 (export "Histogram8#addHistogram8" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#addHistogram8))
 (export "Histogram8#addHistogram16" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#addHistogram16))
 (export "Histogram8#addHistogram32" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#addHistogram32))
 (export "Histogram8#addHistogram64" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#addHistogram64))
 (export "Histogram8#addPackedHistogram" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#addPackedHistogram))
 (export "Histogram8#subtractHistogram8" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#subtractHistogram8))
 (export "Histogram8#subtractHistogram16" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#subtractHistogram16))
 (export "Histogram8#subtractHistogram32" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#subtractHistogram32))
 (export "Histogram8#subtractHistogram64" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#subtractHistogram64))
 (export "Histogram8#subtractPackedHistogram" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#subtractPackedHistogram))
 (export "Histogram8#encode" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#encode))
 (export "Histogram8#reset" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#reset))
 (export "Histogram16" (global $assembly/index/Histogram16))
 (export "Histogram16#constructor" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#constructor@varargs))
 (export "Histogram16#get:autoResize" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#get:autoResize))
 (export "Histogram16#set:autoResize" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#set:autoResize))
 (export "Histogram16#get:highestTrackableValue" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#get:highestTrackableValue))
 (export "Histogram16#set:highestTrackableValue" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#set:highestTrackableValue))
 (export "Histogram16#get:startTimeStampMsec" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#get:startTimeStampMsec))
 (export "Histogram16#set:startTimeStampMsec" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#set:startTimeStampMsec))
 (export "Histogram16#get:endTimeStampMsec" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#get:endTimeStampMsec))
 (export "Histogram16#set:endTimeStampMsec" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#set:endTimeStampMsec))
 (export "Histogram16#get:minNonZeroValue" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#get:minNonZeroValue))
 (export "Histogram16#get:maxValue" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#get:maxValue))
 (export "Histogram16#get:totalCount" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#get:totalCount))
 (export "Histogram16#get:stdDeviation" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#get:stdDeviation))
 (export "Histogram16#get:mean" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#get:mean))
 (export "Histogram16#get:estimatedFootprintInBytes" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#get:estimatedFootprintInBytes))
 (export "Histogram16#recordValue" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordValue))
 (export "Histogram16#recordValueWithCount" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordValueWithCount))
 (export "Histogram16#recordValueWithExpectedInterval" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordValueWithExpectedInterval))
 (export "Histogram16#getValueAtPercentile" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getValueAtPercentile))
 (export "Histogram16#outputPercentileDistribution" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#outputPercentileDistribution))
 (export "Histogram16#copyCorrectedForCoordinatedOmission" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#copyCorrectedForCoordinatedOmission))
 (export "Histogram16#addHistogram8" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#addHistogram8))
 (export "Histogram16#addHistogram16" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#addHistogram16))
 (export "Histogram16#addHistogram32" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#addHistogram32))
 (export "Histogram16#addHistogram64" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#addHistogram64))
 (export "Histogram16#addPackedHistogram" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#addPackedHistogram))
 (export "Histogram16#subtractHistogram8" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#subtractHistogram8))
 (export "Histogram16#subtractHistogram16" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#subtractHistogram16))
 (export "Histogram16#subtractHistogram32" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#subtractHistogram32))
 (export "Histogram16#subtractHistogram64" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#subtractHistogram64))
 (export "Histogram16#subtractPackedHistogram" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#subtractPackedHistogram))
 (export "Histogram16#encode" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#encode))
 (export "Histogram16#reset" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#reset))
 (export "Histogram32" (global $assembly/index/Histogram32))
 (export "Histogram32#constructor" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#constructor@varargs))
 (export "Histogram32#get:autoResize" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#get:autoResize))
 (export "Histogram32#set:autoResize" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#set:autoResize))
 (export "Histogram32#get:highestTrackableValue" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#get:highestTrackableValue))
 (export "Histogram32#set:highestTrackableValue" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#set:highestTrackableValue))
 (export "Histogram32#get:startTimeStampMsec" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#get:startTimeStampMsec))
 (export "Histogram32#set:startTimeStampMsec" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#set:startTimeStampMsec))
 (export "Histogram32#get:endTimeStampMsec" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#get:endTimeStampMsec))
 (export "Histogram32#set:endTimeStampMsec" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#set:endTimeStampMsec))
 (export "Histogram32#get:minNonZeroValue" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#get:minNonZeroValue))
 (export "Histogram32#get:maxValue" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#get:maxValue))
 (export "Histogram32#get:totalCount" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#get:totalCount))
 (export "Histogram32#get:stdDeviation" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#get:stdDeviation))
 (export "Histogram32#get:mean" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#get:mean))
 (export "Histogram32#get:estimatedFootprintInBytes" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#get:estimatedFootprintInBytes))
 (export "Histogram32#recordValue" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordValue))
 (export "Histogram32#recordValueWithCount" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordValueWithCount))
 (export "Histogram32#recordValueWithExpectedInterval" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordValueWithExpectedInterval))
 (export "Histogram32#getValueAtPercentile" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getValueAtPercentile))
 (export "Histogram32#outputPercentileDistribution" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#outputPercentileDistribution))
 (export "Histogram32#copyCorrectedForCoordinatedOmission" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#copyCorrectedForCoordinatedOmission))
 (export "Histogram32#addHistogram8" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#addHistogram8))
 (export "Histogram32#addHistogram16" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#addHistogram16))
 (export "Histogram32#addHistogram32" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#addHistogram32))
 (export "Histogram32#addHistogram64" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#addHistogram64))
 (export "Histogram32#addPackedHistogram" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#addPackedHistogram))
 (export "Histogram32#subtractHistogram8" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#subtractHistogram8))
 (export "Histogram32#subtractHistogram16" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#subtractHistogram16))
 (export "Histogram32#subtractHistogram32" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#subtractHistogram32))
 (export "Histogram32#subtractHistogram64" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#subtractHistogram64))
 (export "Histogram32#subtractPackedHistogram" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#subtractPackedHistogram))
 (export "Histogram32#encode" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#encode))
 (export "Histogram32#reset" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#reset))
 (export "Histogram64" (global $assembly/index/Histogram64))
 (export "Histogram64#constructor" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#constructor@varargs))
 (export "Histogram64#get:autoResize" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#get:autoResize))
 (export "Histogram64#set:autoResize" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#set:autoResize))
 (export "Histogram64#get:highestTrackableValue" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#get:highestTrackableValue))
 (export "Histogram64#set:highestTrackableValue" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#set:highestTrackableValue))
 (export "Histogram64#get:startTimeStampMsec" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#get:startTimeStampMsec))
 (export "Histogram64#set:startTimeStampMsec" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#set:startTimeStampMsec))
 (export "Histogram64#get:endTimeStampMsec" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#get:endTimeStampMsec))
 (export "Histogram64#set:endTimeStampMsec" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#set:endTimeStampMsec))
 (export "Histogram64#get:minNonZeroValue" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#get:minNonZeroValue))
 (export "Histogram64#get:maxValue" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#get:maxValue))
 (export "Histogram64#get:totalCount" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#get:totalCount))
 (export "Histogram64#get:stdDeviation" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#get:stdDeviation))
 (export "Histogram64#get:mean" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#get:mean))
 (export "Histogram64#get:estimatedFootprintInBytes" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#get:estimatedFootprintInBytes))
 (export "Histogram64#recordValue" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordValue))
 (export "Histogram64#recordValueWithCount" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordValueWithCount))
 (export "Histogram64#recordValueWithExpectedInterval" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordValueWithExpectedInterval))
 (export "Histogram64#getValueAtPercentile" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getValueAtPercentile))
 (export "Histogram64#outputPercentileDistribution" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#outputPercentileDistribution))
 (export "Histogram64#copyCorrectedForCoordinatedOmission" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#copyCorrectedForCoordinatedOmission))
 (export "Histogram64#addHistogram8" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#addHistogram8))
 (export "Histogram64#addHistogram16" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#addHistogram16))
 (export "Histogram64#addHistogram32" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#addHistogram32))
 (export "Histogram64#addHistogram64" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#addHistogram64))
 (export "Histogram64#addPackedHistogram" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#addPackedHistogram))
 (export "Histogram64#subtractHistogram8" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#subtractHistogram8))
 (export "Histogram64#subtractHistogram16" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#subtractHistogram16))
 (export "Histogram64#subtractHistogram32" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#subtractHistogram32))
 (export "Histogram64#subtractHistogram64" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#subtractHistogram64))
 (export "Histogram64#subtractPackedHistogram" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#subtractPackedHistogram))
 (export "Histogram64#encode" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#encode))
 (export "Histogram64#reset" (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#reset))
 (export "PackedHistogram" (global $assembly/index/PackedHistogram))
 (export "PackedHistogram#constructor" (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#constructor@varargs))
 (export "PackedHistogram#get:autoResize" (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#get:autoResize))
 (export "PackedHistogram#set:autoResize" (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#set:autoResize))
 (export "PackedHistogram#get:highestTrackableValue" (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#get:highestTrackableValue))
 (export "PackedHistogram#set:highestTrackableValue" (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#set:highestTrackableValue))
 (export "PackedHistogram#get:startTimeStampMsec" (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#get:startTimeStampMsec))
 (export "PackedHistogram#set:startTimeStampMsec" (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#set:startTimeStampMsec))
 (export "PackedHistogram#get:endTimeStampMsec" (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#get:endTimeStampMsec))
 (export "PackedHistogram#set:endTimeStampMsec" (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#set:endTimeStampMsec))
 (export "PackedHistogram#get:minNonZeroValue" (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#get:minNonZeroValue))
 (export "PackedHistogram#get:maxValue" (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#get:maxValue))
 (export "PackedHistogram#get:totalCount" (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#get:totalCount))
 (export "PackedHistogram#get:stdDeviation" (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#get:stdDeviation))
 (export "PackedHistogram#get:mean" (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#get:mean))
 (export "PackedHistogram#get:estimatedFootprintInBytes" (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#get:estimatedFootprintInBytes))
 (export "PackedHistogram#recordValue" (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#recordValue))
 (export "PackedHistogram#recordValueWithCount" (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#recordValueWithCount))
 (export "PackedHistogram#recordValueWithExpectedInterval" (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#recordValueWithExpectedInterval))
 (export "PackedHistogram#getValueAtPercentile" (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#getValueAtPercentile))
 (export "PackedHistogram#outputPercentileDistribution" (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#outputPercentileDistribution))
 (export "PackedHistogram#copyCorrectedForCoordinatedOmission" (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#copyCorrectedForCoordinatedOmission))
 (export "PackedHistogram#addHistogram8" (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#addHistogram8))
 (export "PackedHistogram#addHistogram16" (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#addHistogram16))
 (export "PackedHistogram#addHistogram32" (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#addHistogram32))
 (export "PackedHistogram#addHistogram64" (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#addHistogram64))
 (export "PackedHistogram#addPackedHistogram" (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#addPackedHistogram))
 (export "PackedHistogram#subtractHistogram8" (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#subtractHistogram8))
 (export "PackedHistogram#subtractHistogram16" (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#subtractHistogram16))
 (export "PackedHistogram#subtractHistogram32" (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#subtractHistogram32))
 (export "PackedHistogram#subtractHistogram64" (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#subtractHistogram64))
 (export "PackedHistogram#subtractPackedHistogram" (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#subtractPackedHistogram))
 (export "PackedHistogram#encode" (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#encode))
 (export "PackedHistogram#reset" (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#reset))
 (export "decodeHistogram8" (func $assembly/index/decodeHistogram8))
 (export "decodeHistogram16" (func $assembly/index/decodeHistogram16))
 (export "decodeHistogram32" (func $assembly/index/decodeHistogram32))
 (export "decodeHistogram64" (func $assembly/index/decodeHistogram64))
 (export "decodePackedHistogram" (func $assembly/index/decodePackedHistogram))
 (export "__setArgumentsLength" (func $~setArgumentsLength))
 (start $~start)
 (func $~lib/rt/tlsf/removeBlock (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  local.get $1
  i32.load
  local.set $2
  i32.const 1
  drop
  local.get $2
  i32.const 1
  i32.and
  i32.eqz
  if
   i32.const 0
   i32.const 32
   i32.const 277
   i32.const 14
   call $~lib/builtins/abort
   unreachable
  end
  local.get $2
  i32.const 3
  i32.const -1
  i32.xor
  i32.and
  local.set $3
  i32.const 1
  drop
  local.get $3
  i32.const 16
  i32.ge_u
  if (result i32)
   local.get $3
   i32.const 1073741808
   i32.lt_u
  else
   i32.const 0
  end
  i32.eqz
  if
   i32.const 0
   i32.const 32
   i32.const 279
   i32.const 14
   call $~lib/builtins/abort
   unreachable
  end
  local.get $3
  i32.const 256
  i32.lt_u
  if
   i32.const 0
   local.set $4
   local.get $3
   i32.const 4
   i32.shr_u
   local.set $5
  else
   i32.const 31
   local.get $3
   i32.clz
   i32.sub
   local.set $4
   local.get $3
   local.get $4
   i32.const 4
   i32.sub
   i32.shr_u
   i32.const 1
   i32.const 4
   i32.shl
   i32.xor
   local.set $5
   local.get $4
   i32.const 8
   i32.const 1
   i32.sub
   i32.sub
   local.set $4
  end
  i32.const 1
  drop
  local.get $4
  i32.const 23
  i32.lt_u
  if (result i32)
   local.get $5
   i32.const 16
   i32.lt_u
  else
   i32.const 0
  end
  i32.eqz
  if
   i32.const 0
   i32.const 32
   i32.const 292
   i32.const 14
   call $~lib/builtins/abort
   unreachable
  end
  local.get $1
  i32.load offset=16
  local.set $6
  local.get $1
  i32.load offset=20
  local.set $7
  local.get $6
  if
   local.get $6
   local.get $7
   i32.store offset=20
  end
  local.get $7
  if
   local.get $7
   local.get $6
   i32.store offset=16
  end
  local.get $1
  local.get $0
  local.set $10
  local.get $4
  local.set $9
  local.get $5
  local.set $8
  local.get $10
  local.get $9
  i32.const 4
  i32.shl
  local.get $8
  i32.add
  i32.const 2
  i32.shl
  i32.add
  i32.load offset=96
  i32.eq
  if
   local.get $0
   local.set $11
   local.get $4
   local.set $10
   local.get $5
   local.set $9
   local.get $7
   local.set $8
   local.get $11
   local.get $10
   i32.const 4
   i32.shl
   local.get $9
   i32.add
   i32.const 2
   i32.shl
   i32.add
   local.get $8
   i32.store offset=96
   local.get $7
   i32.eqz
   if
    local.get $0
    local.set $9
    local.get $4
    local.set $8
    local.get $9
    local.get $8
    i32.const 2
    i32.shl
    i32.add
    i32.load offset=4
    local.set $9
    local.get $0
    local.set $8
    local.get $4
    local.set $11
    local.get $9
    i32.const 1
    local.get $5
    i32.shl
    i32.const -1
    i32.xor
    i32.and
    local.tee $9
    local.set $10
    local.get $8
    local.get $11
    i32.const 2
    i32.shl
    i32.add
    local.get $10
    i32.store offset=4
    local.get $9
    i32.eqz
    if
     local.get $0
     local.get $0
     i32.load
     i32.const 1
     local.get $4
     i32.shl
     i32.const -1
     i32.xor
     i32.and
     i32.store
    end
   end
  end
 )
 (func $~lib/rt/tlsf/insertBlock (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  i32.const 1
  drop
  local.get $1
  i32.eqz
  if
   i32.const 0
   i32.const 32
   i32.const 205
   i32.const 14
   call $~lib/builtins/abort
   unreachable
  end
  local.get $1
  i32.load
  local.set $2
  i32.const 1
  drop
  local.get $2
  i32.const 1
  i32.and
  i32.eqz
  if
   i32.const 0
   i32.const 32
   i32.const 207
   i32.const 14
   call $~lib/builtins/abort
   unreachable
  end
  local.get $1
  local.set $3
  local.get $3
  i32.const 16
  i32.add
  local.get $3
  i32.load
  i32.const 3
  i32.const -1
  i32.xor
  i32.and
  i32.add
  local.set $4
  local.get $4
  i32.load
  local.set $5
  local.get $5
  i32.const 1
  i32.and
  if
   local.get $2
   i32.const 3
   i32.const -1
   i32.xor
   i32.and
   i32.const 16
   i32.add
   local.get $5
   i32.const 3
   i32.const -1
   i32.xor
   i32.and
   i32.add
   local.set $3
   local.get $3
   i32.const 1073741808
   i32.lt_u
   if
    local.get $0
    local.get $4
    call $~lib/rt/tlsf/removeBlock
    local.get $1
    local.get $2
    i32.const 3
    i32.and
    local.get $3
    i32.or
    local.tee $2
    i32.store
    local.get $1
    local.set $6
    local.get $6
    i32.const 16
    i32.add
    local.get $6
    i32.load
    i32.const 3
    i32.const -1
    i32.xor
    i32.and
    i32.add
    local.set $4
    local.get $4
    i32.load
    local.set $5
   end
  end
  local.get $2
  i32.const 2
  i32.and
  if
   local.get $1
   local.set $6
   local.get $6
   i32.const 4
   i32.sub
   i32.load
   local.set $6
   local.get $6
   i32.load
   local.set $3
   i32.const 1
   drop
   local.get $3
   i32.const 1
   i32.and
   i32.eqz
   if
    i32.const 0
    i32.const 32
    i32.const 228
    i32.const 16
    call $~lib/builtins/abort
    unreachable
   end
   local.get $3
   i32.const 3
   i32.const -1
   i32.xor
   i32.and
   i32.const 16
   i32.add
   local.get $2
   i32.const 3
   i32.const -1
   i32.xor
   i32.and
   i32.add
   local.set $7
   local.get $7
   i32.const 1073741808
   i32.lt_u
   if
    local.get $0
    local.get $6
    call $~lib/rt/tlsf/removeBlock
    local.get $6
    local.get $3
    i32.const 3
    i32.and
    local.get $7
    i32.or
    local.tee $2
    i32.store
    local.get $6
    local.set $1
   end
  end
  local.get $4
  local.get $5
  i32.const 2
  i32.or
  i32.store
  local.get $2
  i32.const 3
  i32.const -1
  i32.xor
  i32.and
  local.set $8
  i32.const 1
  drop
  local.get $8
  i32.const 16
  i32.ge_u
  if (result i32)
   local.get $8
   i32.const 1073741808
   i32.lt_u
  else
   i32.const 0
  end
  i32.eqz
  if
   i32.const 0
   i32.const 32
   i32.const 243
   i32.const 14
   call $~lib/builtins/abort
   unreachable
  end
  i32.const 1
  drop
  local.get $1
  i32.const 16
  i32.add
  local.get $8
  i32.add
  local.get $4
  i32.eq
  i32.eqz
  if
   i32.const 0
   i32.const 32
   i32.const 244
   i32.const 14
   call $~lib/builtins/abort
   unreachable
  end
  local.get $4
  i32.const 4
  i32.sub
  local.get $1
  i32.store
  local.get $8
  i32.const 256
  i32.lt_u
  if
   i32.const 0
   local.set $9
   local.get $8
   i32.const 4
   i32.shr_u
   local.set $10
  else
   i32.const 31
   local.get $8
   i32.clz
   i32.sub
   local.set $9
   local.get $8
   local.get $9
   i32.const 4
   i32.sub
   i32.shr_u
   i32.const 1
   i32.const 4
   i32.shl
   i32.xor
   local.set $10
   local.get $9
   i32.const 8
   i32.const 1
   i32.sub
   i32.sub
   local.set $9
  end
  i32.const 1
  drop
  local.get $9
  i32.const 23
  i32.lt_u
  if (result i32)
   local.get $10
   i32.const 16
   i32.lt_u
  else
   i32.const 0
  end
  i32.eqz
  if
   i32.const 0
   i32.const 32
   i32.const 260
   i32.const 14
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  local.set $7
  local.get $9
  local.set $3
  local.get $10
  local.set $6
  local.get $7
  local.get $3
  i32.const 4
  i32.shl
  local.get $6
  i32.add
  i32.const 2
  i32.shl
  i32.add
  i32.load offset=96
  local.set $11
  local.get $1
  i32.const 0
  i32.store offset=16
  local.get $1
  local.get $11
  i32.store offset=20
  local.get $11
  if
   local.get $11
   local.get $1
   i32.store offset=16
  end
  local.get $0
  local.set $12
  local.get $9
  local.set $7
  local.get $10
  local.set $3
  local.get $1
  local.set $6
  local.get $12
  local.get $7
  i32.const 4
  i32.shl
  local.get $3
  i32.add
  i32.const 2
  i32.shl
  i32.add
  local.get $6
  i32.store offset=96
  local.get $0
  local.get $0
  i32.load
  i32.const 1
  local.get $9
  i32.shl
  i32.or
  i32.store
  local.get $0
  local.set $13
  local.get $9
  local.set $12
  local.get $0
  local.set $3
  local.get $9
  local.set $6
  local.get $3
  local.get $6
  i32.const 2
  i32.shl
  i32.add
  i32.load offset=4
  i32.const 1
  local.get $10
  i32.shl
  i32.or
  local.set $7
  local.get $13
  local.get $12
  i32.const 2
  i32.shl
  i32.add
  local.get $7
  i32.store offset=4
 )
 (func $~lib/rt/tlsf/addMemory (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  i32.const 1
  drop
  local.get $1
  local.get $2
  i32.le_u
  if (result i32)
   local.get $1
   i32.const 15
   i32.and
   i32.eqz
  else
   i32.const 0
  end
  if (result i32)
   local.get $2
   i32.const 15
   i32.and
   i32.eqz
  else
   i32.const 0
  end
  i32.eqz
  if
   i32.const 0
   i32.const 32
   i32.const 386
   i32.const 5
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  local.set $3
  local.get $3
  i32.load offset=1568
  local.set $4
  i32.const 0
  local.set $5
  local.get $4
  if
   i32.const 1
   drop
   local.get $1
   local.get $4
   i32.const 16
   i32.add
   i32.ge_u
   i32.eqz
   if
    i32.const 0
    i32.const 32
    i32.const 396
    i32.const 16
    call $~lib/builtins/abort
    unreachable
   end
   local.get $1
   i32.const 16
   i32.sub
   local.get $4
   i32.eq
   if
    local.get $1
    i32.const 16
    i32.sub
    local.set $1
    local.get $4
    i32.load
    local.set $5
   else
    nop
   end
  else
   i32.const 1
   drop
   local.get $1
   local.get $0
   i32.const 1572
   i32.add
   i32.ge_u
   i32.eqz
   if
    i32.const 0
    i32.const 32
    i32.const 408
    i32.const 5
    call $~lib/builtins/abort
    unreachable
   end
  end
  local.get $2
  local.get $1
  i32.sub
  local.set $6
  local.get $6
  i32.const 16
  i32.const 16
  i32.add
  i32.const 16
  i32.add
  i32.lt_u
  if
   i32.const 0
   return
  end
  local.get $6
  i32.const 16
  i32.const 1
  i32.shl
  i32.sub
  local.set $7
  local.get $1
  local.set $8
  local.get $8
  local.get $7
  i32.const 1
  i32.or
  local.get $5
  i32.const 2
  i32.and
  i32.or
  i32.store
  local.get $8
  i32.const 0
  i32.store offset=16
  local.get $8
  i32.const 0
  i32.store offset=20
  local.get $1
  local.get $6
  i32.add
  i32.const 16
  i32.sub
  local.set $4
  local.get $4
  i32.const 0
  i32.const 2
  i32.or
  i32.store
  local.get $0
  local.set $9
  local.get $4
  local.set $3
  local.get $9
  local.get $3
  i32.store offset=1568
  local.get $0
  local.get $8
  call $~lib/rt/tlsf/insertBlock
  i32.const 1
 )
 (func $~lib/rt/tlsf/maybeInitialize (result i32)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  global.get $~lib/rt/tlsf/ROOT
  local.set $0
  local.get $0
  i32.eqz
  if
   global.get $~lib/heap/__heap_base
   i32.const 15
   i32.add
   i32.const 15
   i32.const -1
   i32.xor
   i32.and
   local.set $1
   memory.size
   local.set $2
   local.get $1
   i32.const 1572
   i32.add
   i32.const 65535
   i32.add
   i32.const 65535
   i32.const -1
   i32.xor
   i32.and
   i32.const 16
   i32.shr_u
   local.set $3
   local.get $3
   local.get $2
   i32.gt_s
   if (result i32)
    local.get $3
    local.get $2
    i32.sub
    memory.grow
    i32.const 0
    i32.lt_s
   else
    i32.const 0
   end
   if
    unreachable
   end
   local.get $1
   local.set $0
   local.get $0
   i32.const 0
   i32.store
   local.get $0
   local.set $5
   i32.const 0
   local.set $4
   local.get $5
   local.get $4
   i32.store offset=1568
   i32.const 0
   local.set $5
   loop $for-loop|0
    local.get $5
    i32.const 23
    i32.lt_u
    local.set $4
    local.get $4
    if
     local.get $0
     local.set $8
     local.get $5
     local.set $7
     i32.const 0
     local.set $6
     local.get $8
     local.get $7
     i32.const 2
     i32.shl
     i32.add
     local.get $6
     i32.store offset=4
     i32.const 0
     local.set $8
     loop $for-loop|1
      local.get $8
      i32.const 16
      i32.lt_u
      local.set $7
      local.get $7
      if
       local.get $0
       local.set $11
       local.get $5
       local.set $10
       local.get $8
       local.set $9
       i32.const 0
       local.set $6
       local.get $11
       local.get $10
       i32.const 4
       i32.shl
       local.get $9
       i32.add
       i32.const 2
       i32.shl
       i32.add
       local.get $6
       i32.store offset=96
       local.get $8
       i32.const 1
       i32.add
       local.set $8
       br $for-loop|1
      end
     end
     local.get $5
     i32.const 1
     i32.add
     local.set $5
     br $for-loop|0
    end
   end
   local.get $1
   i32.const 1572
   i32.add
   i32.const 15
   i32.add
   i32.const 15
   i32.const -1
   i32.xor
   i32.and
   local.set $5
   i32.const 0
   drop
   local.get $0
   local.get $5
   memory.size
   i32.const 16
   i32.shl
   call $~lib/rt/tlsf/addMemory
   drop
   local.get $0
   global.set $~lib/rt/tlsf/ROOT
  end
  local.get $0
 )
 (func $~lib/rt/tlsf/prepareSize (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.const 1073741808
  i32.ge_u
  if
   i32.const 80
   i32.const 32
   i32.const 461
   i32.const 30
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i32.const 15
  i32.add
  i32.const 15
  i32.const -1
  i32.xor
  i32.and
  local.tee $1
  i32.const 16
  local.tee $2
  local.get $1
  local.get $2
  i32.gt_u
  select
 )
 (func $~lib/rt/tlsf/searchBlock (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  local.get $1
  i32.const 256
  i32.lt_u
  if
   i32.const 0
   local.set $2
   local.get $1
   i32.const 4
   i32.shr_u
   local.set $3
  else
   local.get $1
   i32.const 536870904
   i32.lt_u
   if (result i32)
    local.get $1
    i32.const 1
    i32.const 27
    local.get $1
    i32.clz
    i32.sub
    i32.shl
    i32.add
    i32.const 1
    i32.sub
   else
    local.get $1
   end
   local.set $4
   i32.const 31
   local.get $4
   i32.clz
   i32.sub
   local.set $2
   local.get $4
   local.get $2
   i32.const 4
   i32.sub
   i32.shr_u
   i32.const 1
   i32.const 4
   i32.shl
   i32.xor
   local.set $3
   local.get $2
   i32.const 8
   i32.const 1
   i32.sub
   i32.sub
   local.set $2
  end
  i32.const 1
  drop
  local.get $2
  i32.const 23
  i32.lt_u
  if (result i32)
   local.get $3
   i32.const 16
   i32.lt_u
  else
   i32.const 0
  end
  i32.eqz
  if
   i32.const 0
   i32.const 32
   i32.const 338
   i32.const 14
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  local.set $5
  local.get $2
  local.set $4
  local.get $5
  local.get $4
  i32.const 2
  i32.shl
  i32.add
  i32.load offset=4
  i32.const 0
  i32.const -1
  i32.xor
  local.get $3
  i32.shl
  i32.and
  local.set $6
  i32.const 0
  local.set $7
  local.get $6
  i32.eqz
  if
   local.get $0
   i32.load
   i32.const 0
   i32.const -1
   i32.xor
   local.get $2
   i32.const 1
   i32.add
   i32.shl
   i32.and
   local.set $5
   local.get $5
   i32.eqz
   if
    i32.const 0
    local.set $7
   else
    local.get $5
    i32.ctz
    local.set $2
    local.get $0
    local.set $8
    local.get $2
    local.set $4
    local.get $8
    local.get $4
    i32.const 2
    i32.shl
    i32.add
    i32.load offset=4
    local.set $6
    i32.const 1
    drop
    local.get $6
    i32.eqz
    if
     i32.const 0
     i32.const 32
     i32.const 351
     i32.const 18
     call $~lib/builtins/abort
     unreachable
    end
    local.get $0
    local.set $9
    local.get $2
    local.set $8
    local.get $6
    i32.ctz
    local.set $4
    local.get $9
    local.get $8
    i32.const 4
    i32.shl
    local.get $4
    i32.add
    i32.const 2
    i32.shl
    i32.add
    i32.load offset=96
    local.set $7
   end
  else
   local.get $0
   local.set $9
   local.get $2
   local.set $8
   local.get $6
   i32.ctz
   local.set $4
   local.get $9
   local.get $8
   i32.const 4
   i32.shl
   local.get $4
   i32.add
   i32.const 2
   i32.shl
   i32.add
   i32.load offset=96
   local.set $7
  end
  local.get $7
 )
 (func $~lib/rt/tlsf/growMemory (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  i32.const 0
  drop
  local.get $1
  i32.const 536870904
  i32.lt_u
  if
   local.get $1
   i32.const 1
   i32.const 27
   local.get $1
   i32.clz
   i32.sub
   i32.shl
   i32.const 1
   i32.sub
   i32.add
   local.set $1
  end
  memory.size
  local.set $2
  local.get $1
  i32.const 16
  local.get $2
  i32.const 16
  i32.shl
  i32.const 16
  i32.sub
  local.get $0
  local.set $3
  local.get $3
  i32.load offset=1568
  i32.ne
  i32.shl
  i32.add
  local.set $1
  local.get $1
  i32.const 65535
  i32.add
  i32.const 65535
  i32.const -1
  i32.xor
  i32.and
  i32.const 16
  i32.shr_u
  local.set $4
  local.get $2
  local.tee $3
  local.get $4
  local.tee $5
  local.get $3
  local.get $5
  i32.gt_s
  select
  local.set $6
  local.get $6
  memory.grow
  i32.const 0
  i32.lt_s
  if
   local.get $4
   memory.grow
   i32.const 0
   i32.lt_s
   if
    unreachable
   end
  end
  memory.size
  local.set $7
  local.get $0
  local.get $2
  i32.const 16
  i32.shl
  local.get $7
  i32.const 16
  i32.shl
  call $~lib/rt/tlsf/addMemory
  drop
 )
 (func $~lib/rt/tlsf/prepareBlock (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  local.get $1
  i32.load
  local.set $3
  i32.const 1
  drop
  local.get $2
  i32.const 15
  i32.and
  i32.eqz
  i32.eqz
  if
   i32.const 0
   i32.const 32
   i32.const 365
   i32.const 14
   call $~lib/builtins/abort
   unreachable
  end
  local.get $3
  i32.const 3
  i32.const -1
  i32.xor
  i32.and
  local.get $2
  i32.sub
  local.set $4
  local.get $4
  i32.const 16
  i32.const 16
  i32.add
  i32.ge_u
  if
   local.get $1
   local.get $2
   local.get $3
   i32.const 2
   i32.and
   i32.or
   i32.store
   local.get $1
   i32.const 16
   i32.add
   local.get $2
   i32.add
   local.set $5
   local.get $5
   local.get $4
   i32.const 16
   i32.sub
   i32.const 1
   i32.or
   i32.store
   local.get $0
   local.get $5
   call $~lib/rt/tlsf/insertBlock
  else
   local.get $1
   local.get $3
   i32.const 1
   i32.const -1
   i32.xor
   i32.and
   i32.store
   local.get $1
   local.set $5
   local.get $5
   i32.const 16
   i32.add
   local.get $5
   i32.load
   i32.const 3
   i32.const -1
   i32.xor
   i32.and
   i32.add
   local.get $1
   local.set $5
   local.get $5
   i32.const 16
   i32.add
   local.get $5
   i32.load
   i32.const 3
   i32.const -1
   i32.xor
   i32.and
   i32.add
   i32.load
   i32.const 2
   i32.const -1
   i32.xor
   i32.and
   i32.store
  end
 )
 (func $~lib/rt/tlsf/allocateBlock (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  (local $3 i32)
  (local $4 i32)
  i32.const 1
  drop
  global.get $~lib/rt/tlsf/collectLock
  i32.eqz
  i32.eqz
  if
   i32.const 0
   i32.const 32
   i32.const 500
   i32.const 14
   call $~lib/builtins/abort
   unreachable
  end
  local.get $1
  call $~lib/rt/tlsf/prepareSize
  local.set $3
  local.get $0
  local.get $3
  call $~lib/rt/tlsf/searchBlock
  local.set $4
  local.get $4
  i32.eqz
  if
   global.get $~lib/gc/gc.auto
   if
    i32.const 1
    drop
    i32.const 1
    global.set $~lib/rt/tlsf/collectLock
    call $~lib/rt/pure/__collect
    i32.const 1
    drop
    i32.const 0
    global.set $~lib/rt/tlsf/collectLock
    local.get $0
    local.get $3
    call $~lib/rt/tlsf/searchBlock
    local.set $4
    local.get $4
    i32.eqz
    if
     local.get $0
     local.get $3
     call $~lib/rt/tlsf/growMemory
     local.get $0
     local.get $3
     call $~lib/rt/tlsf/searchBlock
     local.set $4
     i32.const 1
     drop
     local.get $4
     i32.eqz
     if
      i32.const 0
      i32.const 32
      i32.const 512
      i32.const 20
      call $~lib/builtins/abort
      unreachable
     end
    end
   else
    local.get $0
    local.get $3
    call $~lib/rt/tlsf/growMemory
    local.get $0
    local.get $3
    call $~lib/rt/tlsf/searchBlock
    local.set $4
    i32.const 1
    drop
    local.get $4
    i32.eqz
    if
     i32.const 0
     i32.const 32
     i32.const 517
     i32.const 18
     call $~lib/builtins/abort
     unreachable
    end
   end
  end
  i32.const 1
  drop
  local.get $4
  i32.load
  i32.const 3
  i32.const -1
  i32.xor
  i32.and
  local.get $3
  i32.ge_u
  i32.eqz
  if
   i32.const 0
   i32.const 32
   i32.const 520
   i32.const 14
   call $~lib/builtins/abort
   unreachable
  end
  local.get $4
  i32.const 0
  i32.store offset=4
  local.get $4
  local.get $2
  i32.store offset=8
  local.get $4
  local.get $1
  i32.store offset=12
  local.get $0
  local.get $4
  call $~lib/rt/tlsf/removeBlock
  local.get $0
  local.get $4
  local.get $3
  call $~lib/rt/tlsf/prepareBlock
  i32.const 0
  drop
  local.get $4
 )
 (func $~lib/rt/tlsf/__alloc (param $0 i32) (param $1 i32) (result i32)
  call $~lib/rt/tlsf/maybeInitialize
  local.get $0
  local.get $1
  call $~lib/rt/tlsf/allocateBlock
  i32.const 16
  i32.add
 )
 (func $~lib/rt/pure/increment (param $0 i32)
  (local $1 i32)
  local.get $0
  i32.load offset=4
  local.set $1
  local.get $1
  i32.const 268435455
  i32.const -1
  i32.xor
  i32.and
  local.get $1
  i32.const 1
  i32.add
  i32.const 268435455
  i32.const -1
  i32.xor
  i32.and
  i32.eq
  i32.eqz
  if
   i32.const 0
   i32.const 144
   i32.const 109
   i32.const 3
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  local.get $1
  i32.const 1
  i32.add
  i32.store offset=4
  i32.const 0
  drop
  i32.const 1
  drop
  local.get $0
  i32.load
  i32.const 1
  i32.and
  i32.eqz
  i32.eqz
  if
   i32.const 0
   i32.const 144
   i32.const 112
   i32.const 14
   call $~lib/builtins/abort
   unreachable
  end
 )
 (func $~lib/rt/pure/__retain (param $0 i32) (result i32)
  local.get $0
  global.get $~lib/heap/__heap_base
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/increment
  end
  local.get $0
 )
 (func $~lib/rt/pure/__release (param $0 i32)
  local.get $0
  global.get $~lib/heap/__heap_base
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $start:assembly/ulp~anonymous|0 (param $0 f64) (result f64)
  (local $1 f64)
  local.get $0
  local.get $0
  i64.reinterpret_f64
  i64.const 1
  i64.xor
  f64.reinterpret_i64
  f64.sub
  local.set $1
  local.get $1
  f64.abs
 )
 (func $~lib/string/String#get:length (param $0 i32) (result i32)
  local.get $0
  i32.const 16
  i32.sub
  i32.load offset=12
  i32.const 1
  i32.shr_u
 )
 (func $~lib/util/memory/memcpy (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  loop $while-continue|0
   local.get $2
   if (result i32)
    local.get $1
    i32.const 3
    i32.and
   else
    i32.const 0
   end
   local.set $5
   local.get $5
   if
    local.get $0
    local.tee $6
    i32.const 1
    i32.add
    local.set $0
    local.get $6
    local.get $1
    local.tee $6
    i32.const 1
    i32.add
    local.set $1
    local.get $6
    i32.load8_u
    i32.store8
    local.get $2
    i32.const 1
    i32.sub
    local.set $2
    br $while-continue|0
   end
  end
  local.get $0
  i32.const 3
  i32.and
  i32.const 0
  i32.eq
  if
   loop $while-continue|1
    local.get $2
    i32.const 16
    i32.ge_u
    local.set $5
    local.get $5
    if
     local.get $0
     local.get $1
     i32.load
     i32.store
     local.get $0
     i32.const 4
     i32.add
     local.get $1
     i32.const 4
     i32.add
     i32.load
     i32.store
     local.get $0
     i32.const 8
     i32.add
     local.get $1
     i32.const 8
     i32.add
     i32.load
     i32.store
     local.get $0
     i32.const 12
     i32.add
     local.get $1
     i32.const 12
     i32.add
     i32.load
     i32.store
     local.get $1
     i32.const 16
     i32.add
     local.set $1
     local.get $0
     i32.const 16
     i32.add
     local.set $0
     local.get $2
     i32.const 16
     i32.sub
     local.set $2
     br $while-continue|1
    end
   end
   local.get $2
   i32.const 8
   i32.and
   if
    local.get $0
    local.get $1
    i32.load
    i32.store
    local.get $0
    i32.const 4
    i32.add
    local.get $1
    i32.const 4
    i32.add
    i32.load
    i32.store
    local.get $0
    i32.const 8
    i32.add
    local.set $0
    local.get $1
    i32.const 8
    i32.add
    local.set $1
   end
   local.get $2
   i32.const 4
   i32.and
   if
    local.get $0
    local.get $1
    i32.load
    i32.store
    local.get $0
    i32.const 4
    i32.add
    local.set $0
    local.get $1
    i32.const 4
    i32.add
    local.set $1
   end
   local.get $2
   i32.const 2
   i32.and
   if
    local.get $0
    local.get $1
    i32.load16_u
    i32.store16
    local.get $0
    i32.const 2
    i32.add
    local.set $0
    local.get $1
    i32.const 2
    i32.add
    local.set $1
   end
   local.get $2
   i32.const 1
   i32.and
   if
    local.get $0
    local.tee $5
    i32.const 1
    i32.add
    local.set $0
    local.get $5
    local.get $1
    local.tee $5
    i32.const 1
    i32.add
    local.set $1
    local.get $5
    i32.load8_u
    i32.store8
   end
   return
  end
  local.get $2
  i32.const 32
  i32.ge_u
  if
   block $break|2
    block $case2|2
     block $case1|2
      block $case0|2
       local.get $0
       i32.const 3
       i32.and
       local.set $5
       local.get $5
       i32.const 1
       i32.eq
       br_if $case0|2
       local.get $5
       i32.const 2
       i32.eq
       br_if $case1|2
       local.get $5
       i32.const 3
       i32.eq
       br_if $case2|2
       br $break|2
      end
      local.get $1
      i32.load
      local.set $3
      local.get $0
      local.tee $5
      i32.const 1
      i32.add
      local.set $0
      local.get $5
      local.get $1
      local.tee $5
      i32.const 1
      i32.add
      local.set $1
      local.get $5
      i32.load8_u
      i32.store8
      local.get $0
      local.tee $5
      i32.const 1
      i32.add
      local.set $0
      local.get $5
      local.get $1
      local.tee $5
      i32.const 1
      i32.add
      local.set $1
      local.get $5
      i32.load8_u
      i32.store8
      local.get $0
      local.tee $5
      i32.const 1
      i32.add
      local.set $0
      local.get $5
      local.get $1
      local.tee $5
      i32.const 1
      i32.add
      local.set $1
      local.get $5
      i32.load8_u
      i32.store8
      local.get $2
      i32.const 3
      i32.sub
      local.set $2
      loop $while-continue|3
       local.get $2
       i32.const 17
       i32.ge_u
       local.set $5
       local.get $5
       if
        local.get $1
        i32.const 1
        i32.add
        i32.load
        local.set $4
        local.get $0
        local.get $3
        i32.const 24
        i32.shr_u
        local.get $4
        i32.const 8
        i32.shl
        i32.or
        i32.store
        local.get $1
        i32.const 5
        i32.add
        i32.load
        local.set $3
        local.get $0
        i32.const 4
        i32.add
        local.get $4
        i32.const 24
        i32.shr_u
        local.get $3
        i32.const 8
        i32.shl
        i32.or
        i32.store
        local.get $1
        i32.const 9
        i32.add
        i32.load
        local.set $4
        local.get $0
        i32.const 8
        i32.add
        local.get $3
        i32.const 24
        i32.shr_u
        local.get $4
        i32.const 8
        i32.shl
        i32.or
        i32.store
        local.get $1
        i32.const 13
        i32.add
        i32.load
        local.set $3
        local.get $0
        i32.const 12
        i32.add
        local.get $4
        i32.const 24
        i32.shr_u
        local.get $3
        i32.const 8
        i32.shl
        i32.or
        i32.store
        local.get $1
        i32.const 16
        i32.add
        local.set $1
        local.get $0
        i32.const 16
        i32.add
        local.set $0
        local.get $2
        i32.const 16
        i32.sub
        local.set $2
        br $while-continue|3
       end
      end
      br $break|2
     end
     local.get $1
     i32.load
     local.set $3
     local.get $0
     local.tee $5
     i32.const 1
     i32.add
     local.set $0
     local.get $5
     local.get $1
     local.tee $5
     i32.const 1
     i32.add
     local.set $1
     local.get $5
     i32.load8_u
     i32.store8
     local.get $0
     local.tee $5
     i32.const 1
     i32.add
     local.set $0
     local.get $5
     local.get $1
     local.tee $5
     i32.const 1
     i32.add
     local.set $1
     local.get $5
     i32.load8_u
     i32.store8
     local.get $2
     i32.const 2
     i32.sub
     local.set $2
     loop $while-continue|4
      local.get $2
      i32.const 18
      i32.ge_u
      local.set $5
      local.get $5
      if
       local.get $1
       i32.const 2
       i32.add
       i32.load
       local.set $4
       local.get $0
       local.get $3
       i32.const 16
       i32.shr_u
       local.get $4
       i32.const 16
       i32.shl
       i32.or
       i32.store
       local.get $1
       i32.const 6
       i32.add
       i32.load
       local.set $3
       local.get $0
       i32.const 4
       i32.add
       local.get $4
       i32.const 16
       i32.shr_u
       local.get $3
       i32.const 16
       i32.shl
       i32.or
       i32.store
       local.get $1
       i32.const 10
       i32.add
       i32.load
       local.set $4
       local.get $0
       i32.const 8
       i32.add
       local.get $3
       i32.const 16
       i32.shr_u
       local.get $4
       i32.const 16
       i32.shl
       i32.or
       i32.store
       local.get $1
       i32.const 14
       i32.add
       i32.load
       local.set $3
       local.get $0
       i32.const 12
       i32.add
       local.get $4
       i32.const 16
       i32.shr_u
       local.get $3
       i32.const 16
       i32.shl
       i32.or
       i32.store
       local.get $1
       i32.const 16
       i32.add
       local.set $1
       local.get $0
       i32.const 16
       i32.add
       local.set $0
       local.get $2
       i32.const 16
       i32.sub
       local.set $2
       br $while-continue|4
      end
     end
     br $break|2
    end
    local.get $1
    i32.load
    local.set $3
    local.get $0
    local.tee $5
    i32.const 1
    i32.add
    local.set $0
    local.get $5
    local.get $1
    local.tee $5
    i32.const 1
    i32.add
    local.set $1
    local.get $5
    i32.load8_u
    i32.store8
    local.get $2
    i32.const 1
    i32.sub
    local.set $2
    loop $while-continue|5
     local.get $2
     i32.const 19
     i32.ge_u
     local.set $5
     local.get $5
     if
      local.get $1
      i32.const 3
      i32.add
      i32.load
      local.set $4
      local.get $0
      local.get $3
      i32.const 8
      i32.shr_u
      local.get $4
      i32.const 24
      i32.shl
      i32.or
      i32.store
      local.get $1
      i32.const 7
      i32.add
      i32.load
      local.set $3
      local.get $0
      i32.const 4
      i32.add
      local.get $4
      i32.const 8
      i32.shr_u
      local.get $3
      i32.const 24
      i32.shl
      i32.or
      i32.store
      local.get $1
      i32.const 11
      i32.add
      i32.load
      local.set $4
      local.get $0
      i32.const 8
      i32.add
      local.get $3
      i32.const 8
      i32.shr_u
      local.get $4
      i32.const 24
      i32.shl
      i32.or
      i32.store
      local.get $1
      i32.const 15
      i32.add
      i32.load
      local.set $3
      local.get $0
      i32.const 12
      i32.add
      local.get $4
      i32.const 8
      i32.shr_u
      local.get $3
      i32.const 24
      i32.shl
      i32.or
      i32.store
      local.get $1
      i32.const 16
      i32.add
      local.set $1
      local.get $0
      i32.const 16
      i32.add
      local.set $0
      local.get $2
      i32.const 16
      i32.sub
      local.set $2
      br $while-continue|5
     end
    end
    br $break|2
   end
  end
  local.get $2
  i32.const 16
  i32.and
  if
   local.get $0
   local.tee $5
   i32.const 1
   i32.add
   local.set $0
   local.get $5
   local.get $1
   local.tee $5
   i32.const 1
   i32.add
   local.set $1
   local.get $5
   i32.load8_u
   i32.store8
   local.get $0
   local.tee $5
   i32.const 1
   i32.add
   local.set $0
   local.get $5
   local.get $1
   local.tee $5
   i32.const 1
   i32.add
   local.set $1
   local.get $5
   i32.load8_u
   i32.store8
   local.get $0
   local.tee $5
   i32.const 1
   i32.add
   local.set $0
   local.get $5
   local.get $1
   local.tee $5
   i32.const 1
   i32.add
   local.set $1
   local.get $5
   i32.load8_u
   i32.store8
   local.get $0
   local.tee $5
   i32.const 1
   i32.add
   local.set $0
   local.get $5
   local.get $1
   local.tee $5
   i32.const 1
   i32.add
   local.set $1
   local.get $5
   i32.load8_u
   i32.store8
   local.get $0
   local.tee $5
   i32.const 1
   i32.add
   local.set $0
   local.get $5
   local.get $1
   local.tee $5
   i32.const 1
   i32.add
   local.set $1
   local.get $5
   i32.load8_u
   i32.store8
   local.get $0
   local.tee $5
   i32.const 1
   i32.add
   local.set $0
   local.get $5
   local.get $1
   local.tee $5
   i32.const 1
   i32.add
   local.set $1
   local.get $5
   i32.load8_u
   i32.store8
   local.get $0
   local.tee $5
   i32.const 1
   i32.add
   local.set $0
   local.get $5
   local.get $1
   local.tee $5
   i32.const 1
   i32.add
   local.set $1
   local.get $5
   i32.load8_u
   i32.store8
   local.get $0
   local.tee $5
   i32.const 1
   i32.add
   local.set $0
   local.get $5
   local.get $1
   local.tee $5
   i32.const 1
   i32.add
   local.set $1
   local.get $5
   i32.load8_u
   i32.store8
   local.get $0
   local.tee $5
   i32.const 1
   i32.add
   local.set $0
   local.get $5
   local.get $1
   local.tee $5
   i32.const 1
   i32.add
   local.set $1
   local.get $5
   i32.load8_u
   i32.store8
   local.get $0
   local.tee $5
   i32.const 1
   i32.add
   local.set $0
   local.get $5
   local.get $1
   local.tee $5
   i32.const 1
   i32.add
   local.set $1
   local.get $5
   i32.load8_u
   i32.store8
   local.get $0
   local.tee $5
   i32.const 1
   i32.add
   local.set $0
   local.get $5
   local.get $1
   local.tee $5
   i32.const 1
   i32.add
   local.set $1
   local.get $5
   i32.load8_u
   i32.store8
   local.get $0
   local.tee $5
   i32.const 1
   i32.add
   local.set $0
   local.get $5
   local.get $1
   local.tee $5
   i32.const 1
   i32.add
   local.set $1
   local.get $5
   i32.load8_u
   i32.store8
   local.get $0
   local.tee $5
   i32.const 1
   i32.add
   local.set $0
   local.get $5
   local.get $1
   local.tee $5
   i32.const 1
   i32.add
   local.set $1
   local.get $5
   i32.load8_u
   i32.store8
   local.get $0
   local.tee $5
   i32.const 1
   i32.add
   local.set $0
   local.get $5
   local.get $1
   local.tee $5
   i32.const 1
   i32.add
   local.set $1
   local.get $5
   i32.load8_u
   i32.store8
   local.get $0
   local.tee $5
   i32.const 1
   i32.add
   local.set $0
   local.get $5
   local.get $1
   local.tee $5
   i32.const 1
   i32.add
   local.set $1
   local.get $5
   i32.load8_u
   i32.store8
   local.get $0
   local.tee $5
   i32.const 1
   i32.add
   local.set $0
   local.get $5
   local.get $1
   local.tee $5
   i32.const 1
   i32.add
   local.set $1
   local.get $5
   i32.load8_u
   i32.store8
  end
  local.get $2
  i32.const 8
  i32.and
  if
   local.get $0
   local.tee $5
   i32.const 1
   i32.add
   local.set $0
   local.get $5
   local.get $1
   local.tee $5
   i32.const 1
   i32.add
   local.set $1
   local.get $5
   i32.load8_u
   i32.store8
   local.get $0
   local.tee $5
   i32.const 1
   i32.add
   local.set $0
   local.get $5
   local.get $1
   local.tee $5
   i32.const 1
   i32.add
   local.set $1
   local.get $5
   i32.load8_u
   i32.store8
   local.get $0
   local.tee $5
   i32.const 1
   i32.add
   local.set $0
   local.get $5
   local.get $1
   local.tee $5
   i32.const 1
   i32.add
   local.set $1
   local.get $5
   i32.load8_u
   i32.store8
   local.get $0
   local.tee $5
   i32.const 1
   i32.add
   local.set $0
   local.get $5
   local.get $1
   local.tee $5
   i32.const 1
   i32.add
   local.set $1
   local.get $5
   i32.load8_u
   i32.store8
   local.get $0
   local.tee $5
   i32.const 1
   i32.add
   local.set $0
   local.get $5
   local.get $1
   local.tee $5
   i32.const 1
   i32.add
   local.set $1
   local.get $5
   i32.load8_u
   i32.store8
   local.get $0
   local.tee $5
   i32.const 1
   i32.add
   local.set $0
   local.get $5
   local.get $1
   local.tee $5
   i32.const 1
   i32.add
   local.set $1
   local.get $5
   i32.load8_u
   i32.store8
   local.get $0
   local.tee $5
   i32.const 1
   i32.add
   local.set $0
   local.get $5
   local.get $1
   local.tee $5
   i32.const 1
   i32.add
   local.set $1
   local.get $5
   i32.load8_u
   i32.store8
   local.get $0
   local.tee $5
   i32.const 1
   i32.add
   local.set $0
   local.get $5
   local.get $1
   local.tee $5
   i32.const 1
   i32.add
   local.set $1
   local.get $5
   i32.load8_u
   i32.store8
  end
  local.get $2
  i32.const 4
  i32.and
  if
   local.get $0
   local.tee $5
   i32.const 1
   i32.add
   local.set $0
   local.get $5
   local.get $1
   local.tee $5
   i32.const 1
   i32.add
   local.set $1
   local.get $5
   i32.load8_u
   i32.store8
   local.get $0
   local.tee $5
   i32.const 1
   i32.add
   local.set $0
   local.get $5
   local.get $1
   local.tee $5
   i32.const 1
   i32.add
   local.set $1
   local.get $5
   i32.load8_u
   i32.store8
   local.get $0
   local.tee $5
   i32.const 1
   i32.add
   local.set $0
   local.get $5
   local.get $1
   local.tee $5
   i32.const 1
   i32.add
   local.set $1
   local.get $5
   i32.load8_u
   i32.store8
   local.get $0
   local.tee $5
   i32.const 1
   i32.add
   local.set $0
   local.get $5
   local.get $1
   local.tee $5
   i32.const 1
   i32.add
   local.set $1
   local.get $5
   i32.load8_u
   i32.store8
  end
  local.get $2
  i32.const 2
  i32.and
  if
   local.get $0
   local.tee $5
   i32.const 1
   i32.add
   local.set $0
   local.get $5
   local.get $1
   local.tee $5
   i32.const 1
   i32.add
   local.set $1
   local.get $5
   i32.load8_u
   i32.store8
   local.get $0
   local.tee $5
   i32.const 1
   i32.add
   local.set $0
   local.get $5
   local.get $1
   local.tee $5
   i32.const 1
   i32.add
   local.set $1
   local.get $5
   i32.load8_u
   i32.store8
  end
  local.get $2
  i32.const 1
  i32.and
  if
   local.get $0
   local.tee $5
   i32.const 1
   i32.add
   local.set $0
   local.get $5
   local.get $1
   local.tee $5
   i32.const 1
   i32.add
   local.set $1
   local.get $5
   i32.load8_u
   i32.store8
  end
 )
 (func $~lib/memory/memory.copy (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  block $~lib/util/memory/memmove|inlined.0
   local.get $0
   local.set $5
   local.get $1
   local.set $4
   local.get $2
   local.set $3
   local.get $5
   local.get $4
   i32.eq
   if
    br $~lib/util/memory/memmove|inlined.0
   end
   i32.const 0
   i32.const 1
   i32.lt_s
   drop
   local.get $4
   local.get $3
   i32.add
   local.get $5
   i32.le_u
   if (result i32)
    i32.const 1
   else
    local.get $5
    local.get $3
    i32.add
    local.get $4
    i32.le_u
   end
   if
    local.get $5
    local.get $4
    local.get $3
    call $~lib/util/memory/memcpy
    br $~lib/util/memory/memmove|inlined.0
   end
   local.get $5
   local.get $4
   i32.lt_u
   if
    i32.const 0
    i32.const 2
    i32.lt_s
    drop
    local.get $4
    i32.const 7
    i32.and
    local.get $5
    i32.const 7
    i32.and
    i32.eq
    if
     loop $while-continue|0
      local.get $5
      i32.const 7
      i32.and
      local.set $6
      local.get $6
      if
       local.get $3
       i32.eqz
       if
        br $~lib/util/memory/memmove|inlined.0
       end
       local.get $3
       i32.const 1
       i32.sub
       local.set $3
       local.get $5
       local.tee $7
       i32.const 1
       i32.add
       local.set $5
       local.get $7
       local.get $4
       local.tee $7
       i32.const 1
       i32.add
       local.set $4
       local.get $7
       i32.load8_u
       i32.store8
       br $while-continue|0
      end
     end
     loop $while-continue|1
      local.get $3
      i32.const 8
      i32.ge_u
      local.set $6
      local.get $6
      if
       local.get $5
       local.get $4
       i64.load
       i64.store
       local.get $3
       i32.const 8
       i32.sub
       local.set $3
       local.get $5
       i32.const 8
       i32.add
       local.set $5
       local.get $4
       i32.const 8
       i32.add
       local.set $4
       br $while-continue|1
      end
     end
    end
    loop $while-continue|2
     local.get $3
     local.set $6
     local.get $6
     if
      local.get $5
      local.tee $7
      i32.const 1
      i32.add
      local.set $5
      local.get $7
      local.get $4
      local.tee $7
      i32.const 1
      i32.add
      local.set $4
      local.get $7
      i32.load8_u
      i32.store8
      local.get $3
      i32.const 1
      i32.sub
      local.set $3
      br $while-continue|2
     end
    end
   else
    i32.const 0
    i32.const 2
    i32.lt_s
    drop
    local.get $4
    i32.const 7
    i32.and
    local.get $5
    i32.const 7
    i32.and
    i32.eq
    if
     loop $while-continue|3
      local.get $5
      local.get $3
      i32.add
      i32.const 7
      i32.and
      local.set $6
      local.get $6
      if
       local.get $3
       i32.eqz
       if
        br $~lib/util/memory/memmove|inlined.0
       end
       local.get $5
       local.get $3
       i32.const 1
       i32.sub
       local.tee $3
       i32.add
       local.get $4
       local.get $3
       i32.add
       i32.load8_u
       i32.store8
       br $while-continue|3
      end
     end
     loop $while-continue|4
      local.get $3
      i32.const 8
      i32.ge_u
      local.set $6
      local.get $6
      if
       local.get $3
       i32.const 8
       i32.sub
       local.set $3
       local.get $5
       local.get $3
       i32.add
       local.get $4
       local.get $3
       i32.add
       i64.load
       i64.store
       br $while-continue|4
      end
     end
    end
    loop $while-continue|5
     local.get $3
     local.set $6
     local.get $6
     if
      local.get $5
      local.get $3
      i32.const 1
      i32.sub
      local.tee $3
      i32.add
      local.get $4
      local.get $3
      i32.add
      i32.load8_u
      i32.store8
      br $while-continue|5
     end
    end
   end
  end
 )
 (func $~lib/memory/memory.repeat (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  i32.const 0
  local.set $4
  local.get $2
  local.get $3
  i32.mul
  local.set $5
  loop $while-continue|0
   local.get $4
   local.get $5
   i32.lt_u
   local.set $6
   local.get $6
   if
    local.get $0
    local.get $4
    i32.add
    local.get $1
    local.get $2
    call $~lib/memory/memory.copy
    local.get $4
    local.get $2
    i32.add
    local.set $4
    br $while-continue|0
   end
  end
 )
 (func $~lib/string/String#padStart (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  local.get $2
  call $~lib/rt/pure/__retain
  local.set $2
  local.get $0
  call $~lib/string/String#get:length
  i32.const 1
  i32.shl
  local.set $3
  local.get $1
  i32.const 1
  i32.shl
  local.set $4
  local.get $2
  call $~lib/string/String#get:length
  i32.const 1
  i32.shl
  local.set $5
  local.get $4
  local.get $3
  i32.lt_u
  if (result i32)
   i32.const 1
  else
   local.get $5
   i32.eqz
  end
  if
   local.get $0
   call $~lib/rt/pure/__retain
   local.set $6
   local.get $2
   call $~lib/rt/pure/__release
   local.get $6
   return
  end
  local.get $4
  local.get $3
  i32.sub
  local.set $7
  local.get $4
  i32.const 1
  call $~lib/rt/tlsf/__alloc
  local.set $8
  local.get $7
  local.get $5
  i32.gt_u
  if
   local.get $7
   i32.const 2
   i32.sub
   local.get $5
   i32.div_u
   local.set $6
   local.get $6
   local.get $5
   i32.mul
   local.set $9
   local.get $7
   local.get $9
   i32.sub
   local.set $10
   local.get $8
   local.get $2
   local.get $5
   local.get $6
   call $~lib/memory/memory.repeat
   local.get $8
   local.get $9
   i32.add
   local.get $2
   local.get $10
   call $~lib/memory/memory.copy
  else
   local.get $8
   local.get $2
   local.get $7
   call $~lib/memory/memory.copy
  end
  local.get $8
  local.get $7
  i32.add
  local.get $0
  local.get $3
  call $~lib/memory/memory.copy
  local.get $8
  call $~lib/rt/pure/__retain
  local.set $10
  local.get $2
  call $~lib/rt/pure/__release
  local.get $10
 )
 (func $~lib/string/String#repeat (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  call $~lib/string/String#get:length
  local.set $2
  local.get $1
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $2
   i64.extend_i32_s
   local.get $1
   i64.extend_i32_s
   i64.mul
   i64.const 1
   i64.const 28
   i64.shl
   i64.gt_u
  end
  if
   i32.const 256
   i32.const 304
   i32.const 322
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $1
  i32.const 0
  i32.eq
  if (result i32)
   i32.const 1
  else
   local.get $2
   i32.eqz
  end
  if
   i32.const 352
   call $~lib/rt/pure/__retain
   return
  end
  local.get $1
  i32.const 1
  i32.eq
  if
   local.get $0
   call $~lib/rt/pure/__retain
   return
  end
  local.get $2
  local.get $1
  i32.mul
  i32.const 1
  i32.shl
  i32.const 1
  call $~lib/rt/tlsf/__alloc
  local.set $3
  local.get $3
  local.get $0
  local.get $2
  i32.const 1
  i32.shl
  local.get $1
  call $~lib/memory/memory.repeat
  local.get $3
  call $~lib/rt/pure/__retain
 )
 (func $~lib/string/String#concat (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $1
  i32.const 0
  i32.eq
  if
   i32.const 368
   local.tee $2
   local.get $1
   local.tee $3
   i32.ne
   if
    local.get $2
    call $~lib/rt/pure/__retain
    local.set $2
    local.get $3
    call $~lib/rt/pure/__release
   end
   local.get $2
   local.set $1
  end
  local.get $0
  call $~lib/string/String#get:length
  i32.const 1
  i32.shl
  local.set $4
  local.get $1
  call $~lib/string/String#get:length
  i32.const 1
  i32.shl
  local.set $5
  local.get $4
  local.get $5
  i32.add
  local.set $6
  local.get $6
  i32.const 0
  i32.eq
  if
   i32.const 352
   call $~lib/rt/pure/__retain
   local.set $2
   local.get $1
   call $~lib/rt/pure/__release
   local.get $2
   return
  end
  local.get $6
  i32.const 1
  call $~lib/rt/tlsf/__alloc
  call $~lib/rt/pure/__retain
  local.set $7
  local.get $7
  local.get $0
  local.get $4
  call $~lib/memory/memory.copy
  local.get $7
  local.get $4
  i32.add
  local.get $1
  local.get $5
  call $~lib/memory/memory.copy
  local.get $7
  local.set $2
  local.get $1
  call $~lib/rt/pure/__release
  local.get $2
 )
 (func $~lib/string/String.__concat (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  local.get $0
  call $~lib/rt/pure/__retain
  local.set $0
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  i32.const 368
  local.get $0
  i32.const 0
  i32.ne
  select
  local.get $1
  call $~lib/string/String#concat
  local.set $2
  local.get $0
  call $~lib/rt/pure/__release
  local.get $1
  call $~lib/rt/pure/__release
  local.get $2
 )
 (func $start:assembly/formatters~anonymous|0 (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $1
  call $~lib/string/String#get:length
  local.get $0
  i32.lt_s
  if
   local.get $1
   local.get $0
   local.get $1
   call $~lib/string/String#get:length
   i32.sub
   i32.const 224
   call $~lib/string/String#padStart
   call $~lib/rt/pure/__release
   i32.const 224
   local.get $0
   local.get $1
   call $~lib/string/String#get:length
   i32.sub
   call $~lib/string/String#repeat
   local.tee $2
   local.get $1
   call $~lib/string/String.__concat
   local.tee $3
   local.set $4
   local.get $2
   call $~lib/rt/pure/__release
   local.get $1
   call $~lib/rt/pure/__release
   local.get $4
   return
  end
  local.get $1
 )
 (func $~lib/util/number/decimalCount32 (param $0 i32) (result i32)
  local.get $0
  i32.const 100000
  i32.lt_u
  if
   local.get $0
   i32.const 100
   i32.lt_u
   if
    i32.const 1
    local.get $0
    i32.const 10
    i32.ge_u
    i32.add
    return
   else
    i32.const 3
    local.get $0
    i32.const 10000
    i32.ge_u
    i32.add
    local.get $0
    i32.const 1000
    i32.ge_u
    i32.add
    return
   end
   unreachable
  else
   local.get $0
   i32.const 10000000
   i32.lt_u
   if
    i32.const 6
    local.get $0
    i32.const 1000000
    i32.ge_u
    i32.add
    return
   else
    i32.const 8
    local.get $0
    i32.const 1000000000
    i32.ge_u
    i32.add
    local.get $0
    i32.const 100000000
    i32.ge_u
    i32.add
    return
   end
   unreachable
  end
  unreachable
 )
 (func $~lib/util/number/utoa32_dec_lut (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i64)
  (local $9 i64)
  (local $10 i32)
  (local $11 i32)
  loop $while-continue|0
   local.get $1
   i32.const 10000
   i32.ge_u
   local.set $3
   local.get $3
   if
    local.get $1
    i32.const 10000
    i32.div_u
    local.set $4
    local.get $1
    i32.const 10000
    i32.rem_u
    local.set $5
    local.get $4
    local.set $1
    local.get $5
    i32.const 100
    i32.div_u
    local.set $6
    local.get $5
    i32.const 100
    i32.rem_u
    local.set $7
    i32.const 596
    local.get $6
    i32.const 2
    i32.shl
    i32.add
    i64.load32_u
    local.set $8
    i32.const 596
    local.get $7
    i32.const 2
    i32.shl
    i32.add
    i64.load32_u
    local.set $9
    local.get $2
    i32.const 4
    i32.sub
    local.set $2
    local.get $0
    local.get $2
    i32.const 1
    i32.shl
    i32.add
    local.get $8
    local.get $9
    i64.const 32
    i64.shl
    i64.or
    i64.store
    br $while-continue|0
   end
  end
  local.get $1
  i32.const 100
  i32.ge_u
  if
   local.get $1
   i32.const 100
   i32.div_u
   local.set $3
   local.get $1
   i32.const 100
   i32.rem_u
   local.set $10
   local.get $3
   local.set $1
   local.get $2
   i32.const 2
   i32.sub
   local.set $2
   i32.const 596
   local.get $10
   i32.const 2
   i32.shl
   i32.add
   i32.load
   local.set $11
   local.get $0
   local.get $2
   i32.const 1
   i32.shl
   i32.add
   local.get $11
   i32.store
  end
  local.get $1
  i32.const 10
  i32.ge_u
  if
   local.get $2
   i32.const 2
   i32.sub
   local.set $2
   i32.const 596
   local.get $1
   i32.const 2
   i32.shl
   i32.add
   i32.load
   local.set $11
   local.get $0
   local.get $2
   i32.const 1
   i32.shl
   i32.add
   local.get $11
   i32.store
  else
   local.get $2
   i32.const 1
   i32.sub
   local.set $2
   i32.const 48
   local.get $1
   i32.add
   local.set $11
   local.get $0
   local.get $2
   i32.const 1
   i32.shl
   i32.add
   local.get $11
   i32.store16
  end
 )
 (func $~lib/util/number/decimalCount64High (param $0 i64) (result i32)
  local.get $0
  i64.const 1000000000000000
  i64.lt_u
  if
   local.get $0
   i64.const 1000000000000
   i64.lt_u
   if
    i32.const 10
    local.get $0
    i64.const 100000000000
    i64.ge_u
    i32.add
    local.get $0
    i64.const 10000000000
    i64.ge_u
    i32.add
    return
   else
    i32.const 13
    local.get $0
    i64.const 100000000000000
    i64.ge_u
    i32.add
    local.get $0
    i64.const 10000000000000
    i64.ge_u
    i32.add
    return
   end
   unreachable
  else
   local.get $0
   i64.const 100000000000000000
   i64.lt_u
   if
    i32.const 16
    local.get $0
    i64.const 10000000000000000
    i64.ge_u
    i32.add
    return
   else
    i32.const 18
    local.get $0
    i64.const -8446744073709551616
    i64.ge_u
    i32.add
    local.get $0
    i64.const 1000000000000000000
    i64.ge_u
    i32.add
    return
   end
   unreachable
  end
  unreachable
 )
 (func $~lib/util/number/utoa64_dec_lut (param $0 i32) (param $1 i64) (param $2 i32)
  (local $3 i32)
  (local $4 i64)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i64)
  (local $13 i64)
  loop $while-continue|0
   local.get $1
   i64.const 100000000
   i64.ge_u
   local.set $3
   local.get $3
   if
    local.get $1
    i64.const 100000000
    i64.div_u
    local.set $4
    local.get $1
    local.get $4
    i64.const 100000000
    i64.mul
    i64.sub
    i32.wrap_i64
    local.set $5
    local.get $4
    local.set $1
    local.get $5
    i32.const 10000
    i32.div_u
    local.set $6
    local.get $5
    i32.const 10000
    i32.rem_u
    local.set $7
    local.get $6
    i32.const 100
    i32.div_u
    local.set $8
    local.get $6
    i32.const 100
    i32.rem_u
    local.set $9
    local.get $7
    i32.const 100
    i32.div_u
    local.set $10
    local.get $7
    i32.const 100
    i32.rem_u
    local.set $11
    i32.const 596
    local.get $10
    i32.const 2
    i32.shl
    i32.add
    i64.load32_u
    local.set $12
    i32.const 596
    local.get $11
    i32.const 2
    i32.shl
    i32.add
    i64.load32_u
    local.set $13
    local.get $2
    i32.const 4
    i32.sub
    local.set $2
    local.get $0
    local.get $2
    i32.const 1
    i32.shl
    i32.add
    local.get $12
    local.get $13
    i64.const 32
    i64.shl
    i64.or
    i64.store
    i32.const 596
    local.get $8
    i32.const 2
    i32.shl
    i32.add
    i64.load32_u
    local.set $12
    i32.const 596
    local.get $9
    i32.const 2
    i32.shl
    i32.add
    i64.load32_u
    local.set $13
    local.get $2
    i32.const 4
    i32.sub
    local.set $2
    local.get $0
    local.get $2
    i32.const 1
    i32.shl
    i32.add
    local.get $12
    local.get $13
    i64.const 32
    i64.shl
    i64.or
    i64.store
    br $while-continue|0
   end
  end
  local.get $0
  local.get $1
  i32.wrap_i64
  local.get $2
  call $~lib/util/number/utoa32_dec_lut
 )
 (func $~lib/util/number/utoa_hex_lut (param $0 i32) (param $1 i64) (param $2 i32)
  (local $3 i32)
  loop $while-continue|0
   local.get $2
   i32.const 2
   i32.ge_u
   local.set $3
   local.get $3
   if
    local.get $2
    i32.const 2
    i32.sub
    local.set $2
    local.get $0
    local.get $2
    i32.const 1
    i32.shl
    i32.add
    i32.const 1024
    local.get $1
    i32.wrap_i64
    i32.const 255
    i32.and
    i32.const 2
    i32.shl
    i32.add
    i32.load
    i32.store
    local.get $1
    i64.const 8
    i64.shr_u
    local.set $1
    br $while-continue|0
   end
  end
  local.get $2
  i32.const 1
  i32.and
  if
   local.get $0
   i32.const 1024
   local.get $1
   i32.wrap_i64
   i32.const 6
   i32.shl
   i32.add
   i32.load16_u
   i32.store16
  end
 )
 (func $~lib/util/number/ulog_base (param $0 i64) (param $1 i32) (result i32)
  (local $2 i64)
  (local $3 i64)
  (local $4 i32)
  (local $5 i32)
  local.get $1
  local.get $1
  i32.const 1
  i32.sub
  i32.and
  i32.const 0
  i32.eq
  if
   i32.const 63
   local.get $0
   i64.clz
   i32.wrap_i64
   i32.sub
   i32.const 31
   local.get $1
   i32.clz
   i32.sub
   i32.div_u
   i32.const 1
   i32.add
   return
  end
  local.get $1
  i64.extend_i32_s
  local.set $2
  local.get $2
  local.set $3
  i32.const 1
  local.set $4
  loop $while-continue|0
   local.get $0
   local.get $3
   i64.ge_u
   local.set $5
   local.get $5
   if
    local.get $0
    local.get $3
    i64.div_u
    local.set $0
    local.get $3
    local.get $3
    i64.mul
    local.set $3
    local.get $4
    i32.const 1
    i32.shl
    local.set $4
    br $while-continue|0
   end
  end
  loop $while-continue|1
   local.get $0
   i64.const 1
   i64.ge_u
   local.set $5
   local.get $5
   if
    local.get $0
    local.get $2
    i64.div_u
    local.set $0
    local.get $4
    i32.const 1
    i32.add
    local.set $4
    br $while-continue|1
   end
  end
  local.get $4
  i32.const 1
  i32.sub
 )
 (func $~lib/util/number/utoa64_any_core (param $0 i32) (param $1 i64) (param $2 i32) (param $3 i32)
  (local $4 i64)
  (local $5 i64)
  (local $6 i64)
  (local $7 i32)
  local.get $3
  i64.extend_i32_s
  local.set $4
  local.get $3
  local.get $3
  i32.const 1
  i32.sub
  i32.and
  i32.const 0
  i32.eq
  if
   local.get $3
   i32.ctz
   i32.const 7
   i32.and
   i64.extend_i32_s
   local.set $5
   local.get $4
   i64.const 1
   i64.sub
   local.set $6
   loop $do-continue|0
    local.get $2
    i32.const 1
    i32.sub
    local.set $2
    local.get $0
    local.get $2
    i32.const 1
    i32.shl
    i32.add
    i32.const 2064
    local.get $1
    local.get $6
    i64.and
    i32.wrap_i64
    i32.const 1
    i32.shl
    i32.add
    i32.load16_u
    i32.store16
    local.get $1
    local.get $5
    i64.shr_u
    local.set $1
    local.get $1
    i64.const 0
    i64.ne
    local.set $7
    local.get $7
    br_if $do-continue|0
   end
  else
   loop $do-continue|1
    local.get $2
    i32.const 1
    i32.sub
    local.set $2
    local.get $1
    local.get $4
    i64.div_u
    local.set $6
    local.get $0
    local.get $2
    i32.const 1
    i32.shl
    i32.add
    i32.const 2064
    local.get $1
    local.get $6
    local.get $4
    i64.mul
    i64.sub
    i32.wrap_i64
    i32.const 1
    i32.shl
    i32.add
    i32.load16_u
    i32.store16
    local.get $6
    local.set $1
    local.get $1
    i64.const 0
    i64.ne
    local.set $7
    local.get $7
    br_if $do-continue|1
   end
  end
 )
 (func $~lib/util/number/utoa64 (param $0 i64) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i64)
  local.get $1
  i32.const 2
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $1
   i32.const 36
   i32.gt_s
  end
  if
   i32.const 400
   i32.const 528
   i32.const 395
   i32.const 5
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i64.const 0
  i64.ne
  i32.eqz
  if
   i32.const 592
   return
  end
  i32.const 0
  local.set $2
  local.get $1
  i32.const 10
  i32.eq
  if
   local.get $0
   global.get $~lib/builtins/u32.MAX_VALUE
   i64.extend_i32_u
   i64.le_u
   if
    local.get $0
    i32.wrap_i64
    local.set $3
    local.get $3
    call $~lib/util/number/decimalCount32
    local.set $4
    local.get $4
    i32.const 1
    i32.shl
    i32.const 1
    call $~lib/rt/tlsf/__alloc
    local.set $2
    local.get $2
    local.set $7
    local.get $3
    local.set $6
    local.get $4
    local.set $5
    i32.const 0
    i32.const 1
    i32.ge_s
    drop
    local.get $7
    local.get $6
    local.get $5
    call $~lib/util/number/utoa32_dec_lut
   else
    local.get $0
    call $~lib/util/number/decimalCount64High
    local.set $4
    local.get $4
    i32.const 1
    i32.shl
    i32.const 1
    call $~lib/rt/tlsf/__alloc
    local.set $2
    local.get $2
    local.set $6
    local.get $0
    local.set $8
    local.get $4
    local.set $5
    i32.const 0
    i32.const 1
    i32.ge_s
    drop
    local.get $6
    local.get $8
    local.get $5
    call $~lib/util/number/utoa64_dec_lut
   end
  else
   local.get $1
   i32.const 16
   i32.eq
   if
    i32.const 63
    local.get $0
    i64.clz
    i32.wrap_i64
    i32.sub
    i32.const 2
    i32.shr_s
    i32.const 1
    i32.add
    local.set $4
    local.get $4
    i32.const 1
    i32.shl
    i32.const 1
    call $~lib/rt/tlsf/__alloc
    local.set $2
    local.get $2
    local.set $3
    local.get $0
    local.set $8
    local.get $4
    local.set $7
    i32.const 0
    i32.const 1
    i32.ge_s
    drop
    local.get $3
    local.get $8
    local.get $7
    call $~lib/util/number/utoa_hex_lut
   else
    local.get $0
    local.get $1
    call $~lib/util/number/ulog_base
    local.set $4
    local.get $4
    i32.const 1
    i32.shl
    i32.const 1
    call $~lib/rt/tlsf/__alloc
    local.set $2
    local.get $2
    local.get $0
    local.get $4
    local.get $1
    call $~lib/util/number/utoa64_any_core
   end
  end
  local.get $2
  call $~lib/rt/pure/__retain
 )
 (func $~lib/number/U64#toString (param $0 i64) (param $1 i32) (result i32)
  local.get $0
  local.get $1
  call $~lib/util/number/utoa64
 )
 (func $start:assembly/formatters~anonymous|1 (param $0 i32) (param $1 i64) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  local.get $1
  i32.const 10
  call $~lib/number/U64#toString
  local.tee $2
  i32.const 2
  global.set $~argumentsLength
  global.get $assembly/formatters/leftPadding
  call_indirect (type $i32_i32_=>_i32)
  local.tee $3
  local.set $4
  local.get $2
  call $~lib/rt/pure/__release
  local.get $4
 )
 (func $assembly/packedarray/bitcount/bitCount32 (param $0 i32) (result i32)
  (local $1 i32)
  local.get $0
  local.set $1
  local.get $1
  local.get $1
  i32.const 1
  i32.shr_u
  i32.const 1431655765
  i32.and
  i32.sub
  local.set $1
  local.get $1
  i32.const 858993459
  i32.and
  local.get $1
  i32.const 2
  i32.shr_u
  i32.const 858993459
  i32.and
  i32.add
  local.set $1
  local.get $1
  local.get $1
  i32.const 4
  i32.shr_u
  i32.add
  i32.const 252645135
  i32.and
  i32.const 16843009
  i32.mul
  i32.const 24
  i32.shr_u
 )
 (func $start:assembly/packedarray/bitcount~anonymous|0 (param $0 i64) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  i32.const 0
  local.set $1
  loop $while-continue|1
   local.get $0
   i64.const 0
   i64.ne
   local.set $2
   local.get $2
   if
    local.get $0
    global.get $~lib/builtins/u32.MAX_VALUE
    i64.extend_i32_u
    i64.and
    i32.wrap_i64
    local.set $4
    local.get $1
    local.get $4
    call $assembly/packedarray/bitcount/bitCount32
    i32.add
    local.set $1
    local.get $0
    i64.const 4294967296
    i64.div_u
    local.set $0
    br $while-continue|1
   end
  end
  local.get $1
 )
 (func $~lib/math/NativeMath.pow (param $0 f64) (param $1 f64) (result f64)
  (local $2 f64)
  (local $3 f64)
  (local $4 i32)
  (local $5 i64)
  (local $6 i64)
  (local $7 i64)
  (local $8 i64)
  (local $9 i64)
  (local $10 f64)
  (local $11 i64)
  (local $12 i32)
  (local $13 i64)
  (local $14 i64)
  (local $15 f64)
  (local $16 f64)
  (local $17 f64)
  (local $18 f64)
  (local $19 f64)
  (local $20 f64)
  (local $21 f64)
  (local $22 f64)
  (local $23 f64)
  (local $24 f64)
  (local $25 f64)
  (local $26 f64)
  (local $27 f64)
  (local $28 f64)
  (local $29 f64)
  (local $30 f64)
  (local $31 f64)
  (local $32 f64)
  (local $33 f64)
  (local $34 f64)
  (local $35 f64)
  (local $36 f64)
  (local $37 f64)
  (local $38 f64)
  (local $39 i32)
  (local $40 i32)
  (local $41 i32)
  (local $42 i32)
  (local $43 i64)
  (local $44 i64)
  local.get $1
  f64.abs
  f64.const 2
  f64.le
  if
   local.get $1
   f64.const 2
   f64.eq
   if
    local.get $0
    local.get $0
    f64.mul
    return
   end
   local.get $1
   f64.const 0.5
   f64.eq
   if
    local.get $0
    f64.sqrt
    f64.abs
    f64.const inf
    local.get $0
    f64.const inf
    f64.neg
    f64.ne
    select
    return
   end
   local.get $1
   f64.const -1
   f64.eq
   if
    f64.const 1
    local.get $0
    f64.div
    return
   end
   local.get $1
   f64.const 1
   f64.eq
   if
    local.get $0
    return
   end
   local.get $1
   f64.const 0
   f64.eq
   if
    f64.const 1
    return
   end
  end
  i32.const 0
  i32.const 1
  i32.lt_s
  drop
  block $~lib/util/math/pow_lut|inlined.0 (result f64)
   local.get $0
   local.set $3
   local.get $1
   local.set $2
   i32.const 0
   local.set $4
   local.get $3
   i64.reinterpret_f64
   local.set $5
   local.get $2
   i64.reinterpret_f64
   local.set $6
   local.get $5
   i64.const 52
   i64.shr_u
   local.set $7
   local.get $6
   i64.const 52
   i64.shr_u
   local.set $8
   local.get $7
   i64.const 1
   i64.sub
   i64.const 2047
   i64.const 1
   i64.sub
   i64.ge_u
   if (result i32)
    i32.const 1
   else
    local.get $8
    i64.const 2047
    i64.and
    i64.const 958
    i64.sub
    i64.const 1086
    i64.const 958
    i64.sub
    i64.ge_u
   end
   if
    local.get $6
    local.set $9
    local.get $9
    i64.const 1
    i64.shl
    i64.const 1
    i64.sub
    i64.const -9007199254740992
    i64.const 1
    i64.sub
    i64.ge_u
    if
     local.get $6
     i64.const 1
     i64.shl
     i64.const 0
     i64.eq
     if
      f64.const 1
      br $~lib/util/math/pow_lut|inlined.0
     end
     local.get $5
     i64.const 4607182418800017408
     i64.eq
     if
      f64.const nan:0x8000000000000
      br $~lib/util/math/pow_lut|inlined.0
     end
     local.get $5
     i64.const 1
     i64.shl
     i64.const -9007199254740992
     i64.gt_u
     if (result i32)
      i32.const 1
     else
      local.get $6
      i64.const 1
      i64.shl
      i64.const -9007199254740992
      i64.gt_u
     end
     if
      local.get $3
      local.get $2
      f64.add
      br $~lib/util/math/pow_lut|inlined.0
     end
     local.get $5
     i64.const 1
     i64.shl
     i64.const 9214364837600034816
     i64.eq
     if
      f64.const nan:0x8000000000000
      br $~lib/util/math/pow_lut|inlined.0
     end
     local.get $5
     i64.const 1
     i64.shl
     i64.const 9214364837600034816
     i64.lt_u
     local.get $6
     i64.const 63
     i64.shr_u
     i64.const 0
     i64.ne
     i32.eqz
     i32.eq
     if
      f64.const 0
      br $~lib/util/math/pow_lut|inlined.0
     end
     local.get $2
     local.get $2
     f64.mul
     br $~lib/util/math/pow_lut|inlined.0
    end
    local.get $5
    local.set $9
    local.get $9
    i64.const 1
    i64.shl
    i64.const 1
    i64.sub
    i64.const -9007199254740992
    i64.const 1
    i64.sub
    i64.ge_u
    if
     local.get $3
     local.get $3
     f64.mul
     local.set $10
     local.get $5
     i64.const 63
     i64.shr_u
     i32.wrap_i64
     if (result i32)
      block $~lib/util/math/checkint|inlined.0 (result i32)
       local.get $6
       local.set $9
       local.get $9
       i64.const 52
       i64.shr_u
       i64.const 2047
       i64.and
       local.set $11
       local.get $11
       i64.const 1023
       i64.lt_u
       if
        i32.const 0
        br $~lib/util/math/checkint|inlined.0
       end
       local.get $11
       i64.const 1023
       i64.const 52
       i64.add
       i64.gt_u
       if
        i32.const 2
        br $~lib/util/math/checkint|inlined.0
       end
       i64.const 1
       i64.const 1023
       i64.const 52
       i64.add
       local.get $11
       i64.sub
       i64.shl
       local.set $11
       local.get $9
       local.get $11
       i64.const 1
       i64.sub
       i64.and
       i64.const 0
       i64.ne
       if
        i32.const 0
        br $~lib/util/math/checkint|inlined.0
       end
       local.get $9
       local.get $11
       i64.and
       i64.const 0
       i64.ne
       if
        i32.const 1
        br $~lib/util/math/checkint|inlined.0
       end
       i32.const 2
      end
      i32.const 1
      i32.eq
     else
      i32.const 0
     end
     if
      local.get $10
      f64.neg
      local.set $10
     end
     local.get $6
     i64.const 63
     i64.shr_u
     i64.const 0
     i64.ne
     if (result f64)
      f64.const 1
      local.get $10
      f64.div
     else
      local.get $10
     end
     br $~lib/util/math/pow_lut|inlined.0
    end
    local.get $5
    i64.const 63
    i64.shr_u
    i64.const 0
    i64.ne
    if
     block $~lib/util/math/checkint|inlined.1 (result i32)
      local.get $6
      local.set $9
      local.get $9
      i64.const 52
      i64.shr_u
      i64.const 2047
      i64.and
      local.set $11
      local.get $11
      i64.const 1023
      i64.lt_u
      if
       i32.const 0
       br $~lib/util/math/checkint|inlined.1
      end
      local.get $11
      i64.const 1023
      i64.const 52
      i64.add
      i64.gt_u
      if
       i32.const 2
       br $~lib/util/math/checkint|inlined.1
      end
      i64.const 1
      i64.const 1023
      i64.const 52
      i64.add
      local.get $11
      i64.sub
      i64.shl
      local.set $11
      local.get $9
      local.get $11
      i64.const 1
      i64.sub
      i64.and
      i64.const 0
      i64.ne
      if
       i32.const 0
       br $~lib/util/math/checkint|inlined.1
      end
      local.get $9
      local.get $11
      i64.and
      i64.const 0
      i64.ne
      if
       i32.const 1
       br $~lib/util/math/checkint|inlined.1
      end
      i32.const 2
     end
     local.set $12
     local.get $12
     i32.const 0
     i32.eq
     if
      local.get $3
      local.get $3
      f64.sub
      local.get $3
      local.get $3
      f64.sub
      f64.div
      br $~lib/util/math/pow_lut|inlined.0
     end
     local.get $12
     i32.const 1
     i32.eq
     if
      i32.const 262144
      local.set $4
     end
     local.get $5
     i64.const 9223372036854775807
     i64.and
     local.set $5
     local.get $7
     i64.const 2047
     i64.and
     local.set $7
    end
    local.get $8
    i64.const 2047
    i64.and
    i64.const 958
    i64.sub
    i64.const 1086
    i64.const 958
    i64.sub
    i64.ge_u
    if
     local.get $5
     i64.const 4607182418800017408
     i64.eq
     if
      f64.const 1
      br $~lib/util/math/pow_lut|inlined.0
     end
     local.get $8
     i64.const 2047
     i64.and
     i64.const 958
     i64.lt_u
     if
      f64.const 1
      br $~lib/util/math/pow_lut|inlined.0
     end
     local.get $5
     i64.const 4607182418800017408
     i64.gt_u
     local.get $8
     i64.const 2048
     i64.lt_u
     i32.eq
     if (result f64)
      f64.const inf
     else
      f64.const 0
     end
     br $~lib/util/math/pow_lut|inlined.0
    end
    local.get $7
    i64.const 0
    i64.eq
    if
     local.get $3
     f64.const 4503599627370496
     f64.mul
     i64.reinterpret_f64
     local.set $5
     local.get $5
     i64.const 9223372036854775807
     i64.and
     local.set $5
     local.get $5
     i64.const 52
     i64.const 52
     i64.shl
     i64.sub
     local.set $5
    end
   end
   local.get $5
   local.set $9
   local.get $9
   i64.const 4604531861337669632
   i64.sub
   local.set $11
   local.get $11
   i64.const 52
   i64.const 7
   i64.sub
   i64.shr_u
   i64.const 127
   i64.and
   i32.wrap_i64
   local.set $12
   local.get $11
   i64.const 52
   i64.shr_s
   local.set $13
   local.get $9
   local.get $11
   i64.const 4095
   i64.const 52
   i64.shl
   i64.and
   i64.sub
   local.set $14
   local.get $14
   f64.reinterpret_i64
   local.set $10
   local.get $13
   f64.convert_i64_s
   local.set $15
   i32.const 2136
   local.get $12
   i32.const 2
   i32.const 3
   i32.add
   i32.shl
   i32.add
   f64.load
   local.set $16
   i32.const 2136
   local.get $12
   i32.const 2
   i32.const 3
   i32.add
   i32.shl
   i32.add
   f64.load offset=16
   local.set $17
   i32.const 2136
   local.get $12
   i32.const 2
   i32.const 3
   i32.add
   i32.shl
   i32.add
   f64.load offset=24
   local.set $18
   local.get $14
   i64.const 2147483648
   i64.add
   i64.const -4294967296
   i64.and
   f64.reinterpret_i64
   local.set $19
   local.get $10
   local.get $19
   f64.sub
   local.set $20
   local.get $19
   local.get $16
   f64.mul
   f64.const 1
   f64.sub
   local.set $21
   local.get $20
   local.get $16
   f64.mul
   local.set $22
   local.get $21
   local.get $22
   f64.add
   local.set $23
   local.get $15
   f64.const 0.6931471805598903
   f64.mul
   local.get $17
   f64.add
   local.set $24
   local.get $24
   local.get $23
   f64.add
   local.set $25
   local.get $15
   f64.const 5.497923018708371e-14
   f64.mul
   local.get $18
   f64.add
   local.set $26
   local.get $24
   local.get $25
   f64.sub
   local.get $23
   f64.add
   local.set $27
   f64.const -0.5
   local.get $23
   f64.mul
   local.set $28
   local.get $23
   local.get $28
   f64.mul
   local.set $29
   local.get $23
   local.get $29
   f64.mul
   local.set $30
   f64.const -0.5
   local.get $21
   f64.mul
   local.set $31
   local.get $21
   local.get $31
   f64.mul
   local.set $32
   local.get $25
   local.get $32
   f64.add
   local.set $33
   local.get $22
   local.get $28
   local.get $31
   f64.add
   f64.mul
   local.set $34
   local.get $25
   local.get $33
   f64.sub
   local.get $32
   f64.add
   local.set $35
   local.get $30
   f64.const -0.6666666666666679
   local.get $23
   f64.const 0.5000000000000007
   f64.mul
   f64.add
   local.get $29
   f64.const 0.7999999995323976
   local.get $23
   f64.const -0.6666666663487739
   f64.mul
   f64.add
   local.get $29
   f64.const -1.142909628459501
   local.get $23
   f64.const 1.0000415263675542
   f64.mul
   f64.add
   f64.mul
   f64.add
   f64.mul
   f64.add
   f64.mul
   local.set $36
   local.get $26
   local.get $27
   f64.add
   local.get $34
   f64.add
   local.get $35
   f64.add
   local.get $36
   f64.add
   local.set $37
   local.get $33
   local.get $37
   f64.add
   local.set $38
   local.get $33
   local.get $38
   f64.sub
   local.get $37
   f64.add
   global.set $~lib/util/math/log_tail
   local.get $38
   local.set $38
   global.get $~lib/util/math/log_tail
   local.set $37
   local.get $6
   i64.const -134217728
   i64.and
   f64.reinterpret_i64
   local.set $34
   local.get $2
   local.get $34
   f64.sub
   local.set $33
   local.get $38
   i64.reinterpret_f64
   i64.const -134217728
   i64.and
   f64.reinterpret_i64
   local.set $32
   local.get $38
   local.get $32
   f64.sub
   local.get $37
   f64.add
   local.set $31
   local.get $34
   local.get $32
   f64.mul
   local.set $36
   local.get $33
   local.get $32
   f64.mul
   local.get $2
   local.get $31
   f64.mul
   f64.add
   local.set $35
   block $~lib/util/math/exp_inline|inlined.0 (result f64)
    local.get $36
    local.set $15
    local.get $35
    local.set $10
    local.get $4
    local.set $12
    local.get $15
    i64.reinterpret_f64
    local.set $9
    local.get $9
    i64.const 52
    i64.shr_u
    i32.wrap_i64
    i32.const 2047
    i32.and
    local.set $39
    local.get $39
    i32.const 969
    i32.sub
    i32.const 63
    i32.ge_u
    if
     local.get $39
     i32.const 969
     i32.sub
     i32.const -2147483648
     i32.ge_u
     if
      f64.const -1
      f64.const 1
      local.get $12
      select
      br $~lib/util/math/exp_inline|inlined.0
     end
     local.get $39
     i32.const 1033
     i32.ge_u
     if
      local.get $9
      i64.const 63
      i64.shr_u
      i64.const 0
      i64.ne
      if (result f64)
       local.get $12
       local.set $41
       local.get $41
       local.set $42
       i64.const 1152921504606846976
       f64.reinterpret_i64
       local.set $16
       local.get $16
       f64.neg
       local.get $16
       local.get $42
       select
       local.get $16
       f64.mul
      else
       local.get $12
       local.set $42
       local.get $42
       local.set $41
       i64.const 8070450532247928832
       f64.reinterpret_i64
       local.set $17
       local.get $17
       f64.neg
       local.get $17
       local.get $41
       select
       local.get $17
       f64.mul
      end
      br $~lib/util/math/exp_inline|inlined.0
     end
     i32.const 0
     local.set $39
    end
    f64.const 184.6649652337873
    local.get $15
    f64.mul
    local.set $29
    local.get $29
    f64.const 6755399441055744
    f64.add
    local.set $30
    local.get $30
    i64.reinterpret_f64
    local.set $14
    local.get $30
    f64.const 6755399441055744
    f64.sub
    local.set $30
    local.get $15
    local.get $30
    f64.const -0.005415212348111709
    f64.mul
    f64.add
    local.get $30
    f64.const -1.2864023111638346e-14
    f64.mul
    f64.add
    local.set $28
    local.get $28
    local.get $10
    f64.add
    local.set $28
    local.get $14
    i64.const 127
    i64.and
    i64.const 1
    i64.shl
    i32.wrap_i64
    local.set $40
    local.get $14
    local.get $12
    i64.extend_i32_u
    i64.add
    i64.const 52
    i64.const 7
    i64.sub
    i64.shl
    local.set $13
    i32.const 6232
    local.get $40
    i32.const 3
    i32.shl
    i32.add
    i64.load
    f64.reinterpret_i64
    local.set $25
    i32.const 6232
    local.get $40
    i32.const 3
    i32.shl
    i32.add
    i64.load offset=8
    local.get $13
    i64.add
    local.set $11
    local.get $28
    local.get $28
    f64.mul
    local.set $27
    local.get $25
    local.get $28
    f64.add
    local.get $27
    f64.const 0.49999999999996786
    local.get $28
    f64.const 0.16666666666665886
    f64.mul
    f64.add
    f64.mul
    f64.add
    local.get $27
    local.get $27
    f64.mul
    f64.const 0.0416666808410674
    local.get $28
    f64.const 0.008333335853059549
    f64.mul
    f64.add
    f64.mul
    f64.add
    local.set $24
    local.get $39
    i32.const 0
    i32.eq
    if
     block $~lib/util/math/specialcase|inlined.0 (result f64)
      local.get $24
      local.set $18
      local.get $11
      local.set $44
      local.get $14
      local.set $43
      local.get $43
      i64.const 2147483648
      i64.and
      i64.const 0
      i64.ne
      i32.eqz
      if
       local.get $44
       i64.const 1009
       i64.const 52
       i64.shl
       i64.sub
       local.set $44
       local.get $44
       f64.reinterpret_i64
       local.set $17
       f64.const 5486124068793688683255936e279
       local.get $17
       local.get $17
       local.get $18
       f64.mul
       f64.add
       f64.mul
       br $~lib/util/math/specialcase|inlined.0
      end
      local.get $44
      i64.const 1022
      i64.const 52
      i64.shl
      i64.add
      local.set $44
      local.get $44
      f64.reinterpret_i64
      local.set $17
      local.get $17
      local.get $17
      local.get $18
      f64.mul
      f64.add
      local.set $16
      local.get $16
      f64.abs
      f64.const 1
      f64.lt
      if
       f64.const 1
       local.get $16
       f64.copysign
       local.set $23
       local.get $17
       local.get $16
       f64.sub
       local.get $17
       local.get $18
       f64.mul
       f64.add
       local.set $22
       local.get $23
       local.get $16
       f64.add
       local.set $21
       local.get $23
       local.get $21
       f64.sub
       local.get $16
       f64.add
       local.get $22
       f64.add
       local.set $22
       local.get $21
       local.get $22
       f64.add
       local.get $23
       f64.sub
       local.set $16
       local.get $16
       f64.const 0
       f64.eq
       if
        local.get $44
        i64.const -9223372036854775808
        i64.and
        f64.reinterpret_i64
        local.set $16
       end
      end
      local.get $16
      f64.const 2.2250738585072014e-308
      f64.mul
     end
     br $~lib/util/math/exp_inline|inlined.0
    end
    local.get $11
    f64.reinterpret_i64
    local.set $26
    local.get $26
    local.get $26
    local.get $24
    f64.mul
    f64.add
   end
  end
  return
 )
 (func $start:assembly/packedarray/PackedArrayContext
  (local $0 i32)
  (local $1 i32)
  f64.const 2
  f64.const 13
  call $~lib/math/NativeMath.pow
  f64.const 1
  f64.sub
  global.set $assembly/packedarray/PackedArrayContext/MAX_SUPPORTED_PACKED_COUNTS_ARRAY_LENGTH
 )
 (func $start:assembly/packedarray/PackedArray
  call $start:assembly/packedarray/PackedArrayContext
 )
 (func $start:assembly/Histogram
  call $start:assembly/packedarray/PackedArray
 )
 (func $start:assembly/index
  call $start:assembly/Histogram
 )
 (func $assembly/AbstractHistogramBase/AbstractHistogramBase<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#constructor (param $0 i32) (result i32)
  local.get $0
  i32.eqz
  if
   i32.const 104
   i32.const 9
   call $~lib/rt/tlsf/__alloc
   call $~lib/rt/pure/__retain
   local.set $0
  end
  local.get $0
  f64.const 0
  f64.store
  local.get $0
  i32.const 0
  i32.store8 offset=8
  local.get $0
  i64.const 0
  i64.store offset=16
  local.get $0
  i64.const 0
  i64.store offset=24
  local.get $0
  i32.const 0
  i32.store8 offset=32
  local.get $0
  i64.const 0
  i64.store offset=40
  local.get $0
  i32.const 0
  i32.store offset=48
  local.get $0
  i32.const 0
  i32.store offset=52
  local.get $0
  i64.const 0
  i64.store offset=56
  local.get $0
  global.get $~lib/builtins/u64.MAX_VALUE
  i64.store offset=64
  local.get $0
  i64.const 0
  i64.store offset=72
  local.get $0
  global.get $assembly/AbstractHistogramBase/NO_TAG
  call $~lib/rt/pure/__retain
  i32.store offset=80
  local.get $0
  f64.const 1
  f64.store offset=88
  local.get $0
  i32.const 0
  i32.store offset=96
  local.get $0
  i32.const 0
  i32.store offset=100
  local.get $0
  f64.const 0
  f64.store
  local.get $0
  i64.const 0
  i64.store offset=16
  local.get $0
  i64.const 0
  i64.store offset=24
  local.get $0
  i32.const 0
  i32.store8 offset=32
  local.get $0
  i64.const 0
  i64.store offset=40
  local.get $0
  i32.const 0
  i32.store offset=48
  local.get $0
  i32.const 0
  i32.store offset=52
  local.get $0
  i64.const 0
  i64.store offset=56
  local.get $0
 )
 (func $~lib/math/NativeMath.log2 (param $0 f64) (result f64)
  (local $1 f64)
  (local $2 i64)
  (local $3 f64)
  (local $4 f64)
  (local $5 f64)
  (local $6 f64)
  (local $7 f64)
  (local $8 f64)
  (local $9 f64)
  (local $10 f64)
  (local $11 f64)
  (local $12 i32)
  (local $13 i64)
  (local $14 i32)
  (local $15 i64)
  (local $16 i64)
  (local $17 f64)
  (local $18 f64)
  (local $19 f64)
  (local $20 f64)
  (local $21 f64)
  (local $22 f64)
  (local $23 f64)
  i32.const 0
  i32.const 1
  i32.lt_s
  drop
  block $~lib/util/math/log2_lut|inlined.0 (result f64)
   local.get $0
   local.set $1
   local.get $1
   i64.reinterpret_f64
   local.set $2
   local.get $2
   i64.const 4606800540372828160
   i64.sub
   i64.const 4607381812656734208
   i64.const 4606800540372828160
   i64.sub
   i64.lt_u
   if
    local.get $1
    f64.const 1
    f64.sub
    local.set $3
    local.get $3
    i64.reinterpret_f64
    i64.const -4294967296
    i64.and
    f64.reinterpret_i64
    local.set $4
    local.get $3
    local.get $4
    f64.sub
    local.set $5
    local.get $4
    f64.const 1.4426950407214463
    f64.mul
    local.set $6
    local.get $5
    f64.const 1.4426950407214463
    f64.mul
    local.get $3
    f64.const 1.6751713164886512e-10
    f64.mul
    f64.add
    local.set $7
    local.get $3
    local.get $3
    f64.mul
    local.set $8
    local.get $8
    local.get $8
    f64.mul
    local.set $9
    local.get $8
    f64.const -0.7213475204444817
    local.get $3
    f64.const 0.48089834696298744
    f64.mul
    f64.add
    f64.mul
    local.set $10
    local.get $6
    local.get $10
    f64.add
    local.set $11
    local.get $7
    local.get $6
    local.get $11
    f64.sub
    local.get $10
    f64.add
    f64.add
    local.set $7
    local.get $7
    local.get $9
    f64.const -0.360673760222145
    local.get $3
    f64.const 0.2885390081805197
    f64.mul
    f64.add
    local.get $8
    f64.const -0.24044917405728863
    local.get $3
    f64.const 0.2060992861022954
    f64.mul
    f64.add
    f64.mul
    f64.add
    local.get $9
    f64.const -0.18033596705327856
    local.get $3
    f64.const 0.1603032746063156
    f64.mul
    f64.add
    local.get $8
    f64.const -0.14483316576701266
    local.get $3
    f64.const 0.13046826811283835
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    local.set $7
    local.get $11
    local.get $7
    f64.add
    br $~lib/util/math/log2_lut|inlined.0
   end
   local.get $2
   i64.const 48
   i64.shr_u
   i32.wrap_i64
   local.set $12
   local.get $12
   i32.const 16
   i32.sub
   i32.const 32752
   i32.const 16
   i32.sub
   i32.ge_u
   if
    local.get $2
    i64.const 1
    i64.shl
    i64.const 0
    i64.eq
    if
     f64.const -1
     local.get $1
     local.get $1
     f64.mul
     f64.div
     br $~lib/util/math/log2_lut|inlined.0
    end
    local.get $2
    i64.const 9218868437227405312
    i64.eq
    if
     local.get $1
     br $~lib/util/math/log2_lut|inlined.0
    end
    local.get $12
    i32.const 32768
    i32.and
    if (result i32)
     i32.const 1
    else
     local.get $12
     i32.const 32752
     i32.and
     i32.const 32752
     i32.eq
    end
    if
     local.get $1
     local.get $1
     f64.sub
     local.get $1
     local.get $1
     f64.sub
     f64.div
     br $~lib/util/math/log2_lut|inlined.0
    end
    local.get $1
    f64.const 4503599627370496
    f64.mul
    i64.reinterpret_f64
    local.set $2
    local.get $2
    i64.const 52
    i64.const 52
    i64.shl
    i64.sub
    local.set $2
   end
   local.get $2
   i64.const 4604367669032910848
   i64.sub
   local.set $13
   local.get $13
   i64.const 52
   i64.const 6
   i64.sub
   i64.shr_u
   i64.const 63
   i64.and
   i32.wrap_i64
   local.set $14
   local.get $13
   i64.const 52
   i64.shr_s
   local.set $15
   local.get $2
   local.get $13
   i64.const -4503599627370496
   i64.and
   i64.sub
   local.set $16
   i32.const 9376
   local.get $14
   i32.const 1
   i32.const 3
   i32.add
   i32.shl
   i32.add
   f64.load
   local.set $11
   i32.const 9376
   local.get $14
   i32.const 1
   i32.const 3
   i32.add
   i32.shl
   i32.add
   f64.load offset=8
   local.set $10
   local.get $16
   f64.reinterpret_i64
   local.set $9
   local.get $15
   f64.convert_i64_s
   local.set $8
   i32.const 10400
   local.get $14
   i32.const 1
   i32.const 3
   i32.add
   i32.shl
   i32.add
   f64.load
   local.set $7
   i32.const 10400
   local.get $14
   i32.const 1
   i32.const 3
   i32.add
   i32.shl
   i32.add
   f64.load offset=8
   local.set $6
   local.get $9
   local.get $7
   f64.sub
   local.get $6
   f64.sub
   local.get $11
   f64.mul
   local.set $5
   local.get $5
   i64.reinterpret_f64
   i64.const -4294967296
   i64.and
   f64.reinterpret_i64
   local.set $4
   local.get $5
   local.get $4
   f64.sub
   local.set $3
   local.get $4
   f64.const 1.4426950407214463
   f64.mul
   local.set $17
   local.get $3
   f64.const 1.4426950407214463
   f64.mul
   local.get $5
   f64.const 1.6751713164886512e-10
   f64.mul
   f64.add
   local.set $18
   local.get $8
   local.get $10
   f64.add
   local.set $19
   local.get $19
   local.get $17
   f64.add
   local.set $20
   local.get $19
   local.get $20
   f64.sub
   local.get $17
   f64.add
   local.get $18
   f64.add
   local.set $21
   local.get $5
   local.get $5
   f64.mul
   local.set $22
   f64.const -0.7213475204444882
   local.get $5
   f64.const 0.4808983469629985
   f64.mul
   f64.add
   local.get $22
   f64.const -0.36067375954075914
   local.get $5
   f64.const 0.2885390073180969
   f64.mul
   f64.add
   f64.mul
   f64.add
   local.get $22
   local.get $22
   f64.mul
   f64.const -0.2404693555628422
   local.get $5
   f64.const 0.2061202382173603
   f64.mul
   f64.add
   f64.mul
   f64.add
   local.set $23
   local.get $21
   local.get $22
   local.get $23
   f64.mul
   f64.add
   local.get $20
   f64.add
  end
  return
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getBucketsNeededToCoverValue (param $0 i32) (param $1 i64) (result i32)
  (local $2 i64)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  i32.load offset=48
  i64.extend_i32_s
  local.get $0
  i32.load offset=112
  i64.extend_i32_s
  i64.shl
  local.set $2
  i32.const 1
  local.set $3
  loop $while-continue|0
   local.get $2
   local.get $1
   i64.le_u
   local.set $4
   local.get $4
   if
    local.get $2
    global.get $~lib/builtins/u64.MAX_VALUE
    i64.const 1
    i64.shr_u
    i64.gt_u
    if
     local.get $3
     i32.const 1
     i32.add
     return
    end
    local.get $2
    i64.const 1
    i64.shl
    local.set $2
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $while-continue|0
   end
  end
  local.get $3
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getLengthForNumberOfBuckets (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  local.get $1
  i32.const 1
  i32.add
  local.get $0
  i32.load offset=48
  i32.const 1
  i32.shr_s
  i32.mul
  local.set $2
  local.get $2
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#determineArrayLengthNeeded (param $0 i32) (param $1 i64) (result i32)
  (local $2 i32)
  local.get $1
  i64.const 2
  local.get $0
  i64.load offset=24
  i64.mul
  i64.lt_u
  if
   i32.const 11440
   i32.const 8992
   i32.const 160
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getBucketsNeededToCoverValue
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getLengthForNumberOfBuckets
  local.set $2
  local.get $2
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#establishSize (param $0 i32) (param $1 i64)
  local.get $0
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#determineArrayLengthNeeded
  i32.store offset=52
  local.get $0
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getBucketsNeededToCoverValue
  i64.extend_i32_s
  i64.store offset=40
  local.get $0
  local.get $1
  i64.store offset=16
 )
 (func $~lib/memory/memory.fill (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i64)
  (local $10 i32)
  block $~lib/util/memory/memset|inlined.0
   local.get $0
   local.set $5
   local.get $1
   local.set $4
   local.get $2
   local.set $3
   i32.const 0
   i32.const 1
   i32.gt_s
   drop
   local.get $3
   i32.eqz
   if
    br $~lib/util/memory/memset|inlined.0
   end
   local.get $5
   local.get $3
   i32.add
   i32.const 4
   i32.sub
   local.set $6
   local.get $5
   local.get $4
   i32.store8
   local.get $6
   local.get $4
   i32.store8 offset=3
   local.get $3
   i32.const 2
   i32.le_u
   if
    br $~lib/util/memory/memset|inlined.0
   end
   local.get $5
   local.get $4
   i32.store8 offset=1
   local.get $5
   local.get $4
   i32.store8 offset=2
   local.get $6
   local.get $4
   i32.store8 offset=2
   local.get $6
   local.get $4
   i32.store8 offset=1
   local.get $3
   i32.const 6
   i32.le_u
   if
    br $~lib/util/memory/memset|inlined.0
   end
   local.get $5
   local.get $4
   i32.store8 offset=3
   local.get $6
   local.get $4
   i32.store8
   local.get $3
   i32.const 8
   i32.le_u
   if
    br $~lib/util/memory/memset|inlined.0
   end
   i32.const 0
   local.get $5
   i32.sub
   i32.const 3
   i32.and
   local.set $7
   local.get $5
   local.get $7
   i32.add
   local.set $5
   local.get $3
   local.get $7
   i32.sub
   local.set $3
   local.get $3
   i32.const -4
   i32.and
   local.set $3
   i32.const -1
   i32.const 255
   i32.div_u
   local.get $4
   i32.const 255
   i32.and
   i32.mul
   local.set $8
   local.get $5
   local.get $3
   i32.add
   i32.const 28
   i32.sub
   local.set $6
   local.get $5
   local.get $8
   i32.store
   local.get $6
   local.get $8
   i32.store offset=24
   local.get $3
   i32.const 8
   i32.le_u
   if
    br $~lib/util/memory/memset|inlined.0
   end
   local.get $5
   local.get $8
   i32.store offset=4
   local.get $5
   local.get $8
   i32.store offset=8
   local.get $6
   local.get $8
   i32.store offset=16
   local.get $6
   local.get $8
   i32.store offset=20
   local.get $3
   i32.const 24
   i32.le_u
   if
    br $~lib/util/memory/memset|inlined.0
   end
   local.get $5
   local.get $8
   i32.store offset=12
   local.get $5
   local.get $8
   i32.store offset=16
   local.get $5
   local.get $8
   i32.store offset=20
   local.get $5
   local.get $8
   i32.store offset=24
   local.get $6
   local.get $8
   i32.store
   local.get $6
   local.get $8
   i32.store offset=4
   local.get $6
   local.get $8
   i32.store offset=8
   local.get $6
   local.get $8
   i32.store offset=12
   i32.const 24
   local.get $5
   i32.const 4
   i32.and
   i32.add
   local.set $7
   local.get $5
   local.get $7
   i32.add
   local.set $5
   local.get $3
   local.get $7
   i32.sub
   local.set $3
   local.get $8
   i64.extend_i32_u
   local.get $8
   i64.extend_i32_u
   i64.const 32
   i64.shl
   i64.or
   local.set $9
   loop $while-continue|0
    local.get $3
    i32.const 32
    i32.ge_u
    local.set $10
    local.get $10
    if
     local.get $5
     local.get $9
     i64.store
     local.get $5
     local.get $9
     i64.store offset=8
     local.get $5
     local.get $9
     i64.store offset=16
     local.get $5
     local.get $9
     i64.store offset=24
     local.get $3
     i32.const 32
     i32.sub
     local.set $3
     local.get $5
     i32.const 32
     i32.add
     local.set $5
     br $while-continue|0
    end
   end
  end
 )
 (func $~lib/arraybuffer/ArrayBufferView#constructor (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  local.get $0
  i32.eqz
  if
   i32.const 12
   i32.const 2
   call $~lib/rt/tlsf/__alloc
   call $~lib/rt/pure/__retain
   local.set $0
  end
  local.get $0
  i32.const 0
  i32.store
  local.get $0
  i32.const 0
  i32.store offset=4
  local.get $0
  i32.const 0
  i32.store offset=8
  local.get $1
  i32.const 1073741808
  local.get $2
  i32.shr_u
  i32.gt_u
  if
   i32.const 256
   i32.const 11584
   i32.const 18
   i32.const 57
   call $~lib/builtins/abort
   unreachable
  end
  local.get $1
  local.get $2
  i32.shl
  local.tee $1
  i32.const 0
  call $~lib/rt/tlsf/__alloc
  local.set $3
  local.get $3
  i32.const 0
  local.get $1
  call $~lib/memory/memory.fill
  local.get $0
  local.tee $4
  local.get $3
  local.tee $5
  local.get $4
  i32.load
  local.tee $6
  i32.ne
  if
   local.get $5
   call $~lib/rt/pure/__retain
   local.set $5
   local.get $6
   call $~lib/rt/pure/__release
  end
  local.get $5
  i32.store
  local.get $0
  local.get $3
  i32.store offset=4
  local.get $0
  local.get $1
  i32.store offset=8
  local.get $0
 )
 (func $~lib/typedarray/Uint8Array#constructor (param $0 i32) (param $1 i32) (result i32)
  local.get $0
  i32.eqz
  if
   i32.const 12
   i32.const 4
   call $~lib/rt/tlsf/__alloc
   call $~lib/rt/pure/__retain
   local.set $0
  end
  local.get $0
  local.get $1
  i32.const 0
  call $~lib/arraybuffer/ArrayBufferView#constructor
  local.set $0
  local.get $0
 )
 (func $assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>#constructor (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  local.get $0
  i32.eqz
  if
   i32.const 4
   i32.const 6
   call $~lib/rt/tlsf/__alloc
   call $~lib/rt/pure/__retain
   local.set $0
  end
  local.get $0
  i32.const 0
  i32.store
  local.get $0
  local.tee $3
  i32.const 0
  local.get $1
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $2
  local.tee $4
  local.get $3
  i32.load
  local.tee $5
  i32.ne
  if
   local.get $4
   call $~lib/rt/pure/__retain
   local.set $4
   local.get $5
   call $~lib/rt/pure/__release
  end
  local.get $4
  i32.store
  local.get $2
  call $~lib/rt/pure/__release
  local.get $0
 )
 (func $assembly/HistogramIterationValue/HistogramIterationValue#reset (param $0 i32)
  local.get $0
  i64.const 0
  i64.store
  local.get $0
  i64.const 0
  i64.store offset=8
  local.get $0
  i64.const 0
  i64.store offset=16
  local.get $0
  i64.const 0
  i64.store offset=24
  local.get $0
  i64.const 0
  i64.store offset=32
  local.get $0
  i64.const 0
  i64.store offset=40
  local.get $0
  f64.const 0
  f64.store offset=48
  local.get $0
  f64.const 0
  f64.store offset=56
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#resetIterator (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.tee $2
  local.get $1
  local.tee $3
  local.get $2
  i32.load offset=28
  local.tee $4
  i32.ne
  if
   local.get $3
   call $~lib/rt/pure/__retain
   local.set $3
   local.get $4
   call $~lib/rt/pure/__release
  end
  local.get $3
  i32.store offset=28
  local.get $0
  local.get $1
  i64.load offset=168
  i64.store offset=32
  local.get $0
  local.get $1
  i64.load offset=168
  i64.store offset=96
  local.get $0
  i32.const 0
  i32.store offset=40
  local.get $0
  i64.const 0
  i64.store offset=48
  local.get $0
  i64.const 1
  local.get $1
  i32.load offset=112
  i64.extend_i32_s
  i64.shl
  i64.store offset=56
  local.get $0
  i64.const 0
  i64.store offset=64
  local.get $0
  i64.const 0
  i64.store offset=72
  local.get $0
  i64.const 0
  i64.store offset=80
  local.get $0
  i64.const 0
  i64.store offset=88
  local.get $0
  i64.const 0
  i64.store offset=104
  local.get $0
  i32.const 1
  i32.store8 offset=112
  local.get $0
  i32.load offset=116
  call $assembly/HistogramIterationValue/HistogramIterationValue#reset
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#doReset (param $0 i32) (param $1 i32) (param $2 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $1
  call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#resetIterator
  local.get $0
  local.get $2
  i32.store
  local.get $0
  f64.const 0
  f64.store offset=8
  local.get $0
  f64.const 0
  f64.store offset=16
  local.get $0
  i32.const 0
  i32.store8 offset=24
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/HistogramIterationValue/HistogramIterationValue#constructor (param $0 i32) (result i32)
  local.get $0
  i32.eqz
  if
   i32.const 64
   i32.const 11
   call $~lib/rt/tlsf/__alloc
   call $~lib/rt/pure/__retain
   local.set $0
  end
  local.get $0
  i64.const 0
  i64.store
  local.get $0
  i64.const 0
  i64.store offset=8
  local.get $0
  i64.const 0
  i64.store offset=16
  local.get $0
  i64.const 0
  i64.store offset=24
  local.get $0
  i64.const 0
  i64.store offset=32
  local.get $0
  i64.const 0
  i64.store offset=40
  local.get $0
  f64.const 0
  f64.store offset=48
  local.get $0
  f64.const 0
  f64.store offset=56
  local.get $0
  call $assembly/HistogramIterationValue/HistogramIterationValue#reset
  local.get $0
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#constructor (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  i32.eqz
  if
   i32.const 120
   i32.const 10
   call $~lib/rt/tlsf/__alloc
   call $~lib/rt/pure/__retain
   local.set $0
  end
  local.get $0
  i32.const 0
  i32.store
  local.get $0
  f64.const 0
  f64.store offset=8
  local.get $0
  f64.const 0
  f64.store offset=16
  local.get $0
  i32.const 0
  i32.store8 offset=24
  local.get $0
  i32.const 0
  i32.store offset=28
  local.get $0
  i64.const 0
  i64.store offset=32
  local.get $0
  i32.const 0
  i32.store offset=40
  local.get $0
  i64.const 0
  i64.store offset=48
  local.get $0
  i64.const 0
  i64.store offset=56
  local.get $0
  i64.const 0
  i64.store offset=64
  local.get $0
  i64.const 0
  i64.store offset=72
  local.get $0
  i64.const 0
  i64.store offset=80
  local.get $0
  i64.const 0
  i64.store offset=88
  local.get $0
  i64.const 0
  i64.store offset=96
  local.get $0
  i64.const 0
  i64.store offset=104
  local.get $0
  i32.const 0
  i32.store8 offset=112
  local.get $0
  i32.const 0
  call $assembly/HistogramIterationValue/HistogramIterationValue#constructor
  i32.store offset=116
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  i32.const 0
  i32.store
  local.get $0
  f64.const 0
  f64.store offset=8
  local.get $0
  f64.const 0
  f64.store offset=16
  local.get $0
  i32.const 0
  i32.store8 offset=24
  local.get $0
  local.get $1
  local.get $2
  call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#doReset
  local.get $1
  call $~lib/rt/pure/__release
  local.get $0
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#resetIterator (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.tee $2
  local.get $1
  local.tee $3
  local.get $2
  i32.load offset=4
  local.tee $4
  i32.ne
  if
   local.get $3
   call $~lib/rt/pure/__retain
   local.set $3
   local.get $4
   call $~lib/rt/pure/__release
  end
  local.get $3
  i32.store offset=4
  local.get $0
  local.get $1
  i64.load offset=168
  i64.store offset=8
  local.get $0
  local.get $1
  i64.load offset=168
  i64.store offset=72
  local.get $0
  i32.const 0
  i32.store offset=16
  local.get $0
  i64.const 0
  i64.store offset=24
  local.get $0
  i64.const 1
  local.get $1
  i32.load offset=112
  i64.extend_i32_s
  i64.shl
  i64.store offset=32
  local.get $0
  i64.const 0
  i64.store offset=40
  local.get $0
  i64.const 0
  i64.store offset=48
  local.get $0
  i64.const 0
  i64.store offset=56
  local.get $0
  i64.const 0
  i64.store offset=64
  local.get $0
  i64.const 0
  i64.store offset=80
  local.get $0
  i32.const 1
  i32.store8 offset=88
  local.get $0
  i32.load offset=92
  call $assembly/HistogramIterationValue/HistogramIterationValue#reset
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#doReset (param $0 i32) (param $1 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $1
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#resetIterator
  local.get $0
  i32.const -1
  i32.store
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#constructor (param $0 i32) (param $1 i32) (result i32)
  local.get $0
  i32.eqz
  if
   i32.const 96
   i32.const 12
   call $~lib/rt/tlsf/__alloc
   call $~lib/rt/pure/__retain
   local.set $0
  end
  local.get $0
  i32.const 0
  i32.store
  local.get $0
  i32.const 0
  i32.store offset=4
  local.get $0
  i64.const 0
  i64.store offset=8
  local.get $0
  i32.const 0
  i32.store offset=16
  local.get $0
  i64.const 0
  i64.store offset=24
  local.get $0
  i64.const 0
  i64.store offset=32
  local.get $0
  i64.const 0
  i64.store offset=40
  local.get $0
  i64.const 0
  i64.store offset=48
  local.get $0
  i64.const 0
  i64.store offset=56
  local.get $0
  i64.const 0
  i64.store offset=64
  local.get $0
  i64.const 0
  i64.store offset=72
  local.get $0
  i64.const 0
  i64.store offset=80
  local.get $0
  i32.const 0
  i32.store8 offset=88
  local.get $0
  i32.const 0
  call $assembly/HistogramIterationValue/HistogramIterationValue#constructor
  i32.store offset=92
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $1
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#doReset
  local.get $1
  call $~lib/rt/pure/__release
  local.get $0
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#init (param $0 i32) (param $1 i64) (param $2 i64) (param $3 i32) (param $4 f64)
  (local $5 i64)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  local.get $0
  local.get $1
  i64.store offset=24
  local.get $0
  local.get $2
  i64.store offset=16
  local.get $0
  local.get $3
  i32.store8 offset=32
  local.get $0
  local.get $4
  f64.store offset=88
  i32.const 2
  i64.extend_i32_s
  f64.const 10
  local.get $3
  f64.convert_i32_u
  call $~lib/math/NativeMath.pow
  i64.trunc_f64_u
  i64.mul
  local.set $5
  local.get $0
  local.get $1
  f64.convert_i64_u
  call $~lib/math/NativeMath.log2
  f64.floor
  i32.trunc_f64_s
  i32.store offset=112
  local.get $0
  i64.const 1
  local.get $0
  i32.load offset=112
  i64.extend_i32_s
  i64.shl
  i64.const 1
  i64.sub
  i64.store offset=136
  local.get $5
  f64.convert_i64_u
  call $~lib/math/NativeMath.log2
  f64.ceil
  i32.trunc_f64_s
  local.set $6
  local.get $0
  local.get $6
  i32.const 1
  i32.sub
  i32.store offset=108
  local.get $0
  i32.const 1
  local.get $6
  i32.shl
  i32.store offset=48
  local.get $0
  local.get $0
  i32.load offset=48
  i32.const 1
  i32.shr_s
  i32.store offset=116
  local.get $0
  local.get $0
  i32.load offset=48
  i64.extend_i32_s
  i64.const 1
  i64.sub
  local.get $0
  i32.load offset=112
  i64.extend_i32_s
  i64.shl
  i64.store offset=128
  local.get $0
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#establishSize
  local.get $0
  local.tee $8
  i32.const 0
  local.get $0
  i32.load offset=52
  call $assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>#constructor
  local.tee $7
  local.tee $9
  local.get $8
  i32.load offset=160
  local.tee $10
  i32.ne
  if
   local.get $9
   call $~lib/rt/pure/__retain
   local.set $9
   local.get $10
   call $~lib/rt/pure/__release
  end
  local.get $9
  i32.store offset=160
  local.get $0
  i32.const 64
  local.get $0
  i32.load offset=112
  i32.sub
  local.get $0
  i32.load offset=108
  i32.sub
  i32.const 1
  i32.sub
  i32.store offset=104
  local.get $0
  local.tee $10
  i32.const 0
  local.get $0
  i32.const 1
  call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#constructor
  local.set $9
  local.get $10
  i32.load offset=96
  call $~lib/rt/pure/__release
  local.get $9
  i32.store offset=96
  local.get $0
  local.tee $8
  i32.const 0
  local.get $0
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#constructor
  local.set $9
  local.get $8
  i32.load offset=100
  call $~lib/rt/pure/__release
  local.get $9
  i32.store offset=100
  local.get $7
  call $~lib/rt/pure/__release
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#constructor (param $0 i32) (param $1 i64) (param $2 i64) (param $3 i32) (result i32)
  (local $4 f64)
  local.get $0
  i32.eqz
  if
   i32.const 176
   i32.const 8
   call $~lib/rt/tlsf/__alloc
   call $~lib/rt/pure/__retain
   local.set $0
  end
  local.get $0
  i32.const 0
  i32.store offset=104
  local.get $0
  i32.const 0
  i32.store offset=108
  local.get $0
  i32.const 0
  i32.store offset=112
  local.get $0
  i32.const 0
  i32.store offset=116
  local.get $0
  i64.const 0
  i64.store offset=120
  local.get $0
  i64.const 0
  i64.store offset=128
  local.get $0
  i64.const 0
  i64.store offset=136
  local.get $0
  i64.const 0
  i64.store offset=144
  local.get $0
  global.get $~lib/number/U64.MAX_VALUE
  i64.store offset=152
  local.get $0
  i32.const 0
  i32.store offset=160
  local.get $0
  i64.const 0
  i64.store offset=168
  local.get $0
  call $assembly/AbstractHistogramBase/AbstractHistogramBase<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#constructor
  local.set $0
  local.get $1
  i64.const 1
  i64.lt_u
  if
   i32.const 8896
   i32.const 8992
   i32.const 61
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $2
  i64.const 2
  local.get $1
  i64.mul
  i64.lt_u
  if
   i32.const 9056
   i32.const 8992
   i32.const 64
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $3
  i32.const 255
  i32.and
  i32.const 0
  i32.lt_u
  if (result i32)
   i32.const 1
  else
   local.get $3
   i32.const 255
   i32.and
   i32.const 5
   i32.gt_u
  end
  if
   i32.const 9264
   i32.const 8992
   i32.const 72
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  global.get $assembly/AbstractHistogramBase/AbstractHistogramBase.identityBuilder
  local.tee $4
  f64.const 1
  f64.add
  global.set $assembly/AbstractHistogramBase/AbstractHistogramBase.identityBuilder
  local.get $4
  f64.store
  local.get $0
  local.get $1
  local.get $2
  local.get $3
  f64.const 1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#init
  local.get $0
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#constructor (param $0 i32) (param $1 f64) (param $2 f64) (param $3 f64) (param $4 i32) (param $5 i32) (result i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  local.get $0
  i32.eqz
  if
   i32.const 4
   i32.const 7
   call $~lib/rt/tlsf/__alloc
   call $~lib/rt/pure/__retain
   local.set $0
  end
  local.get $0
  i32.const 0
  i32.store
  local.get $5
  call $~lib/rt/pure/__retain
  local.set $5
  local.get $5
  if
   local.get $0
   local.tee $6
   local.get $5
   local.tee $7
   local.get $6
   i32.load
   local.tee $8
   i32.ne
   if
    local.get $7
    call $~lib/rt/pure/__retain
    local.set $7
    local.get $8
    call $~lib/rt/pure/__release
   end
   local.get $7
   i32.store
  else
   local.get $0
   local.tee $8
   i32.const 0
   local.get $1
   i64.trunc_f64_u
   local.get $2
   i64.trunc_f64_u
   local.get $3
   i32.trunc_f64_u
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#constructor
   local.set $7
   local.get $8
   i32.load
   call $~lib/rt/pure/__release
   local.get $7
   i32.store
   local.get $0
   i32.load
   local.get $4
   i32.store8 offset=8
  end
  local.get $5
  call $~lib/rt/pure/__release
  local.get $0
 )
 (func $assembly/index/Histogram8#constructor (param $0 i32) (param $1 f64) (param $2 f64) (param $3 f64) (param $4 i32) (param $5 i32) (result i32)
  local.get $0
  i32.eqz
  if
   i32.const 4
   i32.const 5
   call $~lib/rt/tlsf/__alloc
   call $~lib/rt/pure/__retain
   local.set $0
  end
  local.get $0
  local.get $1
  local.get $2
  local.get $3
  local.get $4
  local.get $5
  call $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#constructor
  local.set $0
  local.get $0
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:_histogram (param $0 i32) (result i32)
  local.get $0
  i32.load
  call $~lib/rt/pure/__retain
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#set:_histogram (param $0 i32) (param $1 i32)
  (local $2 i32)
  local.get $0
  local.get $1
  local.get $0
  i32.load
  local.tee $2
  i32.ne
  if
   local.get $1
   call $~lib/rt/pure/__retain
   drop
   local.get $2
   call $~lib/rt/pure/__release
  end
  local.get $1
  i32.store
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:autoResize (param $0 i32) (result i32)
  local.get $0
  i32.load
  i32.load8_u offset=8
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#set:autoResize (param $0 i32) (param $1 i32)
  local.get $0
  i32.load
  local.get $1
  i32.store8 offset=8
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:highestTrackableValue (param $0 i32) (result f64)
  local.get $0
  i32.load
  i64.load offset=16
  f64.convert_i64_u
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#set:highestTrackableValue (param $0 i32) (param $1 f64)
  local.get $0
  i32.load
  local.get $1
  i64.trunc_f64_u
  i64.store offset=16
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:startTimeStampMsec (param $0 i32) (result f64)
  local.get $0
  i32.load
  i64.load offset=64
  f64.convert_i64_u
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#set:startTimeStampMsec (param $0 i32) (param $1 f64)
  local.get $0
  i32.load
  local.get $1
  i64.trunc_f64_u
  i64.store offset=64
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:endTimeStampMsec (param $0 i32) (result f64)
  local.get $0
  i32.load
  i64.load offset=72
  f64.convert_i64_u
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#set:endTimeStampMsec (param $0 i32) (param $1 f64)
  local.get $0
  i32.load
  local.get $1
  i64.trunc_f64_u
  i64.store offset=72
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:minNonZeroValue (param $0 i32) (result f64)
  local.get $0
  i32.load
  i64.load offset=152
  f64.convert_i64_u
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:maxValue (param $0 i32) (result f64)
  local.get $0
  i32.load
  i64.load offset=144
  f64.convert_i64_u
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:totalCount (param $0 i32) (result f64)
  local.get $0
  i32.load
  i64.load offset=168
  f64.convert_i64_u
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#reset (param $0 i32)
  local.get $0
  local.get $0
  i32.load offset=4
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#doReset
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#hasNext (param $0 i32) (result i32)
  local.get $0
  i32.load offset=4
  i64.load offset=168
  local.get $0
  i64.load offset=8
  i64.ne
  if
   i32.const 0
   i32.const 11648
   i32.const 87
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i64.load offset=56
  local.get $0
  i64.load offset=72
  i64.lt_u
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#exhaustedSubBuckets (param $0 i32) (result i32)
  local.get $0
  i32.load offset=16
  local.get $0
  i32.load offset=4
  i32.load offset=52
  i32.ge_s
 )
 (func $~lib/typedarray/Uint8Array#__uget (param $0 i32) (param $1 i32) (result i32)
  local.get $0
  i32.load offset=4
  local.get $1
  i32.add
  i32.load8_u
 )
 (func $assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>#__get (param $0 i32) (param $1 i32) (result i32)
  local.get $0
  i32.load
  local.get $1
  call $~lib/typedarray/Uint8Array#__uget
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtIndex (param $0 i32) (param $1 i32) (result i64)
  local.get $0
  i32.load offset=160
  local.get $1
  call $assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>#__get
  i64.extend_i32_u
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getBucketIndex (param $0 i32) (param $1 i64) (result i32)
  local.get $0
  i32.load offset=104
  local.get $1
  local.get $0
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getSubBucketIndex (param $0 i32) (param $1 i64) (param $2 i32) (result i32)
  local.get $1
  local.get $2
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shr_u
  i32.wrap_i64
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#valueFromIndexes (param $0 i32) (param $1 i32) (param $2 i32) (result i64)
  local.get $2
  i64.extend_i32_s
  local.get $1
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#lowestEquivalentValue (param $0 i32) (param $1 i64) (result i64)
  (local $2 i32)
  (local $3 i32)
  (local $4 i64)
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getBucketIndex
  local.set $2
  local.get $0
  local.get $1
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getSubBucketIndex
  local.set $3
  local.get $0
  local.get $2
  local.get $3
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#valueFromIndexes
  local.set $4
  local.get $4
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#sizeOfEquivalentValueRange (param $0 i32) (param $1 i64) (result i64)
  (local $2 i32)
  (local $3 i64)
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getBucketIndex
  local.set $2
  i64.const 1
  local.get $0
  i32.load offset=112
  local.get $2
  i32.add
  i64.extend_i32_s
  i64.shl
  local.set $3
  local.get $3
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#nextNonEquivalentValue (param $0 i32) (param $1 i64) (result i64)
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#lowestEquivalentValue
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#sizeOfEquivalentValueRange
  i64.add
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#highestEquivalentValue (param $0 i32) (param $1 i64) (result i64)
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#nextNonEquivalentValue
  i64.const 1
  i64.sub
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#reachedIterationLevel (param $0 i32) (result i32)
  (local $1 i64)
  local.get $0
  i32.load offset=4
  local.get $0
  i32.load offset=16
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtIndex
  local.set $1
  local.get $1
  i64.const 0
  i64.ne
  if (result i32)
   local.get $0
   i32.load
   local.get $0
   i32.load offset=16
   i32.ne
  else
   i32.const 0
  end
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getValueIteratedTo (param $0 i32) (result i64)
  local.get $0
  i32.load offset=4
  local.get $0
  i64.load offset=24
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#highestEquivalentValue
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getPercentileIteratedTo (param $0 i32) (result f64)
  f64.const 100
  local.get $0
  i64.load offset=56
  f64.convert_i64_u
  f64.mul
  local.get $0
  i64.load offset=72
  f64.convert_i64_u
  f64.div
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#incrementIterationLevel (param $0 i32)
  local.get $0
  local.get $0
  i32.load offset=16
  i32.store
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#valueFromIndex (param $0 i32) (param $1 i32) (result i64)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  local.get $0
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.set $2
  local.get $1
  local.get $0
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  local.get $0
  i32.load offset=116
  i32.add
  local.set $3
  local.get $2
  i32.const 0
  i32.lt_s
  if
   local.get $3
   local.get $0
   i32.load offset=116
   i32.sub
   local.set $3
   i32.const 0
   local.set $2
  end
  local.get $0
  local.get $2
  local.get $3
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#valueFromIndexes
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#incrementSubBucket (param $0 i32)
  local.get $0
  i32.const 1
  i32.store8 offset=88
  local.get $0
  local.get $0
  i32.load offset=16
  i32.const 1
  i32.add
  i32.store offset=16
  local.get $0
  local.get $0
  i32.load offset=4
  local.get $0
  i32.load offset=16
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#valueFromIndex
  i64.store offset=24
  local.get $0
  local.get $0
  i32.load offset=4
  local.get $0
  i32.load offset=16
  i32.const 1
  i32.add
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#valueFromIndex
  i64.store offset=32
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#next (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i64)
  loop $while-continue|0
   local.get $0
   call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#exhaustedSubBuckets
   i32.eqz
   local.set $1
   local.get $1
   if
    local.get $0
    local.get $0
    i32.load offset=4
    local.get $0
    i32.load offset=16
    call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtIndex
    i64.store offset=80
    local.get $0
    i32.load8_u offset=88
    if
     local.get $0
     local.get $0
     i64.load offset=56
     local.get $0
     i64.load offset=80
     i64.add
     i64.store offset=56
     local.get $0
     local.get $0
     i64.load offset=64
     local.get $0
     i64.load offset=80
     local.get $0
     i32.load offset=4
     local.get $0
     i64.load offset=24
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#highestEquivalentValue
     i64.mul
     i64.add
     i64.store offset=64
     local.get $0
     i32.const 0
     i32.store8 offset=88
    end
    local.get $0
    call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#reachedIterationLevel
    if
     local.get $0
     call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getValueIteratedTo
     local.set $2
     local.get $0
     i32.load offset=92
     local.get $2
     i64.store
     local.get $0
     i32.load offset=92
     local.get $0
     i64.load offset=40
     i64.store offset=8
     local.get $0
     i32.load offset=92
     local.get $0
     i64.load offset=80
     i64.store offset=16
     local.get $0
     i32.load offset=92
     local.get $0
     i64.load offset=56
     local.get $0
     i64.load offset=48
     i64.sub
     i64.store offset=24
     local.get $0
     i32.load offset=92
     local.get $0
     i64.load offset=56
     i64.store offset=32
     local.get $0
     i32.load offset=92
     local.get $0
     i64.load offset=64
     i64.store offset=40
     local.get $0
     i32.load offset=92
     f64.const 100
     local.get $0
     i64.load offset=56
     f64.convert_i64_u
     f64.mul
     local.get $0
     i64.load offset=72
     f64.convert_i64_u
     f64.div
     f64.store offset=48
     local.get $0
     i32.load offset=92
     local.get $0
     call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getPercentileIteratedTo
     f64.store offset=56
     local.get $0
     local.get $2
     i64.store offset=40
     local.get $0
     local.get $0
     i64.load offset=56
     i64.store offset=48
     local.get $0
     call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#incrementIterationLevel
     local.get $0
     i32.load offset=4
     i64.load offset=168
     local.get $0
     i64.load offset=8
     i64.ne
     if
      i32.const 11744
      i32.const 11648
      i32.const 128
      i32.const 11
      call $~lib/builtins/abort
      unreachable
     end
     local.get $0
     i32.load offset=92
     call $~lib/rt/pure/__retain
     return
    end
    local.get $0
    call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#incrementSubBucket
    br $while-continue|0
   end
  end
  i32.const 11840
  i32.const 11648
  i32.const 134
  i32.const 5
  call $~lib/builtins/abort
  unreachable
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#medianEquivalentValue (param $0 i32) (param $1 i64) (result i64)
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#lowestEquivalentValue
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#sizeOfEquivalentValueRange
  i64.const 1
  i64.shr_u
  i64.add
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getMean (param $0 i32) (result f64)
  (local $1 i64)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  i64.load offset=168
  i64.const 0
  i64.eq
  if
   f64.const 0
   return
  end
  local.get $0
  i32.load offset=100
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#reset
  i64.const 0
  local.set $1
  loop $while-continue|0
   local.get $0
   i32.load offset=100
   call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#hasNext
   local.set $2
   local.get $2
   if
    local.get $0
    i32.load offset=100
    call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#next
    local.set $3
    local.get $1
    local.get $0
    local.get $3
    i64.load
    call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#medianEquivalentValue
    local.get $3
    i64.load offset=16
    i64.mul
    i64.add
    local.set $1
    local.get $3
    call $~lib/rt/pure/__release
    br $while-continue|0
   end
  end
  local.get $1
  f64.convert_i64_u
  f64.const 1
  f64.mul
  local.get $0
  i64.load offset=168
  f64.convert_i64_u
  f64.div
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#computeStdDeviation (param $0 i32) (param $1 f64) (result f64)
  (local $2 f64)
  (local $3 i32)
  (local $4 i32)
  (local $5 f64)
  (local $6 f64)
  local.get $0
  i64.load offset=168
  i64.const 0
  i64.eq
  if
   f64.const 0
   return
  end
  f64.const 0
  local.set $2
  local.get $0
  i32.load offset=100
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#reset
  loop $while-continue|0
   local.get $0
   i32.load offset=100
   call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#hasNext
   local.set $3
   local.get $3
   if
    local.get $0
    i32.load offset=100
    call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#next
    local.set $4
    local.get $0
    local.get $4
    i64.load
    call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#medianEquivalentValue
    f64.convert_i64_u
    local.get $1
    f64.sub
    local.set $5
    local.get $2
    local.get $5
    local.get $5
    f64.mul
    local.get $4
    i64.load offset=24
    f64.convert_i64_u
    f64.mul
    f64.add
    local.set $2
    local.get $4
    call $~lib/rt/pure/__release
    br $while-continue|0
   end
  end
  local.get $2
  local.get $0
  i64.load offset=168
  f64.convert_i64_u
  f64.div
  local.set $6
  local.get $6
  f64.sqrt
  local.set $6
  local.get $6
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getStdDeviation (param $0 i32) (result f64)
  (local $1 f64)
  local.get $0
  i64.load offset=168
  i64.const 0
  i64.eq
  if
   f64.const 0
   return
  end
  local.get $0
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getMean
  local.set $1
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#computeStdDeviation
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:stdDeviation (param $0 i32) (result f64)
  local.get $0
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getStdDeviation
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:mean (param $0 i32) (result f64)
  local.get $0
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getMean
 )
 (func $assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>#get:estimatedFootprintInBytes (param $0 i32) (result i32)
  i32.const 4
  local.get $0
  i32.load
  i32.load offset=8
  i32.add
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:estimatedFootprintInBytes (param $0 i32) (result i32)
  i32.const 176
  local.get $0
  i32.load offset=160
  call $assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>#get:estimatedFootprintInBytes
  i32.add
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:estimatedFootprintInBytes (param $0 i32) (result f64)
  i32.const 4
  local.get $0
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#get:estimatedFootprintInBytes
  i32.add
  f64.convert_i32_u
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#computeCountsArrayIndex (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  (local $3 i32)
  (local $4 i32)
  local.get $2
  local.get $0
  i32.load offset=48
  i32.lt_s
  i32.eqz
  if
   i32.const 0
   i32.const 8992
   i32.const 247
   i32.const 5
   call $~lib/builtins/abort
   unreachable
  end
  local.get $1
  i32.const 0
  i32.eq
  if (result i32)
   i32.const 1
  else
   local.get $2
   local.get $0
   i32.load offset=116
   i32.ge_s
  end
  i32.eqz
  if
   i32.const 0
   i32.const 8992
   i32.const 248
   i32.const 5
   call $~lib/builtins/abort
   unreachable
  end
  local.get $1
  i32.const 1
  i32.add
  i32.const 1
  local.get $0
  i32.load offset=108
  i32.shl
  i32.mul
  local.set $3
  local.get $2
  local.get $0
  i32.load offset=116
  i32.sub
  local.set $4
  local.get $3
  local.get $4
  i32.add
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex (param $0 i32) (param $1 i64) (result i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i64.const 0
  i64.lt_u
  if
   i32.const 11920
   i32.const 8992
   i32.const 239
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getBucketIndex
  local.set $2
  local.get $0
  local.get $1
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getSubBucketIndex
  local.set $3
  local.get $0
  local.get $2
  local.get $3
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#computeCountsArrayIndex
 )
 (func $~lib/typedarray/Uint8Array#get:length (param $0 i32) (result i32)
  local.get $0
  i32.load offset=8
 )
 (func $~lib/typedarray/Uint8Array#set<~lib/typedarray/Uint8Array> (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  call $~lib/rt/pure/__retain
  local.set $5
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $4
  local.get $2
  local.set $3
  i32.const 0
  drop
  local.get $3
  i32.const 0
  i32.lt_s
  if
   i32.const 12160
   i32.const 12224
   i32.const 1774
   i32.const 19
   call $~lib/builtins/abort
   unreachable
  end
  local.get $4
  call $~lib/typedarray/Uint8Array#get:length
  local.get $3
  i32.add
  local.get $5
  call $~lib/typedarray/Uint8Array#get:length
  i32.gt_s
  if
   i32.const 12160
   i32.const 12224
   i32.const 1775
   i32.const 47
   call $~lib/builtins/abort
   unreachable
  end
  i32.const 1
  i32.const 1
  i32.eq
  if (result i32)
   i32.const 0
   i32.const 0
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   i32.const 0
   if (result i32)
    i32.const 0
   else
    i32.const 0
   end
   i32.eqz
  else
   i32.const 0
  end
  drop
  local.get $5
  i32.load offset=4
  local.get $3
  i32.const 0
  i32.shl
  i32.add
  local.get $4
  i32.load offset=4
  local.get $4
  i32.load offset=8
  call $~lib/memory/memory.copy
  local.get $4
  call $~lib/rt/pure/__release
  local.get $5
  call $~lib/rt/pure/__release
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>#resize (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  i32.const 0
  local.get $1
  call $assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>#constructor
  local.set $2
  local.get $2
  i32.load
  local.get $0
  i32.load
  i32.const 0
  call $~lib/typedarray/Uint8Array#set<~lib/typedarray/Uint8Array>
  local.get $2
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#resize (param $0 i32) (param $1 i64)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#establishSize
  local.get $0
  local.tee $2
  local.get $0
  i32.load offset=160
  local.get $0
  i32.load offset=52
  call $assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>#resize
  local.set $3
  local.get $2
  i32.load offset=160
  call $~lib/rt/pure/__release
  local.get $3
  i32.store offset=160
 )
 (func $~lib/typedarray/Uint8Array#__uset (param $0 i32) (param $1 i32) (param $2 i32)
  local.get $0
  i32.load offset=4
  local.get $1
  i32.add
  local.get $2
  i32.store8
 )
 (func $assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>#__set (param $0 i32) (param $1 i32) (param $2 i32)
  local.get $0
  i32.load
  local.get $1
  local.get $2
  i32.const 255
  i32.and
  call $~lib/typedarray/Uint8Array#__uset
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#addToCountAtIndex (param $0 i32) (param $1 i32) (param $2 i64)
  (local $3 i32)
  (local $4 i64)
  local.get $0
  i32.load offset=160
  local.get $1
  call $assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>#__get
  local.set $3
  local.get $3
  i64.extend_i32_u
  local.get $2
  i64.add
  local.set $4
  local.get $4
  i64.const 0
  i64.lt_u
  if
   i32.const 0
   i32.const 8992
   i32.const 611
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i32.load offset=160
  local.get $1
  local.get $4
  i32.wrap_i64
  call $assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>#__set
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#handleRecordException (param $0 i32) (param $1 i64) (param $2 i64)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  local.get $0
  i32.load8_u offset=8
  i32.eqz
  if
   i32.const 12032
   local.get $2
   i32.const 10
   call $~lib/number/U64#toString
   local.tee $3
   call $~lib/string/String.__concat
   local.tee $4
   i32.const 12064
   call $~lib/string/String.__concat
   local.tee $5
   i32.const 8992
   i32.const 225
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#resize
  local.get $0
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex
  local.set $5
  local.get $0
  local.get $5
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#addToCountAtIndex
  local.get $0
  local.get $0
  local.get $0
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#valueFromIndex
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#highestEquivalentValue
  i64.store offset=16
 )
 (func $~lib/util/number/utoa32 (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  local.get $1
  i32.const 2
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $1
   i32.const 36
   i32.gt_s
  end
  if
   i32.const 400
   i32.const 528
   i32.const 344
   i32.const 5
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i32.eqz
  if
   i32.const 592
   return
  end
  i32.const 0
  local.set $2
  local.get $1
  i32.const 10
  i32.eq
  if
   local.get $0
   call $~lib/util/number/decimalCount32
   local.set $3
   local.get $3
   i32.const 1
   i32.shl
   i32.const 1
   call $~lib/rt/tlsf/__alloc
   local.set $2
   local.get $2
   local.set $6
   local.get $0
   local.set $5
   local.get $3
   local.set $4
   i32.const 0
   i32.const 1
   i32.ge_s
   drop
   local.get $6
   local.get $5
   local.get $4
   call $~lib/util/number/utoa32_dec_lut
  else
   local.get $1
   i32.const 16
   i32.eq
   if
    i32.const 31
    local.get $0
    i32.clz
    i32.sub
    i32.const 2
    i32.shr_s
    i32.const 1
    i32.add
    local.set $3
    local.get $3
    i32.const 1
    i32.shl
    i32.const 1
    call $~lib/rt/tlsf/__alloc
    local.set $2
    local.get $2
    local.set $6
    local.get $0
    local.set $5
    local.get $3
    local.set $4
    i32.const 0
    i32.const 1
    i32.ge_s
    drop
    local.get $6
    local.get $5
    i64.extend_i32_u
    local.get $4
    call $~lib/util/number/utoa_hex_lut
   else
    local.get $0
    i64.extend_i32_u
    local.get $1
    call $~lib/util/number/ulog_base
    local.set $3
    local.get $3
    i32.const 1
    i32.shl
    i32.const 1
    call $~lib/rt/tlsf/__alloc
    local.set $2
    local.get $2
    local.get $0
    i64.extend_i32_u
    local.get $3
    local.get $1
    call $~lib/util/number/utoa64_any_core
   end
  end
  local.get $2
  call $~lib/rt/pure/__retain
 )
 (func $~lib/number/U8#toString (param $0 i32) (param $1 i32) (result i32)
  local.get $0
  i32.const 255
  i32.and
  local.get $1
  call $~lib/util/number/utoa32
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#incrementCountAtIndex (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  local.get $0
  i32.load offset=160
  local.get $1
  call $assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>#__get
  local.set $2
  local.get $2
  i32.const 1
  i32.add
  local.set $3
  local.get $3
  i32.const 255
  i32.and
  i32.const 0
  i32.lt_u
  if
   local.get $3
   i32.const 10
   call $~lib/number/U8#toString
   local.tee $4
   i32.const 12288
   call $~lib/string/String.__concat
   local.tee $5
   i32.const 8992
   i32.const 593
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i32.load offset=160
  local.get $1
  local.get $3
  call $assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>#__set
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#updatedMaxValue (param $0 i32) (param $1 i64)
  (local $2 i64)
  local.get $1
  local.get $0
  i64.load offset=136
  i64.add
  local.set $2
  local.get $0
  local.get $2
  i64.store offset=144
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#updateMinNonZeroValue (param $0 i32) (param $1 i64)
  (local $2 i64)
  local.get $1
  local.get $0
  i64.load offset=136
  i64.le_u
  if
   return
  end
  local.get $1
  local.get $0
  i64.load offset=136
  i64.const -1
  i64.xor
  i64.and
  local.set $2
  local.get $0
  local.get $2
  i64.store offset=152
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#updateMinAndMax (param $0 i32) (param $1 i64)
  local.get $1
  local.get $0
  i64.load offset=144
  i64.gt_u
  if
   local.get $0
   local.get $1
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#updatedMaxValue
  end
  local.get $1
  local.get $0
  i64.load offset=152
  i64.lt_u
  if (result i32)
   local.get $1
   i64.const 0
   i64.ne
  else
   i32.const 0
  end
  if
   local.get $0
   local.get $1
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#updateMinNonZeroValue
  end
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#incrementTotalCount (param $0 i32)
  local.get $0
  local.get $0
  i64.load offset=168
  i64.const 1
  i64.add
  i64.store offset=168
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordSingleValue (param $0 i32) (param $1 i64)
  (local $2 i32)
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex
  local.set $2
  local.get $2
  local.get $0
  i32.load offset=52
  i32.ge_s
  if
   local.get $0
   i32.const 1
   i64.extend_i32_u
   local.get $1
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#handleRecordException
  else
   local.get $0
   local.get $2
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#incrementCountAtIndex
  end
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#updateMinAndMax
  local.get $0
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#incrementTotalCount
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordValue (param $0 i32) (param $1 f64)
  local.get $0
  i32.load
  local.get $1
  i64.trunc_f64_u
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordSingleValue
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordCountAtValue (param $0 i32) (param $1 i64) (param $2 i64)
  (local $3 i32)
  local.get $0
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex
  local.set $3
  local.get $3
  local.get $0
  i32.load offset=52
  i32.ge_s
  if
   local.get $0
   local.get $1
   local.get $2
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#handleRecordException
  else
   local.get $0
   local.get $3
   local.get $1
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#addToCountAtIndex
  end
  local.get $0
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#updateMinAndMax
  local.get $0
  local.get $0
  i64.load offset=168
  local.get $1
  i64.add
  i64.store offset=168
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordValueWithCount (param $0 i32) (param $1 f64) (param $2 f64)
  local.get $0
  i32.load
  local.get $2
  i64.trunc_f64_u
  local.get $1
  i64.trunc_f64_u
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordCountAtValue
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordSingleValueWithExpectedInterval (param $0 i32) (param $1 i64) (param $2 i64)
  (local $3 i64)
  (local $4 i32)
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordSingleValue
  local.get $1
  local.get $2
  i64.lt_u
  if (result i32)
   i32.const 1
  else
   local.get $2
   i64.const 0
   i64.eq
  end
  if
   return
  end
  local.get $1
  local.get $2
  i64.sub
  local.set $3
  loop $for-loop|0
   local.get $3
   local.get $2
   i64.ge_u
   local.set $4
   local.get $4
   if
    local.get $0
    local.get $3
    call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordSingleValue
    local.get $3
    local.get $2
    i64.sub
    local.set $3
    br $for-loop|0
   end
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordValueWithExpectedInterval (param $0 i32) (param $1 f64) (param $2 f64)
  local.get $0
  i32.load
  local.get $1
  i64.trunc_f64_u
  local.get $2
  i64.trunc_f64_u
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordSingleValueWithExpectedInterval
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getValueAtPercentile (param $0 i32) (param $1 f64) (result i64)
  (local $2 f64)
  (local $3 f64)
  (local $4 i64)
  (local $5 i64)
  (local $6 i32)
  (local $7 i32)
  (local $8 i64)
  local.get $1
  f64.const 100
  f64.min
  local.set $2
  local.get $2
  f64.const 100
  f64.div
  local.get $0
  i64.load offset=168
  f64.convert_i64_u
  f64.mul
  local.set $3
  local.get $3
  local.get $3
  i32.const 1
  global.set $~argumentsLength
  global.get $assembly/ulp/ulp
  call_indirect (type $f64_=>_f64)
  f64.sub
  f64.ceil
  f64.const 1
  f64.max
  i64.trunc_f64_u
  local.set $4
  i64.const 0
  local.set $5
  i32.const 0
  local.set $6
  loop $for-loop|0
   local.get $6
   local.get $0
   i32.load offset=52
   i32.lt_s
   local.set $7
   local.get $7
   if
    local.get $5
    local.get $0
    local.get $6
    call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtIndex
    i64.add
    local.set $5
    local.get $5
    local.get $4
    i64.ge_u
    if
     local.get $0
     local.get $6
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#valueFromIndex
     local.set $8
     local.get $1
     f64.const 0
     f64.eq
     if (result i64)
      local.get $0
      local.get $8
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#lowestEquivalentValue
     else
      local.get $0
      local.get $8
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#highestEquivalentValue
     end
     return
    end
    local.get $6
    i32.const 1
    i32.add
    local.set $6
    br $for-loop|0
   end
  end
  i64.const 0
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getValueAtPercentile (param $0 i32) (param $1 f64) (result f64)
  local.get $0
  i32.load
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getValueAtPercentile
  f64.convert_i64_u
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#reset (param $0 i32) (param $1 i32)
  local.get $0
  local.get $0
  i32.load offset=28
  local.get $1
  call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#doReset
 )
 (func $assembly/formatters/FloatFormatter#constructor (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  i32.eqz
  if
   i32.const 8
   i32.const 14
   call $~lib/rt/tlsf/__alloc
   call $~lib/rt/pure/__retain
   local.set $0
  end
  local.get $0
  local.get $1
  i32.store
  local.get $0
  local.get $2
  i32.store offset=4
  local.get $0
 )
 (func $assembly/formatters/IntegerFormatter#constructor (param $0 i32) (param $1 i32) (result i32)
  local.get $0
  i32.eqz
  if
   i32.const 4
   i32.const 15
   call $~lib/rt/tlsf/__alloc
   call $~lib/rt/pure/__retain
   local.set $0
  end
  local.get $0
  local.get $1
  i32.store
  local.get $0
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#hasNext (param $0 i32) (result i32)
  local.get $0
  i32.load offset=28
  i64.load offset=168
  local.get $0
  i64.load offset=32
  i64.ne
  if
   i32.const 0
   i32.const 12528
   i32.const 138
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i64.load offset=80
  local.get $0
  i64.load offset=96
  i64.lt_u
  if
   i32.const 1
   return
  end
  local.get $0
  i32.load8_u offset=24
  i32.eqz
  if (result i32)
   local.get $0
   i64.load offset=96
   i64.const 0
   i64.gt_u
  else
   i32.const 0
  end
  if
   local.get $0
   f64.const 100
   f64.store offset=8
   local.get $0
   i32.const 1
   i32.store8 offset=24
   i32.const 1
   return
  end
  i32.const 0
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#exhaustedSubBuckets (param $0 i32) (result i32)
  local.get $0
  i32.load offset=40
  local.get $0
  i32.load offset=28
  i32.load offset=52
  i32.ge_s
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#reachedIterationLevel (param $0 i32) (result i32)
  (local $1 f64)
  local.get $0
  i64.load offset=104
  i64.const 0
  i64.eq
  if
   i32.const 0
   return
  end
  f64.const 100
  local.get $0
  i64.load offset=80
  f64.convert_i64_u
  f64.mul
  local.get $0
  i64.load offset=96
  f64.convert_i64_u
  f64.div
  local.set $1
  local.get $1
  local.get $0
  f64.load offset=8
  f64.ge
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getValueIteratedTo (param $0 i32) (result i64)
  local.get $0
  i32.load offset=28
  local.get $0
  i64.load offset=48
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#highestEquivalentValue
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getPercentileIteratedTo (param $0 i32) (result f64)
  local.get $0
  f64.load offset=8
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#incrementIterationLevel (param $0 i32)
  (local $1 f64)
  local.get $0
  local.get $0
  f64.load offset=8
  f64.store offset=16
  local.get $0
  i32.load
  f64.convert_i32_s
  f64.const 2
  f64.const 100
  f64.const 100
  local.get $0
  f64.load offset=8
  f64.sub
  f64.div
  call $~lib/math/NativeMath.log2
  f64.floor
  f64.const 1
  f64.add
  call $~lib/math/NativeMath.pow
  f64.mul
  local.set $1
  local.get $0
  local.get $0
  f64.load offset=8
  f64.const 100
  local.get $1
  f64.div
  f64.add
  f64.store offset=8
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#incrementSubBucket (param $0 i32)
  local.get $0
  i32.const 1
  i32.store8 offset=112
  local.get $0
  local.get $0
  i32.load offset=40
  i32.const 1
  i32.add
  i32.store offset=40
  local.get $0
  local.get $0
  i32.load offset=28
  local.get $0
  i32.load offset=40
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#valueFromIndex
  i64.store offset=48
  local.get $0
  local.get $0
  i32.load offset=28
  local.get $0
  i32.load offset=40
  i32.const 1
  i32.add
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#valueFromIndex
  i64.store offset=56
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#next (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i64)
  loop $while-continue|0
   local.get $0
   call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#exhaustedSubBuckets
   i32.eqz
   local.set $1
   local.get $1
   if
    local.get $0
    local.get $0
    i32.load offset=28
    local.get $0
    i32.load offset=40
    call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtIndex
    i64.store offset=104
    local.get $0
    i32.load8_u offset=112
    if
     local.get $0
     local.get $0
     i64.load offset=80
     local.get $0
     i64.load offset=104
     i64.add
     i64.store offset=80
     local.get $0
     local.get $0
     i64.load offset=88
     local.get $0
     i64.load offset=104
     local.get $0
     i32.load offset=28
     local.get $0
     i64.load offset=48
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#highestEquivalentValue
     i64.mul
     i64.add
     i64.store offset=88
     local.get $0
     i32.const 0
     i32.store8 offset=112
    end
    local.get $0
    call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#reachedIterationLevel
    if
     local.get $0
     call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getValueIteratedTo
     local.set $2
     local.get $0
     i32.load offset=116
     local.get $2
     i64.store
     local.get $0
     i32.load offset=116
     local.get $0
     i64.load offset=64
     i64.store offset=8
     local.get $0
     i32.load offset=116
     local.get $0
     i64.load offset=104
     i64.store offset=16
     local.get $0
     i32.load offset=116
     local.get $0
     i64.load offset=80
     local.get $0
     i64.load offset=72
     i64.sub
     i64.store offset=24
     local.get $0
     i32.load offset=116
     local.get $0
     i64.load offset=80
     i64.store offset=32
     local.get $0
     i32.load offset=116
     local.get $0
     i64.load offset=88
     i64.store offset=40
     local.get $0
     i32.load offset=116
     f64.const 100
     local.get $0
     i64.load offset=80
     f64.convert_i64_u
     f64.mul
     local.get $0
     i64.load offset=96
     f64.convert_i64_u
     f64.div
     f64.store offset=48
     local.get $0
     i32.load offset=116
     local.get $0
     call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getPercentileIteratedTo
     f64.store offset=56
     local.get $0
     local.get $2
     i64.store offset=64
     local.get $0
     local.get $0
     i64.load offset=80
     i64.store offset=72
     local.get $0
     call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#incrementIterationLevel
     local.get $0
     i32.load offset=28
     i64.load offset=168
     local.get $0
     i64.load offset=32
     i64.ne
     if
      i32.const 11744
      i32.const 12528
      i32.const 187
      i32.const 11
      call $~lib/builtins/abort
      unreachable
     end
     local.get $0
     i32.load offset=116
     call $~lib/rt/pure/__retain
     return
    end
    local.get $0
    call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#incrementSubBucket
    br $while-continue|0
   end
  end
  i32.const 11840
  i32.const 12528
  i32.const 193
  i32.const 5
  call $~lib/builtins/abort
  unreachable
 )
 (func $assembly/formatters/FloatFormatter#format (param $0 i32) (param $1 f64) (result i32)
  (local $2 f64)
  (local $3 i64)
  (local $4 f64)
  (local $5 i64)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  local.get $1
  local.set $2
  local.get $2
  f64.floor
  i64.trunc_f64_u
  local.set $3
  f64.const 10
  local.get $0
  i32.load offset=4
  f64.convert_i32_s
  call $~lib/math/NativeMath.pow
  local.set $2
  local.get $1
  local.get $2
  f64.mul
  local.get $3
  f64.convert_i64_u
  local.get $2
  f64.mul
  f64.sub
  local.set $4
  local.get $4
  f64.const 0.5
  f64.add
  f64.floor
  local.get $4
  f64.copysign
  i64.trunc_f64_u
  local.set $5
  local.get $5
  i32.const 10
  call $~lib/number/U64#toString
  local.set $6
  local.get $6
  call $~lib/string/String#get:length
  local.get $0
  i32.load offset=4
  i32.lt_s
  if
   local.get $6
   i32.const 592
   local.get $0
   i32.load offset=4
   local.get $6
   call $~lib/string/String#get:length
   i32.sub
   call $~lib/string/String#repeat
   local.tee $7
   call $~lib/string/String.__concat
   local.tee $8
   local.tee $9
   local.get $6
   local.tee $10
   i32.ne
   if
    local.get $9
    call $~lib/rt/pure/__retain
    local.set $9
    local.get $10
    call $~lib/rt/pure/__release
   end
   local.get $9
   local.set $6
   local.get $7
   call $~lib/rt/pure/__release
   local.get $8
   call $~lib/rt/pure/__release
  end
  local.get $3
  i32.const 10
  call $~lib/number/U64#toString
  local.tee $8
  i32.const 12608
  call $~lib/string/String.__concat
  local.tee $7
  local.get $6
  call $~lib/string/String.__concat
  local.tee $9
  call $~lib/rt/pure/__retain
  local.set $10
  local.get $10
  call $~lib/string/String#get:length
  local.get $0
  i32.load
  i32.lt_s
  if
   i32.const 224
   local.get $0
   i32.load
   local.get $10
   call $~lib/string/String#get:length
   i32.sub
   call $~lib/string/String#repeat
   local.tee $11
   local.get $10
   call $~lib/string/String.__concat
   local.tee $12
   local.tee $13
   local.get $10
   local.tee $14
   i32.ne
   if
    local.get $13
    call $~lib/rt/pure/__retain
    local.set $13
    local.get $14
    call $~lib/rt/pure/__release
   end
   local.get $13
   local.set $10
   local.get $11
   call $~lib/rt/pure/__release
   local.get $12
   call $~lib/rt/pure/__release
  end
  local.get $10
  local.set $12
  local.get $6
  call $~lib/rt/pure/__release
  local.get $8
  call $~lib/rt/pure/__release
  local.get $7
  call $~lib/rt/pure/__release
  local.get $9
  call $~lib/rt/pure/__release
  local.get $12
 )
 (func $assembly/formatters/IntegerFormatter#format (param $0 i32) (param $1 i64) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  i32.load
  local.get $1
  i32.const 10
  call $~lib/number/U64#toString
  local.tee $2
  i32.const 2
  global.set $~argumentsLength
  global.get $assembly/formatters/leftPadding
  call_indirect (type $i32_i32_=>_i32)
  local.tee $3
  local.set $4
  local.get $2
  call $~lib/rt/pure/__release
  local.get $4
 )
 (func $~lib/string/String#toString (param $0 i32) (result i32)
  local.get $0
  call $~lib/rt/pure/__retain
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#outputPercentileDistribution (param $0 i32) (param $1 i32) (param $2 f64) (result i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  (local $15 i32)
  (local $16 i32)
  (local $17 i32)
  (local $18 i32)
  (local $19 i32)
  (local $20 i32)
  (local $21 i32)
  (local $22 i32)
  (local $23 i32)
  (local $24 i32)
  (local $25 i32)
  (local $26 f64)
  (local $27 i32)
  (local $28 i32)
  (local $29 i32)
  (local $30 i32)
  (local $31 i32)
  (local $32 i32)
  (local $33 i32)
  (local $34 i32)
  (local $35 i32)
  (local $36 i32)
  (local $37 i32)
  (local $38 i32)
  (local $39 i32)
  (local $40 i32)
  i32.const 352
  local.set $3
  local.get $3
  i32.const 12384
  call $~lib/string/String.__concat
  local.tee $4
  local.tee $5
  local.get $3
  local.tee $6
  i32.ne
  if
   local.get $5
   call $~lib/rt/pure/__retain
   local.set $5
   local.get $6
   call $~lib/rt/pure/__release
  end
  local.get $5
  local.set $3
  local.get $0
  i32.load offset=96
  call $~lib/rt/pure/__retain
  local.set $5
  local.get $5
  local.get $1
  call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#reset
  i32.const 0
  i32.const 12
  local.get $0
  i32.load8_u offset=32
  call $assembly/formatters/FloatFormatter#constructor
  local.set $6
  i32.const 0
  i32.const 2
  i32.const 12
  call $assembly/formatters/FloatFormatter#constructor
  local.set $7
  i32.const 0
  i32.const 10
  call $assembly/formatters/IntegerFormatter#constructor
  local.set $8
  i32.const 0
  i32.const 14
  i32.const 2
  call $assembly/formatters/FloatFormatter#constructor
  local.set $9
  loop $while-continue|0
   local.get $5
   call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#hasNext
   local.set $10
   local.get $10
   if
    local.get $5
    call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#next
    local.set $11
    local.get $11
    f64.load offset=56
    f64.const 100
    f64.lt
    if
     local.get $3
     local.get $6
     local.get $11
     i64.load
     f64.convert_i64_u
     local.get $2
     f64.div
     call $assembly/formatters/FloatFormatter#format
     local.tee $12
     i32.const 224
     call $~lib/string/String.__concat
     local.tee $13
     local.get $7
     local.get $11
     f64.load offset=56
     f64.const 100
     f64.div
     call $assembly/formatters/FloatFormatter#format
     local.tee $14
     call $~lib/string/String.__concat
     local.tee $15
     i32.const 224
     call $~lib/string/String.__concat
     local.tee $16
     local.get $8
     local.get $11
     i64.load offset=32
     call $assembly/formatters/IntegerFormatter#format
     local.tee $17
     call $~lib/string/String.__concat
     local.tee $18
     i32.const 224
     call $~lib/string/String.__concat
     local.tee $19
     local.get $9
     f64.const 1
     f64.const 1
     local.get $11
     f64.load offset=56
     f64.const 100
     f64.div
     f64.sub
     f64.div
     call $assembly/formatters/FloatFormatter#format
     local.tee $20
     call $~lib/string/String.__concat
     local.tee $21
     i32.const 12640
     call $~lib/string/String.__concat
     local.tee $22
     call $~lib/string/String.__concat
     local.tee $23
     local.tee $24
     local.get $3
     local.tee $25
     i32.ne
     if
      local.get $24
      call $~lib/rt/pure/__retain
      local.set $24
      local.get $25
      call $~lib/rt/pure/__release
     end
     local.get $24
     local.set $3
     local.get $12
     call $~lib/rt/pure/__release
     local.get $13
     call $~lib/rt/pure/__release
     local.get $14
     call $~lib/rt/pure/__release
     local.get $15
     call $~lib/rt/pure/__release
     local.get $16
     call $~lib/rt/pure/__release
     local.get $17
     call $~lib/rt/pure/__release
     local.get $18
     call $~lib/rt/pure/__release
     local.get $19
     call $~lib/rt/pure/__release
     local.get $20
     call $~lib/rt/pure/__release
     local.get $21
     call $~lib/rt/pure/__release
     local.get $22
     call $~lib/rt/pure/__release
     local.get $23
     call $~lib/rt/pure/__release
    else
     local.get $3
     local.get $6
     local.get $11
     i64.load
     f64.convert_i64_u
     local.get $2
     f64.div
     call $assembly/formatters/FloatFormatter#format
     local.tee $23
     i32.const 224
     call $~lib/string/String.__concat
     local.tee $22
     local.get $7
     local.get $11
     f64.load offset=56
     f64.const 100
     f64.div
     call $assembly/formatters/FloatFormatter#format
     local.tee $21
     call $~lib/string/String.__concat
     local.tee $20
     i32.const 224
     call $~lib/string/String.__concat
     local.tee $19
     local.get $8
     local.get $11
     i64.load offset=32
     call $assembly/formatters/IntegerFormatter#format
     local.tee $18
     call $~lib/string/String.__concat
     local.tee $17
     i32.const 12640
     call $~lib/string/String.__concat
     local.tee $16
     call $~lib/string/String.__concat
     local.tee $15
     local.tee $25
     local.get $3
     local.tee $14
     i32.ne
     if
      local.get $25
      call $~lib/rt/pure/__retain
      local.set $25
      local.get $14
      call $~lib/rt/pure/__release
     end
     local.get $25
     local.set $3
     local.get $23
     call $~lib/rt/pure/__release
     local.get $22
     call $~lib/rt/pure/__release
     local.get $21
     call $~lib/rt/pure/__release
     local.get $20
     call $~lib/rt/pure/__release
     local.get $19
     call $~lib/rt/pure/__release
     local.get $18
     call $~lib/rt/pure/__release
     local.get $17
     call $~lib/rt/pure/__release
     local.get $16
     call $~lib/rt/pure/__release
     local.get $15
     call $~lib/rt/pure/__release
    end
    local.get $11
    call $~lib/rt/pure/__release
    br $while-continue|0
   end
  end
  i32.const 0
  i32.const 12
  local.get $0
  i32.load8_u offset=32
  call $assembly/formatters/FloatFormatter#constructor
  local.set $10
  local.get $0
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getMean
  local.set $26
  local.get $10
  local.get $26
  local.get $2
  f64.div
  call $assembly/formatters/FloatFormatter#format
  local.set $15
  local.get $10
  local.get $0
  local.get $26
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#computeStdDeviation
  local.get $2
  f64.div
  call $assembly/formatters/FloatFormatter#format
  local.set $16
  local.get $10
  local.get $0
  i64.load offset=144
  f64.convert_i64_u
  local.get $2
  f64.div
  call $assembly/formatters/FloatFormatter#format
  local.set $17
  i32.const 0
  i32.const 12
  call $assembly/formatters/IntegerFormatter#constructor
  local.set $18
  local.get $18
  local.get $0
  i64.load offset=168
  call $assembly/formatters/IntegerFormatter#format
  local.set $19
  local.get $18
  local.get $0
  i64.load offset=40
  call $assembly/formatters/IntegerFormatter#format
  local.set $20
  local.get $18
  local.get $0
  i32.load offset=48
  i64.extend_i32_s
  call $assembly/formatters/IntegerFormatter#format
  local.set $21
  local.get $3
  i32.const 12672
  local.get $15
  call $~lib/string/String#toString
  local.tee $22
  call $~lib/string/String.__concat
  local.tee $23
  i32.const 12720
  call $~lib/string/String.__concat
  local.tee $25
  local.get $16
  call $~lib/string/String#toString
  local.tee $14
  call $~lib/string/String.__concat
  local.tee $13
  i32.const 12784
  call $~lib/string/String.__concat
  local.tee $12
  local.get $17
  call $~lib/string/String#toString
  local.tee $24
  call $~lib/string/String.__concat
  local.tee $27
  i32.const 12832
  call $~lib/string/String.__concat
  local.tee $28
  local.get $19
  call $~lib/string/String#toString
  local.tee $29
  call $~lib/string/String.__concat
  local.tee $30
  i32.const 12896
  call $~lib/string/String.__concat
  local.tee $31
  local.get $20
  call $~lib/string/String#toString
  local.tee $32
  call $~lib/string/String.__concat
  local.tee $33
  i32.const 12944
  call $~lib/string/String.__concat
  local.tee $34
  local.get $21
  call $~lib/string/String#toString
  local.tee $35
  call $~lib/string/String.__concat
  local.tee $36
  i32.const 13008
  call $~lib/string/String.__concat
  local.tee $37
  call $~lib/string/String.__concat
  local.tee $38
  local.tee $39
  local.get $3
  local.tee $40
  i32.ne
  if
   local.get $39
   call $~lib/rt/pure/__retain
   local.set $39
   local.get $40
   call $~lib/rt/pure/__release
  end
  local.get $39
  local.set $3
  local.get $3
  local.set $39
  local.get $4
  call $~lib/rt/pure/__release
  local.get $5
  call $~lib/rt/pure/__release
  local.get $6
  call $~lib/rt/pure/__release
  local.get $7
  call $~lib/rt/pure/__release
  local.get $8
  call $~lib/rt/pure/__release
  local.get $9
  call $~lib/rt/pure/__release
  local.get $10
  call $~lib/rt/pure/__release
  local.get $15
  call $~lib/rt/pure/__release
  local.get $16
  call $~lib/rt/pure/__release
  local.get $17
  call $~lib/rt/pure/__release
  local.get $18
  call $~lib/rt/pure/__release
  local.get $19
  call $~lib/rt/pure/__release
  local.get $20
  call $~lib/rt/pure/__release
  local.get $21
  call $~lib/rt/pure/__release
  local.get $22
  call $~lib/rt/pure/__release
  local.get $23
  call $~lib/rt/pure/__release
  local.get $25
  call $~lib/rt/pure/__release
  local.get $14
  call $~lib/rt/pure/__release
  local.get $13
  call $~lib/rt/pure/__release
  local.get $12
  call $~lib/rt/pure/__release
  local.get $24
  call $~lib/rt/pure/__release
  local.get $27
  call $~lib/rt/pure/__release
  local.get $28
  call $~lib/rt/pure/__release
  local.get $29
  call $~lib/rt/pure/__release
  local.get $30
  call $~lib/rt/pure/__release
  local.get $31
  call $~lib/rt/pure/__release
  local.get $32
  call $~lib/rt/pure/__release
  local.get $33
  call $~lib/rt/pure/__release
  local.get $34
  call $~lib/rt/pure/__release
  local.get $35
  call $~lib/rt/pure/__release
  local.get $36
  call $~lib/rt/pure/__release
  local.get $37
  call $~lib/rt/pure/__release
  local.get $38
  call $~lib/rt/pure/__release
  local.get $39
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#outputPercentileDistribution (param $0 i32) (param $1 f64) (param $2 f64) (result i32)
  local.get $0
  i32.load
  local.get $1
  i32.trunc_f64_s
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#outputPercentileDistribution
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordValueWithCountAndExpectedInterval (param $0 i32) (param $1 i64) (param $2 i64) (param $3 i64)
  (local $4 i64)
  (local $5 i32)
  local.get $0
  local.get $2
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordCountAtValue
  local.get $3
  i64.const 0
  i64.le_u
  if (result i32)
   i32.const 1
  else
   local.get $1
   local.get $3
   i64.le_u
  end
  if
   return
  end
  local.get $1
  local.get $3
  i64.sub
  local.set $4
  loop $for-loop|0
   local.get $4
   local.get $3
   i64.ge_u
   local.set $5
   local.get $5
   if
    local.get $0
    local.get $2
    local.get $4
    call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordCountAtValue
    local.get $4
    local.get $3
    i64.sub
    local.set $4
    br $for-loop|0
   end
  end
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#addWhileCorrectingForCoordinatedOmission (param $0 i32) (param $1 i32) (param $2 i64)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  call $~lib/rt/pure/__retain
  local.set $3
  i32.const 0
  local.get $1
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#constructor
  local.set $4
  loop $while-continue|0
   local.get $4
   call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#hasNext
   local.set $5
   local.get $5
   if
    local.get $4
    call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#next
    local.set $6
    local.get $3
    local.get $6
    i64.load
    local.get $6
    i64.load offset=16
    local.get $2
    call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordValueWithCountAndExpectedInterval
    local.get $6
    call $~lib/rt/pure/__release
    br $while-continue|0
   end
  end
  local.get $3
  call $~lib/rt/pure/__release
  local.get $4
  call $~lib/rt/pure/__release
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#copyCorrectedForCoordinatedOmission (param $0 i32) (param $1 i64) (result i32)
  (local $2 i32)
  i32.const 0
  local.get $0
  i64.load offset=24
  local.get $0
  i64.load offset=16
  local.get $0
  i32.load8_u offset=32
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#constructor
  local.set $2
  local.get $2
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#addWhileCorrectingForCoordinatedOmission
  local.get $2
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#copyCorrectedForCoordinatedOmission (param $0 i32) (param $1 f64) (result i32)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  i32.load
  local.get $1
  i64.trunc_f64_u
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#copyCorrectedForCoordinatedOmission
  local.set $2
  i32.const 0
  f64.const 0
  f64.const 0
  f64.const 0
  i32.const 0
  local.get $2
  call $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#constructor
  local.set $3
  local.get $2
  call $~lib/rt/pure/__release
  local.get $3
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#add<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i64)
  (local $4 i32)
  (local $5 i32)
  (local $6 i64)
  (local $7 i64)
  (local $8 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $0
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#valueFromIndex
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#highestEquivalentValue
  local.set $2
  local.get $2
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 13040
    i32.const 8992
    i32.const 639
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   i64.const 0
   local.set $3
   i32.const 0
   local.set $4
   loop $for-loop|0
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtIndex
     local.set $6
     local.get $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $4
      local.get $6
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#addToCountAtIndex
      local.get $3
      local.get $6
      i64.add
      local.set $3
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $3
   i64.add
   i64.store offset=168
   local.get $0
   local.get $0
   i64.load offset=144
   local.tee $6
   local.get $1
   i64.load offset=144
   local.tee $7
   local.get $6
   local.get $7
   i64.gt_u
   select
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#updatedMaxValue
   local.get $0
   local.get $0
   i64.load offset=152
   local.tee $6
   local.get $1
   i64.load offset=152
   local.tee $7
   local.get $6
   local.get $7
   i64.lt_u
   select
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#updateMinNonZeroValue
  else
   local.get $1
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex
   local.set $4
   local.get $1
   local.get $4
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtIndex
   local.set $3
   local.get $0
   local.get $3
   local.get $1
   local.get $4
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#valueFromIndex
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordCountAtValue
   i32.const 0
   local.set $5
   loop $for-loop|1
    local.get $5
    local.get $4
    i32.lt_s
    local.set $8
    local.get $8
    if
     local.get $1
     local.get $5
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtIndex
     local.set $3
     local.get $3
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $3
      local.get $1
      local.get $5
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#valueFromIndex
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordCountAtValue
     end
     local.get $5
     i32.const 1
     i32.add
     local.set $5
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=64
  local.tee $3
  local.get $1
  i64.load offset=64
  local.tee $6
  local.get $3
  local.get $6
  i64.lt_u
  select
  i64.store offset=64
  local.get $0
  local.get $0
  i64.load offset=72
  local.tee $3
  local.get $1
  i64.load offset=72
  local.tee $6
  local.get $3
  local.get $6
  i64.gt_u
  select
  i64.store offset=72
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#addHistogram8 (param $0 i32) (param $1 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#add<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $~lib/typedarray/Uint16Array#__uget (param $0 i32) (param $1 i32) (result i32)
  local.get $0
  i32.load offset=4
  local.get $1
  i32.const 1
  i32.shl
  i32.add
  i32.load16_u
 )
 (func $assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>#__get (param $0 i32) (param $1 i32) (result i32)
  local.get $0
  i32.load
  local.get $1
  call $~lib/typedarray/Uint16Array#__uget
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtIndex (param $0 i32) (param $1 i32) (result i64)
  local.get $0
  i32.load offset=160
  local.get $1
  call $assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>#__get
  i64.extend_i32_u
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getBucketIndex (param $0 i32) (param $1 i64) (result i32)
  local.get $0
  i32.load offset=104
  local.get $1
  local.get $0
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getSubBucketIndex (param $0 i32) (param $1 i64) (param $2 i32) (result i32)
  local.get $1
  local.get $2
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shr_u
  i32.wrap_i64
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#computeCountsArrayIndex (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  (local $3 i32)
  (local $4 i32)
  local.get $2
  local.get $0
  i32.load offset=48
  i32.lt_s
  i32.eqz
  if
   i32.const 0
   i32.const 8992
   i32.const 247
   i32.const 5
   call $~lib/builtins/abort
   unreachable
  end
  local.get $1
  i32.const 0
  i32.eq
  if (result i32)
   i32.const 1
  else
   local.get $2
   local.get $0
   i32.load offset=116
   i32.ge_s
  end
  i32.eqz
  if
   i32.const 0
   i32.const 8992
   i32.const 248
   i32.const 5
   call $~lib/builtins/abort
   unreachable
  end
  local.get $1
  i32.const 1
  i32.add
  i32.const 1
  local.get $0
  i32.load offset=108
  i32.shl
  i32.mul
  local.set $3
  local.get $2
  local.get $0
  i32.load offset=116
  i32.sub
  local.set $4
  local.get $3
  local.get $4
  i32.add
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#countsArrayIndex (param $0 i32) (param $1 i64) (result i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i64.const 0
  i64.lt_u
  if
   i32.const 11920
   i32.const 8992
   i32.const 239
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getBucketIndex
  local.set $2
  local.get $0
  local.get $1
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getSubBucketIndex
  local.set $3
  local.get $0
  local.get $2
  local.get $3
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#computeCountsArrayIndex
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#valueFromIndexes (param $0 i32) (param $1 i32) (param $2 i32) (result i64)
  local.get $2
  i64.extend_i32_s
  local.get $1
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#valueFromIndex (param $0 i32) (param $1 i32) (result i64)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  local.get $0
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.set $2
  local.get $1
  local.get $0
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  local.get $0
  i32.load offset=116
  i32.add
  local.set $3
  local.get $2
  i32.const 0
  i32.lt_s
  if
   local.get $3
   local.get $0
   i32.load offset=116
   i32.sub
   local.set $3
   i32.const 0
   local.set $2
  end
  local.get $0
  local.get $2
  local.get $3
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#valueFromIndexes
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#add<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i64)
  (local $4 i32)
  (local $5 i32)
  (local $6 i64)
  (local $7 i64)
  (local $8 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $0
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#valueFromIndex
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#highestEquivalentValue
  local.set $2
  local.get $2
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 13040
    i32.const 8992
    i32.const 639
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   i64.const 0
   local.set $3
   i32.const 0
   local.set $4
   loop $for-loop|0
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtIndex
     local.set $6
     local.get $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $4
      local.get $6
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#addToCountAtIndex
      local.get $3
      local.get $6
      i64.add
      local.set $3
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $3
   i64.add
   i64.store offset=168
   local.get $0
   local.get $0
   i64.load offset=144
   local.tee $6
   local.get $1
   i64.load offset=144
   local.tee $7
   local.get $6
   local.get $7
   i64.gt_u
   select
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#updatedMaxValue
   local.get $0
   local.get $0
   i64.load offset=152
   local.tee $6
   local.get $1
   i64.load offset=152
   local.tee $7
   local.get $6
   local.get $7
   i64.lt_u
   select
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#updateMinNonZeroValue
  else
   local.get $1
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#countsArrayIndex
   local.set $4
   local.get $1
   local.get $4
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtIndex
   local.set $3
   local.get $0
   local.get $3
   local.get $1
   local.get $4
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#valueFromIndex
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordCountAtValue
   i32.const 0
   local.set $5
   loop $for-loop|1
    local.get $5
    local.get $4
    i32.lt_s
    local.set $8
    local.get $8
    if
     local.get $1
     local.get $5
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtIndex
     local.set $3
     local.get $3
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $3
      local.get $1
      local.get $5
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#valueFromIndex
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordCountAtValue
     end
     local.get $5
     i32.const 1
     i32.add
     local.set $5
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=64
  local.tee $3
  local.get $1
  i64.load offset=64
  local.tee $6
  local.get $3
  local.get $6
  i64.lt_u
  select
  i64.store offset=64
  local.get $0
  local.get $0
  i64.load offset=72
  local.tee $3
  local.get $1
  i64.load offset=72
  local.tee $6
  local.get $3
  local.get $6
  i64.gt_u
  select
  i64.store offset=72
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#addHistogram16 (param $0 i32) (param $1 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#add<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $~lib/typedarray/Uint32Array#__uget (param $0 i32) (param $1 i32) (result i32)
  local.get $0
  i32.load offset=4
  local.get $1
  i32.const 2
  i32.shl
  i32.add
  i32.load
 )
 (func $assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>#__get (param $0 i32) (param $1 i32) (result i32)
  local.get $0
  i32.load
  local.get $1
  call $~lib/typedarray/Uint32Array#__uget
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtIndex (param $0 i32) (param $1 i32) (result i64)
  local.get $0
  i32.load offset=160
  local.get $1
  call $assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>#__get
  i64.extend_i32_u
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getBucketIndex (param $0 i32) (param $1 i64) (result i32)
  local.get $0
  i32.load offset=104
  local.get $1
  local.get $0
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getSubBucketIndex (param $0 i32) (param $1 i64) (param $2 i32) (result i32)
  local.get $1
  local.get $2
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shr_u
  i32.wrap_i64
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#computeCountsArrayIndex (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  (local $3 i32)
  (local $4 i32)
  local.get $2
  local.get $0
  i32.load offset=48
  i32.lt_s
  i32.eqz
  if
   i32.const 0
   i32.const 8992
   i32.const 247
   i32.const 5
   call $~lib/builtins/abort
   unreachable
  end
  local.get $1
  i32.const 0
  i32.eq
  if (result i32)
   i32.const 1
  else
   local.get $2
   local.get $0
   i32.load offset=116
   i32.ge_s
  end
  i32.eqz
  if
   i32.const 0
   i32.const 8992
   i32.const 248
   i32.const 5
   call $~lib/builtins/abort
   unreachable
  end
  local.get $1
  i32.const 1
  i32.add
  i32.const 1
  local.get $0
  i32.load offset=108
  i32.shl
  i32.mul
  local.set $3
  local.get $2
  local.get $0
  i32.load offset=116
  i32.sub
  local.set $4
  local.get $3
  local.get $4
  i32.add
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#countsArrayIndex (param $0 i32) (param $1 i64) (result i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i64.const 0
  i64.lt_u
  if
   i32.const 11920
   i32.const 8992
   i32.const 239
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getBucketIndex
  local.set $2
  local.get $0
  local.get $1
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getSubBucketIndex
  local.set $3
  local.get $0
  local.get $2
  local.get $3
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#computeCountsArrayIndex
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#valueFromIndexes (param $0 i32) (param $1 i32) (param $2 i32) (result i64)
  local.get $2
  i64.extend_i32_s
  local.get $1
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#valueFromIndex (param $0 i32) (param $1 i32) (result i64)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  local.get $0
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.set $2
  local.get $1
  local.get $0
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  local.get $0
  i32.load offset=116
  i32.add
  local.set $3
  local.get $2
  i32.const 0
  i32.lt_s
  if
   local.get $3
   local.get $0
   i32.load offset=116
   i32.sub
   local.set $3
   i32.const 0
   local.set $2
  end
  local.get $0
  local.get $2
  local.get $3
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#valueFromIndexes
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#add<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i64)
  (local $4 i32)
  (local $5 i32)
  (local $6 i64)
  (local $7 i64)
  (local $8 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $0
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#valueFromIndex
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#highestEquivalentValue
  local.set $2
  local.get $2
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 13040
    i32.const 8992
    i32.const 639
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   i64.const 0
   local.set $3
   i32.const 0
   local.set $4
   loop $for-loop|0
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtIndex
     local.set $6
     local.get $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $4
      local.get $6
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#addToCountAtIndex
      local.get $3
      local.get $6
      i64.add
      local.set $3
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $3
   i64.add
   i64.store offset=168
   local.get $0
   local.get $0
   i64.load offset=144
   local.tee $6
   local.get $1
   i64.load offset=144
   local.tee $7
   local.get $6
   local.get $7
   i64.gt_u
   select
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#updatedMaxValue
   local.get $0
   local.get $0
   i64.load offset=152
   local.tee $6
   local.get $1
   i64.load offset=152
   local.tee $7
   local.get $6
   local.get $7
   i64.lt_u
   select
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#updateMinNonZeroValue
  else
   local.get $1
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#countsArrayIndex
   local.set $4
   local.get $1
   local.get $4
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtIndex
   local.set $3
   local.get $0
   local.get $3
   local.get $1
   local.get $4
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#valueFromIndex
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordCountAtValue
   i32.const 0
   local.set $5
   loop $for-loop|1
    local.get $5
    local.get $4
    i32.lt_s
    local.set $8
    local.get $8
    if
     local.get $1
     local.get $5
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtIndex
     local.set $3
     local.get $3
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $3
      local.get $1
      local.get $5
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#valueFromIndex
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordCountAtValue
     end
     local.get $5
     i32.const 1
     i32.add
     local.set $5
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=64
  local.tee $3
  local.get $1
  i64.load offset=64
  local.tee $6
  local.get $3
  local.get $6
  i64.lt_u
  select
  i64.store offset=64
  local.get $0
  local.get $0
  i64.load offset=72
  local.tee $3
  local.get $1
  i64.load offset=72
  local.tee $6
  local.get $3
  local.get $6
  i64.gt_u
  select
  i64.store offset=72
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#addHistogram32 (param $0 i32) (param $1 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#add<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $~lib/typedarray/Uint64Array#__uget (param $0 i32) (param $1 i32) (result i64)
  local.get $0
  i32.load offset=4
  local.get $1
  i32.const 3
  i32.shl
  i32.add
  i64.load
 )
 (func $assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>#__get (param $0 i32) (param $1 i32) (result i64)
  local.get $0
  i32.load
  local.get $1
  call $~lib/typedarray/Uint64Array#__uget
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtIndex (param $0 i32) (param $1 i32) (result i64)
  local.get $0
  i32.load offset=160
  local.get $1
  call $assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>#__get
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getBucketIndex (param $0 i32) (param $1 i64) (result i32)
  local.get $0
  i32.load offset=104
  local.get $1
  local.get $0
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getSubBucketIndex (param $0 i32) (param $1 i64) (param $2 i32) (result i32)
  local.get $1
  local.get $2
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shr_u
  i32.wrap_i64
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#computeCountsArrayIndex (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  (local $3 i32)
  (local $4 i32)
  local.get $2
  local.get $0
  i32.load offset=48
  i32.lt_s
  i32.eqz
  if
   i32.const 0
   i32.const 8992
   i32.const 247
   i32.const 5
   call $~lib/builtins/abort
   unreachable
  end
  local.get $1
  i32.const 0
  i32.eq
  if (result i32)
   i32.const 1
  else
   local.get $2
   local.get $0
   i32.load offset=116
   i32.ge_s
  end
  i32.eqz
  if
   i32.const 0
   i32.const 8992
   i32.const 248
   i32.const 5
   call $~lib/builtins/abort
   unreachable
  end
  local.get $1
  i32.const 1
  i32.add
  i32.const 1
  local.get $0
  i32.load offset=108
  i32.shl
  i32.mul
  local.set $3
  local.get $2
  local.get $0
  i32.load offset=116
  i32.sub
  local.set $4
  local.get $3
  local.get $4
  i32.add
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#countsArrayIndex (param $0 i32) (param $1 i64) (result i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i64.const 0
  i64.lt_u
  if
   i32.const 11920
   i32.const 8992
   i32.const 239
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getBucketIndex
  local.set $2
  local.get $0
  local.get $1
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getSubBucketIndex
  local.set $3
  local.get $0
  local.get $2
  local.get $3
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#computeCountsArrayIndex
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#valueFromIndexes (param $0 i32) (param $1 i32) (param $2 i32) (result i64)
  local.get $2
  i64.extend_i32_s
  local.get $1
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#valueFromIndex (param $0 i32) (param $1 i32) (result i64)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  local.get $0
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.set $2
  local.get $1
  local.get $0
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  local.get $0
  i32.load offset=116
  i32.add
  local.set $3
  local.get $2
  i32.const 0
  i32.lt_s
  if
   local.get $3
   local.get $0
   i32.load offset=116
   i32.sub
   local.set $3
   i32.const 0
   local.set $2
  end
  local.get $0
  local.get $2
  local.get $3
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#valueFromIndexes
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#add<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i64)
  (local $4 i32)
  (local $5 i32)
  (local $6 i64)
  (local $7 i64)
  (local $8 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $0
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#valueFromIndex
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#highestEquivalentValue
  local.set $2
  local.get $2
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 13040
    i32.const 8992
    i32.const 639
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   i64.const 0
   local.set $3
   i32.const 0
   local.set $4
   loop $for-loop|0
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtIndex
     local.set $6
     local.get $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $4
      local.get $6
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#addToCountAtIndex
      local.get $3
      local.get $6
      i64.add
      local.set $3
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $3
   i64.add
   i64.store offset=168
   local.get $0
   local.get $0
   i64.load offset=144
   local.tee $6
   local.get $1
   i64.load offset=144
   local.tee $7
   local.get $6
   local.get $7
   i64.gt_u
   select
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#updatedMaxValue
   local.get $0
   local.get $0
   i64.load offset=152
   local.tee $6
   local.get $1
   i64.load offset=152
   local.tee $7
   local.get $6
   local.get $7
   i64.lt_u
   select
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#updateMinNonZeroValue
  else
   local.get $1
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#countsArrayIndex
   local.set $4
   local.get $1
   local.get $4
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtIndex
   local.set $3
   local.get $0
   local.get $3
   local.get $1
   local.get $4
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#valueFromIndex
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordCountAtValue
   i32.const 0
   local.set $5
   loop $for-loop|1
    local.get $5
    local.get $4
    i32.lt_s
    local.set $8
    local.get $8
    if
     local.get $1
     local.get $5
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtIndex
     local.set $3
     local.get $3
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $3
      local.get $1
      local.get $5
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#valueFromIndex
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordCountAtValue
     end
     local.get $5
     i32.const 1
     i32.add
     local.set $5
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=64
  local.tee $3
  local.get $1
  i64.load offset=64
  local.tee $6
  local.get $3
  local.get $6
  i64.lt_u
  select
  i64.store offset=64
  local.get $0
  local.get $0
  i64.load offset=72
  local.tee $3
  local.get $1
  i64.load offset=72
  local.tee $6
  local.get $3
  local.get $6
  i64.gt_u
  select
  i64.store offset=72
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#addHistogram64 (param $0 i32) (param $1 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#add<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $~lib/typedarray/Uint64Array#__get (param $0 i32) (param $1 i32) (result i64)
  local.get $1
  local.get $0
  i32.load offset=8
  i32.const 3
  i32.shr_u
  i32.ge_u
  if
   i32.const 12160
   i32.const 12224
   i32.const 1048
   i32.const 64
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i32.load offset=4
  local.get $1
  i32.const 3
  i32.shl
  i32.add
  i64.load
 )
 (func $assembly/packedarray/PackedArrayContext/PackedArrayContext#getAtUnpackedIndex (param $0 i32) (param $1 i32) (result i64)
  local.get $0
  i32.load offset=20
  local.get $1
  call $~lib/typedarray/Uint64Array#__get
 )
 (func $~lib/typedarray/Uint16Array#__get (param $0 i32) (param $1 i32) (result i32)
  local.get $1
  local.get $0
  i32.load offset=8
  i32.const 1
  i32.shr_u
  i32.ge_u
  if
   i32.const 12160
   i32.const 12224
   i32.const 536
   i32.const 64
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i32.load offset=4
  local.get $1
  i32.const 1
  i32.shl
  i32.add
  i32.load16_u
 )
 (func $assembly/packedarray/PackedArrayContext/PackedArrayContext#getIndexAtShortIndex (param $0 i32) (param $1 i32) (result i32)
  local.get $0
  i32.load offset=16
  local.get $1
  call $~lib/typedarray/Uint16Array#__get
 )
 (func $assembly/packedarray/PackedArrayContext/PackedArrayContext#length (param $0 i32) (result i32)
  local.get $0
  i32.load offset=4
 )
 (func $assembly/packedarray/PackedArrayContext/PackedArrayContext#getPopulatedShortLength (param $0 i32) (result i32)
  local.get $0
  i32.load offset=24
 )
 (func $assembly/packedarray/PackedArrayContext/PackedArrayContext#getPopulatedLongLength (param $0 i32) (result i32)
  local.get $0
  call $assembly/packedarray/PackedArrayContext/PackedArrayContext#getPopulatedShortLength
  i32.const 3
  i32.add
  i32.const 2
  i32.shr_s
 )
 (func $~lib/arraybuffer/ArrayBuffer#get:byteLength (param $0 i32) (result i32)
  local.get $0
  i32.const 16
  i32.sub
  i32.load offset=12
 )
 (func $~lib/typedarray/Uint8Array.wrap (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  local.get $0
  call $~lib/rt/pure/__retain
  local.set $0
  local.get $0
  call $~lib/rt/pure/__retain
  local.set $5
  local.get $1
  local.set $4
  local.get $2
  local.set $3
  local.get $5
  call $~lib/arraybuffer/ArrayBuffer#get:byteLength
  local.set $7
  local.get $4
  local.get $7
  i32.gt_u
  local.get $4
  i32.const 0
  i32.and
  i32.or
  if
   i32.const 12160
   i32.const 12224
   i32.const 1741
   i32.const 5
   call $~lib/builtins/abort
   unreachable
  end
  local.get $3
  i32.const 0
  i32.lt_s
  if
   local.get $3
   i32.const -1
   i32.eq
   if
    local.get $7
    i32.const 0
    i32.and
    if
     i32.const 256
     i32.const 12224
     i32.const 1746
     i32.const 9
     call $~lib/builtins/abort
     unreachable
    end
    local.get $7
    local.get $4
    i32.sub
    local.set $6
   else
    i32.const 256
    i32.const 12224
    i32.const 1750
    i32.const 7
    call $~lib/builtins/abort
    unreachable
   end
  else
   local.get $3
   i32.const 0
   i32.shl
   local.set $6
   local.get $4
   local.get $6
   i32.add
   local.get $7
   i32.gt_s
   if
    i32.const 256
    i32.const 12224
    i32.const 1755
    i32.const 7
    call $~lib/builtins/abort
    unreachable
   end
  end
  i32.const 12
  i32.const 4
  call $~lib/rt/tlsf/__alloc
  local.set $8
  local.get $8
  local.get $5
  call $~lib/rt/pure/__retain
  i32.store
  local.get $8
  local.get $6
  i32.store offset=8
  local.get $8
  local.get $5
  local.get $4
  i32.add
  i32.store offset=4
  local.get $8
  call $~lib/rt/pure/__retain
  local.set $9
  local.get $5
  call $~lib/rt/pure/__release
  local.get $9
  local.set $8
  local.get $0
  call $~lib/rt/pure/__release
  local.get $8
 )
 (func $~lib/typedarray/Uint8Array.wrap@varargs (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  block $2of2
   block $1of2
    block $0of2
     block $outOfRange
      global.get $~argumentsLength
      i32.const 1
      i32.sub
      br_table $0of2 $1of2 $2of2 $outOfRange
     end
     unreachable
    end
    i32.const 0
    local.set $1
   end
   i32.const -1
   local.set $2
  end
  local.get $0
  local.get $1
  local.get $2
  call $~lib/typedarray/Uint8Array.wrap
 )
 (func $~lib/typedarray/Uint16Array.wrap (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  local.get $0
  call $~lib/rt/pure/__retain
  local.set $0
  local.get $0
  call $~lib/rt/pure/__retain
  local.set $5
  local.get $1
  local.set $4
  local.get $2
  local.set $3
  local.get $5
  call $~lib/arraybuffer/ArrayBuffer#get:byteLength
  local.set $7
  local.get $4
  local.get $7
  i32.gt_u
  local.get $4
  i32.const 1
  i32.and
  i32.or
  if
   i32.const 12160
   i32.const 12224
   i32.const 1741
   i32.const 5
   call $~lib/builtins/abort
   unreachable
  end
  local.get $3
  i32.const 0
  i32.lt_s
  if
   local.get $3
   i32.const -1
   i32.eq
   if
    local.get $7
    i32.const 1
    i32.and
    if
     i32.const 256
     i32.const 12224
     i32.const 1746
     i32.const 9
     call $~lib/builtins/abort
     unreachable
    end
    local.get $7
    local.get $4
    i32.sub
    local.set $6
   else
    i32.const 256
    i32.const 12224
    i32.const 1750
    i32.const 7
    call $~lib/builtins/abort
    unreachable
   end
  else
   local.get $3
   i32.const 1
   i32.shl
   local.set $6
   local.get $4
   local.get $6
   i32.add
   local.get $7
   i32.gt_s
   if
    i32.const 256
    i32.const 12224
    i32.const 1755
    i32.const 7
    call $~lib/builtins/abort
    unreachable
   end
  end
  i32.const 12
  i32.const 17
  call $~lib/rt/tlsf/__alloc
  local.set $8
  local.get $8
  local.get $5
  call $~lib/rt/pure/__retain
  i32.store
  local.get $8
  local.get $6
  i32.store offset=8
  local.get $8
  local.get $5
  local.get $4
  i32.add
  i32.store offset=4
  local.get $8
  call $~lib/rt/pure/__retain
  local.set $9
  local.get $5
  call $~lib/rt/pure/__release
  local.get $9
  local.set $8
  local.get $0
  call $~lib/rt/pure/__release
  local.get $8
 )
 (func $~lib/typedarray/Uint16Array.wrap@varargs (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  block $2of2
   block $1of2
    block $0of2
     block $outOfRange
      global.get $~argumentsLength
      i32.const 1
      i32.sub
      br_table $0of2 $1of2 $2of2 $outOfRange
     end
     unreachable
    end
    i32.const 0
    local.set $1
   end
   i32.const -1
   local.set $2
  end
  local.get $0
  local.get $1
  local.get $2
  call $~lib/typedarray/Uint16Array.wrap
 )
 (func $~lib/typedarray/Uint64Array.wrap (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  local.get $0
  call $~lib/rt/pure/__retain
  local.set $0
  local.get $0
  call $~lib/rt/pure/__retain
  local.set $5
  local.get $1
  local.set $4
  local.get $2
  local.set $3
  local.get $5
  call $~lib/arraybuffer/ArrayBuffer#get:byteLength
  local.set $7
  local.get $4
  local.get $7
  i32.gt_u
  local.get $4
  i32.const 7
  i32.and
  i32.or
  if
   i32.const 12160
   i32.const 12224
   i32.const 1741
   i32.const 5
   call $~lib/builtins/abort
   unreachable
  end
  local.get $3
  i32.const 0
  i32.lt_s
  if
   local.get $3
   i32.const -1
   i32.eq
   if
    local.get $7
    i32.const 7
    i32.and
    if
     i32.const 256
     i32.const 12224
     i32.const 1746
     i32.const 9
     call $~lib/builtins/abort
     unreachable
    end
    local.get $7
    local.get $4
    i32.sub
    local.set $6
   else
    i32.const 256
    i32.const 12224
    i32.const 1750
    i32.const 7
    call $~lib/builtins/abort
    unreachable
   end
  else
   local.get $3
   i32.const 3
   i32.shl
   local.set $6
   local.get $4
   local.get $6
   i32.add
   local.get $7
   i32.gt_s
   if
    i32.const 256
    i32.const 12224
    i32.const 1755
    i32.const 7
    call $~lib/builtins/abort
    unreachable
   end
  end
  i32.const 12
  i32.const 33
  call $~lib/rt/tlsf/__alloc
  local.set $8
  local.get $8
  local.get $5
  call $~lib/rt/pure/__retain
  i32.store
  local.get $8
  local.get $6
  i32.store offset=8
  local.get $8
  local.get $5
  local.get $4
  i32.add
  i32.store offset=4
  local.get $8
  call $~lib/rt/pure/__retain
  local.set $9
  local.get $5
  call $~lib/rt/pure/__release
  local.get $9
  local.set $8
  local.get $0
  call $~lib/rt/pure/__release
  local.get $8
 )
 (func $~lib/typedarray/Uint64Array.wrap@varargs (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  block $2of2
   block $1of2
    block $0of2
     block $outOfRange
      global.get $~argumentsLength
      i32.const 1
      i32.sub
      br_table $0of2 $1of2 $2of2 $outOfRange
     end
     unreachable
    end
    i32.const 0
    local.set $1
   end
   i32.const -1
   local.set $2
  end
  local.get $0
  local.get $1
  local.get $2
  call $~lib/typedarray/Uint64Array.wrap
 )
 (func $assembly/packedarray/PackedArrayContext/PackedArrayContext#initArrayViews (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.tee $2
  local.get $1
  i32.const 0
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Uint8Array.wrap@varargs
  local.set $3
  local.get $2
  i32.load offset=12
  call $~lib/rt/pure/__release
  local.get $3
  i32.store offset=12
  local.get $0
  local.tee $3
  local.get $1
  i32.const 0
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Uint16Array.wrap@varargs
  local.set $2
  local.get $3
  i32.load offset=16
  call $~lib/rt/pure/__release
  local.get $2
  i32.store offset=16
  local.get $0
  local.tee $2
  local.get $1
  i32.const 0
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Uint64Array.wrap@varargs
  local.set $3
  local.get $2
  i32.load offset=20
  call $~lib/rt/pure/__release
  local.get $3
  i32.store offset=20
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/packedarray/PackedArrayContext/PackedArrayContext#resizeArray (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  i32.const 0
  local.get $1
  i32.const 8
  i32.mul
  call $~lib/typedarray/Uint8Array#constructor
  local.set $2
  local.get $2
  local.get $0
  i32.load offset=12
  i32.const 0
  call $~lib/typedarray/Uint8Array#set<~lib/typedarray/Uint8Array>
  local.get $0
  local.tee $3
  local.get $2
  i32.load
  local.tee $4
  local.get $3
  i32.load offset=8
  local.tee $5
  i32.ne
  if
   local.get $4
   call $~lib/rt/pure/__retain
   local.set $4
   local.get $5
   call $~lib/rt/pure/__release
  end
  local.get $4
  i32.store offset=8
  local.get $0
  local.get $0
  i32.load offset=8
  call $assembly/packedarray/PackedArrayContext/PackedArrayContext#initArrayViews
  local.get $0
  local.get $1
  i32.store offset=4
  local.get $2
  call $~lib/rt/pure/__release
 )
 (func $assembly/packedarray/PackedArrayContext/PackedArrayContext#expandArrayIfNeeded (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  call $assembly/packedarray/PackedArrayContext/PackedArrayContext#length
  local.set $2
  local.get $2
  local.get $0
  call $assembly/packedarray/PackedArrayContext/PackedArrayContext#getPopulatedLongLength
  local.get $1
  i32.add
  i32.lt_s
  if
   local.get $1
   local.tee $3
   global.get $assembly/packedarray/PackedArrayContext/PACKED_ARRAY_GROWTH_INCREMENT
   local.tee $4
   local.get $3
   local.get $4
   i32.gt_s
   select
   local.tee $3
   local.get $0
   call $assembly/packedarray/PackedArrayContext/PackedArrayContext#getPopulatedLongLength
   global.get $assembly/packedarray/PackedArrayContext/PACKED_ARRAY_GROWTH_FRACTION_POW2
   i32.shr_s
   local.tee $4
   local.get $3
   local.get $4
   i32.gt_s
   select
   local.set $3
   local.get $0
   local.get $2
   local.get $3
   i32.add
   call $assembly/packedarray/PackedArrayContext/PackedArrayContext#resizeArray
  end
 )
 (func $~lib/typedarray/Uint16Array#__set (param $0 i32) (param $1 i32) (param $2 i32)
  local.get $1
  local.get $0
  i32.load offset=8
  i32.const 1
  i32.shr_u
  i32.ge_u
  if
   i32.const 12160
   i32.const 12224
   i32.const 547
   i32.const 64
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i32.load offset=4
  local.get $1
  i32.const 1
  i32.shl
  i32.add
  local.get $2
  i32.store16
 )
 (func $assembly/packedarray/PackedArrayContext/PackedArrayContext#setAtShortIndex (param $0 i32) (param $1 i32) (param $2 i32)
  local.get $0
  i32.load offset=16
  local.get $1
  local.get $2
  i32.const 65535
  i32.and
  call $~lib/typedarray/Uint16Array#__set
 )
 (func $assembly/packedarray/PackedArrayContext/PackedArrayContext#newEntry (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  i32.load offset=24
  local.set $2
  local.get $0
  local.get $1
  i32.const 2
  i32.shr_s
  i32.const 1
  i32.add
  call $assembly/packedarray/PackedArrayContext/PackedArrayContext#expandArrayIfNeeded
  local.get $0
  local.get $2
  local.get $1
  i32.add
  i32.store offset=24
  i32.const 0
  local.set $3
  loop $for-loop|0
   local.get $3
   local.get $1
   i32.lt_s
   local.set $4
   local.get $4
   if
    local.get $0
    local.get $2
    local.get $3
    i32.add
    i32.const -1
    call $assembly/packedarray/PackedArrayContext/PackedArrayContext#setAtShortIndex
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|0
   end
  end
  local.get $2
 )
 (func $assembly/packedarray/PackedArrayContext/PackedArrayContext#setPackedSlotIndicators (param $0 i32) (param $1 i32) (param $2 i32)
  local.get $0
  local.get $1
  global.get $assembly/packedarray/PackedArrayContext/NON_LEAF_ENTRY_SLOT_INDICATORS_OFFSET
  i32.add
  local.get $2
  call $assembly/packedarray/PackedArrayContext/PackedArrayContext#setAtShortIndex
 )
 (func $assembly/packedarray/PackedArrayContext/PackedArrayContext#getRootEntry (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  (local $3 i32)
  (local $4 i32)
  global.get $assembly/packedarray/PackedArrayContext/SET_0_START_INDEX
  local.get $1
  i32.add
  local.set $3
  local.get $0
  local.get $3
  call $assembly/packedarray/PackedArrayContext/PackedArrayContext#getIndexAtShortIndex
  local.set $4
  local.get $4
  i32.const 0
  i32.eq
  if
   local.get $2
   i32.eqz
   if
    i32.const 0
    return
   end
   local.get $0
   global.get $assembly/packedarray/PackedArrayContext/NON_LEAF_ENTRY_HEADER_SIZE_IN_SHORTS
   call $assembly/packedarray/PackedArrayContext/PackedArrayContext#newEntry
   local.set $4
   local.get $0
   local.get $4
   i32.const 0
   call $assembly/packedarray/PackedArrayContext/PackedArrayContext#setPackedSlotIndicators
   local.get $0
   local.get $3
   local.get $4
   call $assembly/packedarray/PackedArrayContext/PackedArrayContext#setAtShortIndex
  end
  local.get $4
 )
 (func $assembly/packedarray/PackedArrayContext/PackedArrayContext#getPackedSlotIndicators (param $0 i32) (param $1 i32) (result i32)
  local.get $0
  i32.load offset=16
  local.get $1
  global.get $assembly/packedarray/PackedArrayContext/NON_LEAF_ENTRY_SLOT_INDICATORS_OFFSET
  i32.add
  call $~lib/typedarray/Uint16Array#__get
  i32.const 65535
  i32.and
 )
 (func $assembly/packedarray/PackedArrayContext/PackedArrayContext#getAtShortIndex (param $0 i32) (param $1 i32) (result i32)
  local.get $0
  i32.load offset=16
  local.get $1
  call $~lib/typedarray/Uint16Array#__get
 )
 (func $assembly/packedarray/PackedArrayContext/PackedArrayContext#setPopulatedLongLength (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.const 2
  i32.shl
  i32.store offset=24
 )
 (func $~lib/typedarray/Uint64Array#__set (param $0 i32) (param $1 i32) (param $2 i64)
  local.get $1
  local.get $0
  i32.load offset=8
  i32.const 3
  i32.shr_u
  i32.ge_u
  if
   i32.const 12160
   i32.const 12224
   i32.const 1059
   i32.const 64
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i32.load offset=4
  local.get $1
  i32.const 3
  i32.shl
  i32.add
  local.get $2
  i64.store
 )
 (func $assembly/packedarray/PackedArrayContext/PackedArrayContext#setAtLongIndex (param $0 i32) (param $1 i32) (param $2 i64)
  local.get $0
  i32.load offset=20
  local.get $1
  local.get $2
  call $~lib/typedarray/Uint64Array#__set
 )
 (func $assembly/packedarray/PackedArrayContext/PackedArrayContext#newLeafEntry (param $0 i32) (result i32)
  (local $1 i32)
  local.get $0
  call $assembly/packedarray/PackedArrayContext/PackedArrayContext#getPopulatedLongLength
  local.set $1
  local.get $0
  i32.const 1
  call $assembly/packedarray/PackedArrayContext/PackedArrayContext#expandArrayIfNeeded
  local.get $0
  local.get $1
  i32.const 1
  i32.add
  call $assembly/packedarray/PackedArrayContext/PackedArrayContext#setPopulatedLongLength
  local.get $0
  local.get $1
  i64.const 0
  call $assembly/packedarray/PackedArrayContext/PackedArrayContext#setAtLongIndex
  local.get $1
 )
 (func $assembly/packedarray/PackedArrayContext/PackedArrayContext#setIndexAtEntrySlot (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32)
  local.get $0
  local.get $1
  global.get $assembly/packedarray/PackedArrayContext/NON_LEAF_ENTRY_HEADER_SIZE_IN_SHORTS
  i32.add
  local.get $2
  i32.add
  local.get $3
  call $assembly/packedarray/PackedArrayContext/PackedArrayContext#setAtShortIndex
 )
 (func $assembly/packedarray/PackedArrayContext/PackedArrayContext#getIndexAtEntrySlot (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  local.get $1
  global.get $assembly/packedarray/PackedArrayContext/NON_LEAF_ENTRY_HEADER_SIZE_IN_SHORTS
  i32.add
  local.get $2
  i32.add
  call $assembly/packedarray/PackedArrayContext/PackedArrayContext#getAtShortIndex
 )
 (func $assembly/packedarray/PackedArrayContext/PackedArrayContext#consolidateEntry (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  local.get $0
  local.get $2
  call $assembly/packedarray/PackedArrayContext/PackedArrayContext#getPackedSlotIndicators
  local.set $3
  local.get $0
  local.get $1
  call $assembly/packedarray/PackedArrayContext/PackedArrayContext#getPackedSlotIndicators
  local.set $4
  local.get $4
  local.get $3
  i32.xor
  local.set $5
  local.get $4
  local.get $5
  i32.const 1
  i32.sub
  i32.and
  local.set $6
  local.get $6
  i64.extend_i32_u
  i32.const 1
  global.set $~argumentsLength
  global.get $assembly/packedarray/bitcount/bitCount
  call_indirect (type $i64_=>_i32)
  local.set $7
  local.get $4
  i64.extend_i32_u
  i32.const 1
  global.set $~argumentsLength
  global.get $assembly/packedarray/bitcount/bitCount
  call_indirect (type $i64_=>_i32)
  local.set $8
  i32.const 0
  local.set $9
  i32.const 0
  local.set $10
  loop $for-loop|1
   local.get $10
   i32.const 255
   i32.and
   local.get $8
   i32.const 255
   i32.and
   i32.lt_u
   local.set $12
   local.get $12
   if
    local.get $10
    i32.const 255
    i32.and
    local.get $7
    i32.const 255
    i32.and
    i32.ne
    if
     local.get $0
     local.get $2
     local.get $9
     call $assembly/packedarray/PackedArrayContext/PackedArrayContext#getIndexAtEntrySlot
     local.set $13
     local.get $13
     i32.const 0
     i32.ne
     if
      local.get $0
      local.get $1
      local.get $10
      i32.const 255
      i32.and
      local.get $13
      call $assembly/packedarray/PackedArrayContext/PackedArrayContext#setIndexAtEntrySlot
     end
     local.get $9
     i32.const 1
     i32.add
     local.set $9
    end
    local.get $10
    i32.const 1
    i32.add
    local.set $10
    br $for-loop|1
   end
  end
 )
 (func $assembly/packedarray/PackedArrayContext/PackedArrayContext#expandEntry (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (param $4 i32) (param $5 i32) (result i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  local.get $0
  local.get $1
  call $assembly/packedarray/PackedArrayContext/PackedArrayContext#getAtShortIndex
  i32.const 65535
  i32.and
  local.set $6
  local.get $6
  local.get $4
  i32.or
  local.set $6
  local.get $6
  i64.extend_i32_s
  i32.const 1
  global.set $~argumentsLength
  global.get $assembly/packedarray/bitcount/bitCount
  call_indirect (type $i64_=>_i32)
  local.set $7
  local.get $3
  local.get $7
  i32.const 255
  i32.and
  i32.ge_s
  if
   i32.const 13520
   i32.const 13408
   i32.const 288
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $7
  i32.const 255
  i32.and
  global.get $assembly/packedarray/PackedArrayContext/NON_LEAF_ENTRY_HEADER_SIZE_IN_SHORTS
  i32.add
  local.set $8
  i32.const 0
  local.set $9
  local.get $5
  if
   local.get $0
   call $assembly/packedarray/PackedArrayContext/PackedArrayContext#newLeafEntry
   local.set $9
  else
   local.get $0
   global.get $assembly/packedarray/PackedArrayContext/NON_LEAF_ENTRY_HEADER_SIZE_IN_SHORTS
   call $assembly/packedarray/PackedArrayContext/PackedArrayContext#newEntry
   local.set $9
   local.get $0
   local.get $9
   i32.const 0
   call $assembly/packedarray/PackedArrayContext/PackedArrayContext#setPackedSlotIndicators
  end
  local.get $9
  local.set $10
  local.get $0
  local.get $8
  i32.const 65535
  i32.and
  call $assembly/packedarray/PackedArrayContext/PackedArrayContext#newEntry
  local.set $11
  local.get $0
  local.get $11
  local.get $6
  call $assembly/packedarray/PackedArrayContext/PackedArrayContext#setPackedSlotIndicators
  local.get $0
  local.get $11
  local.get $3
  local.get $10
  call $assembly/packedarray/PackedArrayContext/PackedArrayContext#setIndexAtEntrySlot
  local.get $0
  local.get $2
  local.get $11
  call $assembly/packedarray/PackedArrayContext/PackedArrayContext#setAtShortIndex
  local.get $0
  local.get $11
  local.get $1
  call $assembly/packedarray/PackedArrayContext/PackedArrayContext#consolidateEntry
  local.get $11
 )
 (func $assembly/packedarray/PackedArrayContext/PackedArrayContext#getPackedIndex (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (result i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  local.get $2
  local.get $0
  i32.load offset=28
  i32.ge_s
  if
   i32.const 13216
   i32.const 13408
   i32.const 374
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  global.get $assembly/packedarray/PackedArrayContext/SET_0_START_INDEX
  local.get $1
  i32.add
  local.set $4
  local.get $0
  local.get $1
  local.get $3
  call $assembly/packedarray/PackedArrayContext/PackedArrayContext#getRootEntry
  local.set $5
  local.get $5
  i32.const 0
  i32.eq
  if
   i32.const -1
   return
  end
  local.get $0
  i32.load offset=32
  local.set $6
  loop $for-loop|0
   local.get $6
   global.get $assembly/packedarray/PackedArrayContext/LEAF_LEVEL_SHIFT
   i32.ge_s
   local.set $7
   local.get $7
   if
    local.get $6
    global.get $assembly/packedarray/PackedArrayContext/LEAF_LEVEL_SHIFT
    i32.eq
    local.set $8
    local.get $0
    local.get $5
    call $assembly/packedarray/PackedArrayContext/PackedArrayContext#getPackedSlotIndicators
    local.set $9
    local.get $2
    local.get $6
    i32.shr_u
    i32.const 15
    i32.and
    local.set $10
    i32.const 1
    local.get $10
    i32.shl
    local.set $11
    local.get $9
    local.get $11
    i32.const 1
    i32.sub
    i32.and
    local.set $12
    local.get $12
    i64.extend_i32_s
    i32.const 1
    global.set $~argumentsLength
    global.get $assembly/packedarray/bitcount/bitCount
    call_indirect (type $i64_=>_i32)
    local.set $13
    local.get $9
    local.get $11
    i32.and
    i32.const 0
    i32.eq
    if
     local.get $3
     i32.eqz
     if
      i32.const -1
      return
     end
     local.get $0
     local.get $5
     local.get $4
     local.get $13
     i32.const 255
     i32.and
     local.get $11
     local.get $8
     call $assembly/packedarray/PackedArrayContext/PackedArrayContext#expandEntry
     local.set $5
    end
    local.get $5
    global.get $assembly/packedarray/PackedArrayContext/NON_LEAF_ENTRY_HEADER_SIZE_IN_SHORTS
    i32.add
    local.get $13
    i32.const 255
    i32.and
    i32.add
    local.set $4
    local.get $0
    local.get $4
    call $assembly/packedarray/PackedArrayContext/PackedArrayContext#getIndexAtShortIndex
    local.set $5
    local.get $6
    i32.const 4
    i32.sub
    local.set $6
    br $for-loop|0
   end
  end
  local.get $5
  i32.const 3
  i32.shl
  local.get $2
  i32.const 7
  i32.and
  i32.add
  local.set $6
  local.get $6
 )
 (func $~lib/typedarray/Uint8Array#__get (param $0 i32) (param $1 i32) (result i32)
  local.get $1
  local.get $0
  i32.load offset=8
  i32.ge_u
  if
   i32.const 12160
   i32.const 12224
   i32.const 152
   i32.const 45
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i32.load offset=4
  local.get $1
  i32.add
  i32.load8_u
 )
 (func $assembly/packedarray/PackedArrayContext/PackedArrayContext#getAtByteIndex (param $0 i32) (param $1 i32) (result i32)
  local.get $0
  i32.load offset=12
  local.get $1
  call $~lib/typedarray/Uint8Array#__get
 )
 (func $assembly/packedarray/PackedArray/PackedArray#get (param $0 i32) (param $1 i32) (result i64)
  (local $2 i64)
  (local $3 i32)
  (local $4 i32)
  (local $5 i64)
  (local $6 i32)
  (local $7 i32)
  i64.const 0
  local.set $2
  i32.const 0
  local.set $3
  loop $for-loop|1
   local.get $3
   i32.const 255
   i32.and
   global.get $assembly/packedarray/PackedArray/NUMBER_OF_SETS
   i32.lt_u
   local.set $6
   local.get $6
   if
    i64.const 0
    local.set $5
    local.get $0
    i32.load
    i32.load8_u
    i32.eqz
    if
     local.get $0
     i32.load
     local.get $1
     call $assembly/packedarray/PackedArrayContext/PackedArrayContext#getAtUnpackedIndex
     return
    end
    local.get $0
    i32.load
    local.get $3
    i32.const 255
    i32.and
    local.get $1
    i32.const 0
    call $assembly/packedarray/PackedArrayContext/PackedArrayContext#getPackedIndex
    local.set $7
    local.get $7
    i32.const 0
    i32.lt_s
    if
     local.get $2
     return
    end
    local.get $0
    i32.load
    local.get $7
    call $assembly/packedarray/PackedArrayContext/PackedArrayContext#getAtByteIndex
    i64.extend_i32_u
    local.get $3
    i32.const 3
    i32.shl
    i32.const 255
    i32.and
    i64.extend_i32_u
    i64.shl
    local.set $5
    local.get $2
    local.get $5
    i64.add
    local.set $2
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|1
   end
  end
  local.get $2
 )
 (func $assembly/packedarray/PackedArray/PackedArray#__get (param $0 i32) (param $1 i32) (result i64)
  local.get $0
  local.get $1
  call $assembly/packedarray/PackedArray/PackedArray#get
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtIndex (param $0 i32) (param $1 i32) (result i64)
  local.get $0
  i32.load offset=160
  local.get $1
  call $assembly/packedarray/PackedArray/PackedArray#__get
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getBucketIndex (param $0 i32) (param $1 i64) (result i32)
  local.get $0
  i32.load offset=104
  local.get $1
  local.get $0
  i64.load offset=128
  i64.or
  i64.clz
  i32.wrap_i64
  i32.sub
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getSubBucketIndex (param $0 i32) (param $1 i64) (param $2 i32) (result i32)
  local.get $1
  local.get $2
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shr_u
  i32.wrap_i64
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#computeCountsArrayIndex (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  (local $3 i32)
  (local $4 i32)
  local.get $2
  local.get $0
  i32.load offset=48
  i32.lt_s
  i32.eqz
  if
   i32.const 0
   i32.const 8992
   i32.const 247
   i32.const 5
   call $~lib/builtins/abort
   unreachable
  end
  local.get $1
  i32.const 0
  i32.eq
  if (result i32)
   i32.const 1
  else
   local.get $2
   local.get $0
   i32.load offset=116
   i32.ge_s
  end
  i32.eqz
  if
   i32.const 0
   i32.const 8992
   i32.const 248
   i32.const 5
   call $~lib/builtins/abort
   unreachable
  end
  local.get $1
  i32.const 1
  i32.add
  i32.const 1
  local.get $0
  i32.load offset=108
  i32.shl
  i32.mul
  local.set $3
  local.get $2
  local.get $0
  i32.load offset=116
  i32.sub
  local.set $4
  local.get $3
  local.get $4
  i32.add
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#countsArrayIndex (param $0 i32) (param $1 i64) (result i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i64.const 0
  i64.lt_u
  if
   i32.const 11920
   i32.const 8992
   i32.const 239
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getBucketIndex
  local.set $2
  local.get $0
  local.get $1
  local.get $2
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getSubBucketIndex
  local.set $3
  local.get $0
  local.get $2
  local.get $3
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#computeCountsArrayIndex
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#valueFromIndexes (param $0 i32) (param $1 i32) (param $2 i32) (result i64)
  local.get $2
  i64.extend_i32_s
  local.get $1
  local.get $0
  i32.load offset=112
  i32.add
  i64.extend_i32_s
  i64.shl
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#valueFromIndex (param $0 i32) (param $1 i32) (result i64)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  local.get $0
  i32.load offset=108
  i32.shr_s
  i32.const 1
  i32.sub
  local.set $2
  local.get $1
  local.get $0
  i32.load offset=116
  i32.const 1
  i32.sub
  i32.and
  local.get $0
  i32.load offset=116
  i32.add
  local.set $3
  local.get $2
  i32.const 0
  i32.lt_s
  if
   local.get $3
   local.get $0
   i32.load offset=116
   i32.sub
   local.set $3
   i32.const 0
   local.set $2
  end
  local.get $0
  local.get $2
  local.get $3
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#valueFromIndexes
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#add<assembly/packedarray/PackedArray/PackedArray,u64> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i64)
  (local $4 i32)
  (local $5 i32)
  (local $6 i64)
  (local $7 i64)
  (local $8 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $0
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#valueFromIndex
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#highestEquivalentValue
  local.set $2
  local.get $2
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 13040
    i32.const 8992
    i32.const 639
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   i64.const 0
   local.set $3
   i32.const 0
   local.set $4
   loop $for-loop|0
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtIndex
     local.set $6
     local.get $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $4
      local.get $6
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#addToCountAtIndex
      local.get $3
      local.get $6
      i64.add
      local.set $3
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $3
   i64.add
   i64.store offset=168
   local.get $0
   local.get $0
   i64.load offset=144
   local.tee $6
   local.get $1
   i64.load offset=144
   local.tee $7
   local.get $6
   local.get $7
   i64.gt_u
   select
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#updatedMaxValue
   local.get $0
   local.get $0
   i64.load offset=152
   local.tee $6
   local.get $1
   i64.load offset=152
   local.tee $7
   local.get $6
   local.get $7
   i64.lt_u
   select
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#updateMinNonZeroValue
  else
   local.get $1
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#countsArrayIndex
   local.set $4
   local.get $1
   local.get $4
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtIndex
   local.set $3
   local.get $0
   local.get $3
   local.get $1
   local.get $4
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#valueFromIndex
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordCountAtValue
   i32.const 0
   local.set $5
   loop $for-loop|1
    local.get $5
    local.get $4
    i32.lt_s
    local.set $8
    local.get $8
    if
     local.get $1
     local.get $5
     call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtIndex
     local.set $3
     local.get $3
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $3
      local.get $1
      local.get $5
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#valueFromIndex
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordCountAtValue
     end
     local.get $5
     i32.const 1
     i32.add
     local.set $5
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=64
  local.tee $3
  local.get $1
  i64.load offset=64
  local.tee $6
  local.get $3
  local.get $6
  i64.lt_u
  select
  i64.store offset=64
  local.get $0
  local.get $0
  i64.load offset=72
  local.tee $3
  local.get $1
  i64.load offset=72
  local.tee $6
  local.get $3
  local.get $6
  i64.gt_u
  select
  i64.store offset=72
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#addPackedHistogram (param $0 i32) (param $1 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#add<assembly/packedarray/PackedArray/PackedArray,u64>
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtValue (param $0 i32) (param $1 i64) (result i64)
  (local $2 i32)
  (local $3 i32)
  i32.const 0
  local.tee $2
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex
  local.tee $3
  local.get $2
  local.get $3
  i32.gt_s
  select
  local.tee $2
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $3
  local.get $2
  local.get $3
  i32.lt_s
  select
  local.set $2
  local.get $0
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtIndex
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#establishInternalTackingValues (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i64)
  (local $5 i32)
  (local $6 i32)
  (local $7 i64)
  local.get $0
  i64.const 0
  i64.store offset=144
  local.get $0
  global.get $~lib/builtins/u64.MAX_VALUE
  i64.store offset=152
  i32.const -1
  local.set $2
  i32.const -1
  local.set $3
  i64.const 0
  local.set $4
  i32.const 0
  local.set $5
  loop $for-loop|0
   local.get $5
   local.get $1
   i32.lt_s
   local.set $6
   local.get $6
   if
    local.get $0
    local.get $5
    call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtIndex
    local.set $7
    local.get $7
    i64.const 0
    i64.gt_u
    if
     local.get $4
     local.get $7
     i64.add
     local.set $4
     local.get $5
     local.set $2
     local.get $3
     i32.const -1
     i32.eq
     if (result i32)
      local.get $5
      i32.const 0
      i32.ne
     else
      i32.const 0
     end
     if
      local.get $5
      local.set $3
     end
    end
    local.get $5
    i32.const 1
    i32.add
    local.set $5
    br $for-loop|0
   end
  end
  local.get $2
  i32.const 0
  i32.ge_s
  if
   local.get $0
   local.get $0
   local.get $0
   local.get $2
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#valueFromIndex
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#highestEquivalentValue
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#updatedMaxValue
  end
  local.get $3
  i32.const 0
  i32.ge_s
  if
   local.get $0
   local.get $0
   local.get $3
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#valueFromIndex
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#updateMinNonZeroValue
  end
  local.get $0
  local.get $4
  i64.store offset=168
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#establishInternalTackingValues@varargs (param $0 i32) (param $1 i32)
  block $1of1
   block $0of1
    block $outOfRange
     global.get $~argumentsLength
     br_table $0of1 $1of1 $outOfRange
    end
    unreachable
   end
   local.get $0
   i32.load offset=52
   local.set $1
  end
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#establishInternalTackingValues
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i64)
  (local $4 i32)
  (local $5 i32)
  (local $6 i64)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  (local $15 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#valueFromIndex
  local.set $2
  local.get $2
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 13040
    i32.const 8992
    i32.const 748
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   i64.const 0
   local.set $3
   i32.const 0
   local.set $4
   loop $for-loop|0
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtIndex
     local.set $6
     local.get $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $4
      i64.const 0
      local.get $6
      i64.sub
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#addToCountAtIndex
      local.get $3
      local.get $6
      i64.add
      local.set $3
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $3
   i64.sub
   i64.store offset=168
  else
   i32.const 0
   local.set $4
   loop $for-loop|1
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtIndex
     local.set $3
     local.get $3
     i64.const 0
     i64.gt_u
     if
      local.get $1
      local.get $4
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#valueFromIndex
      local.set $6
      local.get $0
      local.get $6
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtValue
      local.get $3
      i64.lt_u
      if
       i32.const 13648
       local.get $3
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $7
       call $~lib/string/String.__concat
       local.tee $8
       i32.const 13712
       call $~lib/string/String.__concat
       local.tee $9
       local.get $6
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $10
       call $~lib/string/String.__concat
       local.tee $11
       i32.const 13760
       call $~lib/string/String.__concat
       local.tee $12
       local.get $0
       local.get $6
       call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtValue
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $13
       call $~lib/string/String.__concat
       local.tee $14
       i32.const 13840
       call $~lib/string/String.__concat
       local.tee $15
       i32.const 8992
       i32.const 777
       i32.const 13
       call $~lib/builtins/abort
       unreachable
      end
      local.get $0
      i64.const 0
      local.get $3
      i64.sub
      local.get $6
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordCountAtValue
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=144
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtValue
  i64.const 0
  i64.le_u
  if (result i32)
   i32.const 1
  else
   local.get $0
   local.get $0
   i64.load offset=152
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtValue
   i64.const 0
   i64.le_u
  end
  if
   local.get $0
   i32.const 0
   global.set $~argumentsLength
   i32.const 0
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#establishInternalTackingValues@varargs
  end
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#subtractHistogram8 (param $0 i32) (param $1 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i64)
  (local $4 i32)
  (local $5 i32)
  (local $6 i64)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  (local $15 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#valueFromIndex
  local.set $2
  local.get $2
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 13040
    i32.const 8992
    i32.const 748
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   i64.const 0
   local.set $3
   i32.const 0
   local.set $4
   loop $for-loop|0
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtIndex
     local.set $6
     local.get $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $4
      i64.const 0
      local.get $6
      i64.sub
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#addToCountAtIndex
      local.get $3
      local.get $6
      i64.add
      local.set $3
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $3
   i64.sub
   i64.store offset=168
  else
   i32.const 0
   local.set $4
   loop $for-loop|1
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtIndex
     local.set $3
     local.get $3
     i64.const 0
     i64.gt_u
     if
      local.get $1
      local.get $4
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#valueFromIndex
      local.set $6
      local.get $0
      local.get $6
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtValue
      local.get $3
      i64.lt_u
      if
       i32.const 13648
       local.get $3
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $7
       call $~lib/string/String.__concat
       local.tee $8
       i32.const 13712
       call $~lib/string/String.__concat
       local.tee $9
       local.get $6
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $10
       call $~lib/string/String.__concat
       local.tee $11
       i32.const 13760
       call $~lib/string/String.__concat
       local.tee $12
       local.get $0
       local.get $6
       call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtValue
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $13
       call $~lib/string/String.__concat
       local.tee $14
       i32.const 13840
       call $~lib/string/String.__concat
       local.tee $15
       i32.const 8992
       i32.const 777
       i32.const 13
       call $~lib/builtins/abort
       unreachable
      end
      local.get $0
      i64.const 0
      local.get $3
      i64.sub
      local.get $6
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordCountAtValue
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=144
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtValue
  i64.const 0
  i64.le_u
  if (result i32)
   i32.const 1
  else
   local.get $0
   local.get $0
   i64.load offset=152
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtValue
   i64.const 0
   i64.le_u
  end
  if
   local.get $0
   i32.const 0
   global.set $~argumentsLength
   i32.const 0
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#establishInternalTackingValues@varargs
  end
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#subtractHistogram16 (param $0 i32) (param $1 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i64)
  (local $4 i32)
  (local $5 i32)
  (local $6 i64)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  (local $15 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#valueFromIndex
  local.set $2
  local.get $2
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 13040
    i32.const 8992
    i32.const 748
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   i64.const 0
   local.set $3
   i32.const 0
   local.set $4
   loop $for-loop|0
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtIndex
     local.set $6
     local.get $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $4
      i64.const 0
      local.get $6
      i64.sub
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#addToCountAtIndex
      local.get $3
      local.get $6
      i64.add
      local.set $3
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $3
   i64.sub
   i64.store offset=168
  else
   i32.const 0
   local.set $4
   loop $for-loop|1
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtIndex
     local.set $3
     local.get $3
     i64.const 0
     i64.gt_u
     if
      local.get $1
      local.get $4
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#valueFromIndex
      local.set $6
      local.get $0
      local.get $6
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtValue
      local.get $3
      i64.lt_u
      if
       i32.const 13648
       local.get $3
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $7
       call $~lib/string/String.__concat
       local.tee $8
       i32.const 13712
       call $~lib/string/String.__concat
       local.tee $9
       local.get $6
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $10
       call $~lib/string/String.__concat
       local.tee $11
       i32.const 13760
       call $~lib/string/String.__concat
       local.tee $12
       local.get $0
       local.get $6
       call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtValue
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $13
       call $~lib/string/String.__concat
       local.tee $14
       i32.const 13840
       call $~lib/string/String.__concat
       local.tee $15
       i32.const 8992
       i32.const 777
       i32.const 13
       call $~lib/builtins/abort
       unreachable
      end
      local.get $0
      i64.const 0
      local.get $3
      i64.sub
      local.get $6
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordCountAtValue
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=144
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtValue
  i64.const 0
  i64.le_u
  if (result i32)
   i32.const 1
  else
   local.get $0
   local.get $0
   i64.load offset=152
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtValue
   i64.const 0
   i64.le_u
  end
  if
   local.get $0
   i32.const 0
   global.set $~argumentsLength
   i32.const 0
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#establishInternalTackingValues@varargs
  end
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#subtractHistogram32 (param $0 i32) (param $1 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i64)
  (local $4 i32)
  (local $5 i32)
  (local $6 i64)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  (local $15 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#valueFromIndex
  local.set $2
  local.get $2
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 13040
    i32.const 8992
    i32.const 748
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   i64.const 0
   local.set $3
   i32.const 0
   local.set $4
   loop $for-loop|0
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtIndex
     local.set $6
     local.get $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $4
      i64.const 0
      local.get $6
      i64.sub
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#addToCountAtIndex
      local.get $3
      local.get $6
      i64.add
      local.set $3
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $3
   i64.sub
   i64.store offset=168
  else
   i32.const 0
   local.set $4
   loop $for-loop|1
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtIndex
     local.set $3
     local.get $3
     i64.const 0
     i64.gt_u
     if
      local.get $1
      local.get $4
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#valueFromIndex
      local.set $6
      local.get $0
      local.get $6
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtValue
      local.get $3
      i64.lt_u
      if
       i32.const 13648
       local.get $3
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $7
       call $~lib/string/String.__concat
       local.tee $8
       i32.const 13712
       call $~lib/string/String.__concat
       local.tee $9
       local.get $6
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $10
       call $~lib/string/String.__concat
       local.tee $11
       i32.const 13760
       call $~lib/string/String.__concat
       local.tee $12
       local.get $0
       local.get $6
       call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtValue
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $13
       call $~lib/string/String.__concat
       local.tee $14
       i32.const 13840
       call $~lib/string/String.__concat
       local.tee $15
       i32.const 8992
       i32.const 777
       i32.const 13
       call $~lib/builtins/abort
       unreachable
      end
      local.get $0
      i64.const 0
      local.get $3
      i64.sub
      local.get $6
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordCountAtValue
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=144
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtValue
  i64.const 0
  i64.le_u
  if (result i32)
   i32.const 1
  else
   local.get $0
   local.get $0
   i64.load offset=152
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtValue
   i64.const 0
   i64.le_u
  end
  if
   local.get $0
   i32.const 0
   global.set $~argumentsLength
   i32.const 0
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#establishInternalTackingValues@varargs
  end
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#subtractHistogram64 (param $0 i32) (param $1 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#subtract<assembly/packedarray/PackedArray/PackedArray,u64> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i64)
  (local $4 i32)
  (local $5 i32)
  (local $6 i64)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  (local $15 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#valueFromIndex
  local.set $2
  local.get $2
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 13040
    i32.const 8992
    i32.const 748
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   i64.const 0
   local.set $3
   i32.const 0
   local.set $4
   loop $for-loop|0
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtIndex
     local.set $6
     local.get $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $4
      i64.const 0
      local.get $6
      i64.sub
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#addToCountAtIndex
      local.get $3
      local.get $6
      i64.add
      local.set $3
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $3
   i64.sub
   i64.store offset=168
  else
   i32.const 0
   local.set $4
   loop $for-loop|1
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtIndex
     local.set $3
     local.get $3
     i64.const 0
     i64.gt_u
     if
      local.get $1
      local.get $4
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#valueFromIndex
      local.set $6
      local.get $0
      local.get $6
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtValue
      local.get $3
      i64.lt_u
      if
       i32.const 13648
       local.get $3
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $7
       call $~lib/string/String.__concat
       local.tee $8
       i32.const 13712
       call $~lib/string/String.__concat
       local.tee $9
       local.get $6
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $10
       call $~lib/string/String.__concat
       local.tee $11
       i32.const 13760
       call $~lib/string/String.__concat
       local.tee $12
       local.get $0
       local.get $6
       call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtValue
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $13
       call $~lib/string/String.__concat
       local.tee $14
       i32.const 13840
       call $~lib/string/String.__concat
       local.tee $15
       i32.const 8992
       i32.const 777
       i32.const 13
       call $~lib/builtins/abort
       unreachable
      end
      local.get $0
      i64.const 0
      local.get $3
      i64.sub
      local.get $6
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#recordCountAtValue
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=144
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtValue
  i64.const 0
  i64.le_u
  if (result i32)
   i32.const 1
  else
   local.get $0
   local.get $0
   i64.load offset=152
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtValue
   i64.const 0
   i64.le_u
  end
  if
   local.get $0
   i32.const 0
   global.set $~argumentsLength
   i32.const 0
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#establishInternalTackingValues@varargs
  end
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#subtractPackedHistogram (param $0 i32) (param $1 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#subtract<assembly/packedarray/PackedArray/PackedArray,u64>
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $~lib/typedarray/Uint64Array#constructor (param $0 i32) (param $1 i32) (result i32)
  local.get $0
  i32.eqz
  if
   i32.const 12
   i32.const 33
   call $~lib/rt/tlsf/__alloc
   call $~lib/rt/pure/__retain
   local.set $0
  end
  local.get $0
  local.get $1
  i32.const 3
  call $~lib/arraybuffer/ArrayBufferView#constructor
  local.set $0
  local.get $0
 )
 (func $~lib/typedarray/Uint32Array#constructor (param $0 i32) (param $1 i32) (result i32)
  local.get $0
  i32.eqz
  if
   i32.const 12
   i32.const 25
   call $~lib/rt/tlsf/__alloc
   call $~lib/rt/pure/__retain
   local.set $0
  end
  local.get $0
  local.get $1
  i32.const 2
  call $~lib/arraybuffer/ArrayBufferView#constructor
  local.set $0
  local.get $0
 )
 (func $assembly/ByteBuffer/ByteBuffer#constructor (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  i32.eqz
  if
   i32.const 24
   i32.const 48
   call $~lib/rt/tlsf/__alloc
   call $~lib/rt/pure/__retain
   local.set $0
  end
  local.get $0
  i32.const 0
  i32.store
  local.get $0
  i32.const 0
  i32.store offset=4
  local.get $0
  i32.const 0
  i32.store offset=8
  local.get $0
  i32.const 0
  i32.store offset=12
  local.get $0
  i32.const 0
  i32.store offset=16
  local.get $0
  i32.const 0
  i32.store offset=20
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  i32.const 0
  i32.store
  local.get $0
  local.tee $2
  local.get $1
  local.tee $3
  local.get $2
  i32.load offset=4
  local.tee $4
  i32.ne
  if
   local.get $3
   call $~lib/rt/pure/__retain
   local.set $3
   local.get $4
   call $~lib/rt/pure/__release
  end
  local.get $3
  i32.store offset=4
  local.get $0
  local.tee $4
  i32.const 0
  i32.const 1
  call $~lib/typedarray/Uint64Array#constructor
  local.set $3
  local.get $4
  i32.load offset=8
  call $~lib/rt/pure/__release
  local.get $3
  i32.store offset=8
  local.get $0
  local.tee $2
  i32.const 0
  i32.const 1
  call $~lib/typedarray/Uint32Array#constructor
  local.set $3
  local.get $2
  i32.load offset=12
  call $~lib/rt/pure/__release
  local.get $3
  i32.store offset=12
  local.get $0
  local.tee $4
  local.get $0
  i32.load offset=12
  i32.load
  i32.const 0
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Uint8Array.wrap@varargs
  local.set $3
  local.get $4
  i32.load offset=16
  call $~lib/rt/pure/__release
  local.get $3
  i32.store offset=16
  local.get $0
  local.tee $2
  local.get $0
  i32.load offset=8
  i32.load
  i32.const 0
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Uint8Array.wrap@varargs
  local.set $3
  local.get $2
  i32.load offset=20
  call $~lib/rt/pure/__release
  local.get $3
  i32.store offset=20
  local.get $1
  call $~lib/rt/pure/__release
  local.get $0
 )
 (func $assembly/ByteBuffer/ByteBuffer.allocate (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  i32.const 0
  i32.const 0
  local.get $0
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $1
  call $assembly/ByteBuffer/ByteBuffer#constructor
  local.set $2
  local.get $1
  call $~lib/rt/pure/__release
  local.get $2
 )
 (func $~lib/typedarray/Uint32Array#__uset (param $0 i32) (param $1 i32) (param $2 i32)
  local.get $0
  i32.load offset=4
  local.get $1
  i32.const 2
  i32.shl
  i32.add
  local.get $2
  i32.store
 )
 (func $~lib/typedarray/Uint8Array#reverse (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  local.get $0
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $1
  i32.load offset=4
  local.set $2
  i32.const 0
  local.set $3
  local.get $1
  call $~lib/typedarray/Uint8Array#get:length
  i32.const 1
  i32.sub
  local.set $4
  loop $for-loop|0
   local.get $3
   local.get $4
   i32.lt_u
   local.set $5
   local.get $5
   if
    local.get $2
    local.get $3
    i32.const 0
    i32.shl
    i32.add
    local.set $6
    local.get $2
    local.get $4
    i32.const 0
    i32.shl
    i32.add
    local.set $7
    local.get $6
    i32.load8_u
    local.set $8
    local.get $6
    local.get $7
    i32.load8_u
    i32.store8
    local.get $7
    local.get $8
    i32.store8
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    local.get $4
    i32.const 1
    i32.sub
    local.set $4
    br $for-loop|0
   end
  end
  local.get $1
 )
 (func $assembly/ByteBuffer/ByteBuffer#putInt32 (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  i32.load offset=4
  call $~lib/typedarray/Uint8Array#get:length
  local.get $0
  i32.load
  i32.sub
  i32.const 4
  i32.lt_s
  if
   local.get $0
   i32.load offset=4
   call $~lib/rt/pure/__retain
   local.set $2
   local.get $0
   local.tee $3
   i32.const 0
   local.get $0
   i32.load offset=4
   call $~lib/typedarray/Uint8Array#get:length
   i32.const 1
   i32.shl
   i32.const 4
   i32.add
   call $~lib/typedarray/Uint8Array#constructor
   local.set $4
   local.get $3
   i32.load offset=4
   call $~lib/rt/pure/__release
   local.get $4
   i32.store offset=4
   local.get $0
   i32.load offset=4
   local.get $2
   i32.const 0
   call $~lib/typedarray/Uint8Array#set<~lib/typedarray/Uint8Array>
   local.get $2
   call $~lib/rt/pure/__release
  end
  local.get $0
  i32.load offset=12
  i32.const 0
  local.get $1
  call $~lib/typedarray/Uint32Array#__uset
  local.get $0
  i32.load offset=4
  local.get $0
  i32.load offset=16
  call $~lib/typedarray/Uint8Array#reverse
  local.tee $2
  local.get $0
  i32.load
  call $~lib/typedarray/Uint8Array#set<~lib/typedarray/Uint8Array>
  local.get $0
  local.get $0
  i32.load
  i32.const 4
  i32.add
  i32.store
  local.get $2
  call $~lib/rt/pure/__release
 )
 (func $~lib/typedarray/Uint64Array#__uset (param $0 i32) (param $1 i32) (param $2 i64)
  local.get $0
  i32.load offset=4
  local.get $1
  i32.const 3
  i32.shl
  i32.add
  local.get $2
  i64.store
 )
 (func $assembly/ByteBuffer/ByteBuffer#putInt64 (param $0 i32) (param $1 i64)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  i32.load offset=4
  call $~lib/typedarray/Uint8Array#get:length
  local.get $0
  i32.load
  i32.sub
  i32.const 8
  i32.lt_s
  if
   local.get $0
   i32.load offset=4
   call $~lib/rt/pure/__retain
   local.set $2
   local.get $0
   local.tee $3
   i32.const 0
   local.get $0
   i32.load offset=4
   call $~lib/typedarray/Uint8Array#get:length
   i32.const 1
   i32.shl
   i32.const 8
   i32.add
   call $~lib/typedarray/Uint8Array#constructor
   local.set $4
   local.get $3
   i32.load offset=4
   call $~lib/rt/pure/__release
   local.get $4
   i32.store offset=4
   local.get $0
   i32.load offset=4
   local.get $2
   i32.const 0
   call $~lib/typedarray/Uint8Array#set<~lib/typedarray/Uint8Array>
   local.get $2
   call $~lib/rt/pure/__release
  end
  local.get $0
  i32.load offset=8
  i32.const 0
  local.get $1
  call $~lib/typedarray/Uint64Array#__uset
  local.get $0
  i32.load offset=4
  local.get $0
  i32.load offset=20
  call $~lib/typedarray/Uint8Array#reverse
  local.tee $2
  local.get $0
  i32.load
  call $~lib/typedarray/Uint8Array#set<~lib/typedarray/Uint8Array>
  local.get $0
  local.get $0
  i32.load
  i32.const 8
  i32.add
  i32.store
  local.get $2
  call $~lib/rt/pure/__release
 )
 (func $~lib/util/number/itoa32 (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  local.get $1
  i32.const 2
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $1
   i32.const 36
   i32.gt_s
  end
  if
   i32.const 400
   i32.const 528
   i32.const 367
   i32.const 5
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i32.eqz
  if
   i32.const 592
   return
  end
  local.get $0
  i32.const 31
  i32.shr_u
  local.set $2
  local.get $2
  if
   i32.const 0
   local.get $0
   i32.sub
   local.set $0
  end
  i32.const 0
  local.set $3
  local.get $1
  i32.const 10
  i32.eq
  if
   local.get $0
   call $~lib/util/number/decimalCount32
   local.get $2
   i32.add
   local.set $4
   local.get $4
   i32.const 1
   i32.shl
   i32.const 1
   call $~lib/rt/tlsf/__alloc
   local.set $3
   local.get $3
   local.set $7
   local.get $0
   local.set $6
   local.get $4
   local.set $5
   i32.const 0
   i32.const 1
   i32.ge_s
   drop
   local.get $7
   local.get $6
   local.get $5
   call $~lib/util/number/utoa32_dec_lut
  else
   local.get $1
   i32.const 16
   i32.eq
   if
    i32.const 31
    local.get $0
    i32.clz
    i32.sub
    i32.const 2
    i32.shr_s
    i32.const 1
    i32.add
    local.get $2
    i32.add
    local.set $4
    local.get $4
    i32.const 1
    i32.shl
    i32.const 1
    call $~lib/rt/tlsf/__alloc
    local.set $3
    local.get $3
    local.set $7
    local.get $0
    local.set $6
    local.get $4
    local.set $5
    i32.const 0
    i32.const 1
    i32.ge_s
    drop
    local.get $7
    local.get $6
    i64.extend_i32_u
    local.get $5
    call $~lib/util/number/utoa_hex_lut
   else
    local.get $0
    local.set $4
    local.get $4
    i64.extend_i32_u
    local.get $1
    call $~lib/util/number/ulog_base
    local.get $2
    i32.add
    local.set $7
    local.get $7
    i32.const 1
    i32.shl
    i32.const 1
    call $~lib/rt/tlsf/__alloc
    local.set $3
    local.get $3
    local.get $4
    i64.extend_i32_u
    local.get $7
    local.get $1
    call $~lib/util/number/utoa64_any_core
   end
  end
  local.get $2
  if
   local.get $3
   i32.const 45
   i32.store16
  end
  local.get $3
  call $~lib/rt/pure/__retain
 )
 (func $~lib/number/I32#toString (param $0 i32) (param $1 i32) (result i32)
  local.get $0
  local.get $1
  call $~lib/util/number/itoa32
 )
 (func $assembly/ByteBuffer/ByteBuffer#put (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  i32.load
  local.get $0
  i32.load offset=4
  call $~lib/typedarray/Uint8Array#get:length
  i32.eq
  if
   local.get $0
   i32.load offset=4
   call $~lib/rt/pure/__retain
   local.set $2
   local.get $0
   local.tee $3
   i32.const 0
   local.get $0
   i32.load offset=4
   call $~lib/typedarray/Uint8Array#get:length
   i32.const 1
   i32.shl
   call $~lib/typedarray/Uint8Array#constructor
   local.set $4
   local.get $3
   i32.load offset=4
   call $~lib/rt/pure/__release
   local.get $4
   i32.store offset=4
   local.get $0
   i32.load offset=4
   local.get $2
   i32.const 0
   call $~lib/typedarray/Uint8Array#set<~lib/typedarray/Uint8Array>
   local.get $2
   call $~lib/rt/pure/__release
  end
  local.get $0
  i32.load offset=4
  local.get $0
  i32.load
  local.get $1
  i32.const 255
  i32.and
  call $~lib/typedarray/Uint8Array#__uset
  local.get $0
  local.get $0
  i32.load
  i32.const 1
  i32.add
  i32.store
 )
 (func $assembly/ZigZagEncoding/ZigZagEncoding.encode (param $0 i32) (param $1 i64)
  local.get $0
  call $~lib/rt/pure/__retain
  local.set $0
  local.get $1
  i64.const 1
  i64.shl
  local.get $1
  i64.const 63
  i64.shr_s
  i64.xor
  local.set $1
  local.get $1
  i64.const 7
  i64.shr_u
  i64.const 0
  i64.eq
  if
   local.get $0
   local.get $1
   i32.wrap_i64
   call $assembly/ByteBuffer/ByteBuffer#put
  else
   local.get $0
   local.get $1
   i64.const 127
   i64.and
   i64.const 128
   i64.or
   i32.wrap_i64
   call $assembly/ByteBuffer/ByteBuffer#put
   local.get $1
   i64.const 14
   i64.shr_u
   i64.const 0
   i64.eq
   if
    local.get $0
    local.get $1
    i64.const 7
    i64.shr_u
    i32.wrap_i64
    call $assembly/ByteBuffer/ByteBuffer#put
   else
    local.get $0
    local.get $1
    i64.const 7
    i64.shr_u
    i64.const 128
    i64.or
    i32.wrap_i64
    call $assembly/ByteBuffer/ByteBuffer#put
    local.get $1
    i64.const 21
    i64.shr_u
    i64.const 0
    i64.eq
    if
     local.get $0
     local.get $1
     i64.const 14
     i64.shr_u
     i32.wrap_i64
     call $assembly/ByteBuffer/ByteBuffer#put
    else
     local.get $0
     local.get $1
     i64.const 14
     i64.shr_u
     i64.const 128
     i64.or
     i32.wrap_i64
     call $assembly/ByteBuffer/ByteBuffer#put
     local.get $1
     i64.const 28
     i64.shr_u
     i64.const 0
     i64.eq
     if
      local.get $0
      local.get $1
      i64.const 21
      i64.shr_u
      i32.wrap_i64
      call $assembly/ByteBuffer/ByteBuffer#put
     else
      local.get $0
      local.get $1
      i64.const 21
      i64.shr_u
      i64.const 128
      i64.or
      i32.wrap_i64
      call $assembly/ByteBuffer/ByteBuffer#put
      local.get $1
      i64.const 35
      i64.shr_u
      i64.const 0
      i64.eq
      if
       local.get $0
       local.get $1
       i64.const 28
       i64.shr_u
       i32.wrap_i64
       call $assembly/ByteBuffer/ByteBuffer#put
      else
       local.get $0
       local.get $1
       i64.const 28
       i64.shr_u
       i64.const 128
       i64.or
       i32.wrap_i64
       call $assembly/ByteBuffer/ByteBuffer#put
       local.get $1
       i64.const 42
       i64.shr_u
       i64.const 0
       i64.eq
       if
        local.get $0
        local.get $1
        i64.const 35
        i64.shr_u
        i32.wrap_i64
        call $assembly/ByteBuffer/ByteBuffer#put
       else
        local.get $0
        local.get $1
        i64.const 35
        i64.shr_u
        i64.const 128
        i64.or
        i32.wrap_i64
        call $assembly/ByteBuffer/ByteBuffer#put
        local.get $1
        i64.const 49
        i64.shr_u
        i64.const 0
        i64.eq
        if
         local.get $0
         local.get $1
         i64.const 42
         i64.shr_u
         i32.wrap_i64
         call $assembly/ByteBuffer/ByteBuffer#put
        else
         local.get $0
         local.get $1
         i64.const 42
         i64.shr_u
         i64.const 128
         i64.or
         i32.wrap_i64
         call $assembly/ByteBuffer/ByteBuffer#put
         local.get $1
         i64.const 56
         i64.shr_u
         i64.const 0
         i64.eq
         if
          local.get $0
          local.get $1
          i64.const 49
          i64.shr_u
          i32.wrap_i64
          call $assembly/ByteBuffer/ByteBuffer#put
         else
          local.get $0
          local.get $1
          i64.const 49
          i64.shr_u
          i64.const 128
          i64.or
          i32.wrap_i64
          call $assembly/ByteBuffer/ByteBuffer#put
          local.get $0
          local.get $1
          i64.const 56
          i64.shr_u
          i32.wrap_i64
          call $assembly/ByteBuffer/ByteBuffer#put
         end
        end
       end
      end
     end
    end
   end
  end
  local.get $0
  call $~lib/rt/pure/__release
 )
 (func $assembly/encoding/fillBufferFromCountsArray<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8> (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i64)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  (local $15 i32)
  (local $16 i32)
  (local $17 i32)
  local.get $0
  call $~lib/rt/pure/__retain
  local.set $0
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $0
  i64.load offset=144
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex
  i32.const 1
  i32.add
  local.set $2
  i32.const 0
  local.set $3
  loop $while-continue|0
   local.get $3
   local.get $2
   i32.lt_s
   local.set $4
   local.get $4
   if
    local.get $0
    local.get $3
    local.tee $5
    i32.const 1
    i32.add
    local.set $3
    local.get $5
    call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtIndex
    local.set $6
    local.get $6
    i64.const 0
    i64.lt_u
    if
     i32.const 13872
     local.get $6
     i32.const 10
     call $~lib/number/U64#toString
     local.tee $5
     call $~lib/string/String.__concat
     local.tee $7
     i32.const 14000
     call $~lib/string/String.__concat
     local.tee $8
     local.get $3
     i32.const 10
     call $~lib/number/I32#toString
     local.tee $9
     call $~lib/string/String.__concat
     local.tee $10
     i32.const 14048
     call $~lib/string/String.__concat
     local.tee $11
     local.get $0
     local.get $0
     local.get $3
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#valueFromIndex
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#lowestEquivalentValue
     i32.const 10
     call $~lib/number/U64#toString
     local.tee $12
     call $~lib/string/String.__concat
     local.tee $13
     i32.const 14144
     call $~lib/string/String.__concat
     local.tee $14
     local.get $0
     local.get $0
     local.get $3
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#valueFromIndex
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#nextNonEquivalentValue
     i32.const 10
     call $~lib/number/U64#toString
     local.tee $15
     call $~lib/string/String.__concat
     local.tee $16
     i32.const 13840
     call $~lib/string/String.__concat
     local.tee $17
     i32.const 14176
     i32.const 31
     i32.const 7
     call $~lib/builtins/abort
     unreachable
    end
    i32.const 0
    local.set $17
    local.get $6
    i64.const 0
    i64.eq
    if
     i32.const 1
     local.set $17
     loop $while-continue|1
      local.get $3
      local.get $2
      i32.lt_s
      if (result i32)
       local.get $0
       local.get $3
       call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtIndex
       i64.const 0
       i64.eq
      else
       i32.const 0
      end
      local.set $16
      local.get $16
      if
       local.get $17
       i32.const 1
       i32.add
       local.set $17
       local.get $3
       i32.const 1
       i32.add
       local.set $3
       br $while-continue|1
      end
     end
    end
    local.get $17
    i32.const 1
    i32.gt_s
    if
     local.get $1
     i32.const 0
     local.get $17
     i32.sub
     i64.extend_i32_s
     call $assembly/ZigZagEncoding/ZigZagEncoding.encode
    else
     local.get $1
     local.get $6
     call $assembly/ZigZagEncoding/ZigZagEncoding.encode
    end
    br $while-continue|0
   end
  end
  local.get $0
  call $~lib/rt/pure/__release
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/encoding/encodeIntoByteBuffer<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8> (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  local.get $0
  call $~lib/rt/pure/__retain
  local.set $0
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $1
  i32.load
  local.set $2
  local.get $1
  global.get $assembly/encoding/encodingCookie
  call $assembly/ByteBuffer/ByteBuffer#putInt32
  local.get $1
  i32.const 0
  call $assembly/ByteBuffer/ByteBuffer#putInt32
  local.get $1
  i32.const 1
  call $assembly/ByteBuffer/ByteBuffer#putInt32
  local.get $1
  local.get $0
  i32.load8_u offset=32
  call $assembly/ByteBuffer/ByteBuffer#putInt32
  local.get $1
  local.get $0
  i64.load offset=24
  call $assembly/ByteBuffer/ByteBuffer#putInt64
  local.get $1
  local.get $0
  i64.load offset=16
  call $assembly/ByteBuffer/ByteBuffer#putInt64
  local.get $1
  i64.const 1
  call $assembly/ByteBuffer/ByteBuffer#putInt64
  local.get $1
  i32.load
  local.set $3
  local.get $0
  local.get $1
  call $assembly/encoding/fillBufferFromCountsArray<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>
  local.get $1
  i32.load
  local.set $4
  local.get $1
  local.get $2
  i32.const 4
  i32.add
  i32.store
  local.get $1
  local.get $4
  local.get $3
  i32.sub
  call $assembly/ByteBuffer/ByteBuffer#putInt32
  local.get $1
  local.get $4
  i32.store
  local.get $4
  local.get $2
  i32.sub
  local.set $5
  local.get $0
  call $~lib/rt/pure/__release
  local.get $1
  call $~lib/rt/pure/__release
  local.get $5
 )
 (func $~lib/typedarray/Uint8Array#slice (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  local.get $0
  call $~lib/rt/pure/__retain
  local.set $5
  local.get $1
  local.set $4
  local.get $2
  local.set $3
  local.get $5
  call $~lib/typedarray/Uint8Array#get:length
  local.set $6
  local.get $4
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $4
   local.get $6
   i32.add
   local.tee $7
   i32.const 0
   local.tee $8
   local.get $7
   local.get $8
   i32.gt_s
   select
  else
   local.get $4
   local.tee $7
   local.get $6
   local.tee $8
   local.get $7
   local.get $8
   i32.lt_s
   select
  end
  local.set $4
  local.get $3
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $3
   local.get $6
   i32.add
   local.tee $7
   i32.const 0
   local.tee $8
   local.get $7
   local.get $8
   i32.gt_s
   select
  else
   local.get $3
   local.tee $7
   local.get $6
   local.tee $8
   local.get $7
   local.get $8
   i32.lt_s
   select
  end
  local.set $3
  local.get $3
  local.get $4
  i32.sub
  local.tee $7
  i32.const 0
  local.tee $8
  local.get $7
  local.get $8
  i32.gt_s
  select
  local.set $6
  i32.const 0
  local.get $6
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $7
  call $~lib/rt/pure/__retain
  local.set $8
  local.get $8
  i32.load offset=4
  local.get $5
  i32.load offset=4
  local.get $4
  i32.const 0
  i32.shl
  i32.add
  local.get $6
  i32.const 0
  i32.shl
  call $~lib/memory/memory.copy
  local.get $8
  local.set $9
  local.get $5
  call $~lib/rt/pure/__release
  local.get $7
  call $~lib/rt/pure/__release
  local.get $9
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#encode (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  i32.const 1024
  call $assembly/ByteBuffer/ByteBuffer.allocate
  local.set $1
  local.get $0
  local.get $1
  call $assembly/encoding/encodeIntoByteBuffer<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>
  drop
  local.get $1
  i32.load offset=4
  i32.const 0
  local.get $1
  i32.load
  call $~lib/typedarray/Uint8Array#slice
  local.set $2
  local.get $1
  call $~lib/rt/pure/__release
  local.get $2
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#encode (param $0 i32) (result i32)
  local.get $0
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#encode
 )
 (func $~lib/typedarray/Uint8Array#fill (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (result i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  local.get $0
  call $~lib/rt/pure/__retain
  local.set $7
  local.get $1
  local.set $6
  local.get $2
  local.set $5
  local.get $3
  local.set $4
  local.get $7
  i32.load offset=4
  local.set $8
  local.get $7
  call $~lib/typedarray/Uint8Array#get:length
  local.set $9
  local.get $5
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $9
   local.get $5
   i32.add
   local.tee $10
   i32.const 0
   local.tee $11
   local.get $10
   local.get $11
   i32.gt_s
   select
  else
   local.get $5
   local.tee $10
   local.get $9
   local.tee $11
   local.get $10
   local.get $11
   i32.lt_s
   select
  end
  local.set $5
  local.get $4
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $9
   local.get $4
   i32.add
   local.tee $10
   i32.const 0
   local.tee $11
   local.get $10
   local.get $11
   i32.gt_s
   select
  else
   local.get $4
   local.tee $10
   local.get $9
   local.tee $11
   local.get $10
   local.get $11
   i32.lt_s
   select
  end
  local.set $4
  i32.const 1
  i32.const 1
  i32.eq
  drop
  local.get $5
  local.get $4
  i32.lt_s
  if
   local.get $8
   local.get $5
   i32.add
   local.get $6
   local.get $4
   local.get $5
   i32.sub
   call $~lib/memory/memory.fill
  end
  local.get $7
 )
 (func $assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>#clear (param $0 i32)
  local.get $0
  i32.load
  i32.const 0
  i32.const 0
  global.get $~lib/builtins/i32.MAX_VALUE
  call $~lib/typedarray/Uint8Array#fill
  call $~lib/rt/pure/__release
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#clearCounts (param $0 i32)
  local.get $0
  i32.load offset=160
  call $assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>#clear
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#reset (param $0 i32)
  local.get $0
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#clearCounts
  local.get $0
  i64.const 0
  i64.store offset=168
  local.get $0
  i64.const 0
  i64.store offset=64
  local.get $0
  i64.const 0
  i64.store offset=72
  local.get $0
  i64.const 0
  i64.store offset=144
  local.get $0
  global.get $~lib/number/U64.MAX_VALUE
  i64.store offset=152
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#reset (param $0 i32)
  local.get $0
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#reset
 )
 (func $assembly/AbstractHistogramBase/AbstractHistogramBase<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#constructor (param $0 i32) (result i32)
  local.get $0
  i32.eqz
  if
   i32.const 104
   i32.const 21
   call $~lib/rt/tlsf/__alloc
   call $~lib/rt/pure/__retain
   local.set $0
  end
  local.get $0
  f64.const 0
  f64.store
  local.get $0
  i32.const 0
  i32.store8 offset=8
  local.get $0
  i64.const 0
  i64.store offset=16
  local.get $0
  i64.const 0
  i64.store offset=24
  local.get $0
  i32.const 0
  i32.store8 offset=32
  local.get $0
  i64.const 0
  i64.store offset=40
  local.get $0
  i32.const 0
  i32.store offset=48
  local.get $0
  i32.const 0
  i32.store offset=52
  local.get $0
  i64.const 0
  i64.store offset=56
  local.get $0
  global.get $~lib/builtins/u64.MAX_VALUE
  i64.store offset=64
  local.get $0
  i64.const 0
  i64.store offset=72
  local.get $0
  global.get $assembly/AbstractHistogramBase/NO_TAG
  call $~lib/rt/pure/__retain
  i32.store offset=80
  local.get $0
  f64.const 1
  f64.store offset=88
  local.get $0
  i32.const 0
  i32.store offset=96
  local.get $0
  i32.const 0
  i32.store offset=100
  local.get $0
  f64.const 0
  f64.store
  local.get $0
  i64.const 0
  i64.store offset=16
  local.get $0
  i64.const 0
  i64.store offset=24
  local.get $0
  i32.const 0
  i32.store8 offset=32
  local.get $0
  i64.const 0
  i64.store offset=40
  local.get $0
  i32.const 0
  i32.store offset=48
  local.get $0
  i32.const 0
  i32.store offset=52
  local.get $0
  i64.const 0
  i64.store offset=56
  local.get $0
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getBucketsNeededToCoverValue (param $0 i32) (param $1 i64) (result i32)
  (local $2 i64)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  i32.load offset=48
  i64.extend_i32_s
  local.get $0
  i32.load offset=112
  i64.extend_i32_s
  i64.shl
  local.set $2
  i32.const 1
  local.set $3
  loop $while-continue|0
   local.get $2
   local.get $1
   i64.le_u
   local.set $4
   local.get $4
   if
    local.get $2
    global.get $~lib/builtins/u64.MAX_VALUE
    i64.const 1
    i64.shr_u
    i64.gt_u
    if
     local.get $3
     i32.const 1
     i32.add
     return
    end
    local.get $2
    i64.const 1
    i64.shl
    local.set $2
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $while-continue|0
   end
  end
  local.get $3
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getLengthForNumberOfBuckets (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  local.get $1
  i32.const 1
  i32.add
  local.get $0
  i32.load offset=48
  i32.const 1
  i32.shr_s
  i32.mul
  local.set $2
  local.get $2
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#determineArrayLengthNeeded (param $0 i32) (param $1 i64) (result i32)
  (local $2 i32)
  local.get $1
  i64.const 2
  local.get $0
  i64.load offset=24
  i64.mul
  i64.lt_u
  if
   i32.const 11440
   i32.const 8992
   i32.const 160
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getBucketsNeededToCoverValue
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getLengthForNumberOfBuckets
  local.set $2
  local.get $2
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#establishSize (param $0 i32) (param $1 i64)
  local.get $0
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#determineArrayLengthNeeded
  i32.store offset=52
  local.get $0
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getBucketsNeededToCoverValue
  i64.extend_i32_s
  i64.store offset=40
  local.get $0
  local.get $1
  i64.store offset=16
 )
 (func $~lib/typedarray/Uint16Array#constructor (param $0 i32) (param $1 i32) (result i32)
  local.get $0
  i32.eqz
  if
   i32.const 12
   i32.const 17
   call $~lib/rt/tlsf/__alloc
   call $~lib/rt/pure/__retain
   local.set $0
  end
  local.get $0
  local.get $1
  i32.const 1
  call $~lib/arraybuffer/ArrayBufferView#constructor
  local.set $0
  local.get $0
 )
 (func $assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>#constructor (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  local.get $0
  i32.eqz
  if
   i32.const 4
   i32.const 18
   call $~lib/rt/tlsf/__alloc
   call $~lib/rt/pure/__retain
   local.set $0
  end
  local.get $0
  i32.const 0
  i32.store
  local.get $0
  local.tee $3
  i32.const 0
  local.get $1
  call $~lib/typedarray/Uint16Array#constructor
  local.tee $2
  local.tee $4
  local.get $3
  i32.load
  local.tee $5
  i32.ne
  if
   local.get $4
   call $~lib/rt/pure/__retain
   local.set $4
   local.get $5
   call $~lib/rt/pure/__release
  end
  local.get $4
  i32.store
  local.get $2
  call $~lib/rt/pure/__release
  local.get $0
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#resetIterator (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.tee $2
  local.get $1
  local.tee $3
  local.get $2
  i32.load offset=28
  local.tee $4
  i32.ne
  if
   local.get $3
   call $~lib/rt/pure/__retain
   local.set $3
   local.get $4
   call $~lib/rt/pure/__release
  end
  local.get $3
  i32.store offset=28
  local.get $0
  local.get $1
  i64.load offset=168
  i64.store offset=32
  local.get $0
  local.get $1
  i64.load offset=168
  i64.store offset=96
  local.get $0
  i32.const 0
  i32.store offset=40
  local.get $0
  i64.const 0
  i64.store offset=48
  local.get $0
  i64.const 1
  local.get $1
  i32.load offset=112
  i64.extend_i32_s
  i64.shl
  i64.store offset=56
  local.get $0
  i64.const 0
  i64.store offset=64
  local.get $0
  i64.const 0
  i64.store offset=72
  local.get $0
  i64.const 0
  i64.store offset=80
  local.get $0
  i64.const 0
  i64.store offset=88
  local.get $0
  i64.const 0
  i64.store offset=104
  local.get $0
  i32.const 1
  i32.store8 offset=112
  local.get $0
  i32.load offset=116
  call $assembly/HistogramIterationValue/HistogramIterationValue#reset
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#doReset (param $0 i32) (param $1 i32) (param $2 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $1
  call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#resetIterator
  local.get $0
  local.get $2
  i32.store
  local.get $0
  f64.const 0
  f64.store offset=8
  local.get $0
  f64.const 0
  f64.store offset=16
  local.get $0
  i32.const 0
  i32.store8 offset=24
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#constructor (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  i32.eqz
  if
   i32.const 120
   i32.const 22
   call $~lib/rt/tlsf/__alloc
   call $~lib/rt/pure/__retain
   local.set $0
  end
  local.get $0
  i32.const 0
  i32.store
  local.get $0
  f64.const 0
  f64.store offset=8
  local.get $0
  f64.const 0
  f64.store offset=16
  local.get $0
  i32.const 0
  i32.store8 offset=24
  local.get $0
  i32.const 0
  i32.store offset=28
  local.get $0
  i64.const 0
  i64.store offset=32
  local.get $0
  i32.const 0
  i32.store offset=40
  local.get $0
  i64.const 0
  i64.store offset=48
  local.get $0
  i64.const 0
  i64.store offset=56
  local.get $0
  i64.const 0
  i64.store offset=64
  local.get $0
  i64.const 0
  i64.store offset=72
  local.get $0
  i64.const 0
  i64.store offset=80
  local.get $0
  i64.const 0
  i64.store offset=88
  local.get $0
  i64.const 0
  i64.store offset=96
  local.get $0
  i64.const 0
  i64.store offset=104
  local.get $0
  i32.const 0
  i32.store8 offset=112
  local.get $0
  i32.const 0
  call $assembly/HistogramIterationValue/HistogramIterationValue#constructor
  i32.store offset=116
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  i32.const 0
  i32.store
  local.get $0
  f64.const 0
  f64.store offset=8
  local.get $0
  f64.const 0
  f64.store offset=16
  local.get $0
  i32.const 0
  i32.store8 offset=24
  local.get $0
  local.get $1
  local.get $2
  call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#doReset
  local.get $1
  call $~lib/rt/pure/__release
  local.get $0
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#resetIterator (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.tee $2
  local.get $1
  local.tee $3
  local.get $2
  i32.load offset=4
  local.tee $4
  i32.ne
  if
   local.get $3
   call $~lib/rt/pure/__retain
   local.set $3
   local.get $4
   call $~lib/rt/pure/__release
  end
  local.get $3
  i32.store offset=4
  local.get $0
  local.get $1
  i64.load offset=168
  i64.store offset=8
  local.get $0
  local.get $1
  i64.load offset=168
  i64.store offset=72
  local.get $0
  i32.const 0
  i32.store offset=16
  local.get $0
  i64.const 0
  i64.store offset=24
  local.get $0
  i64.const 1
  local.get $1
  i32.load offset=112
  i64.extend_i32_s
  i64.shl
  i64.store offset=32
  local.get $0
  i64.const 0
  i64.store offset=40
  local.get $0
  i64.const 0
  i64.store offset=48
  local.get $0
  i64.const 0
  i64.store offset=56
  local.get $0
  i64.const 0
  i64.store offset=64
  local.get $0
  i64.const 0
  i64.store offset=80
  local.get $0
  i32.const 1
  i32.store8 offset=88
  local.get $0
  i32.load offset=92
  call $assembly/HistogramIterationValue/HistogramIterationValue#reset
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#doReset (param $0 i32) (param $1 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $1
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#resetIterator
  local.get $0
  i32.const -1
  i32.store
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#constructor (param $0 i32) (param $1 i32) (result i32)
  local.get $0
  i32.eqz
  if
   i32.const 96
   i32.const 23
   call $~lib/rt/tlsf/__alloc
   call $~lib/rt/pure/__retain
   local.set $0
  end
  local.get $0
  i32.const 0
  i32.store
  local.get $0
  i32.const 0
  i32.store offset=4
  local.get $0
  i64.const 0
  i64.store offset=8
  local.get $0
  i32.const 0
  i32.store offset=16
  local.get $0
  i64.const 0
  i64.store offset=24
  local.get $0
  i64.const 0
  i64.store offset=32
  local.get $0
  i64.const 0
  i64.store offset=40
  local.get $0
  i64.const 0
  i64.store offset=48
  local.get $0
  i64.const 0
  i64.store offset=56
  local.get $0
  i64.const 0
  i64.store offset=64
  local.get $0
  i64.const 0
  i64.store offset=72
  local.get $0
  i64.const 0
  i64.store offset=80
  local.get $0
  i32.const 0
  i32.store8 offset=88
  local.get $0
  i32.const 0
  call $assembly/HistogramIterationValue/HistogramIterationValue#constructor
  i32.store offset=92
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $1
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#doReset
  local.get $1
  call $~lib/rt/pure/__release
  local.get $0
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#init (param $0 i32) (param $1 i64) (param $2 i64) (param $3 i32) (param $4 f64)
  (local $5 i64)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  local.get $0
  local.get $1
  i64.store offset=24
  local.get $0
  local.get $2
  i64.store offset=16
  local.get $0
  local.get $3
  i32.store8 offset=32
  local.get $0
  local.get $4
  f64.store offset=88
  i32.const 2
  i64.extend_i32_s
  f64.const 10
  local.get $3
  f64.convert_i32_u
  call $~lib/math/NativeMath.pow
  i64.trunc_f64_u
  i64.mul
  local.set $5
  local.get $0
  local.get $1
  f64.convert_i64_u
  call $~lib/math/NativeMath.log2
  f64.floor
  i32.trunc_f64_s
  i32.store offset=112
  local.get $0
  i64.const 1
  local.get $0
  i32.load offset=112
  i64.extend_i32_s
  i64.shl
  i64.const 1
  i64.sub
  i64.store offset=136
  local.get $5
  f64.convert_i64_u
  call $~lib/math/NativeMath.log2
  f64.ceil
  i32.trunc_f64_s
  local.set $6
  local.get $0
  local.get $6
  i32.const 1
  i32.sub
  i32.store offset=108
  local.get $0
  i32.const 1
  local.get $6
  i32.shl
  i32.store offset=48
  local.get $0
  local.get $0
  i32.load offset=48
  i32.const 1
  i32.shr_s
  i32.store offset=116
  local.get $0
  local.get $0
  i32.load offset=48
  i64.extend_i32_s
  i64.const 1
  i64.sub
  local.get $0
  i32.load offset=112
  i64.extend_i32_s
  i64.shl
  i64.store offset=128
  local.get $0
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#establishSize
  local.get $0
  local.tee $8
  i32.const 0
  local.get $0
  i32.load offset=52
  call $assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>#constructor
  local.tee $7
  local.tee $9
  local.get $8
  i32.load offset=160
  local.tee $10
  i32.ne
  if
   local.get $9
   call $~lib/rt/pure/__retain
   local.set $9
   local.get $10
   call $~lib/rt/pure/__release
  end
  local.get $9
  i32.store offset=160
  local.get $0
  i32.const 64
  local.get $0
  i32.load offset=112
  i32.sub
  local.get $0
  i32.load offset=108
  i32.sub
  i32.const 1
  i32.sub
  i32.store offset=104
  local.get $0
  local.tee $10
  i32.const 0
  local.get $0
  i32.const 1
  call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#constructor
  local.set $9
  local.get $10
  i32.load offset=96
  call $~lib/rt/pure/__release
  local.get $9
  i32.store offset=96
  local.get $0
  local.tee $8
  i32.const 0
  local.get $0
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#constructor
  local.set $9
  local.get $8
  i32.load offset=100
  call $~lib/rt/pure/__release
  local.get $9
  i32.store offset=100
  local.get $7
  call $~lib/rt/pure/__release
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#constructor (param $0 i32) (param $1 i64) (param $2 i64) (param $3 i32) (result i32)
  (local $4 f64)
  local.get $0
  i32.eqz
  if
   i32.const 176
   i32.const 20
   call $~lib/rt/tlsf/__alloc
   call $~lib/rt/pure/__retain
   local.set $0
  end
  local.get $0
  i32.const 0
  i32.store offset=104
  local.get $0
  i32.const 0
  i32.store offset=108
  local.get $0
  i32.const 0
  i32.store offset=112
  local.get $0
  i32.const 0
  i32.store offset=116
  local.get $0
  i64.const 0
  i64.store offset=120
  local.get $0
  i64.const 0
  i64.store offset=128
  local.get $0
  i64.const 0
  i64.store offset=136
  local.get $0
  i64.const 0
  i64.store offset=144
  local.get $0
  global.get $~lib/number/U64.MAX_VALUE
  i64.store offset=152
  local.get $0
  i32.const 0
  i32.store offset=160
  local.get $0
  i64.const 0
  i64.store offset=168
  local.get $0
  call $assembly/AbstractHistogramBase/AbstractHistogramBase<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#constructor
  local.set $0
  local.get $1
  i64.const 1
  i64.lt_u
  if
   i32.const 8896
   i32.const 8992
   i32.const 61
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $2
  i64.const 2
  local.get $1
  i64.mul
  i64.lt_u
  if
   i32.const 9056
   i32.const 8992
   i32.const 64
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $3
  i32.const 255
  i32.and
  i32.const 0
  i32.lt_u
  if (result i32)
   i32.const 1
  else
   local.get $3
   i32.const 255
   i32.and
   i32.const 5
   i32.gt_u
  end
  if
   i32.const 9264
   i32.const 8992
   i32.const 72
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  global.get $assembly/AbstractHistogramBase/AbstractHistogramBase.identityBuilder
  local.tee $4
  f64.const 1
  f64.add
  global.set $assembly/AbstractHistogramBase/AbstractHistogramBase.identityBuilder
  local.get $4
  f64.store
  local.get $0
  local.get $1
  local.get $2
  local.get $3
  f64.const 1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#init
  local.get $0
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#constructor (param $0 i32) (param $1 f64) (param $2 f64) (param $3 f64) (param $4 i32) (param $5 i32) (result i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  local.get $0
  i32.eqz
  if
   i32.const 4
   i32.const 19
   call $~lib/rt/tlsf/__alloc
   call $~lib/rt/pure/__retain
   local.set $0
  end
  local.get $0
  i32.const 0
  i32.store
  local.get $5
  call $~lib/rt/pure/__retain
  local.set $5
  local.get $5
  if
   local.get $0
   local.tee $6
   local.get $5
   local.tee $7
   local.get $6
   i32.load
   local.tee $8
   i32.ne
   if
    local.get $7
    call $~lib/rt/pure/__retain
    local.set $7
    local.get $8
    call $~lib/rt/pure/__release
   end
   local.get $7
   i32.store
  else
   local.get $0
   local.tee $8
   i32.const 0
   local.get $1
   i64.trunc_f64_u
   local.get $2
   i64.trunc_f64_u
   local.get $3
   i32.trunc_f64_u
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#constructor
   local.set $7
   local.get $8
   i32.load
   call $~lib/rt/pure/__release
   local.get $7
   i32.store
   local.get $0
   i32.load
   local.get $4
   i32.store8 offset=8
  end
  local.get $5
  call $~lib/rt/pure/__release
  local.get $0
 )
 (func $assembly/index/Histogram16#constructor (param $0 i32) (param $1 f64) (param $2 f64) (param $3 f64) (param $4 i32) (param $5 i32) (result i32)
  local.get $0
  i32.eqz
  if
   i32.const 4
   i32.const 16
   call $~lib/rt/tlsf/__alloc
   call $~lib/rt/pure/__retain
   local.set $0
  end
  local.get $0
  local.get $1
  local.get $2
  local.get $3
  local.get $4
  local.get $5
  call $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#constructor
  local.set $0
  local.get $0
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#get:_histogram (param $0 i32) (result i32)
  local.get $0
  i32.load
  call $~lib/rt/pure/__retain
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#set:_histogram (param $0 i32) (param $1 i32)
  (local $2 i32)
  local.get $0
  local.get $1
  local.get $0
  i32.load
  local.tee $2
  i32.ne
  if
   local.get $1
   call $~lib/rt/pure/__retain
   drop
   local.get $2
   call $~lib/rt/pure/__release
  end
  local.get $1
  i32.store
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#get:autoResize (param $0 i32) (result i32)
  local.get $0
  i32.load
  i32.load8_u offset=8
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#set:autoResize (param $0 i32) (param $1 i32)
  local.get $0
  i32.load
  local.get $1
  i32.store8 offset=8
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#get:highestTrackableValue (param $0 i32) (result f64)
  local.get $0
  i32.load
  i64.load offset=16
  f64.convert_i64_u
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#set:highestTrackableValue (param $0 i32) (param $1 f64)
  local.get $0
  i32.load
  local.get $1
  i64.trunc_f64_u
  i64.store offset=16
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#get:startTimeStampMsec (param $0 i32) (result f64)
  local.get $0
  i32.load
  i64.load offset=64
  f64.convert_i64_u
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#set:startTimeStampMsec (param $0 i32) (param $1 f64)
  local.get $0
  i32.load
  local.get $1
  i64.trunc_f64_u
  i64.store offset=64
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#get:endTimeStampMsec (param $0 i32) (result f64)
  local.get $0
  i32.load
  i64.load offset=72
  f64.convert_i64_u
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#set:endTimeStampMsec (param $0 i32) (param $1 f64)
  local.get $0
  i32.load
  local.get $1
  i64.trunc_f64_u
  i64.store offset=72
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#get:minNonZeroValue (param $0 i32) (result f64)
  local.get $0
  i32.load
  i64.load offset=152
  f64.convert_i64_u
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#get:maxValue (param $0 i32) (result f64)
  local.get $0
  i32.load
  i64.load offset=144
  f64.convert_i64_u
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#get:totalCount (param $0 i32) (result f64)
  local.get $0
  i32.load
  i64.load offset=168
  f64.convert_i64_u
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#reset (param $0 i32)
  local.get $0
  local.get $0
  i32.load offset=4
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#doReset
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#hasNext (param $0 i32) (result i32)
  local.get $0
  i32.load offset=4
  i64.load offset=168
  local.get $0
  i64.load offset=8
  i64.ne
  if
   i32.const 0
   i32.const 11648
   i32.const 87
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i64.load offset=56
  local.get $0
  i64.load offset=72
  i64.lt_u
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#exhaustedSubBuckets (param $0 i32) (result i32)
  local.get $0
  i32.load offset=16
  local.get $0
  i32.load offset=4
  i32.load offset=52
  i32.ge_s
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#lowestEquivalentValue (param $0 i32) (param $1 i64) (result i64)
  (local $2 i32)
  (local $3 i32)
  (local $4 i64)
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getBucketIndex
  local.set $2
  local.get $0
  local.get $1
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getSubBucketIndex
  local.set $3
  local.get $0
  local.get $2
  local.get $3
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#valueFromIndexes
  local.set $4
  local.get $4
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#sizeOfEquivalentValueRange (param $0 i32) (param $1 i64) (result i64)
  (local $2 i32)
  (local $3 i64)
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getBucketIndex
  local.set $2
  i64.const 1
  local.get $0
  i32.load offset=112
  local.get $2
  i32.add
  i64.extend_i32_s
  i64.shl
  local.set $3
  local.get $3
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#nextNonEquivalentValue (param $0 i32) (param $1 i64) (result i64)
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#lowestEquivalentValue
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#sizeOfEquivalentValueRange
  i64.add
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#highestEquivalentValue (param $0 i32) (param $1 i64) (result i64)
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#nextNonEquivalentValue
  i64.const 1
  i64.sub
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#reachedIterationLevel (param $0 i32) (result i32)
  (local $1 i64)
  local.get $0
  i32.load offset=4
  local.get $0
  i32.load offset=16
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtIndex
  local.set $1
  local.get $1
  i64.const 0
  i64.ne
  if (result i32)
   local.get $0
   i32.load
   local.get $0
   i32.load offset=16
   i32.ne
  else
   i32.const 0
  end
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getValueIteratedTo (param $0 i32) (result i64)
  local.get $0
  i32.load offset=4
  local.get $0
  i64.load offset=24
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#highestEquivalentValue
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getPercentileIteratedTo (param $0 i32) (result f64)
  f64.const 100
  local.get $0
  i64.load offset=56
  f64.convert_i64_u
  f64.mul
  local.get $0
  i64.load offset=72
  f64.convert_i64_u
  f64.div
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#incrementIterationLevel (param $0 i32)
  local.get $0
  local.get $0
  i32.load offset=16
  i32.store
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#incrementSubBucket (param $0 i32)
  local.get $0
  i32.const 1
  i32.store8 offset=88
  local.get $0
  local.get $0
  i32.load offset=16
  i32.const 1
  i32.add
  i32.store offset=16
  local.get $0
  local.get $0
  i32.load offset=4
  local.get $0
  i32.load offset=16
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#valueFromIndex
  i64.store offset=24
  local.get $0
  local.get $0
  i32.load offset=4
  local.get $0
  i32.load offset=16
  i32.const 1
  i32.add
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#valueFromIndex
  i64.store offset=32
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#next (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i64)
  loop $while-continue|0
   local.get $0
   call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#exhaustedSubBuckets
   i32.eqz
   local.set $1
   local.get $1
   if
    local.get $0
    local.get $0
    i32.load offset=4
    local.get $0
    i32.load offset=16
    call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtIndex
    i64.store offset=80
    local.get $0
    i32.load8_u offset=88
    if
     local.get $0
     local.get $0
     i64.load offset=56
     local.get $0
     i64.load offset=80
     i64.add
     i64.store offset=56
     local.get $0
     local.get $0
     i64.load offset=64
     local.get $0
     i64.load offset=80
     local.get $0
     i32.load offset=4
     local.get $0
     i64.load offset=24
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#highestEquivalentValue
     i64.mul
     i64.add
     i64.store offset=64
     local.get $0
     i32.const 0
     i32.store8 offset=88
    end
    local.get $0
    call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#reachedIterationLevel
    if
     local.get $0
     call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getValueIteratedTo
     local.set $2
     local.get $0
     i32.load offset=92
     local.get $2
     i64.store
     local.get $0
     i32.load offset=92
     local.get $0
     i64.load offset=40
     i64.store offset=8
     local.get $0
     i32.load offset=92
     local.get $0
     i64.load offset=80
     i64.store offset=16
     local.get $0
     i32.load offset=92
     local.get $0
     i64.load offset=56
     local.get $0
     i64.load offset=48
     i64.sub
     i64.store offset=24
     local.get $0
     i32.load offset=92
     local.get $0
     i64.load offset=56
     i64.store offset=32
     local.get $0
     i32.load offset=92
     local.get $0
     i64.load offset=64
     i64.store offset=40
     local.get $0
     i32.load offset=92
     f64.const 100
     local.get $0
     i64.load offset=56
     f64.convert_i64_u
     f64.mul
     local.get $0
     i64.load offset=72
     f64.convert_i64_u
     f64.div
     f64.store offset=48
     local.get $0
     i32.load offset=92
     local.get $0
     call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getPercentileIteratedTo
     f64.store offset=56
     local.get $0
     local.get $2
     i64.store offset=40
     local.get $0
     local.get $0
     i64.load offset=56
     i64.store offset=48
     local.get $0
     call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#incrementIterationLevel
     local.get $0
     i32.load offset=4
     i64.load offset=168
     local.get $0
     i64.load offset=8
     i64.ne
     if
      i32.const 11744
      i32.const 11648
      i32.const 128
      i32.const 11
      call $~lib/builtins/abort
      unreachable
     end
     local.get $0
     i32.load offset=92
     call $~lib/rt/pure/__retain
     return
    end
    local.get $0
    call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#incrementSubBucket
    br $while-continue|0
   end
  end
  i32.const 11840
  i32.const 11648
  i32.const 134
  i32.const 5
  call $~lib/builtins/abort
  unreachable
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#medianEquivalentValue (param $0 i32) (param $1 i64) (result i64)
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#lowestEquivalentValue
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#sizeOfEquivalentValueRange
  i64.const 1
  i64.shr_u
  i64.add
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getMean (param $0 i32) (result f64)
  (local $1 i64)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  i64.load offset=168
  i64.const 0
  i64.eq
  if
   f64.const 0
   return
  end
  local.get $0
  i32.load offset=100
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#reset
  i64.const 0
  local.set $1
  loop $while-continue|0
   local.get $0
   i32.load offset=100
   call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#hasNext
   local.set $2
   local.get $2
   if
    local.get $0
    i32.load offset=100
    call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#next
    local.set $3
    local.get $1
    local.get $0
    local.get $3
    i64.load
    call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#medianEquivalentValue
    local.get $3
    i64.load offset=16
    i64.mul
    i64.add
    local.set $1
    local.get $3
    call $~lib/rt/pure/__release
    br $while-continue|0
   end
  end
  local.get $1
  f64.convert_i64_u
  f64.const 1
  f64.mul
  local.get $0
  i64.load offset=168
  f64.convert_i64_u
  f64.div
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#computeStdDeviation (param $0 i32) (param $1 f64) (result f64)
  (local $2 f64)
  (local $3 i32)
  (local $4 i32)
  (local $5 f64)
  (local $6 f64)
  local.get $0
  i64.load offset=168
  i64.const 0
  i64.eq
  if
   f64.const 0
   return
  end
  f64.const 0
  local.set $2
  local.get $0
  i32.load offset=100
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#reset
  loop $while-continue|0
   local.get $0
   i32.load offset=100
   call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#hasNext
   local.set $3
   local.get $3
   if
    local.get $0
    i32.load offset=100
    call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#next
    local.set $4
    local.get $0
    local.get $4
    i64.load
    call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#medianEquivalentValue
    f64.convert_i64_u
    local.get $1
    f64.sub
    local.set $5
    local.get $2
    local.get $5
    local.get $5
    f64.mul
    local.get $4
    i64.load offset=24
    f64.convert_i64_u
    f64.mul
    f64.add
    local.set $2
    local.get $4
    call $~lib/rt/pure/__release
    br $while-continue|0
   end
  end
  local.get $2
  local.get $0
  i64.load offset=168
  f64.convert_i64_u
  f64.div
  local.set $6
  local.get $6
  f64.sqrt
  local.set $6
  local.get $6
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getStdDeviation (param $0 i32) (result f64)
  (local $1 f64)
  local.get $0
  i64.load offset=168
  i64.const 0
  i64.eq
  if
   f64.const 0
   return
  end
  local.get $0
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getMean
  local.set $1
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#computeStdDeviation
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#get:stdDeviation (param $0 i32) (result f64)
  local.get $0
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getStdDeviation
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#get:mean (param $0 i32) (result f64)
  local.get $0
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getMean
 )
 (func $assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>#get:estimatedFootprintInBytes (param $0 i32) (result i32)
  i32.const 4
  local.get $0
  i32.load
  i32.load offset=8
  i32.add
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#get:estimatedFootprintInBytes (param $0 i32) (result i32)
  i32.const 176
  local.get $0
  i32.load offset=160
  call $assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>#get:estimatedFootprintInBytes
  i32.add
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#get:estimatedFootprintInBytes (param $0 i32) (result f64)
  i32.const 4
  local.get $0
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#get:estimatedFootprintInBytes
  i32.add
  f64.convert_i32_u
 )
 (func $~lib/typedarray/Uint16Array#get:length (param $0 i32) (result i32)
  local.get $0
  i32.load offset=8
  i32.const 1
  i32.shr_u
 )
 (func $~lib/typedarray/Uint16Array#set<~lib/typedarray/Uint16Array> (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  call $~lib/rt/pure/__retain
  local.set $5
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $4
  local.get $2
  local.set $3
  i32.const 0
  drop
  local.get $3
  i32.const 0
  i32.lt_s
  if
   i32.const 12160
   i32.const 12224
   i32.const 1774
   i32.const 19
   call $~lib/builtins/abort
   unreachable
  end
  local.get $4
  call $~lib/typedarray/Uint16Array#get:length
  local.get $3
  i32.add
  local.get $5
  call $~lib/typedarray/Uint16Array#get:length
  i32.gt_s
  if
   i32.const 12160
   i32.const 12224
   i32.const 1775
   i32.const 47
   call $~lib/builtins/abort
   unreachable
  end
  i32.const 1
  i32.const 1
  i32.eq
  if (result i32)
   i32.const 1
   i32.const 1
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   i32.const 0
   if (result i32)
    i32.const 0
   else
    i32.const 0
   end
   i32.eqz
  else
   i32.const 0
  end
  drop
  local.get $5
  i32.load offset=4
  local.get $3
  i32.const 1
  i32.shl
  i32.add
  local.get $4
  i32.load offset=4
  local.get $4
  i32.load offset=8
  call $~lib/memory/memory.copy
  local.get $4
  call $~lib/rt/pure/__release
  local.get $5
  call $~lib/rt/pure/__release
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>#resize (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  i32.const 0
  local.get $1
  call $assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>#constructor
  local.set $2
  local.get $2
  i32.load
  local.get $0
  i32.load
  i32.const 0
  call $~lib/typedarray/Uint16Array#set<~lib/typedarray/Uint16Array>
  local.get $2
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#resize (param $0 i32) (param $1 i64)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#establishSize
  local.get $0
  local.tee $2
  local.get $0
  i32.load offset=160
  local.get $0
  i32.load offset=52
  call $assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>#resize
  local.set $3
  local.get $2
  i32.load offset=160
  call $~lib/rt/pure/__release
  local.get $3
  i32.store offset=160
 )
 (func $~lib/typedarray/Uint16Array#__uset (param $0 i32) (param $1 i32) (param $2 i32)
  local.get $0
  i32.load offset=4
  local.get $1
  i32.const 1
  i32.shl
  i32.add
  local.get $2
  i32.store16
 )
 (func $assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>#__set (param $0 i32) (param $1 i32) (param $2 i32)
  local.get $0
  i32.load
  local.get $1
  local.get $2
  i32.const 65535
  i32.and
  call $~lib/typedarray/Uint16Array#__uset
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#addToCountAtIndex (param $0 i32) (param $1 i32) (param $2 i64)
  (local $3 i32)
  (local $4 i64)
  local.get $0
  i32.load offset=160
  local.get $1
  call $assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>#__get
  local.set $3
  local.get $3
  i64.extend_i32_u
  local.get $2
  i64.add
  local.set $4
  local.get $4
  i64.const 0
  i64.lt_u
  if
   i32.const 0
   i32.const 8992
   i32.const 611
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i32.load offset=160
  local.get $1
  local.get $4
  i32.wrap_i64
  call $assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>#__set
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#handleRecordException (param $0 i32) (param $1 i64) (param $2 i64)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  local.get $0
  i32.load8_u offset=8
  i32.eqz
  if
   i32.const 12032
   local.get $2
   i32.const 10
   call $~lib/number/U64#toString
   local.tee $3
   call $~lib/string/String.__concat
   local.tee $4
   i32.const 12064
   call $~lib/string/String.__concat
   local.tee $5
   i32.const 8992
   i32.const 225
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#resize
  local.get $0
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#countsArrayIndex
  local.set $5
  local.get $0
  local.get $5
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#addToCountAtIndex
  local.get $0
  local.get $0
  local.get $0
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#valueFromIndex
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#highestEquivalentValue
  i64.store offset=16
 )
 (func $~lib/number/U16#toString (param $0 i32) (param $1 i32) (result i32)
  local.get $0
  i32.const 65535
  i32.and
  local.get $1
  call $~lib/util/number/utoa32
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#incrementCountAtIndex (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  local.get $0
  i32.load offset=160
  local.get $1
  call $assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>#__get
  local.set $2
  local.get $2
  i32.const 1
  i32.add
  local.set $3
  local.get $3
  i32.const 65535
  i32.and
  i32.const 0
  i32.lt_u
  if
   local.get $3
   i32.const 10
   call $~lib/number/U16#toString
   local.tee $4
   i32.const 12288
   call $~lib/string/String.__concat
   local.tee $5
   i32.const 8992
   i32.const 593
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i32.load offset=160
  local.get $1
  local.get $3
  call $assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>#__set
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#updatedMaxValue (param $0 i32) (param $1 i64)
  (local $2 i64)
  local.get $1
  local.get $0
  i64.load offset=136
  i64.add
  local.set $2
  local.get $0
  local.get $2
  i64.store offset=144
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#updateMinNonZeroValue (param $0 i32) (param $1 i64)
  (local $2 i64)
  local.get $1
  local.get $0
  i64.load offset=136
  i64.le_u
  if
   return
  end
  local.get $1
  local.get $0
  i64.load offset=136
  i64.const -1
  i64.xor
  i64.and
  local.set $2
  local.get $0
  local.get $2
  i64.store offset=152
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#updateMinAndMax (param $0 i32) (param $1 i64)
  local.get $1
  local.get $0
  i64.load offset=144
  i64.gt_u
  if
   local.get $0
   local.get $1
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#updatedMaxValue
  end
  local.get $1
  local.get $0
  i64.load offset=152
  i64.lt_u
  if (result i32)
   local.get $1
   i64.const 0
   i64.ne
  else
   i32.const 0
  end
  if
   local.get $0
   local.get $1
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#updateMinNonZeroValue
  end
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#incrementTotalCount (param $0 i32)
  local.get $0
  local.get $0
  i64.load offset=168
  i64.const 1
  i64.add
  i64.store offset=168
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordSingleValue (param $0 i32) (param $1 i64)
  (local $2 i32)
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#countsArrayIndex
  local.set $2
  local.get $2
  local.get $0
  i32.load offset=52
  i32.ge_s
  if
   local.get $0
   i32.const 1
   i64.extend_i32_u
   local.get $1
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#handleRecordException
  else
   local.get $0
   local.get $2
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#incrementCountAtIndex
  end
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#updateMinAndMax
  local.get $0
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#incrementTotalCount
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordValue (param $0 i32) (param $1 f64)
  local.get $0
  i32.load
  local.get $1
  i64.trunc_f64_u
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordSingleValue
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordCountAtValue (param $0 i32) (param $1 i64) (param $2 i64)
  (local $3 i32)
  local.get $0
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#countsArrayIndex
  local.set $3
  local.get $3
  local.get $0
  i32.load offset=52
  i32.ge_s
  if
   local.get $0
   local.get $1
   local.get $2
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#handleRecordException
  else
   local.get $0
   local.get $3
   local.get $1
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#addToCountAtIndex
  end
  local.get $0
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#updateMinAndMax
  local.get $0
  local.get $0
  i64.load offset=168
  local.get $1
  i64.add
  i64.store offset=168
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordValueWithCount (param $0 i32) (param $1 f64) (param $2 f64)
  local.get $0
  i32.load
  local.get $2
  i64.trunc_f64_u
  local.get $1
  i64.trunc_f64_u
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordCountAtValue
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordSingleValueWithExpectedInterval (param $0 i32) (param $1 i64) (param $2 i64)
  (local $3 i64)
  (local $4 i32)
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordSingleValue
  local.get $1
  local.get $2
  i64.lt_u
  if (result i32)
   i32.const 1
  else
   local.get $2
   i64.const 0
   i64.eq
  end
  if
   return
  end
  local.get $1
  local.get $2
  i64.sub
  local.set $3
  loop $for-loop|0
   local.get $3
   local.get $2
   i64.ge_u
   local.set $4
   local.get $4
   if
    local.get $0
    local.get $3
    call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordSingleValue
    local.get $3
    local.get $2
    i64.sub
    local.set $3
    br $for-loop|0
   end
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordValueWithExpectedInterval (param $0 i32) (param $1 f64) (param $2 f64)
  local.get $0
  i32.load
  local.get $1
  i64.trunc_f64_u
  local.get $2
  i64.trunc_f64_u
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordSingleValueWithExpectedInterval
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getValueAtPercentile (param $0 i32) (param $1 f64) (result i64)
  (local $2 f64)
  (local $3 f64)
  (local $4 i64)
  (local $5 i64)
  (local $6 i32)
  (local $7 i32)
  (local $8 i64)
  local.get $1
  f64.const 100
  f64.min
  local.set $2
  local.get $2
  f64.const 100
  f64.div
  local.get $0
  i64.load offset=168
  f64.convert_i64_u
  f64.mul
  local.set $3
  local.get $3
  local.get $3
  i32.const 1
  global.set $~argumentsLength
  global.get $assembly/ulp/ulp
  call_indirect (type $f64_=>_f64)
  f64.sub
  f64.ceil
  f64.const 1
  f64.max
  i64.trunc_f64_u
  local.set $4
  i64.const 0
  local.set $5
  i32.const 0
  local.set $6
  loop $for-loop|0
   local.get $6
   local.get $0
   i32.load offset=52
   i32.lt_s
   local.set $7
   local.get $7
   if
    local.get $5
    local.get $0
    local.get $6
    call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtIndex
    i64.add
    local.set $5
    local.get $5
    local.get $4
    i64.ge_u
    if
     local.get $0
     local.get $6
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#valueFromIndex
     local.set $8
     local.get $1
     f64.const 0
     f64.eq
     if (result i64)
      local.get $0
      local.get $8
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#lowestEquivalentValue
     else
      local.get $0
      local.get $8
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#highestEquivalentValue
     end
     return
    end
    local.get $6
    i32.const 1
    i32.add
    local.set $6
    br $for-loop|0
   end
  end
  i64.const 0
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getValueAtPercentile (param $0 i32) (param $1 f64) (result f64)
  local.get $0
  i32.load
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getValueAtPercentile
  f64.convert_i64_u
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#reset (param $0 i32) (param $1 i32)
  local.get $0
  local.get $0
  i32.load offset=28
  local.get $1
  call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#doReset
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#hasNext (param $0 i32) (result i32)
  local.get $0
  i32.load offset=28
  i64.load offset=168
  local.get $0
  i64.load offset=32
  i64.ne
  if
   i32.const 0
   i32.const 12528
   i32.const 138
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i64.load offset=80
  local.get $0
  i64.load offset=96
  i64.lt_u
  if
   i32.const 1
   return
  end
  local.get $0
  i32.load8_u offset=24
  i32.eqz
  if (result i32)
   local.get $0
   i64.load offset=96
   i64.const 0
   i64.gt_u
  else
   i32.const 0
  end
  if
   local.get $0
   f64.const 100
   f64.store offset=8
   local.get $0
   i32.const 1
   i32.store8 offset=24
   i32.const 1
   return
  end
  i32.const 0
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#exhaustedSubBuckets (param $0 i32) (result i32)
  local.get $0
  i32.load offset=40
  local.get $0
  i32.load offset=28
  i32.load offset=52
  i32.ge_s
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#reachedIterationLevel (param $0 i32) (result i32)
  (local $1 f64)
  local.get $0
  i64.load offset=104
  i64.const 0
  i64.eq
  if
   i32.const 0
   return
  end
  f64.const 100
  local.get $0
  i64.load offset=80
  f64.convert_i64_u
  f64.mul
  local.get $0
  i64.load offset=96
  f64.convert_i64_u
  f64.div
  local.set $1
  local.get $1
  local.get $0
  f64.load offset=8
  f64.ge
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getValueIteratedTo (param $0 i32) (result i64)
  local.get $0
  i32.load offset=28
  local.get $0
  i64.load offset=48
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#highestEquivalentValue
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getPercentileIteratedTo (param $0 i32) (result f64)
  local.get $0
  f64.load offset=8
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#incrementIterationLevel (param $0 i32)
  (local $1 f64)
  local.get $0
  local.get $0
  f64.load offset=8
  f64.store offset=16
  local.get $0
  i32.load
  f64.convert_i32_s
  f64.const 2
  f64.const 100
  f64.const 100
  local.get $0
  f64.load offset=8
  f64.sub
  f64.div
  call $~lib/math/NativeMath.log2
  f64.floor
  f64.const 1
  f64.add
  call $~lib/math/NativeMath.pow
  f64.mul
  local.set $1
  local.get $0
  local.get $0
  f64.load offset=8
  f64.const 100
  local.get $1
  f64.div
  f64.add
  f64.store offset=8
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#incrementSubBucket (param $0 i32)
  local.get $0
  i32.const 1
  i32.store8 offset=112
  local.get $0
  local.get $0
  i32.load offset=40
  i32.const 1
  i32.add
  i32.store offset=40
  local.get $0
  local.get $0
  i32.load offset=28
  local.get $0
  i32.load offset=40
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#valueFromIndex
  i64.store offset=48
  local.get $0
  local.get $0
  i32.load offset=28
  local.get $0
  i32.load offset=40
  i32.const 1
  i32.add
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#valueFromIndex
  i64.store offset=56
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#next (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i64)
  loop $while-continue|0
   local.get $0
   call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#exhaustedSubBuckets
   i32.eqz
   local.set $1
   local.get $1
   if
    local.get $0
    local.get $0
    i32.load offset=28
    local.get $0
    i32.load offset=40
    call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtIndex
    i64.store offset=104
    local.get $0
    i32.load8_u offset=112
    if
     local.get $0
     local.get $0
     i64.load offset=80
     local.get $0
     i64.load offset=104
     i64.add
     i64.store offset=80
     local.get $0
     local.get $0
     i64.load offset=88
     local.get $0
     i64.load offset=104
     local.get $0
     i32.load offset=28
     local.get $0
     i64.load offset=48
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#highestEquivalentValue
     i64.mul
     i64.add
     i64.store offset=88
     local.get $0
     i32.const 0
     i32.store8 offset=112
    end
    local.get $0
    call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#reachedIterationLevel
    if
     local.get $0
     call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getValueIteratedTo
     local.set $2
     local.get $0
     i32.load offset=116
     local.get $2
     i64.store
     local.get $0
     i32.load offset=116
     local.get $0
     i64.load offset=64
     i64.store offset=8
     local.get $0
     i32.load offset=116
     local.get $0
     i64.load offset=104
     i64.store offset=16
     local.get $0
     i32.load offset=116
     local.get $0
     i64.load offset=80
     local.get $0
     i64.load offset=72
     i64.sub
     i64.store offset=24
     local.get $0
     i32.load offset=116
     local.get $0
     i64.load offset=80
     i64.store offset=32
     local.get $0
     i32.load offset=116
     local.get $0
     i64.load offset=88
     i64.store offset=40
     local.get $0
     i32.load offset=116
     f64.const 100
     local.get $0
     i64.load offset=80
     f64.convert_i64_u
     f64.mul
     local.get $0
     i64.load offset=96
     f64.convert_i64_u
     f64.div
     f64.store offset=48
     local.get $0
     i32.load offset=116
     local.get $0
     call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getPercentileIteratedTo
     f64.store offset=56
     local.get $0
     local.get $2
     i64.store offset=64
     local.get $0
     local.get $0
     i64.load offset=80
     i64.store offset=72
     local.get $0
     call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#incrementIterationLevel
     local.get $0
     i32.load offset=28
     i64.load offset=168
     local.get $0
     i64.load offset=32
     i64.ne
     if
      i32.const 11744
      i32.const 12528
      i32.const 187
      i32.const 11
      call $~lib/builtins/abort
      unreachable
     end
     local.get $0
     i32.load offset=116
     call $~lib/rt/pure/__retain
     return
    end
    local.get $0
    call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#incrementSubBucket
    br $while-continue|0
   end
  end
  i32.const 11840
  i32.const 12528
  i32.const 193
  i32.const 5
  call $~lib/builtins/abort
  unreachable
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#outputPercentileDistribution (param $0 i32) (param $1 i32) (param $2 f64) (result i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  (local $15 i32)
  (local $16 i32)
  (local $17 i32)
  (local $18 i32)
  (local $19 i32)
  (local $20 i32)
  (local $21 i32)
  (local $22 i32)
  (local $23 i32)
  (local $24 i32)
  (local $25 i32)
  (local $26 f64)
  (local $27 i32)
  (local $28 i32)
  (local $29 i32)
  (local $30 i32)
  (local $31 i32)
  (local $32 i32)
  (local $33 i32)
  (local $34 i32)
  (local $35 i32)
  (local $36 i32)
  (local $37 i32)
  (local $38 i32)
  (local $39 i32)
  (local $40 i32)
  i32.const 352
  local.set $3
  local.get $3
  i32.const 12384
  call $~lib/string/String.__concat
  local.tee $4
  local.tee $5
  local.get $3
  local.tee $6
  i32.ne
  if
   local.get $5
   call $~lib/rt/pure/__retain
   local.set $5
   local.get $6
   call $~lib/rt/pure/__release
  end
  local.get $5
  local.set $3
  local.get $0
  i32.load offset=96
  call $~lib/rt/pure/__retain
  local.set $5
  local.get $5
  local.get $1
  call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#reset
  i32.const 0
  i32.const 12
  local.get $0
  i32.load8_u offset=32
  call $assembly/formatters/FloatFormatter#constructor
  local.set $6
  i32.const 0
  i32.const 2
  i32.const 12
  call $assembly/formatters/FloatFormatter#constructor
  local.set $7
  i32.const 0
  i32.const 10
  call $assembly/formatters/IntegerFormatter#constructor
  local.set $8
  i32.const 0
  i32.const 14
  i32.const 2
  call $assembly/formatters/FloatFormatter#constructor
  local.set $9
  loop $while-continue|0
   local.get $5
   call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#hasNext
   local.set $10
   local.get $10
   if
    local.get $5
    call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#next
    local.set $11
    local.get $11
    f64.load offset=56
    f64.const 100
    f64.lt
    if
     local.get $3
     local.get $6
     local.get $11
     i64.load
     f64.convert_i64_u
     local.get $2
     f64.div
     call $assembly/formatters/FloatFormatter#format
     local.tee $12
     i32.const 224
     call $~lib/string/String.__concat
     local.tee $13
     local.get $7
     local.get $11
     f64.load offset=56
     f64.const 100
     f64.div
     call $assembly/formatters/FloatFormatter#format
     local.tee $14
     call $~lib/string/String.__concat
     local.tee $15
     i32.const 224
     call $~lib/string/String.__concat
     local.tee $16
     local.get $8
     local.get $11
     i64.load offset=32
     call $assembly/formatters/IntegerFormatter#format
     local.tee $17
     call $~lib/string/String.__concat
     local.tee $18
     i32.const 224
     call $~lib/string/String.__concat
     local.tee $19
     local.get $9
     f64.const 1
     f64.const 1
     local.get $11
     f64.load offset=56
     f64.const 100
     f64.div
     f64.sub
     f64.div
     call $assembly/formatters/FloatFormatter#format
     local.tee $20
     call $~lib/string/String.__concat
     local.tee $21
     i32.const 12640
     call $~lib/string/String.__concat
     local.tee $22
     call $~lib/string/String.__concat
     local.tee $23
     local.tee $24
     local.get $3
     local.tee $25
     i32.ne
     if
      local.get $24
      call $~lib/rt/pure/__retain
      local.set $24
      local.get $25
      call $~lib/rt/pure/__release
     end
     local.get $24
     local.set $3
     local.get $12
     call $~lib/rt/pure/__release
     local.get $13
     call $~lib/rt/pure/__release
     local.get $14
     call $~lib/rt/pure/__release
     local.get $15
     call $~lib/rt/pure/__release
     local.get $16
     call $~lib/rt/pure/__release
     local.get $17
     call $~lib/rt/pure/__release
     local.get $18
     call $~lib/rt/pure/__release
     local.get $19
     call $~lib/rt/pure/__release
     local.get $20
     call $~lib/rt/pure/__release
     local.get $21
     call $~lib/rt/pure/__release
     local.get $22
     call $~lib/rt/pure/__release
     local.get $23
     call $~lib/rt/pure/__release
    else
     local.get $3
     local.get $6
     local.get $11
     i64.load
     f64.convert_i64_u
     local.get $2
     f64.div
     call $assembly/formatters/FloatFormatter#format
     local.tee $23
     i32.const 224
     call $~lib/string/String.__concat
     local.tee $22
     local.get $7
     local.get $11
     f64.load offset=56
     f64.const 100
     f64.div
     call $assembly/formatters/FloatFormatter#format
     local.tee $21
     call $~lib/string/String.__concat
     local.tee $20
     i32.const 224
     call $~lib/string/String.__concat
     local.tee $19
     local.get $8
     local.get $11
     i64.load offset=32
     call $assembly/formatters/IntegerFormatter#format
     local.tee $18
     call $~lib/string/String.__concat
     local.tee $17
     i32.const 12640
     call $~lib/string/String.__concat
     local.tee $16
     call $~lib/string/String.__concat
     local.tee $15
     local.tee $25
     local.get $3
     local.tee $14
     i32.ne
     if
      local.get $25
      call $~lib/rt/pure/__retain
      local.set $25
      local.get $14
      call $~lib/rt/pure/__release
     end
     local.get $25
     local.set $3
     local.get $23
     call $~lib/rt/pure/__release
     local.get $22
     call $~lib/rt/pure/__release
     local.get $21
     call $~lib/rt/pure/__release
     local.get $20
     call $~lib/rt/pure/__release
     local.get $19
     call $~lib/rt/pure/__release
     local.get $18
     call $~lib/rt/pure/__release
     local.get $17
     call $~lib/rt/pure/__release
     local.get $16
     call $~lib/rt/pure/__release
     local.get $15
     call $~lib/rt/pure/__release
    end
    local.get $11
    call $~lib/rt/pure/__release
    br $while-continue|0
   end
  end
  i32.const 0
  i32.const 12
  local.get $0
  i32.load8_u offset=32
  call $assembly/formatters/FloatFormatter#constructor
  local.set $10
  local.get $0
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getMean
  local.set $26
  local.get $10
  local.get $26
  local.get $2
  f64.div
  call $assembly/formatters/FloatFormatter#format
  local.set $15
  local.get $10
  local.get $0
  local.get $26
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#computeStdDeviation
  local.get $2
  f64.div
  call $assembly/formatters/FloatFormatter#format
  local.set $16
  local.get $10
  local.get $0
  i64.load offset=144
  f64.convert_i64_u
  local.get $2
  f64.div
  call $assembly/formatters/FloatFormatter#format
  local.set $17
  i32.const 0
  i32.const 12
  call $assembly/formatters/IntegerFormatter#constructor
  local.set $18
  local.get $18
  local.get $0
  i64.load offset=168
  call $assembly/formatters/IntegerFormatter#format
  local.set $19
  local.get $18
  local.get $0
  i64.load offset=40
  call $assembly/formatters/IntegerFormatter#format
  local.set $20
  local.get $18
  local.get $0
  i32.load offset=48
  i64.extend_i32_s
  call $assembly/formatters/IntegerFormatter#format
  local.set $21
  local.get $3
  i32.const 12672
  local.get $15
  call $~lib/string/String#toString
  local.tee $22
  call $~lib/string/String.__concat
  local.tee $23
  i32.const 12720
  call $~lib/string/String.__concat
  local.tee $25
  local.get $16
  call $~lib/string/String#toString
  local.tee $14
  call $~lib/string/String.__concat
  local.tee $13
  i32.const 12784
  call $~lib/string/String.__concat
  local.tee $12
  local.get $17
  call $~lib/string/String#toString
  local.tee $24
  call $~lib/string/String.__concat
  local.tee $27
  i32.const 12832
  call $~lib/string/String.__concat
  local.tee $28
  local.get $19
  call $~lib/string/String#toString
  local.tee $29
  call $~lib/string/String.__concat
  local.tee $30
  i32.const 12896
  call $~lib/string/String.__concat
  local.tee $31
  local.get $20
  call $~lib/string/String#toString
  local.tee $32
  call $~lib/string/String.__concat
  local.tee $33
  i32.const 12944
  call $~lib/string/String.__concat
  local.tee $34
  local.get $21
  call $~lib/string/String#toString
  local.tee $35
  call $~lib/string/String.__concat
  local.tee $36
  i32.const 13008
  call $~lib/string/String.__concat
  local.tee $37
  call $~lib/string/String.__concat
  local.tee $38
  local.tee $39
  local.get $3
  local.tee $40
  i32.ne
  if
   local.get $39
   call $~lib/rt/pure/__retain
   local.set $39
   local.get $40
   call $~lib/rt/pure/__release
  end
  local.get $39
  local.set $3
  local.get $3
  local.set $39
  local.get $4
  call $~lib/rt/pure/__release
  local.get $5
  call $~lib/rt/pure/__release
  local.get $6
  call $~lib/rt/pure/__release
  local.get $7
  call $~lib/rt/pure/__release
  local.get $8
  call $~lib/rt/pure/__release
  local.get $9
  call $~lib/rt/pure/__release
  local.get $10
  call $~lib/rt/pure/__release
  local.get $15
  call $~lib/rt/pure/__release
  local.get $16
  call $~lib/rt/pure/__release
  local.get $17
  call $~lib/rt/pure/__release
  local.get $18
  call $~lib/rt/pure/__release
  local.get $19
  call $~lib/rt/pure/__release
  local.get $20
  call $~lib/rt/pure/__release
  local.get $21
  call $~lib/rt/pure/__release
  local.get $22
  call $~lib/rt/pure/__release
  local.get $23
  call $~lib/rt/pure/__release
  local.get $25
  call $~lib/rt/pure/__release
  local.get $14
  call $~lib/rt/pure/__release
  local.get $13
  call $~lib/rt/pure/__release
  local.get $12
  call $~lib/rt/pure/__release
  local.get $24
  call $~lib/rt/pure/__release
  local.get $27
  call $~lib/rt/pure/__release
  local.get $28
  call $~lib/rt/pure/__release
  local.get $29
  call $~lib/rt/pure/__release
  local.get $30
  call $~lib/rt/pure/__release
  local.get $31
  call $~lib/rt/pure/__release
  local.get $32
  call $~lib/rt/pure/__release
  local.get $33
  call $~lib/rt/pure/__release
  local.get $34
  call $~lib/rt/pure/__release
  local.get $35
  call $~lib/rt/pure/__release
  local.get $36
  call $~lib/rt/pure/__release
  local.get $37
  call $~lib/rt/pure/__release
  local.get $38
  call $~lib/rt/pure/__release
  local.get $39
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#outputPercentileDistribution (param $0 i32) (param $1 f64) (param $2 f64) (result i32)
  local.get $0
  i32.load
  local.get $1
  i32.trunc_f64_s
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#outputPercentileDistribution
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordValueWithCountAndExpectedInterval (param $0 i32) (param $1 i64) (param $2 i64) (param $3 i64)
  (local $4 i64)
  (local $5 i32)
  local.get $0
  local.get $2
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordCountAtValue
  local.get $3
  i64.const 0
  i64.le_u
  if (result i32)
   i32.const 1
  else
   local.get $1
   local.get $3
   i64.le_u
  end
  if
   return
  end
  local.get $1
  local.get $3
  i64.sub
  local.set $4
  loop $for-loop|0
   local.get $4
   local.get $3
   i64.ge_u
   local.set $5
   local.get $5
   if
    local.get $0
    local.get $2
    local.get $4
    call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordCountAtValue
    local.get $4
    local.get $3
    i64.sub
    local.set $4
    br $for-loop|0
   end
  end
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#addWhileCorrectingForCoordinatedOmission (param $0 i32) (param $1 i32) (param $2 i64)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  call $~lib/rt/pure/__retain
  local.set $3
  i32.const 0
  local.get $1
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#constructor
  local.set $4
  loop $while-continue|0
   local.get $4
   call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#hasNext
   local.set $5
   local.get $5
   if
    local.get $4
    call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#next
    local.set $6
    local.get $3
    local.get $6
    i64.load
    local.get $6
    i64.load offset=16
    local.get $2
    call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordValueWithCountAndExpectedInterval
    local.get $6
    call $~lib/rt/pure/__release
    br $while-continue|0
   end
  end
  local.get $3
  call $~lib/rt/pure/__release
  local.get $4
  call $~lib/rt/pure/__release
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#copyCorrectedForCoordinatedOmission (param $0 i32) (param $1 i64) (result i32)
  (local $2 i32)
  i32.const 0
  local.get $0
  i64.load offset=24
  local.get $0
  i64.load offset=16
  local.get $0
  i32.load8_u offset=32
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#constructor
  local.set $2
  local.get $2
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#addWhileCorrectingForCoordinatedOmission
  local.get $2
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#copyCorrectedForCoordinatedOmission (param $0 i32) (param $1 f64) (result i32)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  i32.load
  local.get $1
  i64.trunc_f64_u
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#copyCorrectedForCoordinatedOmission
  local.set $2
  i32.const 0
  f64.const 0
  f64.const 0
  f64.const 0
  i32.const 0
  local.get $2
  call $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#constructor
  local.set $3
  local.get $2
  call $~lib/rt/pure/__release
  local.get $3
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#add<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i64)
  (local $4 i32)
  (local $5 i32)
  (local $6 i64)
  (local $7 i64)
  (local $8 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $0
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#valueFromIndex
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#highestEquivalentValue
  local.set $2
  local.get $2
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 13040
    i32.const 8992
    i32.const 639
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   i64.const 0
   local.set $3
   i32.const 0
   local.set $4
   loop $for-loop|0
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtIndex
     local.set $6
     local.get $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $4
      local.get $6
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#addToCountAtIndex
      local.get $3
      local.get $6
      i64.add
      local.set $3
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $3
   i64.add
   i64.store offset=168
   local.get $0
   local.get $0
   i64.load offset=144
   local.tee $6
   local.get $1
   i64.load offset=144
   local.tee $7
   local.get $6
   local.get $7
   i64.gt_u
   select
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#updatedMaxValue
   local.get $0
   local.get $0
   i64.load offset=152
   local.tee $6
   local.get $1
   i64.load offset=152
   local.tee $7
   local.get $6
   local.get $7
   i64.lt_u
   select
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#updateMinNonZeroValue
  else
   local.get $1
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex
   local.set $4
   local.get $1
   local.get $4
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtIndex
   local.set $3
   local.get $0
   local.get $3
   local.get $1
   local.get $4
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#valueFromIndex
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordCountAtValue
   i32.const 0
   local.set $5
   loop $for-loop|1
    local.get $5
    local.get $4
    i32.lt_s
    local.set $8
    local.get $8
    if
     local.get $1
     local.get $5
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtIndex
     local.set $3
     local.get $3
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $3
      local.get $1
      local.get $5
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#valueFromIndex
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordCountAtValue
     end
     local.get $5
     i32.const 1
     i32.add
     local.set $5
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=64
  local.tee $3
  local.get $1
  i64.load offset=64
  local.tee $6
  local.get $3
  local.get $6
  i64.lt_u
  select
  i64.store offset=64
  local.get $0
  local.get $0
  i64.load offset=72
  local.tee $3
  local.get $1
  i64.load offset=72
  local.tee $6
  local.get $3
  local.get $6
  i64.gt_u
  select
  i64.store offset=72
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#addHistogram8 (param $0 i32) (param $1 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#add<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#add<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i64)
  (local $4 i32)
  (local $5 i32)
  (local $6 i64)
  (local $7 i64)
  (local $8 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $0
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#valueFromIndex
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#highestEquivalentValue
  local.set $2
  local.get $2
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 13040
    i32.const 8992
    i32.const 639
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   i64.const 0
   local.set $3
   i32.const 0
   local.set $4
   loop $for-loop|0
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtIndex
     local.set $6
     local.get $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $4
      local.get $6
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#addToCountAtIndex
      local.get $3
      local.get $6
      i64.add
      local.set $3
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $3
   i64.add
   i64.store offset=168
   local.get $0
   local.get $0
   i64.load offset=144
   local.tee $6
   local.get $1
   i64.load offset=144
   local.tee $7
   local.get $6
   local.get $7
   i64.gt_u
   select
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#updatedMaxValue
   local.get $0
   local.get $0
   i64.load offset=152
   local.tee $6
   local.get $1
   i64.load offset=152
   local.tee $7
   local.get $6
   local.get $7
   i64.lt_u
   select
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#updateMinNonZeroValue
  else
   local.get $1
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#countsArrayIndex
   local.set $4
   local.get $1
   local.get $4
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtIndex
   local.set $3
   local.get $0
   local.get $3
   local.get $1
   local.get $4
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#valueFromIndex
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordCountAtValue
   i32.const 0
   local.set $5
   loop $for-loop|1
    local.get $5
    local.get $4
    i32.lt_s
    local.set $8
    local.get $8
    if
     local.get $1
     local.get $5
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtIndex
     local.set $3
     local.get $3
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $3
      local.get $1
      local.get $5
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#valueFromIndex
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordCountAtValue
     end
     local.get $5
     i32.const 1
     i32.add
     local.set $5
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=64
  local.tee $3
  local.get $1
  i64.load offset=64
  local.tee $6
  local.get $3
  local.get $6
  i64.lt_u
  select
  i64.store offset=64
  local.get $0
  local.get $0
  i64.load offset=72
  local.tee $3
  local.get $1
  i64.load offset=72
  local.tee $6
  local.get $3
  local.get $6
  i64.gt_u
  select
  i64.store offset=72
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#addHistogram16 (param $0 i32) (param $1 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#add<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#add<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i64)
  (local $4 i32)
  (local $5 i32)
  (local $6 i64)
  (local $7 i64)
  (local $8 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $0
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#valueFromIndex
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#highestEquivalentValue
  local.set $2
  local.get $2
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 13040
    i32.const 8992
    i32.const 639
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   i64.const 0
   local.set $3
   i32.const 0
   local.set $4
   loop $for-loop|0
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtIndex
     local.set $6
     local.get $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $4
      local.get $6
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#addToCountAtIndex
      local.get $3
      local.get $6
      i64.add
      local.set $3
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $3
   i64.add
   i64.store offset=168
   local.get $0
   local.get $0
   i64.load offset=144
   local.tee $6
   local.get $1
   i64.load offset=144
   local.tee $7
   local.get $6
   local.get $7
   i64.gt_u
   select
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#updatedMaxValue
   local.get $0
   local.get $0
   i64.load offset=152
   local.tee $6
   local.get $1
   i64.load offset=152
   local.tee $7
   local.get $6
   local.get $7
   i64.lt_u
   select
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#updateMinNonZeroValue
  else
   local.get $1
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#countsArrayIndex
   local.set $4
   local.get $1
   local.get $4
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtIndex
   local.set $3
   local.get $0
   local.get $3
   local.get $1
   local.get $4
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#valueFromIndex
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordCountAtValue
   i32.const 0
   local.set $5
   loop $for-loop|1
    local.get $5
    local.get $4
    i32.lt_s
    local.set $8
    local.get $8
    if
     local.get $1
     local.get $5
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtIndex
     local.set $3
     local.get $3
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $3
      local.get $1
      local.get $5
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#valueFromIndex
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordCountAtValue
     end
     local.get $5
     i32.const 1
     i32.add
     local.set $5
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=64
  local.tee $3
  local.get $1
  i64.load offset=64
  local.tee $6
  local.get $3
  local.get $6
  i64.lt_u
  select
  i64.store offset=64
  local.get $0
  local.get $0
  i64.load offset=72
  local.tee $3
  local.get $1
  i64.load offset=72
  local.tee $6
  local.get $3
  local.get $6
  i64.gt_u
  select
  i64.store offset=72
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#addHistogram32 (param $0 i32) (param $1 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#add<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#add<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i64)
  (local $4 i32)
  (local $5 i32)
  (local $6 i64)
  (local $7 i64)
  (local $8 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $0
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#valueFromIndex
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#highestEquivalentValue
  local.set $2
  local.get $2
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 13040
    i32.const 8992
    i32.const 639
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   i64.const 0
   local.set $3
   i32.const 0
   local.set $4
   loop $for-loop|0
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtIndex
     local.set $6
     local.get $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $4
      local.get $6
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#addToCountAtIndex
      local.get $3
      local.get $6
      i64.add
      local.set $3
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $3
   i64.add
   i64.store offset=168
   local.get $0
   local.get $0
   i64.load offset=144
   local.tee $6
   local.get $1
   i64.load offset=144
   local.tee $7
   local.get $6
   local.get $7
   i64.gt_u
   select
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#updatedMaxValue
   local.get $0
   local.get $0
   i64.load offset=152
   local.tee $6
   local.get $1
   i64.load offset=152
   local.tee $7
   local.get $6
   local.get $7
   i64.lt_u
   select
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#updateMinNonZeroValue
  else
   local.get $1
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#countsArrayIndex
   local.set $4
   local.get $1
   local.get $4
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtIndex
   local.set $3
   local.get $0
   local.get $3
   local.get $1
   local.get $4
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#valueFromIndex
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordCountAtValue
   i32.const 0
   local.set $5
   loop $for-loop|1
    local.get $5
    local.get $4
    i32.lt_s
    local.set $8
    local.get $8
    if
     local.get $1
     local.get $5
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtIndex
     local.set $3
     local.get $3
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $3
      local.get $1
      local.get $5
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#valueFromIndex
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordCountAtValue
     end
     local.get $5
     i32.const 1
     i32.add
     local.set $5
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=64
  local.tee $3
  local.get $1
  i64.load offset=64
  local.tee $6
  local.get $3
  local.get $6
  i64.lt_u
  select
  i64.store offset=64
  local.get $0
  local.get $0
  i64.load offset=72
  local.tee $3
  local.get $1
  i64.load offset=72
  local.tee $6
  local.get $3
  local.get $6
  i64.gt_u
  select
  i64.store offset=72
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#addHistogram64 (param $0 i32) (param $1 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#add<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#add<assembly/packedarray/PackedArray/PackedArray,u64> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i64)
  (local $4 i32)
  (local $5 i32)
  (local $6 i64)
  (local $7 i64)
  (local $8 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $0
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#valueFromIndex
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#highestEquivalentValue
  local.set $2
  local.get $2
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 13040
    i32.const 8992
    i32.const 639
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   i64.const 0
   local.set $3
   i32.const 0
   local.set $4
   loop $for-loop|0
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtIndex
     local.set $6
     local.get $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $4
      local.get $6
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#addToCountAtIndex
      local.get $3
      local.get $6
      i64.add
      local.set $3
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $3
   i64.add
   i64.store offset=168
   local.get $0
   local.get $0
   i64.load offset=144
   local.tee $6
   local.get $1
   i64.load offset=144
   local.tee $7
   local.get $6
   local.get $7
   i64.gt_u
   select
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#updatedMaxValue
   local.get $0
   local.get $0
   i64.load offset=152
   local.tee $6
   local.get $1
   i64.load offset=152
   local.tee $7
   local.get $6
   local.get $7
   i64.lt_u
   select
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#updateMinNonZeroValue
  else
   local.get $1
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#countsArrayIndex
   local.set $4
   local.get $1
   local.get $4
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtIndex
   local.set $3
   local.get $0
   local.get $3
   local.get $1
   local.get $4
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#valueFromIndex
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordCountAtValue
   i32.const 0
   local.set $5
   loop $for-loop|1
    local.get $5
    local.get $4
    i32.lt_s
    local.set $8
    local.get $8
    if
     local.get $1
     local.get $5
     call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtIndex
     local.set $3
     local.get $3
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $3
      local.get $1
      local.get $5
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#valueFromIndex
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordCountAtValue
     end
     local.get $5
     i32.const 1
     i32.add
     local.set $5
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=64
  local.tee $3
  local.get $1
  i64.load offset=64
  local.tee $6
  local.get $3
  local.get $6
  i64.lt_u
  select
  i64.store offset=64
  local.get $0
  local.get $0
  i64.load offset=72
  local.tee $3
  local.get $1
  i64.load offset=72
  local.tee $6
  local.get $3
  local.get $6
  i64.gt_u
  select
  i64.store offset=72
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#addPackedHistogram (param $0 i32) (param $1 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#add<assembly/packedarray/PackedArray/PackedArray,u64>
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtValue (param $0 i32) (param $1 i64) (result i64)
  (local $2 i32)
  (local $3 i32)
  i32.const 0
  local.tee $2
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#countsArrayIndex
  local.tee $3
  local.get $2
  local.get $3
  i32.gt_s
  select
  local.tee $2
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $3
  local.get $2
  local.get $3
  i32.lt_s
  select
  local.set $2
  local.get $0
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtIndex
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#establishInternalTackingValues (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i64)
  (local $5 i32)
  (local $6 i32)
  (local $7 i64)
  local.get $0
  i64.const 0
  i64.store offset=144
  local.get $0
  global.get $~lib/builtins/u64.MAX_VALUE
  i64.store offset=152
  i32.const -1
  local.set $2
  i32.const -1
  local.set $3
  i64.const 0
  local.set $4
  i32.const 0
  local.set $5
  loop $for-loop|0
   local.get $5
   local.get $1
   i32.lt_s
   local.set $6
   local.get $6
   if
    local.get $0
    local.get $5
    call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtIndex
    local.set $7
    local.get $7
    i64.const 0
    i64.gt_u
    if
     local.get $4
     local.get $7
     i64.add
     local.set $4
     local.get $5
     local.set $2
     local.get $3
     i32.const -1
     i32.eq
     if (result i32)
      local.get $5
      i32.const 0
      i32.ne
     else
      i32.const 0
     end
     if
      local.get $5
      local.set $3
     end
    end
    local.get $5
    i32.const 1
    i32.add
    local.set $5
    br $for-loop|0
   end
  end
  local.get $2
  i32.const 0
  i32.ge_s
  if
   local.get $0
   local.get $0
   local.get $0
   local.get $2
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#valueFromIndex
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#highestEquivalentValue
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#updatedMaxValue
  end
  local.get $3
  i32.const 0
  i32.ge_s
  if
   local.get $0
   local.get $0
   local.get $3
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#valueFromIndex
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#updateMinNonZeroValue
  end
  local.get $0
  local.get $4
  i64.store offset=168
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#establishInternalTackingValues@varargs (param $0 i32) (param $1 i32)
  block $1of1
   block $0of1
    block $outOfRange
     global.get $~argumentsLength
     br_table $0of1 $1of1 $outOfRange
    end
    unreachable
   end
   local.get $0
   i32.load offset=52
   local.set $1
  end
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#establishInternalTackingValues
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i64)
  (local $4 i32)
  (local $5 i32)
  (local $6 i64)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  (local $15 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#valueFromIndex
  local.set $2
  local.get $2
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 13040
    i32.const 8992
    i32.const 748
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   i64.const 0
   local.set $3
   i32.const 0
   local.set $4
   loop $for-loop|0
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtIndex
     local.set $6
     local.get $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $4
      i64.const 0
      local.get $6
      i64.sub
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#addToCountAtIndex
      local.get $3
      local.get $6
      i64.add
      local.set $3
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $3
   i64.sub
   i64.store offset=168
  else
   i32.const 0
   local.set $4
   loop $for-loop|1
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtIndex
     local.set $3
     local.get $3
     i64.const 0
     i64.gt_u
     if
      local.get $1
      local.get $4
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#valueFromIndex
      local.set $6
      local.get $0
      local.get $6
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtValue
      local.get $3
      i64.lt_u
      if
       i32.const 13648
       local.get $3
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $7
       call $~lib/string/String.__concat
       local.tee $8
       i32.const 13712
       call $~lib/string/String.__concat
       local.tee $9
       local.get $6
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $10
       call $~lib/string/String.__concat
       local.tee $11
       i32.const 13760
       call $~lib/string/String.__concat
       local.tee $12
       local.get $0
       local.get $6
       call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtValue
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $13
       call $~lib/string/String.__concat
       local.tee $14
       i32.const 13840
       call $~lib/string/String.__concat
       local.tee $15
       i32.const 8992
       i32.const 777
       i32.const 13
       call $~lib/builtins/abort
       unreachable
      end
      local.get $0
      i64.const 0
      local.get $3
      i64.sub
      local.get $6
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordCountAtValue
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=144
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtValue
  i64.const 0
  i64.le_u
  if (result i32)
   i32.const 1
  else
   local.get $0
   local.get $0
   i64.load offset=152
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtValue
   i64.const 0
   i64.le_u
  end
  if
   local.get $0
   i32.const 0
   global.set $~argumentsLength
   i32.const 0
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#establishInternalTackingValues@varargs
  end
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#subtractHistogram8 (param $0 i32) (param $1 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i64)
  (local $4 i32)
  (local $5 i32)
  (local $6 i64)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  (local $15 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#valueFromIndex
  local.set $2
  local.get $2
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 13040
    i32.const 8992
    i32.const 748
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   i64.const 0
   local.set $3
   i32.const 0
   local.set $4
   loop $for-loop|0
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtIndex
     local.set $6
     local.get $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $4
      i64.const 0
      local.get $6
      i64.sub
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#addToCountAtIndex
      local.get $3
      local.get $6
      i64.add
      local.set $3
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $3
   i64.sub
   i64.store offset=168
  else
   i32.const 0
   local.set $4
   loop $for-loop|1
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtIndex
     local.set $3
     local.get $3
     i64.const 0
     i64.gt_u
     if
      local.get $1
      local.get $4
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#valueFromIndex
      local.set $6
      local.get $0
      local.get $6
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtValue
      local.get $3
      i64.lt_u
      if
       i32.const 13648
       local.get $3
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $7
       call $~lib/string/String.__concat
       local.tee $8
       i32.const 13712
       call $~lib/string/String.__concat
       local.tee $9
       local.get $6
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $10
       call $~lib/string/String.__concat
       local.tee $11
       i32.const 13760
       call $~lib/string/String.__concat
       local.tee $12
       local.get $0
       local.get $6
       call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtValue
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $13
       call $~lib/string/String.__concat
       local.tee $14
       i32.const 13840
       call $~lib/string/String.__concat
       local.tee $15
       i32.const 8992
       i32.const 777
       i32.const 13
       call $~lib/builtins/abort
       unreachable
      end
      local.get $0
      i64.const 0
      local.get $3
      i64.sub
      local.get $6
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordCountAtValue
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=144
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtValue
  i64.const 0
  i64.le_u
  if (result i32)
   i32.const 1
  else
   local.get $0
   local.get $0
   i64.load offset=152
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtValue
   i64.const 0
   i64.le_u
  end
  if
   local.get $0
   i32.const 0
   global.set $~argumentsLength
   i32.const 0
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#establishInternalTackingValues@varargs
  end
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#subtractHistogram16 (param $0 i32) (param $1 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i64)
  (local $4 i32)
  (local $5 i32)
  (local $6 i64)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  (local $15 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#valueFromIndex
  local.set $2
  local.get $2
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 13040
    i32.const 8992
    i32.const 748
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   i64.const 0
   local.set $3
   i32.const 0
   local.set $4
   loop $for-loop|0
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtIndex
     local.set $6
     local.get $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $4
      i64.const 0
      local.get $6
      i64.sub
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#addToCountAtIndex
      local.get $3
      local.get $6
      i64.add
      local.set $3
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $3
   i64.sub
   i64.store offset=168
  else
   i32.const 0
   local.set $4
   loop $for-loop|1
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtIndex
     local.set $3
     local.get $3
     i64.const 0
     i64.gt_u
     if
      local.get $1
      local.get $4
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#valueFromIndex
      local.set $6
      local.get $0
      local.get $6
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtValue
      local.get $3
      i64.lt_u
      if
       i32.const 13648
       local.get $3
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $7
       call $~lib/string/String.__concat
       local.tee $8
       i32.const 13712
       call $~lib/string/String.__concat
       local.tee $9
       local.get $6
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $10
       call $~lib/string/String.__concat
       local.tee $11
       i32.const 13760
       call $~lib/string/String.__concat
       local.tee $12
       local.get $0
       local.get $6
       call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtValue
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $13
       call $~lib/string/String.__concat
       local.tee $14
       i32.const 13840
       call $~lib/string/String.__concat
       local.tee $15
       i32.const 8992
       i32.const 777
       i32.const 13
       call $~lib/builtins/abort
       unreachable
      end
      local.get $0
      i64.const 0
      local.get $3
      i64.sub
      local.get $6
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordCountAtValue
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=144
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtValue
  i64.const 0
  i64.le_u
  if (result i32)
   i32.const 1
  else
   local.get $0
   local.get $0
   i64.load offset=152
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtValue
   i64.const 0
   i64.le_u
  end
  if
   local.get $0
   i32.const 0
   global.set $~argumentsLength
   i32.const 0
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#establishInternalTackingValues@varargs
  end
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#subtractHistogram32 (param $0 i32) (param $1 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i64)
  (local $4 i32)
  (local $5 i32)
  (local $6 i64)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  (local $15 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#valueFromIndex
  local.set $2
  local.get $2
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 13040
    i32.const 8992
    i32.const 748
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   i64.const 0
   local.set $3
   i32.const 0
   local.set $4
   loop $for-loop|0
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtIndex
     local.set $6
     local.get $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $4
      i64.const 0
      local.get $6
      i64.sub
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#addToCountAtIndex
      local.get $3
      local.get $6
      i64.add
      local.set $3
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $3
   i64.sub
   i64.store offset=168
  else
   i32.const 0
   local.set $4
   loop $for-loop|1
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtIndex
     local.set $3
     local.get $3
     i64.const 0
     i64.gt_u
     if
      local.get $1
      local.get $4
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#valueFromIndex
      local.set $6
      local.get $0
      local.get $6
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtValue
      local.get $3
      i64.lt_u
      if
       i32.const 13648
       local.get $3
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $7
       call $~lib/string/String.__concat
       local.tee $8
       i32.const 13712
       call $~lib/string/String.__concat
       local.tee $9
       local.get $6
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $10
       call $~lib/string/String.__concat
       local.tee $11
       i32.const 13760
       call $~lib/string/String.__concat
       local.tee $12
       local.get $0
       local.get $6
       call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtValue
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $13
       call $~lib/string/String.__concat
       local.tee $14
       i32.const 13840
       call $~lib/string/String.__concat
       local.tee $15
       i32.const 8992
       i32.const 777
       i32.const 13
       call $~lib/builtins/abort
       unreachable
      end
      local.get $0
      i64.const 0
      local.get $3
      i64.sub
      local.get $6
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordCountAtValue
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=144
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtValue
  i64.const 0
  i64.le_u
  if (result i32)
   i32.const 1
  else
   local.get $0
   local.get $0
   i64.load offset=152
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtValue
   i64.const 0
   i64.le_u
  end
  if
   local.get $0
   i32.const 0
   global.set $~argumentsLength
   i32.const 0
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#establishInternalTackingValues@varargs
  end
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#subtractHistogram64 (param $0 i32) (param $1 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#subtract<assembly/packedarray/PackedArray/PackedArray,u64> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i64)
  (local $4 i32)
  (local $5 i32)
  (local $6 i64)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  (local $15 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#valueFromIndex
  local.set $2
  local.get $2
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 13040
    i32.const 8992
    i32.const 748
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   i64.const 0
   local.set $3
   i32.const 0
   local.set $4
   loop $for-loop|0
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtIndex
     local.set $6
     local.get $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $4
      i64.const 0
      local.get $6
      i64.sub
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#addToCountAtIndex
      local.get $3
      local.get $6
      i64.add
      local.set $3
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $3
   i64.sub
   i64.store offset=168
  else
   i32.const 0
   local.set $4
   loop $for-loop|1
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtIndex
     local.set $3
     local.get $3
     i64.const 0
     i64.gt_u
     if
      local.get $1
      local.get $4
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#valueFromIndex
      local.set $6
      local.get $0
      local.get $6
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtValue
      local.get $3
      i64.lt_u
      if
       i32.const 13648
       local.get $3
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $7
       call $~lib/string/String.__concat
       local.tee $8
       i32.const 13712
       call $~lib/string/String.__concat
       local.tee $9
       local.get $6
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $10
       call $~lib/string/String.__concat
       local.tee $11
       i32.const 13760
       call $~lib/string/String.__concat
       local.tee $12
       local.get $0
       local.get $6
       call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtValue
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $13
       call $~lib/string/String.__concat
       local.tee $14
       i32.const 13840
       call $~lib/string/String.__concat
       local.tee $15
       i32.const 8992
       i32.const 777
       i32.const 13
       call $~lib/builtins/abort
       unreachable
      end
      local.get $0
      i64.const 0
      local.get $3
      i64.sub
      local.get $6
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#recordCountAtValue
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=144
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtValue
  i64.const 0
  i64.le_u
  if (result i32)
   i32.const 1
  else
   local.get $0
   local.get $0
   i64.load offset=152
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtValue
   i64.const 0
   i64.le_u
  end
  if
   local.get $0
   i32.const 0
   global.set $~argumentsLength
   i32.const 0
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#establishInternalTackingValues@varargs
  end
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#subtractPackedHistogram (param $0 i32) (param $1 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#subtract<assembly/packedarray/PackedArray/PackedArray,u64>
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/encoding/fillBufferFromCountsArray<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16> (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i64)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  (local $15 i32)
  (local $16 i32)
  (local $17 i32)
  local.get $0
  call $~lib/rt/pure/__retain
  local.set $0
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $0
  i64.load offset=144
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#countsArrayIndex
  i32.const 1
  i32.add
  local.set $2
  i32.const 0
  local.set $3
  loop $while-continue|0
   local.get $3
   local.get $2
   i32.lt_s
   local.set $4
   local.get $4
   if
    local.get $0
    local.get $3
    local.tee $5
    i32.const 1
    i32.add
    local.set $3
    local.get $5
    call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtIndex
    local.set $6
    local.get $6
    i64.const 0
    i64.lt_u
    if
     i32.const 13872
     local.get $6
     i32.const 10
     call $~lib/number/U64#toString
     local.tee $5
     call $~lib/string/String.__concat
     local.tee $7
     i32.const 14000
     call $~lib/string/String.__concat
     local.tee $8
     local.get $3
     i32.const 10
     call $~lib/number/I32#toString
     local.tee $9
     call $~lib/string/String.__concat
     local.tee $10
     i32.const 14048
     call $~lib/string/String.__concat
     local.tee $11
     local.get $0
     local.get $0
     local.get $3
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#valueFromIndex
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#lowestEquivalentValue
     i32.const 10
     call $~lib/number/U64#toString
     local.tee $12
     call $~lib/string/String.__concat
     local.tee $13
     i32.const 14144
     call $~lib/string/String.__concat
     local.tee $14
     local.get $0
     local.get $0
     local.get $3
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#valueFromIndex
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#nextNonEquivalentValue
     i32.const 10
     call $~lib/number/U64#toString
     local.tee $15
     call $~lib/string/String.__concat
     local.tee $16
     i32.const 13840
     call $~lib/string/String.__concat
     local.tee $17
     i32.const 14176
     i32.const 31
     i32.const 7
     call $~lib/builtins/abort
     unreachable
    end
    i32.const 0
    local.set $17
    local.get $6
    i64.const 0
    i64.eq
    if
     i32.const 1
     local.set $17
     loop $while-continue|1
      local.get $3
      local.get $2
      i32.lt_s
      if (result i32)
       local.get $0
       local.get $3
       call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtIndex
       i64.const 0
       i64.eq
      else
       i32.const 0
      end
      local.set $16
      local.get $16
      if
       local.get $17
       i32.const 1
       i32.add
       local.set $17
       local.get $3
       i32.const 1
       i32.add
       local.set $3
       br $while-continue|1
      end
     end
    end
    local.get $17
    i32.const 1
    i32.gt_s
    if
     local.get $1
     i32.const 0
     local.get $17
     i32.sub
     i64.extend_i32_s
     call $assembly/ZigZagEncoding/ZigZagEncoding.encode
    else
     local.get $1
     local.get $6
     call $assembly/ZigZagEncoding/ZigZagEncoding.encode
    end
    br $while-continue|0
   end
  end
  local.get $0
  call $~lib/rt/pure/__release
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/encoding/encodeIntoByteBuffer<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16> (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  local.get $0
  call $~lib/rt/pure/__retain
  local.set $0
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $1
  i32.load
  local.set $2
  local.get $1
  global.get $assembly/encoding/encodingCookie
  call $assembly/ByteBuffer/ByteBuffer#putInt32
  local.get $1
  i32.const 0
  call $assembly/ByteBuffer/ByteBuffer#putInt32
  local.get $1
  i32.const 1
  call $assembly/ByteBuffer/ByteBuffer#putInt32
  local.get $1
  local.get $0
  i32.load8_u offset=32
  call $assembly/ByteBuffer/ByteBuffer#putInt32
  local.get $1
  local.get $0
  i64.load offset=24
  call $assembly/ByteBuffer/ByteBuffer#putInt64
  local.get $1
  local.get $0
  i64.load offset=16
  call $assembly/ByteBuffer/ByteBuffer#putInt64
  local.get $1
  i64.const 1
  call $assembly/ByteBuffer/ByteBuffer#putInt64
  local.get $1
  i32.load
  local.set $3
  local.get $0
  local.get $1
  call $assembly/encoding/fillBufferFromCountsArray<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>
  local.get $1
  i32.load
  local.set $4
  local.get $1
  local.get $2
  i32.const 4
  i32.add
  i32.store
  local.get $1
  local.get $4
  local.get $3
  i32.sub
  call $assembly/ByteBuffer/ByteBuffer#putInt32
  local.get $1
  local.get $4
  i32.store
  local.get $4
  local.get $2
  i32.sub
  local.set $5
  local.get $0
  call $~lib/rt/pure/__release
  local.get $1
  call $~lib/rt/pure/__release
  local.get $5
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#encode (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  i32.const 1024
  call $assembly/ByteBuffer/ByteBuffer.allocate
  local.set $1
  local.get $0
  local.get $1
  call $assembly/encoding/encodeIntoByteBuffer<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>
  drop
  local.get $1
  i32.load offset=4
  i32.const 0
  local.get $1
  i32.load
  call $~lib/typedarray/Uint8Array#slice
  local.set $2
  local.get $1
  call $~lib/rt/pure/__release
  local.get $2
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#encode (param $0 i32) (result i32)
  local.get $0
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#encode
 )
 (func $~lib/typedarray/Uint16Array#fill (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (result i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  local.get $0
  call $~lib/rt/pure/__retain
  local.set $7
  local.get $1
  local.set $6
  local.get $2
  local.set $5
  local.get $3
  local.set $4
  local.get $7
  i32.load offset=4
  local.set $8
  local.get $7
  call $~lib/typedarray/Uint16Array#get:length
  local.set $9
  local.get $5
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $9
   local.get $5
   i32.add
   local.tee $10
   i32.const 0
   local.tee $11
   local.get $10
   local.get $11
   i32.gt_s
   select
  else
   local.get $5
   local.tee $10
   local.get $9
   local.tee $11
   local.get $10
   local.get $11
   i32.lt_s
   select
  end
  local.set $5
  local.get $4
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $9
   local.get $4
   i32.add
   local.tee $10
   i32.const 0
   local.tee $11
   local.get $10
   local.get $11
   i32.gt_s
   select
  else
   local.get $4
   local.tee $10
   local.get $9
   local.tee $11
   local.get $10
   local.get $11
   i32.lt_s
   select
  end
  local.set $4
  i32.const 2
  i32.const 1
  i32.eq
  drop
  loop $for-loop|0
   local.get $5
   local.get $4
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $8
    local.get $5
    i32.const 1
    i32.shl
    i32.add
    local.get $6
    i32.store16
    local.get $5
    i32.const 1
    i32.add
    local.set $5
    br $for-loop|0
   end
  end
  local.get $7
 )
 (func $assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>#clear (param $0 i32)
  local.get $0
  i32.load
  i32.const 0
  i32.const 0
  global.get $~lib/builtins/i32.MAX_VALUE
  call $~lib/typedarray/Uint16Array#fill
  call $~lib/rt/pure/__release
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#clearCounts (param $0 i32)
  local.get $0
  i32.load offset=160
  call $assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>#clear
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#reset (param $0 i32)
  local.get $0
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#clearCounts
  local.get $0
  i64.const 0
  i64.store offset=168
  local.get $0
  i64.const 0
  i64.store offset=64
  local.get $0
  i64.const 0
  i64.store offset=72
  local.get $0
  i64.const 0
  i64.store offset=144
  local.get $0
  global.get $~lib/number/U64.MAX_VALUE
  i64.store offset=152
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#reset (param $0 i32)
  local.get $0
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#reset
 )
 (func $assembly/AbstractHistogramBase/AbstractHistogramBase<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#constructor (param $0 i32) (result i32)
  local.get $0
  i32.eqz
  if
   i32.const 104
   i32.const 29
   call $~lib/rt/tlsf/__alloc
   call $~lib/rt/pure/__retain
   local.set $0
  end
  local.get $0
  f64.const 0
  f64.store
  local.get $0
  i32.const 0
  i32.store8 offset=8
  local.get $0
  i64.const 0
  i64.store offset=16
  local.get $0
  i64.const 0
  i64.store offset=24
  local.get $0
  i32.const 0
  i32.store8 offset=32
  local.get $0
  i64.const 0
  i64.store offset=40
  local.get $0
  i32.const 0
  i32.store offset=48
  local.get $0
  i32.const 0
  i32.store offset=52
  local.get $0
  i64.const 0
  i64.store offset=56
  local.get $0
  global.get $~lib/builtins/u64.MAX_VALUE
  i64.store offset=64
  local.get $0
  i64.const 0
  i64.store offset=72
  local.get $0
  global.get $assembly/AbstractHistogramBase/NO_TAG
  call $~lib/rt/pure/__retain
  i32.store offset=80
  local.get $0
  f64.const 1
  f64.store offset=88
  local.get $0
  i32.const 0
  i32.store offset=96
  local.get $0
  i32.const 0
  i32.store offset=100
  local.get $0
  f64.const 0
  f64.store
  local.get $0
  i64.const 0
  i64.store offset=16
  local.get $0
  i64.const 0
  i64.store offset=24
  local.get $0
  i32.const 0
  i32.store8 offset=32
  local.get $0
  i64.const 0
  i64.store offset=40
  local.get $0
  i32.const 0
  i32.store offset=48
  local.get $0
  i32.const 0
  i32.store offset=52
  local.get $0
  i64.const 0
  i64.store offset=56
  local.get $0
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getBucketsNeededToCoverValue (param $0 i32) (param $1 i64) (result i32)
  (local $2 i64)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  i32.load offset=48
  i64.extend_i32_s
  local.get $0
  i32.load offset=112
  i64.extend_i32_s
  i64.shl
  local.set $2
  i32.const 1
  local.set $3
  loop $while-continue|0
   local.get $2
   local.get $1
   i64.le_u
   local.set $4
   local.get $4
   if
    local.get $2
    global.get $~lib/builtins/u64.MAX_VALUE
    i64.const 1
    i64.shr_u
    i64.gt_u
    if
     local.get $3
     i32.const 1
     i32.add
     return
    end
    local.get $2
    i64.const 1
    i64.shl
    local.set $2
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $while-continue|0
   end
  end
  local.get $3
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getLengthForNumberOfBuckets (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  local.get $1
  i32.const 1
  i32.add
  local.get $0
  i32.load offset=48
  i32.const 1
  i32.shr_s
  i32.mul
  local.set $2
  local.get $2
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#determineArrayLengthNeeded (param $0 i32) (param $1 i64) (result i32)
  (local $2 i32)
  local.get $1
  i64.const 2
  local.get $0
  i64.load offset=24
  i64.mul
  i64.lt_u
  if
   i32.const 11440
   i32.const 8992
   i32.const 160
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getBucketsNeededToCoverValue
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getLengthForNumberOfBuckets
  local.set $2
  local.get $2
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#establishSize (param $0 i32) (param $1 i64)
  local.get $0
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#determineArrayLengthNeeded
  i32.store offset=52
  local.get $0
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getBucketsNeededToCoverValue
  i64.extend_i32_s
  i64.store offset=40
  local.get $0
  local.get $1
  i64.store offset=16
 )
 (func $assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>#constructor (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  local.get $0
  i32.eqz
  if
   i32.const 4
   i32.const 26
   call $~lib/rt/tlsf/__alloc
   call $~lib/rt/pure/__retain
   local.set $0
  end
  local.get $0
  i32.const 0
  i32.store
  local.get $0
  local.tee $3
  i32.const 0
  local.get $1
  call $~lib/typedarray/Uint32Array#constructor
  local.tee $2
  local.tee $4
  local.get $3
  i32.load
  local.tee $5
  i32.ne
  if
   local.get $4
   call $~lib/rt/pure/__retain
   local.set $4
   local.get $5
   call $~lib/rt/pure/__release
  end
  local.get $4
  i32.store
  local.get $2
  call $~lib/rt/pure/__release
  local.get $0
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#resetIterator (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.tee $2
  local.get $1
  local.tee $3
  local.get $2
  i32.load offset=28
  local.tee $4
  i32.ne
  if
   local.get $3
   call $~lib/rt/pure/__retain
   local.set $3
   local.get $4
   call $~lib/rt/pure/__release
  end
  local.get $3
  i32.store offset=28
  local.get $0
  local.get $1
  i64.load offset=168
  i64.store offset=32
  local.get $0
  local.get $1
  i64.load offset=168
  i64.store offset=96
  local.get $0
  i32.const 0
  i32.store offset=40
  local.get $0
  i64.const 0
  i64.store offset=48
  local.get $0
  i64.const 1
  local.get $1
  i32.load offset=112
  i64.extend_i32_s
  i64.shl
  i64.store offset=56
  local.get $0
  i64.const 0
  i64.store offset=64
  local.get $0
  i64.const 0
  i64.store offset=72
  local.get $0
  i64.const 0
  i64.store offset=80
  local.get $0
  i64.const 0
  i64.store offset=88
  local.get $0
  i64.const 0
  i64.store offset=104
  local.get $0
  i32.const 1
  i32.store8 offset=112
  local.get $0
  i32.load offset=116
  call $assembly/HistogramIterationValue/HistogramIterationValue#reset
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#doReset (param $0 i32) (param $1 i32) (param $2 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $1
  call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#resetIterator
  local.get $0
  local.get $2
  i32.store
  local.get $0
  f64.const 0
  f64.store offset=8
  local.get $0
  f64.const 0
  f64.store offset=16
  local.get $0
  i32.const 0
  i32.store8 offset=24
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#constructor (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  i32.eqz
  if
   i32.const 120
   i32.const 30
   call $~lib/rt/tlsf/__alloc
   call $~lib/rt/pure/__retain
   local.set $0
  end
  local.get $0
  i32.const 0
  i32.store
  local.get $0
  f64.const 0
  f64.store offset=8
  local.get $0
  f64.const 0
  f64.store offset=16
  local.get $0
  i32.const 0
  i32.store8 offset=24
  local.get $0
  i32.const 0
  i32.store offset=28
  local.get $0
  i64.const 0
  i64.store offset=32
  local.get $0
  i32.const 0
  i32.store offset=40
  local.get $0
  i64.const 0
  i64.store offset=48
  local.get $0
  i64.const 0
  i64.store offset=56
  local.get $0
  i64.const 0
  i64.store offset=64
  local.get $0
  i64.const 0
  i64.store offset=72
  local.get $0
  i64.const 0
  i64.store offset=80
  local.get $0
  i64.const 0
  i64.store offset=88
  local.get $0
  i64.const 0
  i64.store offset=96
  local.get $0
  i64.const 0
  i64.store offset=104
  local.get $0
  i32.const 0
  i32.store8 offset=112
  local.get $0
  i32.const 0
  call $assembly/HistogramIterationValue/HistogramIterationValue#constructor
  i32.store offset=116
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  i32.const 0
  i32.store
  local.get $0
  f64.const 0
  f64.store offset=8
  local.get $0
  f64.const 0
  f64.store offset=16
  local.get $0
  i32.const 0
  i32.store8 offset=24
  local.get $0
  local.get $1
  local.get $2
  call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#doReset
  local.get $1
  call $~lib/rt/pure/__release
  local.get $0
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#resetIterator (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.tee $2
  local.get $1
  local.tee $3
  local.get $2
  i32.load offset=4
  local.tee $4
  i32.ne
  if
   local.get $3
   call $~lib/rt/pure/__retain
   local.set $3
   local.get $4
   call $~lib/rt/pure/__release
  end
  local.get $3
  i32.store offset=4
  local.get $0
  local.get $1
  i64.load offset=168
  i64.store offset=8
  local.get $0
  local.get $1
  i64.load offset=168
  i64.store offset=72
  local.get $0
  i32.const 0
  i32.store offset=16
  local.get $0
  i64.const 0
  i64.store offset=24
  local.get $0
  i64.const 1
  local.get $1
  i32.load offset=112
  i64.extend_i32_s
  i64.shl
  i64.store offset=32
  local.get $0
  i64.const 0
  i64.store offset=40
  local.get $0
  i64.const 0
  i64.store offset=48
  local.get $0
  i64.const 0
  i64.store offset=56
  local.get $0
  i64.const 0
  i64.store offset=64
  local.get $0
  i64.const 0
  i64.store offset=80
  local.get $0
  i32.const 1
  i32.store8 offset=88
  local.get $0
  i32.load offset=92
  call $assembly/HistogramIterationValue/HistogramIterationValue#reset
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#doReset (param $0 i32) (param $1 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $1
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#resetIterator
  local.get $0
  i32.const -1
  i32.store
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#constructor (param $0 i32) (param $1 i32) (result i32)
  local.get $0
  i32.eqz
  if
   i32.const 96
   i32.const 31
   call $~lib/rt/tlsf/__alloc
   call $~lib/rt/pure/__retain
   local.set $0
  end
  local.get $0
  i32.const 0
  i32.store
  local.get $0
  i32.const 0
  i32.store offset=4
  local.get $0
  i64.const 0
  i64.store offset=8
  local.get $0
  i32.const 0
  i32.store offset=16
  local.get $0
  i64.const 0
  i64.store offset=24
  local.get $0
  i64.const 0
  i64.store offset=32
  local.get $0
  i64.const 0
  i64.store offset=40
  local.get $0
  i64.const 0
  i64.store offset=48
  local.get $0
  i64.const 0
  i64.store offset=56
  local.get $0
  i64.const 0
  i64.store offset=64
  local.get $0
  i64.const 0
  i64.store offset=72
  local.get $0
  i64.const 0
  i64.store offset=80
  local.get $0
  i32.const 0
  i32.store8 offset=88
  local.get $0
  i32.const 0
  call $assembly/HistogramIterationValue/HistogramIterationValue#constructor
  i32.store offset=92
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $1
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#doReset
  local.get $1
  call $~lib/rt/pure/__release
  local.get $0
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#init (param $0 i32) (param $1 i64) (param $2 i64) (param $3 i32) (param $4 f64)
  (local $5 i64)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  local.get $0
  local.get $1
  i64.store offset=24
  local.get $0
  local.get $2
  i64.store offset=16
  local.get $0
  local.get $3
  i32.store8 offset=32
  local.get $0
  local.get $4
  f64.store offset=88
  i32.const 2
  i64.extend_i32_s
  f64.const 10
  local.get $3
  f64.convert_i32_u
  call $~lib/math/NativeMath.pow
  i64.trunc_f64_u
  i64.mul
  local.set $5
  local.get $0
  local.get $1
  f64.convert_i64_u
  call $~lib/math/NativeMath.log2
  f64.floor
  i32.trunc_f64_s
  i32.store offset=112
  local.get $0
  i64.const 1
  local.get $0
  i32.load offset=112
  i64.extend_i32_s
  i64.shl
  i64.const 1
  i64.sub
  i64.store offset=136
  local.get $5
  f64.convert_i64_u
  call $~lib/math/NativeMath.log2
  f64.ceil
  i32.trunc_f64_s
  local.set $6
  local.get $0
  local.get $6
  i32.const 1
  i32.sub
  i32.store offset=108
  local.get $0
  i32.const 1
  local.get $6
  i32.shl
  i32.store offset=48
  local.get $0
  local.get $0
  i32.load offset=48
  i32.const 1
  i32.shr_s
  i32.store offset=116
  local.get $0
  local.get $0
  i32.load offset=48
  i64.extend_i32_s
  i64.const 1
  i64.sub
  local.get $0
  i32.load offset=112
  i64.extend_i32_s
  i64.shl
  i64.store offset=128
  local.get $0
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#establishSize
  local.get $0
  local.tee $8
  i32.const 0
  local.get $0
  i32.load offset=52
  call $assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>#constructor
  local.tee $7
  local.tee $9
  local.get $8
  i32.load offset=160
  local.tee $10
  i32.ne
  if
   local.get $9
   call $~lib/rt/pure/__retain
   local.set $9
   local.get $10
   call $~lib/rt/pure/__release
  end
  local.get $9
  i32.store offset=160
  local.get $0
  i32.const 64
  local.get $0
  i32.load offset=112
  i32.sub
  local.get $0
  i32.load offset=108
  i32.sub
  i32.const 1
  i32.sub
  i32.store offset=104
  local.get $0
  local.tee $10
  i32.const 0
  local.get $0
  i32.const 1
  call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#constructor
  local.set $9
  local.get $10
  i32.load offset=96
  call $~lib/rt/pure/__release
  local.get $9
  i32.store offset=96
  local.get $0
  local.tee $8
  i32.const 0
  local.get $0
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#constructor
  local.set $9
  local.get $8
  i32.load offset=100
  call $~lib/rt/pure/__release
  local.get $9
  i32.store offset=100
  local.get $7
  call $~lib/rt/pure/__release
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#constructor (param $0 i32) (param $1 i64) (param $2 i64) (param $3 i32) (result i32)
  (local $4 f64)
  local.get $0
  i32.eqz
  if
   i32.const 176
   i32.const 28
   call $~lib/rt/tlsf/__alloc
   call $~lib/rt/pure/__retain
   local.set $0
  end
  local.get $0
  i32.const 0
  i32.store offset=104
  local.get $0
  i32.const 0
  i32.store offset=108
  local.get $0
  i32.const 0
  i32.store offset=112
  local.get $0
  i32.const 0
  i32.store offset=116
  local.get $0
  i64.const 0
  i64.store offset=120
  local.get $0
  i64.const 0
  i64.store offset=128
  local.get $0
  i64.const 0
  i64.store offset=136
  local.get $0
  i64.const 0
  i64.store offset=144
  local.get $0
  global.get $~lib/number/U64.MAX_VALUE
  i64.store offset=152
  local.get $0
  i32.const 0
  i32.store offset=160
  local.get $0
  i64.const 0
  i64.store offset=168
  local.get $0
  call $assembly/AbstractHistogramBase/AbstractHistogramBase<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#constructor
  local.set $0
  local.get $1
  i64.const 1
  i64.lt_u
  if
   i32.const 8896
   i32.const 8992
   i32.const 61
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $2
  i64.const 2
  local.get $1
  i64.mul
  i64.lt_u
  if
   i32.const 9056
   i32.const 8992
   i32.const 64
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $3
  i32.const 255
  i32.and
  i32.const 0
  i32.lt_u
  if (result i32)
   i32.const 1
  else
   local.get $3
   i32.const 255
   i32.and
   i32.const 5
   i32.gt_u
  end
  if
   i32.const 9264
   i32.const 8992
   i32.const 72
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  global.get $assembly/AbstractHistogramBase/AbstractHistogramBase.identityBuilder
  local.tee $4
  f64.const 1
  f64.add
  global.set $assembly/AbstractHistogramBase/AbstractHistogramBase.identityBuilder
  local.get $4
  f64.store
  local.get $0
  local.get $1
  local.get $2
  local.get $3
  f64.const 1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#init
  local.get $0
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#constructor (param $0 i32) (param $1 f64) (param $2 f64) (param $3 f64) (param $4 i32) (param $5 i32) (result i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  local.get $0
  i32.eqz
  if
   i32.const 4
   i32.const 27
   call $~lib/rt/tlsf/__alloc
   call $~lib/rt/pure/__retain
   local.set $0
  end
  local.get $0
  i32.const 0
  i32.store
  local.get $5
  call $~lib/rt/pure/__retain
  local.set $5
  local.get $5
  if
   local.get $0
   local.tee $6
   local.get $5
   local.tee $7
   local.get $6
   i32.load
   local.tee $8
   i32.ne
   if
    local.get $7
    call $~lib/rt/pure/__retain
    local.set $7
    local.get $8
    call $~lib/rt/pure/__release
   end
   local.get $7
   i32.store
  else
   local.get $0
   local.tee $8
   i32.const 0
   local.get $1
   i64.trunc_f64_u
   local.get $2
   i64.trunc_f64_u
   local.get $3
   i32.trunc_f64_u
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#constructor
   local.set $7
   local.get $8
   i32.load
   call $~lib/rt/pure/__release
   local.get $7
   i32.store
   local.get $0
   i32.load
   local.get $4
   i32.store8 offset=8
  end
  local.get $5
  call $~lib/rt/pure/__release
  local.get $0
 )
 (func $assembly/index/Histogram32#constructor (param $0 i32) (param $1 f64) (param $2 f64) (param $3 f64) (param $4 i32) (param $5 i32) (result i32)
  local.get $0
  i32.eqz
  if
   i32.const 4
   i32.const 24
   call $~lib/rt/tlsf/__alloc
   call $~lib/rt/pure/__retain
   local.set $0
  end
  local.get $0
  local.get $1
  local.get $2
  local.get $3
  local.get $4
  local.get $5
  call $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#constructor
  local.set $0
  local.get $0
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#get:_histogram (param $0 i32) (result i32)
  local.get $0
  i32.load
  call $~lib/rt/pure/__retain
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#set:_histogram (param $0 i32) (param $1 i32)
  (local $2 i32)
  local.get $0
  local.get $1
  local.get $0
  i32.load
  local.tee $2
  i32.ne
  if
   local.get $1
   call $~lib/rt/pure/__retain
   drop
   local.get $2
   call $~lib/rt/pure/__release
  end
  local.get $1
  i32.store
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#get:autoResize (param $0 i32) (result i32)
  local.get $0
  i32.load
  i32.load8_u offset=8
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#set:autoResize (param $0 i32) (param $1 i32)
  local.get $0
  i32.load
  local.get $1
  i32.store8 offset=8
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#get:highestTrackableValue (param $0 i32) (result f64)
  local.get $0
  i32.load
  i64.load offset=16
  f64.convert_i64_u
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#set:highestTrackableValue (param $0 i32) (param $1 f64)
  local.get $0
  i32.load
  local.get $1
  i64.trunc_f64_u
  i64.store offset=16
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#get:startTimeStampMsec (param $0 i32) (result f64)
  local.get $0
  i32.load
  i64.load offset=64
  f64.convert_i64_u
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#set:startTimeStampMsec (param $0 i32) (param $1 f64)
  local.get $0
  i32.load
  local.get $1
  i64.trunc_f64_u
  i64.store offset=64
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#get:endTimeStampMsec (param $0 i32) (result f64)
  local.get $0
  i32.load
  i64.load offset=72
  f64.convert_i64_u
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#set:endTimeStampMsec (param $0 i32) (param $1 f64)
  local.get $0
  i32.load
  local.get $1
  i64.trunc_f64_u
  i64.store offset=72
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#get:minNonZeroValue (param $0 i32) (result f64)
  local.get $0
  i32.load
  i64.load offset=152
  f64.convert_i64_u
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#get:maxValue (param $0 i32) (result f64)
  local.get $0
  i32.load
  i64.load offset=144
  f64.convert_i64_u
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#get:totalCount (param $0 i32) (result f64)
  local.get $0
  i32.load
  i64.load offset=168
  f64.convert_i64_u
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#reset (param $0 i32)
  local.get $0
  local.get $0
  i32.load offset=4
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#doReset
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#hasNext (param $0 i32) (result i32)
  local.get $0
  i32.load offset=4
  i64.load offset=168
  local.get $0
  i64.load offset=8
  i64.ne
  if
   i32.const 0
   i32.const 11648
   i32.const 87
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i64.load offset=56
  local.get $0
  i64.load offset=72
  i64.lt_u
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#exhaustedSubBuckets (param $0 i32) (result i32)
  local.get $0
  i32.load offset=16
  local.get $0
  i32.load offset=4
  i32.load offset=52
  i32.ge_s
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#lowestEquivalentValue (param $0 i32) (param $1 i64) (result i64)
  (local $2 i32)
  (local $3 i32)
  (local $4 i64)
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getBucketIndex
  local.set $2
  local.get $0
  local.get $1
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getSubBucketIndex
  local.set $3
  local.get $0
  local.get $2
  local.get $3
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#valueFromIndexes
  local.set $4
  local.get $4
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#sizeOfEquivalentValueRange (param $0 i32) (param $1 i64) (result i64)
  (local $2 i32)
  (local $3 i64)
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getBucketIndex
  local.set $2
  i64.const 1
  local.get $0
  i32.load offset=112
  local.get $2
  i32.add
  i64.extend_i32_s
  i64.shl
  local.set $3
  local.get $3
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#nextNonEquivalentValue (param $0 i32) (param $1 i64) (result i64)
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#lowestEquivalentValue
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#sizeOfEquivalentValueRange
  i64.add
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#highestEquivalentValue (param $0 i32) (param $1 i64) (result i64)
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#nextNonEquivalentValue
  i64.const 1
  i64.sub
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#reachedIterationLevel (param $0 i32) (result i32)
  (local $1 i64)
  local.get $0
  i32.load offset=4
  local.get $0
  i32.load offset=16
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtIndex
  local.set $1
  local.get $1
  i64.const 0
  i64.ne
  if (result i32)
   local.get $0
   i32.load
   local.get $0
   i32.load offset=16
   i32.ne
  else
   i32.const 0
  end
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getValueIteratedTo (param $0 i32) (result i64)
  local.get $0
  i32.load offset=4
  local.get $0
  i64.load offset=24
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#highestEquivalentValue
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getPercentileIteratedTo (param $0 i32) (result f64)
  f64.const 100
  local.get $0
  i64.load offset=56
  f64.convert_i64_u
  f64.mul
  local.get $0
  i64.load offset=72
  f64.convert_i64_u
  f64.div
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#incrementIterationLevel (param $0 i32)
  local.get $0
  local.get $0
  i32.load offset=16
  i32.store
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#incrementSubBucket (param $0 i32)
  local.get $0
  i32.const 1
  i32.store8 offset=88
  local.get $0
  local.get $0
  i32.load offset=16
  i32.const 1
  i32.add
  i32.store offset=16
  local.get $0
  local.get $0
  i32.load offset=4
  local.get $0
  i32.load offset=16
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#valueFromIndex
  i64.store offset=24
  local.get $0
  local.get $0
  i32.load offset=4
  local.get $0
  i32.load offset=16
  i32.const 1
  i32.add
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#valueFromIndex
  i64.store offset=32
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#next (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i64)
  loop $while-continue|0
   local.get $0
   call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#exhaustedSubBuckets
   i32.eqz
   local.set $1
   local.get $1
   if
    local.get $0
    local.get $0
    i32.load offset=4
    local.get $0
    i32.load offset=16
    call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtIndex
    i64.store offset=80
    local.get $0
    i32.load8_u offset=88
    if
     local.get $0
     local.get $0
     i64.load offset=56
     local.get $0
     i64.load offset=80
     i64.add
     i64.store offset=56
     local.get $0
     local.get $0
     i64.load offset=64
     local.get $0
     i64.load offset=80
     local.get $0
     i32.load offset=4
     local.get $0
     i64.load offset=24
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#highestEquivalentValue
     i64.mul
     i64.add
     i64.store offset=64
     local.get $0
     i32.const 0
     i32.store8 offset=88
    end
    local.get $0
    call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#reachedIterationLevel
    if
     local.get $0
     call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getValueIteratedTo
     local.set $2
     local.get $0
     i32.load offset=92
     local.get $2
     i64.store
     local.get $0
     i32.load offset=92
     local.get $0
     i64.load offset=40
     i64.store offset=8
     local.get $0
     i32.load offset=92
     local.get $0
     i64.load offset=80
     i64.store offset=16
     local.get $0
     i32.load offset=92
     local.get $0
     i64.load offset=56
     local.get $0
     i64.load offset=48
     i64.sub
     i64.store offset=24
     local.get $0
     i32.load offset=92
     local.get $0
     i64.load offset=56
     i64.store offset=32
     local.get $0
     i32.load offset=92
     local.get $0
     i64.load offset=64
     i64.store offset=40
     local.get $0
     i32.load offset=92
     f64.const 100
     local.get $0
     i64.load offset=56
     f64.convert_i64_u
     f64.mul
     local.get $0
     i64.load offset=72
     f64.convert_i64_u
     f64.div
     f64.store offset=48
     local.get $0
     i32.load offset=92
     local.get $0
     call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getPercentileIteratedTo
     f64.store offset=56
     local.get $0
     local.get $2
     i64.store offset=40
     local.get $0
     local.get $0
     i64.load offset=56
     i64.store offset=48
     local.get $0
     call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#incrementIterationLevel
     local.get $0
     i32.load offset=4
     i64.load offset=168
     local.get $0
     i64.load offset=8
     i64.ne
     if
      i32.const 11744
      i32.const 11648
      i32.const 128
      i32.const 11
      call $~lib/builtins/abort
      unreachable
     end
     local.get $0
     i32.load offset=92
     call $~lib/rt/pure/__retain
     return
    end
    local.get $0
    call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#incrementSubBucket
    br $while-continue|0
   end
  end
  i32.const 11840
  i32.const 11648
  i32.const 134
  i32.const 5
  call $~lib/builtins/abort
  unreachable
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#medianEquivalentValue (param $0 i32) (param $1 i64) (result i64)
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#lowestEquivalentValue
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#sizeOfEquivalentValueRange
  i64.const 1
  i64.shr_u
  i64.add
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getMean (param $0 i32) (result f64)
  (local $1 i64)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  i64.load offset=168
  i64.const 0
  i64.eq
  if
   f64.const 0
   return
  end
  local.get $0
  i32.load offset=100
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#reset
  i64.const 0
  local.set $1
  loop $while-continue|0
   local.get $0
   i32.load offset=100
   call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#hasNext
   local.set $2
   local.get $2
   if
    local.get $0
    i32.load offset=100
    call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#next
    local.set $3
    local.get $1
    local.get $0
    local.get $3
    i64.load
    call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#medianEquivalentValue
    local.get $3
    i64.load offset=16
    i64.mul
    i64.add
    local.set $1
    local.get $3
    call $~lib/rt/pure/__release
    br $while-continue|0
   end
  end
  local.get $1
  f64.convert_i64_u
  f64.const 1
  f64.mul
  local.get $0
  i64.load offset=168
  f64.convert_i64_u
  f64.div
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#computeStdDeviation (param $0 i32) (param $1 f64) (result f64)
  (local $2 f64)
  (local $3 i32)
  (local $4 i32)
  (local $5 f64)
  (local $6 f64)
  local.get $0
  i64.load offset=168
  i64.const 0
  i64.eq
  if
   f64.const 0
   return
  end
  f64.const 0
  local.set $2
  local.get $0
  i32.load offset=100
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#reset
  loop $while-continue|0
   local.get $0
   i32.load offset=100
   call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#hasNext
   local.set $3
   local.get $3
   if
    local.get $0
    i32.load offset=100
    call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#next
    local.set $4
    local.get $0
    local.get $4
    i64.load
    call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#medianEquivalentValue
    f64.convert_i64_u
    local.get $1
    f64.sub
    local.set $5
    local.get $2
    local.get $5
    local.get $5
    f64.mul
    local.get $4
    i64.load offset=24
    f64.convert_i64_u
    f64.mul
    f64.add
    local.set $2
    local.get $4
    call $~lib/rt/pure/__release
    br $while-continue|0
   end
  end
  local.get $2
  local.get $0
  i64.load offset=168
  f64.convert_i64_u
  f64.div
  local.set $6
  local.get $6
  f64.sqrt
  local.set $6
  local.get $6
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getStdDeviation (param $0 i32) (result f64)
  (local $1 f64)
  local.get $0
  i64.load offset=168
  i64.const 0
  i64.eq
  if
   f64.const 0
   return
  end
  local.get $0
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getMean
  local.set $1
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#computeStdDeviation
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#get:stdDeviation (param $0 i32) (result f64)
  local.get $0
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getStdDeviation
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#get:mean (param $0 i32) (result f64)
  local.get $0
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getMean
 )
 (func $assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>#get:estimatedFootprintInBytes (param $0 i32) (result i32)
  i32.const 4
  local.get $0
  i32.load
  i32.load offset=8
  i32.add
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#get:estimatedFootprintInBytes (param $0 i32) (result i32)
  i32.const 176
  local.get $0
  i32.load offset=160
  call $assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>#get:estimatedFootprintInBytes
  i32.add
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#get:estimatedFootprintInBytes (param $0 i32) (result f64)
  i32.const 4
  local.get $0
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#get:estimatedFootprintInBytes
  i32.add
  f64.convert_i32_u
 )
 (func $~lib/typedarray/Uint32Array#get:length (param $0 i32) (result i32)
  local.get $0
  i32.load offset=8
  i32.const 2
  i32.shr_u
 )
 (func $~lib/typedarray/Uint32Array#set<~lib/typedarray/Uint32Array> (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  call $~lib/rt/pure/__retain
  local.set $5
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $4
  local.get $2
  local.set $3
  i32.const 0
  drop
  local.get $3
  i32.const 0
  i32.lt_s
  if
   i32.const 12160
   i32.const 12224
   i32.const 1774
   i32.const 19
   call $~lib/builtins/abort
   unreachable
  end
  local.get $4
  call $~lib/typedarray/Uint32Array#get:length
  local.get $3
  i32.add
  local.get $5
  call $~lib/typedarray/Uint32Array#get:length
  i32.gt_s
  if
   i32.const 12160
   i32.const 12224
   i32.const 1775
   i32.const 47
   call $~lib/builtins/abort
   unreachable
  end
  i32.const 1
  i32.const 1
  i32.eq
  if (result i32)
   i32.const 2
   i32.const 2
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   i32.const 0
   if (result i32)
    i32.const 0
   else
    i32.const 0
   end
   i32.eqz
  else
   i32.const 0
  end
  drop
  local.get $5
  i32.load offset=4
  local.get $3
  i32.const 2
  i32.shl
  i32.add
  local.get $4
  i32.load offset=4
  local.get $4
  i32.load offset=8
  call $~lib/memory/memory.copy
  local.get $4
  call $~lib/rt/pure/__release
  local.get $5
  call $~lib/rt/pure/__release
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>#resize (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  i32.const 0
  local.get $1
  call $assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>#constructor
  local.set $2
  local.get $2
  i32.load
  local.get $0
  i32.load
  i32.const 0
  call $~lib/typedarray/Uint32Array#set<~lib/typedarray/Uint32Array>
  local.get $2
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#resize (param $0 i32) (param $1 i64)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#establishSize
  local.get $0
  local.tee $2
  local.get $0
  i32.load offset=160
  local.get $0
  i32.load offset=52
  call $assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>#resize
  local.set $3
  local.get $2
  i32.load offset=160
  call $~lib/rt/pure/__release
  local.get $3
  i32.store offset=160
 )
 (func $assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>#__set (param $0 i32) (param $1 i32) (param $2 i32)
  local.get $0
  i32.load
  local.get $1
  local.get $2
  call $~lib/typedarray/Uint32Array#__uset
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#addToCountAtIndex (param $0 i32) (param $1 i32) (param $2 i64)
  (local $3 i32)
  (local $4 i64)
  local.get $0
  i32.load offset=160
  local.get $1
  call $assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>#__get
  local.set $3
  local.get $3
  i64.extend_i32_u
  local.get $2
  i64.add
  local.set $4
  local.get $4
  i64.const 0
  i64.lt_u
  if
   i32.const 0
   i32.const 8992
   i32.const 611
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i32.load offset=160
  local.get $1
  local.get $4
  i32.wrap_i64
  call $assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>#__set
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#handleRecordException (param $0 i32) (param $1 i64) (param $2 i64)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  local.get $0
  i32.load8_u offset=8
  i32.eqz
  if
   i32.const 12032
   local.get $2
   i32.const 10
   call $~lib/number/U64#toString
   local.tee $3
   call $~lib/string/String.__concat
   local.tee $4
   i32.const 12064
   call $~lib/string/String.__concat
   local.tee $5
   i32.const 8992
   i32.const 225
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#resize
  local.get $0
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#countsArrayIndex
  local.set $5
  local.get $0
  local.get $5
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#addToCountAtIndex
  local.get $0
  local.get $0
  local.get $0
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#valueFromIndex
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#highestEquivalentValue
  i64.store offset=16
 )
 (func $~lib/number/U32#toString (param $0 i32) (param $1 i32) (result i32)
  local.get $0
  local.get $1
  call $~lib/util/number/utoa32
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#incrementCountAtIndex (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  local.get $0
  i32.load offset=160
  local.get $1
  call $assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>#__get
  local.set $2
  local.get $2
  i32.const 1
  i32.add
  local.set $3
  local.get $3
  i32.const 0
  i32.lt_u
  if
   local.get $3
   i32.const 10
   call $~lib/number/U32#toString
   local.tee $4
   i32.const 12288
   call $~lib/string/String.__concat
   local.tee $5
   i32.const 8992
   i32.const 593
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i32.load offset=160
  local.get $1
  local.get $3
  call $assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>#__set
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#updatedMaxValue (param $0 i32) (param $1 i64)
  (local $2 i64)
  local.get $1
  local.get $0
  i64.load offset=136
  i64.add
  local.set $2
  local.get $0
  local.get $2
  i64.store offset=144
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#updateMinNonZeroValue (param $0 i32) (param $1 i64)
  (local $2 i64)
  local.get $1
  local.get $0
  i64.load offset=136
  i64.le_u
  if
   return
  end
  local.get $1
  local.get $0
  i64.load offset=136
  i64.const -1
  i64.xor
  i64.and
  local.set $2
  local.get $0
  local.get $2
  i64.store offset=152
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#updateMinAndMax (param $0 i32) (param $1 i64)
  local.get $1
  local.get $0
  i64.load offset=144
  i64.gt_u
  if
   local.get $0
   local.get $1
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#updatedMaxValue
  end
  local.get $1
  local.get $0
  i64.load offset=152
  i64.lt_u
  if (result i32)
   local.get $1
   i64.const 0
   i64.ne
  else
   i32.const 0
  end
  if
   local.get $0
   local.get $1
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#updateMinNonZeroValue
  end
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#incrementTotalCount (param $0 i32)
  local.get $0
  local.get $0
  i64.load offset=168
  i64.const 1
  i64.add
  i64.store offset=168
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordSingleValue (param $0 i32) (param $1 i64)
  (local $2 i32)
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#countsArrayIndex
  local.set $2
  local.get $2
  local.get $0
  i32.load offset=52
  i32.ge_s
  if
   local.get $0
   i32.const 1
   i64.extend_i32_u
   local.get $1
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#handleRecordException
  else
   local.get $0
   local.get $2
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#incrementCountAtIndex
  end
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#updateMinAndMax
  local.get $0
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#incrementTotalCount
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordValue (param $0 i32) (param $1 f64)
  local.get $0
  i32.load
  local.get $1
  i64.trunc_f64_u
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordSingleValue
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordCountAtValue (param $0 i32) (param $1 i64) (param $2 i64)
  (local $3 i32)
  local.get $0
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#countsArrayIndex
  local.set $3
  local.get $3
  local.get $0
  i32.load offset=52
  i32.ge_s
  if
   local.get $0
   local.get $1
   local.get $2
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#handleRecordException
  else
   local.get $0
   local.get $3
   local.get $1
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#addToCountAtIndex
  end
  local.get $0
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#updateMinAndMax
  local.get $0
  local.get $0
  i64.load offset=168
  local.get $1
  i64.add
  i64.store offset=168
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordValueWithCount (param $0 i32) (param $1 f64) (param $2 f64)
  local.get $0
  i32.load
  local.get $2
  i64.trunc_f64_u
  local.get $1
  i64.trunc_f64_u
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordCountAtValue
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordSingleValueWithExpectedInterval (param $0 i32) (param $1 i64) (param $2 i64)
  (local $3 i64)
  (local $4 i32)
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordSingleValue
  local.get $1
  local.get $2
  i64.lt_u
  if (result i32)
   i32.const 1
  else
   local.get $2
   i64.const 0
   i64.eq
  end
  if
   return
  end
  local.get $1
  local.get $2
  i64.sub
  local.set $3
  loop $for-loop|0
   local.get $3
   local.get $2
   i64.ge_u
   local.set $4
   local.get $4
   if
    local.get $0
    local.get $3
    call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordSingleValue
    local.get $3
    local.get $2
    i64.sub
    local.set $3
    br $for-loop|0
   end
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordValueWithExpectedInterval (param $0 i32) (param $1 f64) (param $2 f64)
  local.get $0
  i32.load
  local.get $1
  i64.trunc_f64_u
  local.get $2
  i64.trunc_f64_u
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordSingleValueWithExpectedInterval
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getValueAtPercentile (param $0 i32) (param $1 f64) (result i64)
  (local $2 f64)
  (local $3 f64)
  (local $4 i64)
  (local $5 i64)
  (local $6 i32)
  (local $7 i32)
  (local $8 i64)
  local.get $1
  f64.const 100
  f64.min
  local.set $2
  local.get $2
  f64.const 100
  f64.div
  local.get $0
  i64.load offset=168
  f64.convert_i64_u
  f64.mul
  local.set $3
  local.get $3
  local.get $3
  i32.const 1
  global.set $~argumentsLength
  global.get $assembly/ulp/ulp
  call_indirect (type $f64_=>_f64)
  f64.sub
  f64.ceil
  f64.const 1
  f64.max
  i64.trunc_f64_u
  local.set $4
  i64.const 0
  local.set $5
  i32.const 0
  local.set $6
  loop $for-loop|0
   local.get $6
   local.get $0
   i32.load offset=52
   i32.lt_s
   local.set $7
   local.get $7
   if
    local.get $5
    local.get $0
    local.get $6
    call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtIndex
    i64.add
    local.set $5
    local.get $5
    local.get $4
    i64.ge_u
    if
     local.get $0
     local.get $6
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#valueFromIndex
     local.set $8
     local.get $1
     f64.const 0
     f64.eq
     if (result i64)
      local.get $0
      local.get $8
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#lowestEquivalentValue
     else
      local.get $0
      local.get $8
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#highestEquivalentValue
     end
     return
    end
    local.get $6
    i32.const 1
    i32.add
    local.set $6
    br $for-loop|0
   end
  end
  i64.const 0
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getValueAtPercentile (param $0 i32) (param $1 f64) (result f64)
  local.get $0
  i32.load
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getValueAtPercentile
  f64.convert_i64_u
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#reset (param $0 i32) (param $1 i32)
  local.get $0
  local.get $0
  i32.load offset=28
  local.get $1
  call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#doReset
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#hasNext (param $0 i32) (result i32)
  local.get $0
  i32.load offset=28
  i64.load offset=168
  local.get $0
  i64.load offset=32
  i64.ne
  if
   i32.const 0
   i32.const 12528
   i32.const 138
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i64.load offset=80
  local.get $0
  i64.load offset=96
  i64.lt_u
  if
   i32.const 1
   return
  end
  local.get $0
  i32.load8_u offset=24
  i32.eqz
  if (result i32)
   local.get $0
   i64.load offset=96
   i64.const 0
   i64.gt_u
  else
   i32.const 0
  end
  if
   local.get $0
   f64.const 100
   f64.store offset=8
   local.get $0
   i32.const 1
   i32.store8 offset=24
   i32.const 1
   return
  end
  i32.const 0
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#exhaustedSubBuckets (param $0 i32) (result i32)
  local.get $0
  i32.load offset=40
  local.get $0
  i32.load offset=28
  i32.load offset=52
  i32.ge_s
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#reachedIterationLevel (param $0 i32) (result i32)
  (local $1 f64)
  local.get $0
  i64.load offset=104
  i64.const 0
  i64.eq
  if
   i32.const 0
   return
  end
  f64.const 100
  local.get $0
  i64.load offset=80
  f64.convert_i64_u
  f64.mul
  local.get $0
  i64.load offset=96
  f64.convert_i64_u
  f64.div
  local.set $1
  local.get $1
  local.get $0
  f64.load offset=8
  f64.ge
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getValueIteratedTo (param $0 i32) (result i64)
  local.get $0
  i32.load offset=28
  local.get $0
  i64.load offset=48
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#highestEquivalentValue
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getPercentileIteratedTo (param $0 i32) (result f64)
  local.get $0
  f64.load offset=8
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#incrementIterationLevel (param $0 i32)
  (local $1 f64)
  local.get $0
  local.get $0
  f64.load offset=8
  f64.store offset=16
  local.get $0
  i32.load
  f64.convert_i32_s
  f64.const 2
  f64.const 100
  f64.const 100
  local.get $0
  f64.load offset=8
  f64.sub
  f64.div
  call $~lib/math/NativeMath.log2
  f64.floor
  f64.const 1
  f64.add
  call $~lib/math/NativeMath.pow
  f64.mul
  local.set $1
  local.get $0
  local.get $0
  f64.load offset=8
  f64.const 100
  local.get $1
  f64.div
  f64.add
  f64.store offset=8
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#incrementSubBucket (param $0 i32)
  local.get $0
  i32.const 1
  i32.store8 offset=112
  local.get $0
  local.get $0
  i32.load offset=40
  i32.const 1
  i32.add
  i32.store offset=40
  local.get $0
  local.get $0
  i32.load offset=28
  local.get $0
  i32.load offset=40
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#valueFromIndex
  i64.store offset=48
  local.get $0
  local.get $0
  i32.load offset=28
  local.get $0
  i32.load offset=40
  i32.const 1
  i32.add
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#valueFromIndex
  i64.store offset=56
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#next (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i64)
  loop $while-continue|0
   local.get $0
   call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#exhaustedSubBuckets
   i32.eqz
   local.set $1
   local.get $1
   if
    local.get $0
    local.get $0
    i32.load offset=28
    local.get $0
    i32.load offset=40
    call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtIndex
    i64.store offset=104
    local.get $0
    i32.load8_u offset=112
    if
     local.get $0
     local.get $0
     i64.load offset=80
     local.get $0
     i64.load offset=104
     i64.add
     i64.store offset=80
     local.get $0
     local.get $0
     i64.load offset=88
     local.get $0
     i64.load offset=104
     local.get $0
     i32.load offset=28
     local.get $0
     i64.load offset=48
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#highestEquivalentValue
     i64.mul
     i64.add
     i64.store offset=88
     local.get $0
     i32.const 0
     i32.store8 offset=112
    end
    local.get $0
    call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#reachedIterationLevel
    if
     local.get $0
     call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getValueIteratedTo
     local.set $2
     local.get $0
     i32.load offset=116
     local.get $2
     i64.store
     local.get $0
     i32.load offset=116
     local.get $0
     i64.load offset=64
     i64.store offset=8
     local.get $0
     i32.load offset=116
     local.get $0
     i64.load offset=104
     i64.store offset=16
     local.get $0
     i32.load offset=116
     local.get $0
     i64.load offset=80
     local.get $0
     i64.load offset=72
     i64.sub
     i64.store offset=24
     local.get $0
     i32.load offset=116
     local.get $0
     i64.load offset=80
     i64.store offset=32
     local.get $0
     i32.load offset=116
     local.get $0
     i64.load offset=88
     i64.store offset=40
     local.get $0
     i32.load offset=116
     f64.const 100
     local.get $0
     i64.load offset=80
     f64.convert_i64_u
     f64.mul
     local.get $0
     i64.load offset=96
     f64.convert_i64_u
     f64.div
     f64.store offset=48
     local.get $0
     i32.load offset=116
     local.get $0
     call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getPercentileIteratedTo
     f64.store offset=56
     local.get $0
     local.get $2
     i64.store offset=64
     local.get $0
     local.get $0
     i64.load offset=80
     i64.store offset=72
     local.get $0
     call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#incrementIterationLevel
     local.get $0
     i32.load offset=28
     i64.load offset=168
     local.get $0
     i64.load offset=32
     i64.ne
     if
      i32.const 11744
      i32.const 12528
      i32.const 187
      i32.const 11
      call $~lib/builtins/abort
      unreachable
     end
     local.get $0
     i32.load offset=116
     call $~lib/rt/pure/__retain
     return
    end
    local.get $0
    call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#incrementSubBucket
    br $while-continue|0
   end
  end
  i32.const 11840
  i32.const 12528
  i32.const 193
  i32.const 5
  call $~lib/builtins/abort
  unreachable
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#outputPercentileDistribution (param $0 i32) (param $1 i32) (param $2 f64) (result i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  (local $15 i32)
  (local $16 i32)
  (local $17 i32)
  (local $18 i32)
  (local $19 i32)
  (local $20 i32)
  (local $21 i32)
  (local $22 i32)
  (local $23 i32)
  (local $24 i32)
  (local $25 i32)
  (local $26 f64)
  (local $27 i32)
  (local $28 i32)
  (local $29 i32)
  (local $30 i32)
  (local $31 i32)
  (local $32 i32)
  (local $33 i32)
  (local $34 i32)
  (local $35 i32)
  (local $36 i32)
  (local $37 i32)
  (local $38 i32)
  (local $39 i32)
  (local $40 i32)
  i32.const 352
  local.set $3
  local.get $3
  i32.const 12384
  call $~lib/string/String.__concat
  local.tee $4
  local.tee $5
  local.get $3
  local.tee $6
  i32.ne
  if
   local.get $5
   call $~lib/rt/pure/__retain
   local.set $5
   local.get $6
   call $~lib/rt/pure/__release
  end
  local.get $5
  local.set $3
  local.get $0
  i32.load offset=96
  call $~lib/rt/pure/__retain
  local.set $5
  local.get $5
  local.get $1
  call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#reset
  i32.const 0
  i32.const 12
  local.get $0
  i32.load8_u offset=32
  call $assembly/formatters/FloatFormatter#constructor
  local.set $6
  i32.const 0
  i32.const 2
  i32.const 12
  call $assembly/formatters/FloatFormatter#constructor
  local.set $7
  i32.const 0
  i32.const 10
  call $assembly/formatters/IntegerFormatter#constructor
  local.set $8
  i32.const 0
  i32.const 14
  i32.const 2
  call $assembly/formatters/FloatFormatter#constructor
  local.set $9
  loop $while-continue|0
   local.get $5
   call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#hasNext
   local.set $10
   local.get $10
   if
    local.get $5
    call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#next
    local.set $11
    local.get $11
    f64.load offset=56
    f64.const 100
    f64.lt
    if
     local.get $3
     local.get $6
     local.get $11
     i64.load
     f64.convert_i64_u
     local.get $2
     f64.div
     call $assembly/formatters/FloatFormatter#format
     local.tee $12
     i32.const 224
     call $~lib/string/String.__concat
     local.tee $13
     local.get $7
     local.get $11
     f64.load offset=56
     f64.const 100
     f64.div
     call $assembly/formatters/FloatFormatter#format
     local.tee $14
     call $~lib/string/String.__concat
     local.tee $15
     i32.const 224
     call $~lib/string/String.__concat
     local.tee $16
     local.get $8
     local.get $11
     i64.load offset=32
     call $assembly/formatters/IntegerFormatter#format
     local.tee $17
     call $~lib/string/String.__concat
     local.tee $18
     i32.const 224
     call $~lib/string/String.__concat
     local.tee $19
     local.get $9
     f64.const 1
     f64.const 1
     local.get $11
     f64.load offset=56
     f64.const 100
     f64.div
     f64.sub
     f64.div
     call $assembly/formatters/FloatFormatter#format
     local.tee $20
     call $~lib/string/String.__concat
     local.tee $21
     i32.const 12640
     call $~lib/string/String.__concat
     local.tee $22
     call $~lib/string/String.__concat
     local.tee $23
     local.tee $24
     local.get $3
     local.tee $25
     i32.ne
     if
      local.get $24
      call $~lib/rt/pure/__retain
      local.set $24
      local.get $25
      call $~lib/rt/pure/__release
     end
     local.get $24
     local.set $3
     local.get $12
     call $~lib/rt/pure/__release
     local.get $13
     call $~lib/rt/pure/__release
     local.get $14
     call $~lib/rt/pure/__release
     local.get $15
     call $~lib/rt/pure/__release
     local.get $16
     call $~lib/rt/pure/__release
     local.get $17
     call $~lib/rt/pure/__release
     local.get $18
     call $~lib/rt/pure/__release
     local.get $19
     call $~lib/rt/pure/__release
     local.get $20
     call $~lib/rt/pure/__release
     local.get $21
     call $~lib/rt/pure/__release
     local.get $22
     call $~lib/rt/pure/__release
     local.get $23
     call $~lib/rt/pure/__release
    else
     local.get $3
     local.get $6
     local.get $11
     i64.load
     f64.convert_i64_u
     local.get $2
     f64.div
     call $assembly/formatters/FloatFormatter#format
     local.tee $23
     i32.const 224
     call $~lib/string/String.__concat
     local.tee $22
     local.get $7
     local.get $11
     f64.load offset=56
     f64.const 100
     f64.div
     call $assembly/formatters/FloatFormatter#format
     local.tee $21
     call $~lib/string/String.__concat
     local.tee $20
     i32.const 224
     call $~lib/string/String.__concat
     local.tee $19
     local.get $8
     local.get $11
     i64.load offset=32
     call $assembly/formatters/IntegerFormatter#format
     local.tee $18
     call $~lib/string/String.__concat
     local.tee $17
     i32.const 12640
     call $~lib/string/String.__concat
     local.tee $16
     call $~lib/string/String.__concat
     local.tee $15
     local.tee $25
     local.get $3
     local.tee $14
     i32.ne
     if
      local.get $25
      call $~lib/rt/pure/__retain
      local.set $25
      local.get $14
      call $~lib/rt/pure/__release
     end
     local.get $25
     local.set $3
     local.get $23
     call $~lib/rt/pure/__release
     local.get $22
     call $~lib/rt/pure/__release
     local.get $21
     call $~lib/rt/pure/__release
     local.get $20
     call $~lib/rt/pure/__release
     local.get $19
     call $~lib/rt/pure/__release
     local.get $18
     call $~lib/rt/pure/__release
     local.get $17
     call $~lib/rt/pure/__release
     local.get $16
     call $~lib/rt/pure/__release
     local.get $15
     call $~lib/rt/pure/__release
    end
    local.get $11
    call $~lib/rt/pure/__release
    br $while-continue|0
   end
  end
  i32.const 0
  i32.const 12
  local.get $0
  i32.load8_u offset=32
  call $assembly/formatters/FloatFormatter#constructor
  local.set $10
  local.get $0
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getMean
  local.set $26
  local.get $10
  local.get $26
  local.get $2
  f64.div
  call $assembly/formatters/FloatFormatter#format
  local.set $15
  local.get $10
  local.get $0
  local.get $26
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#computeStdDeviation
  local.get $2
  f64.div
  call $assembly/formatters/FloatFormatter#format
  local.set $16
  local.get $10
  local.get $0
  i64.load offset=144
  f64.convert_i64_u
  local.get $2
  f64.div
  call $assembly/formatters/FloatFormatter#format
  local.set $17
  i32.const 0
  i32.const 12
  call $assembly/formatters/IntegerFormatter#constructor
  local.set $18
  local.get $18
  local.get $0
  i64.load offset=168
  call $assembly/formatters/IntegerFormatter#format
  local.set $19
  local.get $18
  local.get $0
  i64.load offset=40
  call $assembly/formatters/IntegerFormatter#format
  local.set $20
  local.get $18
  local.get $0
  i32.load offset=48
  i64.extend_i32_s
  call $assembly/formatters/IntegerFormatter#format
  local.set $21
  local.get $3
  i32.const 12672
  local.get $15
  call $~lib/string/String#toString
  local.tee $22
  call $~lib/string/String.__concat
  local.tee $23
  i32.const 12720
  call $~lib/string/String.__concat
  local.tee $25
  local.get $16
  call $~lib/string/String#toString
  local.tee $14
  call $~lib/string/String.__concat
  local.tee $13
  i32.const 12784
  call $~lib/string/String.__concat
  local.tee $12
  local.get $17
  call $~lib/string/String#toString
  local.tee $24
  call $~lib/string/String.__concat
  local.tee $27
  i32.const 12832
  call $~lib/string/String.__concat
  local.tee $28
  local.get $19
  call $~lib/string/String#toString
  local.tee $29
  call $~lib/string/String.__concat
  local.tee $30
  i32.const 12896
  call $~lib/string/String.__concat
  local.tee $31
  local.get $20
  call $~lib/string/String#toString
  local.tee $32
  call $~lib/string/String.__concat
  local.tee $33
  i32.const 12944
  call $~lib/string/String.__concat
  local.tee $34
  local.get $21
  call $~lib/string/String#toString
  local.tee $35
  call $~lib/string/String.__concat
  local.tee $36
  i32.const 13008
  call $~lib/string/String.__concat
  local.tee $37
  call $~lib/string/String.__concat
  local.tee $38
  local.tee $39
  local.get $3
  local.tee $40
  i32.ne
  if
   local.get $39
   call $~lib/rt/pure/__retain
   local.set $39
   local.get $40
   call $~lib/rt/pure/__release
  end
  local.get $39
  local.set $3
  local.get $3
  local.set $39
  local.get $4
  call $~lib/rt/pure/__release
  local.get $5
  call $~lib/rt/pure/__release
  local.get $6
  call $~lib/rt/pure/__release
  local.get $7
  call $~lib/rt/pure/__release
  local.get $8
  call $~lib/rt/pure/__release
  local.get $9
  call $~lib/rt/pure/__release
  local.get $10
  call $~lib/rt/pure/__release
  local.get $15
  call $~lib/rt/pure/__release
  local.get $16
  call $~lib/rt/pure/__release
  local.get $17
  call $~lib/rt/pure/__release
  local.get $18
  call $~lib/rt/pure/__release
  local.get $19
  call $~lib/rt/pure/__release
  local.get $20
  call $~lib/rt/pure/__release
  local.get $21
  call $~lib/rt/pure/__release
  local.get $22
  call $~lib/rt/pure/__release
  local.get $23
  call $~lib/rt/pure/__release
  local.get $25
  call $~lib/rt/pure/__release
  local.get $14
  call $~lib/rt/pure/__release
  local.get $13
  call $~lib/rt/pure/__release
  local.get $12
  call $~lib/rt/pure/__release
  local.get $24
  call $~lib/rt/pure/__release
  local.get $27
  call $~lib/rt/pure/__release
  local.get $28
  call $~lib/rt/pure/__release
  local.get $29
  call $~lib/rt/pure/__release
  local.get $30
  call $~lib/rt/pure/__release
  local.get $31
  call $~lib/rt/pure/__release
  local.get $32
  call $~lib/rt/pure/__release
  local.get $33
  call $~lib/rt/pure/__release
  local.get $34
  call $~lib/rt/pure/__release
  local.get $35
  call $~lib/rt/pure/__release
  local.get $36
  call $~lib/rt/pure/__release
  local.get $37
  call $~lib/rt/pure/__release
  local.get $38
  call $~lib/rt/pure/__release
  local.get $39
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#outputPercentileDistribution (param $0 i32) (param $1 f64) (param $2 f64) (result i32)
  local.get $0
  i32.load
  local.get $1
  i32.trunc_f64_s
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#outputPercentileDistribution
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordValueWithCountAndExpectedInterval (param $0 i32) (param $1 i64) (param $2 i64) (param $3 i64)
  (local $4 i64)
  (local $5 i32)
  local.get $0
  local.get $2
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordCountAtValue
  local.get $3
  i64.const 0
  i64.le_u
  if (result i32)
   i32.const 1
  else
   local.get $1
   local.get $3
   i64.le_u
  end
  if
   return
  end
  local.get $1
  local.get $3
  i64.sub
  local.set $4
  loop $for-loop|0
   local.get $4
   local.get $3
   i64.ge_u
   local.set $5
   local.get $5
   if
    local.get $0
    local.get $2
    local.get $4
    call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordCountAtValue
    local.get $4
    local.get $3
    i64.sub
    local.set $4
    br $for-loop|0
   end
  end
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#addWhileCorrectingForCoordinatedOmission (param $0 i32) (param $1 i32) (param $2 i64)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  call $~lib/rt/pure/__retain
  local.set $3
  i32.const 0
  local.get $1
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#constructor
  local.set $4
  loop $while-continue|0
   local.get $4
   call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#hasNext
   local.set $5
   local.get $5
   if
    local.get $4
    call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#next
    local.set $6
    local.get $3
    local.get $6
    i64.load
    local.get $6
    i64.load offset=16
    local.get $2
    call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordValueWithCountAndExpectedInterval
    local.get $6
    call $~lib/rt/pure/__release
    br $while-continue|0
   end
  end
  local.get $3
  call $~lib/rt/pure/__release
  local.get $4
  call $~lib/rt/pure/__release
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#copyCorrectedForCoordinatedOmission (param $0 i32) (param $1 i64) (result i32)
  (local $2 i32)
  i32.const 0
  local.get $0
  i64.load offset=24
  local.get $0
  i64.load offset=16
  local.get $0
  i32.load8_u offset=32
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#constructor
  local.set $2
  local.get $2
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#addWhileCorrectingForCoordinatedOmission
  local.get $2
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#copyCorrectedForCoordinatedOmission (param $0 i32) (param $1 f64) (result i32)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  i32.load
  local.get $1
  i64.trunc_f64_u
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#copyCorrectedForCoordinatedOmission
  local.set $2
  i32.const 0
  f64.const 0
  f64.const 0
  f64.const 0
  i32.const 0
  local.get $2
  call $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#constructor
  local.set $3
  local.get $2
  call $~lib/rt/pure/__release
  local.get $3
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#add<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i64)
  (local $4 i32)
  (local $5 i32)
  (local $6 i64)
  (local $7 i64)
  (local $8 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $0
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#valueFromIndex
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#highestEquivalentValue
  local.set $2
  local.get $2
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 13040
    i32.const 8992
    i32.const 639
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   i64.const 0
   local.set $3
   i32.const 0
   local.set $4
   loop $for-loop|0
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtIndex
     local.set $6
     local.get $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $4
      local.get $6
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#addToCountAtIndex
      local.get $3
      local.get $6
      i64.add
      local.set $3
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $3
   i64.add
   i64.store offset=168
   local.get $0
   local.get $0
   i64.load offset=144
   local.tee $6
   local.get $1
   i64.load offset=144
   local.tee $7
   local.get $6
   local.get $7
   i64.gt_u
   select
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#updatedMaxValue
   local.get $0
   local.get $0
   i64.load offset=152
   local.tee $6
   local.get $1
   i64.load offset=152
   local.tee $7
   local.get $6
   local.get $7
   i64.lt_u
   select
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#updateMinNonZeroValue
  else
   local.get $1
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex
   local.set $4
   local.get $1
   local.get $4
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtIndex
   local.set $3
   local.get $0
   local.get $3
   local.get $1
   local.get $4
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#valueFromIndex
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordCountAtValue
   i32.const 0
   local.set $5
   loop $for-loop|1
    local.get $5
    local.get $4
    i32.lt_s
    local.set $8
    local.get $8
    if
     local.get $1
     local.get $5
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtIndex
     local.set $3
     local.get $3
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $3
      local.get $1
      local.get $5
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#valueFromIndex
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordCountAtValue
     end
     local.get $5
     i32.const 1
     i32.add
     local.set $5
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=64
  local.tee $3
  local.get $1
  i64.load offset=64
  local.tee $6
  local.get $3
  local.get $6
  i64.lt_u
  select
  i64.store offset=64
  local.get $0
  local.get $0
  i64.load offset=72
  local.tee $3
  local.get $1
  i64.load offset=72
  local.tee $6
  local.get $3
  local.get $6
  i64.gt_u
  select
  i64.store offset=72
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#addHistogram8 (param $0 i32) (param $1 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#add<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#add<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i64)
  (local $4 i32)
  (local $5 i32)
  (local $6 i64)
  (local $7 i64)
  (local $8 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $0
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#valueFromIndex
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#highestEquivalentValue
  local.set $2
  local.get $2
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 13040
    i32.const 8992
    i32.const 639
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   i64.const 0
   local.set $3
   i32.const 0
   local.set $4
   loop $for-loop|0
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtIndex
     local.set $6
     local.get $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $4
      local.get $6
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#addToCountAtIndex
      local.get $3
      local.get $6
      i64.add
      local.set $3
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $3
   i64.add
   i64.store offset=168
   local.get $0
   local.get $0
   i64.load offset=144
   local.tee $6
   local.get $1
   i64.load offset=144
   local.tee $7
   local.get $6
   local.get $7
   i64.gt_u
   select
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#updatedMaxValue
   local.get $0
   local.get $0
   i64.load offset=152
   local.tee $6
   local.get $1
   i64.load offset=152
   local.tee $7
   local.get $6
   local.get $7
   i64.lt_u
   select
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#updateMinNonZeroValue
  else
   local.get $1
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#countsArrayIndex
   local.set $4
   local.get $1
   local.get $4
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtIndex
   local.set $3
   local.get $0
   local.get $3
   local.get $1
   local.get $4
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#valueFromIndex
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordCountAtValue
   i32.const 0
   local.set $5
   loop $for-loop|1
    local.get $5
    local.get $4
    i32.lt_s
    local.set $8
    local.get $8
    if
     local.get $1
     local.get $5
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtIndex
     local.set $3
     local.get $3
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $3
      local.get $1
      local.get $5
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#valueFromIndex
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordCountAtValue
     end
     local.get $5
     i32.const 1
     i32.add
     local.set $5
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=64
  local.tee $3
  local.get $1
  i64.load offset=64
  local.tee $6
  local.get $3
  local.get $6
  i64.lt_u
  select
  i64.store offset=64
  local.get $0
  local.get $0
  i64.load offset=72
  local.tee $3
  local.get $1
  i64.load offset=72
  local.tee $6
  local.get $3
  local.get $6
  i64.gt_u
  select
  i64.store offset=72
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#addHistogram16 (param $0 i32) (param $1 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#add<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#add<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i64)
  (local $4 i32)
  (local $5 i32)
  (local $6 i64)
  (local $7 i64)
  (local $8 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $0
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#valueFromIndex
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#highestEquivalentValue
  local.set $2
  local.get $2
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 13040
    i32.const 8992
    i32.const 639
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   i64.const 0
   local.set $3
   i32.const 0
   local.set $4
   loop $for-loop|0
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtIndex
     local.set $6
     local.get $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $4
      local.get $6
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#addToCountAtIndex
      local.get $3
      local.get $6
      i64.add
      local.set $3
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $3
   i64.add
   i64.store offset=168
   local.get $0
   local.get $0
   i64.load offset=144
   local.tee $6
   local.get $1
   i64.load offset=144
   local.tee $7
   local.get $6
   local.get $7
   i64.gt_u
   select
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#updatedMaxValue
   local.get $0
   local.get $0
   i64.load offset=152
   local.tee $6
   local.get $1
   i64.load offset=152
   local.tee $7
   local.get $6
   local.get $7
   i64.lt_u
   select
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#updateMinNonZeroValue
  else
   local.get $1
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#countsArrayIndex
   local.set $4
   local.get $1
   local.get $4
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtIndex
   local.set $3
   local.get $0
   local.get $3
   local.get $1
   local.get $4
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#valueFromIndex
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordCountAtValue
   i32.const 0
   local.set $5
   loop $for-loop|1
    local.get $5
    local.get $4
    i32.lt_s
    local.set $8
    local.get $8
    if
     local.get $1
     local.get $5
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtIndex
     local.set $3
     local.get $3
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $3
      local.get $1
      local.get $5
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#valueFromIndex
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordCountAtValue
     end
     local.get $5
     i32.const 1
     i32.add
     local.set $5
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=64
  local.tee $3
  local.get $1
  i64.load offset=64
  local.tee $6
  local.get $3
  local.get $6
  i64.lt_u
  select
  i64.store offset=64
  local.get $0
  local.get $0
  i64.load offset=72
  local.tee $3
  local.get $1
  i64.load offset=72
  local.tee $6
  local.get $3
  local.get $6
  i64.gt_u
  select
  i64.store offset=72
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#addHistogram32 (param $0 i32) (param $1 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#add<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#add<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i64)
  (local $4 i32)
  (local $5 i32)
  (local $6 i64)
  (local $7 i64)
  (local $8 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $0
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#valueFromIndex
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#highestEquivalentValue
  local.set $2
  local.get $2
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 13040
    i32.const 8992
    i32.const 639
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   i64.const 0
   local.set $3
   i32.const 0
   local.set $4
   loop $for-loop|0
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtIndex
     local.set $6
     local.get $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $4
      local.get $6
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#addToCountAtIndex
      local.get $3
      local.get $6
      i64.add
      local.set $3
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $3
   i64.add
   i64.store offset=168
   local.get $0
   local.get $0
   i64.load offset=144
   local.tee $6
   local.get $1
   i64.load offset=144
   local.tee $7
   local.get $6
   local.get $7
   i64.gt_u
   select
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#updatedMaxValue
   local.get $0
   local.get $0
   i64.load offset=152
   local.tee $6
   local.get $1
   i64.load offset=152
   local.tee $7
   local.get $6
   local.get $7
   i64.lt_u
   select
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#updateMinNonZeroValue
  else
   local.get $1
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#countsArrayIndex
   local.set $4
   local.get $1
   local.get $4
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtIndex
   local.set $3
   local.get $0
   local.get $3
   local.get $1
   local.get $4
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#valueFromIndex
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordCountAtValue
   i32.const 0
   local.set $5
   loop $for-loop|1
    local.get $5
    local.get $4
    i32.lt_s
    local.set $8
    local.get $8
    if
     local.get $1
     local.get $5
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtIndex
     local.set $3
     local.get $3
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $3
      local.get $1
      local.get $5
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#valueFromIndex
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordCountAtValue
     end
     local.get $5
     i32.const 1
     i32.add
     local.set $5
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=64
  local.tee $3
  local.get $1
  i64.load offset=64
  local.tee $6
  local.get $3
  local.get $6
  i64.lt_u
  select
  i64.store offset=64
  local.get $0
  local.get $0
  i64.load offset=72
  local.tee $3
  local.get $1
  i64.load offset=72
  local.tee $6
  local.get $3
  local.get $6
  i64.gt_u
  select
  i64.store offset=72
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#addHistogram64 (param $0 i32) (param $1 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#add<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#add<assembly/packedarray/PackedArray/PackedArray,u64> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i64)
  (local $4 i32)
  (local $5 i32)
  (local $6 i64)
  (local $7 i64)
  (local $8 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $0
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#valueFromIndex
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#highestEquivalentValue
  local.set $2
  local.get $2
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 13040
    i32.const 8992
    i32.const 639
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   i64.const 0
   local.set $3
   i32.const 0
   local.set $4
   loop $for-loop|0
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtIndex
     local.set $6
     local.get $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $4
      local.get $6
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#addToCountAtIndex
      local.get $3
      local.get $6
      i64.add
      local.set $3
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $3
   i64.add
   i64.store offset=168
   local.get $0
   local.get $0
   i64.load offset=144
   local.tee $6
   local.get $1
   i64.load offset=144
   local.tee $7
   local.get $6
   local.get $7
   i64.gt_u
   select
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#updatedMaxValue
   local.get $0
   local.get $0
   i64.load offset=152
   local.tee $6
   local.get $1
   i64.load offset=152
   local.tee $7
   local.get $6
   local.get $7
   i64.lt_u
   select
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#updateMinNonZeroValue
  else
   local.get $1
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#countsArrayIndex
   local.set $4
   local.get $1
   local.get $4
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtIndex
   local.set $3
   local.get $0
   local.get $3
   local.get $1
   local.get $4
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#valueFromIndex
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordCountAtValue
   i32.const 0
   local.set $5
   loop $for-loop|1
    local.get $5
    local.get $4
    i32.lt_s
    local.set $8
    local.get $8
    if
     local.get $1
     local.get $5
     call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtIndex
     local.set $3
     local.get $3
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $3
      local.get $1
      local.get $5
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#valueFromIndex
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordCountAtValue
     end
     local.get $5
     i32.const 1
     i32.add
     local.set $5
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=64
  local.tee $3
  local.get $1
  i64.load offset=64
  local.tee $6
  local.get $3
  local.get $6
  i64.lt_u
  select
  i64.store offset=64
  local.get $0
  local.get $0
  i64.load offset=72
  local.tee $3
  local.get $1
  i64.load offset=72
  local.tee $6
  local.get $3
  local.get $6
  i64.gt_u
  select
  i64.store offset=72
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#addPackedHistogram (param $0 i32) (param $1 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#add<assembly/packedarray/PackedArray/PackedArray,u64>
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtValue (param $0 i32) (param $1 i64) (result i64)
  (local $2 i32)
  (local $3 i32)
  i32.const 0
  local.tee $2
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#countsArrayIndex
  local.tee $3
  local.get $2
  local.get $3
  i32.gt_s
  select
  local.tee $2
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $3
  local.get $2
  local.get $3
  i32.lt_s
  select
  local.set $2
  local.get $0
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtIndex
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#establishInternalTackingValues (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i64)
  (local $5 i32)
  (local $6 i32)
  (local $7 i64)
  local.get $0
  i64.const 0
  i64.store offset=144
  local.get $0
  global.get $~lib/builtins/u64.MAX_VALUE
  i64.store offset=152
  i32.const -1
  local.set $2
  i32.const -1
  local.set $3
  i64.const 0
  local.set $4
  i32.const 0
  local.set $5
  loop $for-loop|0
   local.get $5
   local.get $1
   i32.lt_s
   local.set $6
   local.get $6
   if
    local.get $0
    local.get $5
    call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtIndex
    local.set $7
    local.get $7
    i64.const 0
    i64.gt_u
    if
     local.get $4
     local.get $7
     i64.add
     local.set $4
     local.get $5
     local.set $2
     local.get $3
     i32.const -1
     i32.eq
     if (result i32)
      local.get $5
      i32.const 0
      i32.ne
     else
      i32.const 0
     end
     if
      local.get $5
      local.set $3
     end
    end
    local.get $5
    i32.const 1
    i32.add
    local.set $5
    br $for-loop|0
   end
  end
  local.get $2
  i32.const 0
  i32.ge_s
  if
   local.get $0
   local.get $0
   local.get $0
   local.get $2
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#valueFromIndex
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#highestEquivalentValue
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#updatedMaxValue
  end
  local.get $3
  i32.const 0
  i32.ge_s
  if
   local.get $0
   local.get $0
   local.get $3
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#valueFromIndex
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#updateMinNonZeroValue
  end
  local.get $0
  local.get $4
  i64.store offset=168
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#establishInternalTackingValues@varargs (param $0 i32) (param $1 i32)
  block $1of1
   block $0of1
    block $outOfRange
     global.get $~argumentsLength
     br_table $0of1 $1of1 $outOfRange
    end
    unreachable
   end
   local.get $0
   i32.load offset=52
   local.set $1
  end
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#establishInternalTackingValues
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i64)
  (local $4 i32)
  (local $5 i32)
  (local $6 i64)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  (local $15 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#valueFromIndex
  local.set $2
  local.get $2
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 13040
    i32.const 8992
    i32.const 748
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   i64.const 0
   local.set $3
   i32.const 0
   local.set $4
   loop $for-loop|0
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtIndex
     local.set $6
     local.get $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $4
      i64.const 0
      local.get $6
      i64.sub
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#addToCountAtIndex
      local.get $3
      local.get $6
      i64.add
      local.set $3
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $3
   i64.sub
   i64.store offset=168
  else
   i32.const 0
   local.set $4
   loop $for-loop|1
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtIndex
     local.set $3
     local.get $3
     i64.const 0
     i64.gt_u
     if
      local.get $1
      local.get $4
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#valueFromIndex
      local.set $6
      local.get $0
      local.get $6
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtValue
      local.get $3
      i64.lt_u
      if
       i32.const 13648
       local.get $3
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $7
       call $~lib/string/String.__concat
       local.tee $8
       i32.const 13712
       call $~lib/string/String.__concat
       local.tee $9
       local.get $6
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $10
       call $~lib/string/String.__concat
       local.tee $11
       i32.const 13760
       call $~lib/string/String.__concat
       local.tee $12
       local.get $0
       local.get $6
       call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtValue
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $13
       call $~lib/string/String.__concat
       local.tee $14
       i32.const 13840
       call $~lib/string/String.__concat
       local.tee $15
       i32.const 8992
       i32.const 777
       i32.const 13
       call $~lib/builtins/abort
       unreachable
      end
      local.get $0
      i64.const 0
      local.get $3
      i64.sub
      local.get $6
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordCountAtValue
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=144
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtValue
  i64.const 0
  i64.le_u
  if (result i32)
   i32.const 1
  else
   local.get $0
   local.get $0
   i64.load offset=152
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtValue
   i64.const 0
   i64.le_u
  end
  if
   local.get $0
   i32.const 0
   global.set $~argumentsLength
   i32.const 0
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#establishInternalTackingValues@varargs
  end
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#subtractHistogram8 (param $0 i32) (param $1 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i64)
  (local $4 i32)
  (local $5 i32)
  (local $6 i64)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  (local $15 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#valueFromIndex
  local.set $2
  local.get $2
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 13040
    i32.const 8992
    i32.const 748
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   i64.const 0
   local.set $3
   i32.const 0
   local.set $4
   loop $for-loop|0
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtIndex
     local.set $6
     local.get $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $4
      i64.const 0
      local.get $6
      i64.sub
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#addToCountAtIndex
      local.get $3
      local.get $6
      i64.add
      local.set $3
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $3
   i64.sub
   i64.store offset=168
  else
   i32.const 0
   local.set $4
   loop $for-loop|1
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtIndex
     local.set $3
     local.get $3
     i64.const 0
     i64.gt_u
     if
      local.get $1
      local.get $4
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#valueFromIndex
      local.set $6
      local.get $0
      local.get $6
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtValue
      local.get $3
      i64.lt_u
      if
       i32.const 13648
       local.get $3
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $7
       call $~lib/string/String.__concat
       local.tee $8
       i32.const 13712
       call $~lib/string/String.__concat
       local.tee $9
       local.get $6
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $10
       call $~lib/string/String.__concat
       local.tee $11
       i32.const 13760
       call $~lib/string/String.__concat
       local.tee $12
       local.get $0
       local.get $6
       call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtValue
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $13
       call $~lib/string/String.__concat
       local.tee $14
       i32.const 13840
       call $~lib/string/String.__concat
       local.tee $15
       i32.const 8992
       i32.const 777
       i32.const 13
       call $~lib/builtins/abort
       unreachable
      end
      local.get $0
      i64.const 0
      local.get $3
      i64.sub
      local.get $6
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordCountAtValue
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=144
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtValue
  i64.const 0
  i64.le_u
  if (result i32)
   i32.const 1
  else
   local.get $0
   local.get $0
   i64.load offset=152
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtValue
   i64.const 0
   i64.le_u
  end
  if
   local.get $0
   i32.const 0
   global.set $~argumentsLength
   i32.const 0
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#establishInternalTackingValues@varargs
  end
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#subtractHistogram16 (param $0 i32) (param $1 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i64)
  (local $4 i32)
  (local $5 i32)
  (local $6 i64)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  (local $15 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#valueFromIndex
  local.set $2
  local.get $2
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 13040
    i32.const 8992
    i32.const 748
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   i64.const 0
   local.set $3
   i32.const 0
   local.set $4
   loop $for-loop|0
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtIndex
     local.set $6
     local.get $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $4
      i64.const 0
      local.get $6
      i64.sub
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#addToCountAtIndex
      local.get $3
      local.get $6
      i64.add
      local.set $3
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $3
   i64.sub
   i64.store offset=168
  else
   i32.const 0
   local.set $4
   loop $for-loop|1
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtIndex
     local.set $3
     local.get $3
     i64.const 0
     i64.gt_u
     if
      local.get $1
      local.get $4
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#valueFromIndex
      local.set $6
      local.get $0
      local.get $6
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtValue
      local.get $3
      i64.lt_u
      if
       i32.const 13648
       local.get $3
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $7
       call $~lib/string/String.__concat
       local.tee $8
       i32.const 13712
       call $~lib/string/String.__concat
       local.tee $9
       local.get $6
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $10
       call $~lib/string/String.__concat
       local.tee $11
       i32.const 13760
       call $~lib/string/String.__concat
       local.tee $12
       local.get $0
       local.get $6
       call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtValue
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $13
       call $~lib/string/String.__concat
       local.tee $14
       i32.const 13840
       call $~lib/string/String.__concat
       local.tee $15
       i32.const 8992
       i32.const 777
       i32.const 13
       call $~lib/builtins/abort
       unreachable
      end
      local.get $0
      i64.const 0
      local.get $3
      i64.sub
      local.get $6
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordCountAtValue
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=144
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtValue
  i64.const 0
  i64.le_u
  if (result i32)
   i32.const 1
  else
   local.get $0
   local.get $0
   i64.load offset=152
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtValue
   i64.const 0
   i64.le_u
  end
  if
   local.get $0
   i32.const 0
   global.set $~argumentsLength
   i32.const 0
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#establishInternalTackingValues@varargs
  end
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#subtractHistogram32 (param $0 i32) (param $1 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i64)
  (local $4 i32)
  (local $5 i32)
  (local $6 i64)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  (local $15 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#valueFromIndex
  local.set $2
  local.get $2
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 13040
    i32.const 8992
    i32.const 748
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   i64.const 0
   local.set $3
   i32.const 0
   local.set $4
   loop $for-loop|0
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtIndex
     local.set $6
     local.get $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $4
      i64.const 0
      local.get $6
      i64.sub
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#addToCountAtIndex
      local.get $3
      local.get $6
      i64.add
      local.set $3
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $3
   i64.sub
   i64.store offset=168
  else
   i32.const 0
   local.set $4
   loop $for-loop|1
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtIndex
     local.set $3
     local.get $3
     i64.const 0
     i64.gt_u
     if
      local.get $1
      local.get $4
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#valueFromIndex
      local.set $6
      local.get $0
      local.get $6
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtValue
      local.get $3
      i64.lt_u
      if
       i32.const 13648
       local.get $3
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $7
       call $~lib/string/String.__concat
       local.tee $8
       i32.const 13712
       call $~lib/string/String.__concat
       local.tee $9
       local.get $6
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $10
       call $~lib/string/String.__concat
       local.tee $11
       i32.const 13760
       call $~lib/string/String.__concat
       local.tee $12
       local.get $0
       local.get $6
       call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtValue
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $13
       call $~lib/string/String.__concat
       local.tee $14
       i32.const 13840
       call $~lib/string/String.__concat
       local.tee $15
       i32.const 8992
       i32.const 777
       i32.const 13
       call $~lib/builtins/abort
       unreachable
      end
      local.get $0
      i64.const 0
      local.get $3
      i64.sub
      local.get $6
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordCountAtValue
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=144
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtValue
  i64.const 0
  i64.le_u
  if (result i32)
   i32.const 1
  else
   local.get $0
   local.get $0
   i64.load offset=152
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtValue
   i64.const 0
   i64.le_u
  end
  if
   local.get $0
   i32.const 0
   global.set $~argumentsLength
   i32.const 0
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#establishInternalTackingValues@varargs
  end
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#subtractHistogram64 (param $0 i32) (param $1 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#subtract<assembly/packedarray/PackedArray/PackedArray,u64> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i64)
  (local $4 i32)
  (local $5 i32)
  (local $6 i64)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  (local $15 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#valueFromIndex
  local.set $2
  local.get $2
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 13040
    i32.const 8992
    i32.const 748
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   i64.const 0
   local.set $3
   i32.const 0
   local.set $4
   loop $for-loop|0
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtIndex
     local.set $6
     local.get $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $4
      i64.const 0
      local.get $6
      i64.sub
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#addToCountAtIndex
      local.get $3
      local.get $6
      i64.add
      local.set $3
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $3
   i64.sub
   i64.store offset=168
  else
   i32.const 0
   local.set $4
   loop $for-loop|1
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtIndex
     local.set $3
     local.get $3
     i64.const 0
     i64.gt_u
     if
      local.get $1
      local.get $4
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#valueFromIndex
      local.set $6
      local.get $0
      local.get $6
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtValue
      local.get $3
      i64.lt_u
      if
       i32.const 13648
       local.get $3
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $7
       call $~lib/string/String.__concat
       local.tee $8
       i32.const 13712
       call $~lib/string/String.__concat
       local.tee $9
       local.get $6
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $10
       call $~lib/string/String.__concat
       local.tee $11
       i32.const 13760
       call $~lib/string/String.__concat
       local.tee $12
       local.get $0
       local.get $6
       call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtValue
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $13
       call $~lib/string/String.__concat
       local.tee $14
       i32.const 13840
       call $~lib/string/String.__concat
       local.tee $15
       i32.const 8992
       i32.const 777
       i32.const 13
       call $~lib/builtins/abort
       unreachable
      end
      local.get $0
      i64.const 0
      local.get $3
      i64.sub
      local.get $6
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#recordCountAtValue
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=144
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtValue
  i64.const 0
  i64.le_u
  if (result i32)
   i32.const 1
  else
   local.get $0
   local.get $0
   i64.load offset=152
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtValue
   i64.const 0
   i64.le_u
  end
  if
   local.get $0
   i32.const 0
   global.set $~argumentsLength
   i32.const 0
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#establishInternalTackingValues@varargs
  end
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#subtractPackedHistogram (param $0 i32) (param $1 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#subtract<assembly/packedarray/PackedArray/PackedArray,u64>
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/encoding/fillBufferFromCountsArray<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32> (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i64)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  (local $15 i32)
  (local $16 i32)
  (local $17 i32)
  local.get $0
  call $~lib/rt/pure/__retain
  local.set $0
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $0
  i64.load offset=144
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#countsArrayIndex
  i32.const 1
  i32.add
  local.set $2
  i32.const 0
  local.set $3
  loop $while-continue|0
   local.get $3
   local.get $2
   i32.lt_s
   local.set $4
   local.get $4
   if
    local.get $0
    local.get $3
    local.tee $5
    i32.const 1
    i32.add
    local.set $3
    local.get $5
    call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtIndex
    local.set $6
    local.get $6
    i64.const 0
    i64.lt_u
    if
     i32.const 13872
     local.get $6
     i32.const 10
     call $~lib/number/U64#toString
     local.tee $5
     call $~lib/string/String.__concat
     local.tee $7
     i32.const 14000
     call $~lib/string/String.__concat
     local.tee $8
     local.get $3
     i32.const 10
     call $~lib/number/I32#toString
     local.tee $9
     call $~lib/string/String.__concat
     local.tee $10
     i32.const 14048
     call $~lib/string/String.__concat
     local.tee $11
     local.get $0
     local.get $0
     local.get $3
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#valueFromIndex
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#lowestEquivalentValue
     i32.const 10
     call $~lib/number/U64#toString
     local.tee $12
     call $~lib/string/String.__concat
     local.tee $13
     i32.const 14144
     call $~lib/string/String.__concat
     local.tee $14
     local.get $0
     local.get $0
     local.get $3
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#valueFromIndex
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#nextNonEquivalentValue
     i32.const 10
     call $~lib/number/U64#toString
     local.tee $15
     call $~lib/string/String.__concat
     local.tee $16
     i32.const 13840
     call $~lib/string/String.__concat
     local.tee $17
     i32.const 14176
     i32.const 31
     i32.const 7
     call $~lib/builtins/abort
     unreachable
    end
    i32.const 0
    local.set $17
    local.get $6
    i64.const 0
    i64.eq
    if
     i32.const 1
     local.set $17
     loop $while-continue|1
      local.get $3
      local.get $2
      i32.lt_s
      if (result i32)
       local.get $0
       local.get $3
       call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtIndex
       i64.const 0
       i64.eq
      else
       i32.const 0
      end
      local.set $16
      local.get $16
      if
       local.get $17
       i32.const 1
       i32.add
       local.set $17
       local.get $3
       i32.const 1
       i32.add
       local.set $3
       br $while-continue|1
      end
     end
    end
    local.get $17
    i32.const 1
    i32.gt_s
    if
     local.get $1
     i32.const 0
     local.get $17
     i32.sub
     i64.extend_i32_s
     call $assembly/ZigZagEncoding/ZigZagEncoding.encode
    else
     local.get $1
     local.get $6
     call $assembly/ZigZagEncoding/ZigZagEncoding.encode
    end
    br $while-continue|0
   end
  end
  local.get $0
  call $~lib/rt/pure/__release
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/encoding/encodeIntoByteBuffer<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32> (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  local.get $0
  call $~lib/rt/pure/__retain
  local.set $0
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $1
  i32.load
  local.set $2
  local.get $1
  global.get $assembly/encoding/encodingCookie
  call $assembly/ByteBuffer/ByteBuffer#putInt32
  local.get $1
  i32.const 0
  call $assembly/ByteBuffer/ByteBuffer#putInt32
  local.get $1
  i32.const 1
  call $assembly/ByteBuffer/ByteBuffer#putInt32
  local.get $1
  local.get $0
  i32.load8_u offset=32
  call $assembly/ByteBuffer/ByteBuffer#putInt32
  local.get $1
  local.get $0
  i64.load offset=24
  call $assembly/ByteBuffer/ByteBuffer#putInt64
  local.get $1
  local.get $0
  i64.load offset=16
  call $assembly/ByteBuffer/ByteBuffer#putInt64
  local.get $1
  i64.const 1
  call $assembly/ByteBuffer/ByteBuffer#putInt64
  local.get $1
  i32.load
  local.set $3
  local.get $0
  local.get $1
  call $assembly/encoding/fillBufferFromCountsArray<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>
  local.get $1
  i32.load
  local.set $4
  local.get $1
  local.get $2
  i32.const 4
  i32.add
  i32.store
  local.get $1
  local.get $4
  local.get $3
  i32.sub
  call $assembly/ByteBuffer/ByteBuffer#putInt32
  local.get $1
  local.get $4
  i32.store
  local.get $4
  local.get $2
  i32.sub
  local.set $5
  local.get $0
  call $~lib/rt/pure/__release
  local.get $1
  call $~lib/rt/pure/__release
  local.get $5
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#encode (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  i32.const 1024
  call $assembly/ByteBuffer/ByteBuffer.allocate
  local.set $1
  local.get $0
  local.get $1
  call $assembly/encoding/encodeIntoByteBuffer<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>
  drop
  local.get $1
  i32.load offset=4
  i32.const 0
  local.get $1
  i32.load
  call $~lib/typedarray/Uint8Array#slice
  local.set $2
  local.get $1
  call $~lib/rt/pure/__release
  local.get $2
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#encode (param $0 i32) (result i32)
  local.get $0
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#encode
 )
 (func $~lib/typedarray/Uint32Array#fill (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (result i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  local.get $0
  call $~lib/rt/pure/__retain
  local.set $7
  local.get $1
  local.set $6
  local.get $2
  local.set $5
  local.get $3
  local.set $4
  local.get $7
  i32.load offset=4
  local.set $8
  local.get $7
  call $~lib/typedarray/Uint32Array#get:length
  local.set $9
  local.get $5
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $9
   local.get $5
   i32.add
   local.tee $10
   i32.const 0
   local.tee $11
   local.get $10
   local.get $11
   i32.gt_s
   select
  else
   local.get $5
   local.tee $10
   local.get $9
   local.tee $11
   local.get $10
   local.get $11
   i32.lt_s
   select
  end
  local.set $5
  local.get $4
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $9
   local.get $4
   i32.add
   local.tee $10
   i32.const 0
   local.tee $11
   local.get $10
   local.get $11
   i32.gt_s
   select
  else
   local.get $4
   local.tee $10
   local.get $9
   local.tee $11
   local.get $10
   local.get $11
   i32.lt_s
   select
  end
  local.set $4
  i32.const 4
  i32.const 1
  i32.eq
  drop
  loop $for-loop|0
   local.get $5
   local.get $4
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $8
    local.get $5
    i32.const 2
    i32.shl
    i32.add
    local.get $6
    i32.store
    local.get $5
    i32.const 1
    i32.add
    local.set $5
    br $for-loop|0
   end
  end
  local.get $7
 )
 (func $assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>#clear (param $0 i32)
  local.get $0
  i32.load
  i32.const 0
  i32.const 0
  global.get $~lib/builtins/i32.MAX_VALUE
  call $~lib/typedarray/Uint32Array#fill
  call $~lib/rt/pure/__release
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#clearCounts (param $0 i32)
  local.get $0
  i32.load offset=160
  call $assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>#clear
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#reset (param $0 i32)
  local.get $0
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#clearCounts
  local.get $0
  i64.const 0
  i64.store offset=168
  local.get $0
  i64.const 0
  i64.store offset=64
  local.get $0
  i64.const 0
  i64.store offset=72
  local.get $0
  i64.const 0
  i64.store offset=144
  local.get $0
  global.get $~lib/number/U64.MAX_VALUE
  i64.store offset=152
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#reset (param $0 i32)
  local.get $0
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#reset
 )
 (func $assembly/AbstractHistogramBase/AbstractHistogramBase<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#constructor (param $0 i32) (result i32)
  local.get $0
  i32.eqz
  if
   i32.const 104
   i32.const 37
   call $~lib/rt/tlsf/__alloc
   call $~lib/rt/pure/__retain
   local.set $0
  end
  local.get $0
  f64.const 0
  f64.store
  local.get $0
  i32.const 0
  i32.store8 offset=8
  local.get $0
  i64.const 0
  i64.store offset=16
  local.get $0
  i64.const 0
  i64.store offset=24
  local.get $0
  i32.const 0
  i32.store8 offset=32
  local.get $0
  i64.const 0
  i64.store offset=40
  local.get $0
  i32.const 0
  i32.store offset=48
  local.get $0
  i32.const 0
  i32.store offset=52
  local.get $0
  i64.const 0
  i64.store offset=56
  local.get $0
  global.get $~lib/builtins/u64.MAX_VALUE
  i64.store offset=64
  local.get $0
  i64.const 0
  i64.store offset=72
  local.get $0
  global.get $assembly/AbstractHistogramBase/NO_TAG
  call $~lib/rt/pure/__retain
  i32.store offset=80
  local.get $0
  f64.const 1
  f64.store offset=88
  local.get $0
  i32.const 0
  i32.store offset=96
  local.get $0
  i32.const 0
  i32.store offset=100
  local.get $0
  f64.const 0
  f64.store
  local.get $0
  i64.const 0
  i64.store offset=16
  local.get $0
  i64.const 0
  i64.store offset=24
  local.get $0
  i32.const 0
  i32.store8 offset=32
  local.get $0
  i64.const 0
  i64.store offset=40
  local.get $0
  i32.const 0
  i32.store offset=48
  local.get $0
  i32.const 0
  i32.store offset=52
  local.get $0
  i64.const 0
  i64.store offset=56
  local.get $0
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getBucketsNeededToCoverValue (param $0 i32) (param $1 i64) (result i32)
  (local $2 i64)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  i32.load offset=48
  i64.extend_i32_s
  local.get $0
  i32.load offset=112
  i64.extend_i32_s
  i64.shl
  local.set $2
  i32.const 1
  local.set $3
  loop $while-continue|0
   local.get $2
   local.get $1
   i64.le_u
   local.set $4
   local.get $4
   if
    local.get $2
    global.get $~lib/builtins/u64.MAX_VALUE
    i64.const 1
    i64.shr_u
    i64.gt_u
    if
     local.get $3
     i32.const 1
     i32.add
     return
    end
    local.get $2
    i64.const 1
    i64.shl
    local.set $2
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $while-continue|0
   end
  end
  local.get $3
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getLengthForNumberOfBuckets (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  local.get $1
  i32.const 1
  i32.add
  local.get $0
  i32.load offset=48
  i32.const 1
  i32.shr_s
  i32.mul
  local.set $2
  local.get $2
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#determineArrayLengthNeeded (param $0 i32) (param $1 i64) (result i32)
  (local $2 i32)
  local.get $1
  i64.const 2
  local.get $0
  i64.load offset=24
  i64.mul
  i64.lt_u
  if
   i32.const 11440
   i32.const 8992
   i32.const 160
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getBucketsNeededToCoverValue
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getLengthForNumberOfBuckets
  local.set $2
  local.get $2
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#establishSize (param $0 i32) (param $1 i64)
  local.get $0
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#determineArrayLengthNeeded
  i32.store offset=52
  local.get $0
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getBucketsNeededToCoverValue
  i64.extend_i32_s
  i64.store offset=40
  local.get $0
  local.get $1
  i64.store offset=16
 )
 (func $assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>#constructor (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  local.get $0
  i32.eqz
  if
   i32.const 4
   i32.const 34
   call $~lib/rt/tlsf/__alloc
   call $~lib/rt/pure/__retain
   local.set $0
  end
  local.get $0
  i32.const 0
  i32.store
  local.get $0
  local.tee $3
  i32.const 0
  local.get $1
  call $~lib/typedarray/Uint64Array#constructor
  local.tee $2
  local.tee $4
  local.get $3
  i32.load
  local.tee $5
  i32.ne
  if
   local.get $4
   call $~lib/rt/pure/__retain
   local.set $4
   local.get $5
   call $~lib/rt/pure/__release
  end
  local.get $4
  i32.store
  local.get $2
  call $~lib/rt/pure/__release
  local.get $0
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#resetIterator (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.tee $2
  local.get $1
  local.tee $3
  local.get $2
  i32.load offset=28
  local.tee $4
  i32.ne
  if
   local.get $3
   call $~lib/rt/pure/__retain
   local.set $3
   local.get $4
   call $~lib/rt/pure/__release
  end
  local.get $3
  i32.store offset=28
  local.get $0
  local.get $1
  i64.load offset=168
  i64.store offset=32
  local.get $0
  local.get $1
  i64.load offset=168
  i64.store offset=96
  local.get $0
  i32.const 0
  i32.store offset=40
  local.get $0
  i64.const 0
  i64.store offset=48
  local.get $0
  i64.const 1
  local.get $1
  i32.load offset=112
  i64.extend_i32_s
  i64.shl
  i64.store offset=56
  local.get $0
  i64.const 0
  i64.store offset=64
  local.get $0
  i64.const 0
  i64.store offset=72
  local.get $0
  i64.const 0
  i64.store offset=80
  local.get $0
  i64.const 0
  i64.store offset=88
  local.get $0
  i64.const 0
  i64.store offset=104
  local.get $0
  i32.const 1
  i32.store8 offset=112
  local.get $0
  i32.load offset=116
  call $assembly/HistogramIterationValue/HistogramIterationValue#reset
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#doReset (param $0 i32) (param $1 i32) (param $2 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $1
  call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#resetIterator
  local.get $0
  local.get $2
  i32.store
  local.get $0
  f64.const 0
  f64.store offset=8
  local.get $0
  f64.const 0
  f64.store offset=16
  local.get $0
  i32.const 0
  i32.store8 offset=24
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#constructor (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  i32.eqz
  if
   i32.const 120
   i32.const 38
   call $~lib/rt/tlsf/__alloc
   call $~lib/rt/pure/__retain
   local.set $0
  end
  local.get $0
  i32.const 0
  i32.store
  local.get $0
  f64.const 0
  f64.store offset=8
  local.get $0
  f64.const 0
  f64.store offset=16
  local.get $0
  i32.const 0
  i32.store8 offset=24
  local.get $0
  i32.const 0
  i32.store offset=28
  local.get $0
  i64.const 0
  i64.store offset=32
  local.get $0
  i32.const 0
  i32.store offset=40
  local.get $0
  i64.const 0
  i64.store offset=48
  local.get $0
  i64.const 0
  i64.store offset=56
  local.get $0
  i64.const 0
  i64.store offset=64
  local.get $0
  i64.const 0
  i64.store offset=72
  local.get $0
  i64.const 0
  i64.store offset=80
  local.get $0
  i64.const 0
  i64.store offset=88
  local.get $0
  i64.const 0
  i64.store offset=96
  local.get $0
  i64.const 0
  i64.store offset=104
  local.get $0
  i32.const 0
  i32.store8 offset=112
  local.get $0
  i32.const 0
  call $assembly/HistogramIterationValue/HistogramIterationValue#constructor
  i32.store offset=116
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  i32.const 0
  i32.store
  local.get $0
  f64.const 0
  f64.store offset=8
  local.get $0
  f64.const 0
  f64.store offset=16
  local.get $0
  i32.const 0
  i32.store8 offset=24
  local.get $0
  local.get $1
  local.get $2
  call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#doReset
  local.get $1
  call $~lib/rt/pure/__release
  local.get $0
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#resetIterator (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.tee $2
  local.get $1
  local.tee $3
  local.get $2
  i32.load offset=4
  local.tee $4
  i32.ne
  if
   local.get $3
   call $~lib/rt/pure/__retain
   local.set $3
   local.get $4
   call $~lib/rt/pure/__release
  end
  local.get $3
  i32.store offset=4
  local.get $0
  local.get $1
  i64.load offset=168
  i64.store offset=8
  local.get $0
  local.get $1
  i64.load offset=168
  i64.store offset=72
  local.get $0
  i32.const 0
  i32.store offset=16
  local.get $0
  i64.const 0
  i64.store offset=24
  local.get $0
  i64.const 1
  local.get $1
  i32.load offset=112
  i64.extend_i32_s
  i64.shl
  i64.store offset=32
  local.get $0
  i64.const 0
  i64.store offset=40
  local.get $0
  i64.const 0
  i64.store offset=48
  local.get $0
  i64.const 0
  i64.store offset=56
  local.get $0
  i64.const 0
  i64.store offset=64
  local.get $0
  i64.const 0
  i64.store offset=80
  local.get $0
  i32.const 1
  i32.store8 offset=88
  local.get $0
  i32.load offset=92
  call $assembly/HistogramIterationValue/HistogramIterationValue#reset
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#doReset (param $0 i32) (param $1 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $1
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#resetIterator
  local.get $0
  i32.const -1
  i32.store
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#constructor (param $0 i32) (param $1 i32) (result i32)
  local.get $0
  i32.eqz
  if
   i32.const 96
   i32.const 39
   call $~lib/rt/tlsf/__alloc
   call $~lib/rt/pure/__retain
   local.set $0
  end
  local.get $0
  i32.const 0
  i32.store
  local.get $0
  i32.const 0
  i32.store offset=4
  local.get $0
  i64.const 0
  i64.store offset=8
  local.get $0
  i32.const 0
  i32.store offset=16
  local.get $0
  i64.const 0
  i64.store offset=24
  local.get $0
  i64.const 0
  i64.store offset=32
  local.get $0
  i64.const 0
  i64.store offset=40
  local.get $0
  i64.const 0
  i64.store offset=48
  local.get $0
  i64.const 0
  i64.store offset=56
  local.get $0
  i64.const 0
  i64.store offset=64
  local.get $0
  i64.const 0
  i64.store offset=72
  local.get $0
  i64.const 0
  i64.store offset=80
  local.get $0
  i32.const 0
  i32.store8 offset=88
  local.get $0
  i32.const 0
  call $assembly/HistogramIterationValue/HistogramIterationValue#constructor
  i32.store offset=92
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $1
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#doReset
  local.get $1
  call $~lib/rt/pure/__release
  local.get $0
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#init (param $0 i32) (param $1 i64) (param $2 i64) (param $3 i32) (param $4 f64)
  (local $5 i64)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  local.get $0
  local.get $1
  i64.store offset=24
  local.get $0
  local.get $2
  i64.store offset=16
  local.get $0
  local.get $3
  i32.store8 offset=32
  local.get $0
  local.get $4
  f64.store offset=88
  i32.const 2
  i64.extend_i32_s
  f64.const 10
  local.get $3
  f64.convert_i32_u
  call $~lib/math/NativeMath.pow
  i64.trunc_f64_u
  i64.mul
  local.set $5
  local.get $0
  local.get $1
  f64.convert_i64_u
  call $~lib/math/NativeMath.log2
  f64.floor
  i32.trunc_f64_s
  i32.store offset=112
  local.get $0
  i64.const 1
  local.get $0
  i32.load offset=112
  i64.extend_i32_s
  i64.shl
  i64.const 1
  i64.sub
  i64.store offset=136
  local.get $5
  f64.convert_i64_u
  call $~lib/math/NativeMath.log2
  f64.ceil
  i32.trunc_f64_s
  local.set $6
  local.get $0
  local.get $6
  i32.const 1
  i32.sub
  i32.store offset=108
  local.get $0
  i32.const 1
  local.get $6
  i32.shl
  i32.store offset=48
  local.get $0
  local.get $0
  i32.load offset=48
  i32.const 1
  i32.shr_s
  i32.store offset=116
  local.get $0
  local.get $0
  i32.load offset=48
  i64.extend_i32_s
  i64.const 1
  i64.sub
  local.get $0
  i32.load offset=112
  i64.extend_i32_s
  i64.shl
  i64.store offset=128
  local.get $0
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#establishSize
  local.get $0
  local.tee $8
  i32.const 0
  local.get $0
  i32.load offset=52
  call $assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>#constructor
  local.tee $7
  local.tee $9
  local.get $8
  i32.load offset=160
  local.tee $10
  i32.ne
  if
   local.get $9
   call $~lib/rt/pure/__retain
   local.set $9
   local.get $10
   call $~lib/rt/pure/__release
  end
  local.get $9
  i32.store offset=160
  local.get $0
  i32.const 64
  local.get $0
  i32.load offset=112
  i32.sub
  local.get $0
  i32.load offset=108
  i32.sub
  i32.const 1
  i32.sub
  i32.store offset=104
  local.get $0
  local.tee $10
  i32.const 0
  local.get $0
  i32.const 1
  call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#constructor
  local.set $9
  local.get $10
  i32.load offset=96
  call $~lib/rt/pure/__release
  local.get $9
  i32.store offset=96
  local.get $0
  local.tee $8
  i32.const 0
  local.get $0
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#constructor
  local.set $9
  local.get $8
  i32.load offset=100
  call $~lib/rt/pure/__release
  local.get $9
  i32.store offset=100
  local.get $7
  call $~lib/rt/pure/__release
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#constructor (param $0 i32) (param $1 i64) (param $2 i64) (param $3 i32) (result i32)
  (local $4 f64)
  local.get $0
  i32.eqz
  if
   i32.const 176
   i32.const 36
   call $~lib/rt/tlsf/__alloc
   call $~lib/rt/pure/__retain
   local.set $0
  end
  local.get $0
  i32.const 0
  i32.store offset=104
  local.get $0
  i32.const 0
  i32.store offset=108
  local.get $0
  i32.const 0
  i32.store offset=112
  local.get $0
  i32.const 0
  i32.store offset=116
  local.get $0
  i64.const 0
  i64.store offset=120
  local.get $0
  i64.const 0
  i64.store offset=128
  local.get $0
  i64.const 0
  i64.store offset=136
  local.get $0
  i64.const 0
  i64.store offset=144
  local.get $0
  global.get $~lib/number/U64.MAX_VALUE
  i64.store offset=152
  local.get $0
  i32.const 0
  i32.store offset=160
  local.get $0
  i64.const 0
  i64.store offset=168
  local.get $0
  call $assembly/AbstractHistogramBase/AbstractHistogramBase<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#constructor
  local.set $0
  local.get $1
  i64.const 1
  i64.lt_u
  if
   i32.const 8896
   i32.const 8992
   i32.const 61
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $2
  i64.const 2
  local.get $1
  i64.mul
  i64.lt_u
  if
   i32.const 9056
   i32.const 8992
   i32.const 64
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $3
  i32.const 255
  i32.and
  i32.const 0
  i32.lt_u
  if (result i32)
   i32.const 1
  else
   local.get $3
   i32.const 255
   i32.and
   i32.const 5
   i32.gt_u
  end
  if
   i32.const 9264
   i32.const 8992
   i32.const 72
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  global.get $assembly/AbstractHistogramBase/AbstractHistogramBase.identityBuilder
  local.tee $4
  f64.const 1
  f64.add
  global.set $assembly/AbstractHistogramBase/AbstractHistogramBase.identityBuilder
  local.get $4
  f64.store
  local.get $0
  local.get $1
  local.get $2
  local.get $3
  f64.const 1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#init
  local.get $0
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#constructor (param $0 i32) (param $1 f64) (param $2 f64) (param $3 f64) (param $4 i32) (param $5 i32) (result i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  local.get $0
  i32.eqz
  if
   i32.const 4
   i32.const 35
   call $~lib/rt/tlsf/__alloc
   call $~lib/rt/pure/__retain
   local.set $0
  end
  local.get $0
  i32.const 0
  i32.store
  local.get $5
  call $~lib/rt/pure/__retain
  local.set $5
  local.get $5
  if
   local.get $0
   local.tee $6
   local.get $5
   local.tee $7
   local.get $6
   i32.load
   local.tee $8
   i32.ne
   if
    local.get $7
    call $~lib/rt/pure/__retain
    local.set $7
    local.get $8
    call $~lib/rt/pure/__release
   end
   local.get $7
   i32.store
  else
   local.get $0
   local.tee $8
   i32.const 0
   local.get $1
   i64.trunc_f64_u
   local.get $2
   i64.trunc_f64_u
   local.get $3
   i32.trunc_f64_u
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#constructor
   local.set $7
   local.get $8
   i32.load
   call $~lib/rt/pure/__release
   local.get $7
   i32.store
   local.get $0
   i32.load
   local.get $4
   i32.store8 offset=8
  end
  local.get $5
  call $~lib/rt/pure/__release
  local.get $0
 )
 (func $assembly/index/Histogram64#constructor (param $0 i32) (param $1 f64) (param $2 f64) (param $3 f64) (param $4 i32) (param $5 i32) (result i32)
  local.get $0
  i32.eqz
  if
   i32.const 4
   i32.const 32
   call $~lib/rt/tlsf/__alloc
   call $~lib/rt/pure/__retain
   local.set $0
  end
  local.get $0
  local.get $1
  local.get $2
  local.get $3
  local.get $4
  local.get $5
  call $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#constructor
  local.set $0
  local.get $0
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#get:_histogram (param $0 i32) (result i32)
  local.get $0
  i32.load
  call $~lib/rt/pure/__retain
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#set:_histogram (param $0 i32) (param $1 i32)
  (local $2 i32)
  local.get $0
  local.get $1
  local.get $0
  i32.load
  local.tee $2
  i32.ne
  if
   local.get $1
   call $~lib/rt/pure/__retain
   drop
   local.get $2
   call $~lib/rt/pure/__release
  end
  local.get $1
  i32.store
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#get:autoResize (param $0 i32) (result i32)
  local.get $0
  i32.load
  i32.load8_u offset=8
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#set:autoResize (param $0 i32) (param $1 i32)
  local.get $0
  i32.load
  local.get $1
  i32.store8 offset=8
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#get:highestTrackableValue (param $0 i32) (result f64)
  local.get $0
  i32.load
  i64.load offset=16
  f64.convert_i64_u
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#set:highestTrackableValue (param $0 i32) (param $1 f64)
  local.get $0
  i32.load
  local.get $1
  i64.trunc_f64_u
  i64.store offset=16
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#get:startTimeStampMsec (param $0 i32) (result f64)
  local.get $0
  i32.load
  i64.load offset=64
  f64.convert_i64_u
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#set:startTimeStampMsec (param $0 i32) (param $1 f64)
  local.get $0
  i32.load
  local.get $1
  i64.trunc_f64_u
  i64.store offset=64
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#get:endTimeStampMsec (param $0 i32) (result f64)
  local.get $0
  i32.load
  i64.load offset=72
  f64.convert_i64_u
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#set:endTimeStampMsec (param $0 i32) (param $1 f64)
  local.get $0
  i32.load
  local.get $1
  i64.trunc_f64_u
  i64.store offset=72
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#get:minNonZeroValue (param $0 i32) (result f64)
  local.get $0
  i32.load
  i64.load offset=152
  f64.convert_i64_u
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#get:maxValue (param $0 i32) (result f64)
  local.get $0
  i32.load
  i64.load offset=144
  f64.convert_i64_u
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#get:totalCount (param $0 i32) (result f64)
  local.get $0
  i32.load
  i64.load offset=168
  f64.convert_i64_u
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#reset (param $0 i32)
  local.get $0
  local.get $0
  i32.load offset=4
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#doReset
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#hasNext (param $0 i32) (result i32)
  local.get $0
  i32.load offset=4
  i64.load offset=168
  local.get $0
  i64.load offset=8
  i64.ne
  if
   i32.const 0
   i32.const 11648
   i32.const 87
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i64.load offset=56
  local.get $0
  i64.load offset=72
  i64.lt_u
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#exhaustedSubBuckets (param $0 i32) (result i32)
  local.get $0
  i32.load offset=16
  local.get $0
  i32.load offset=4
  i32.load offset=52
  i32.ge_s
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#lowestEquivalentValue (param $0 i32) (param $1 i64) (result i64)
  (local $2 i32)
  (local $3 i32)
  (local $4 i64)
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getBucketIndex
  local.set $2
  local.get $0
  local.get $1
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getSubBucketIndex
  local.set $3
  local.get $0
  local.get $2
  local.get $3
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#valueFromIndexes
  local.set $4
  local.get $4
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#sizeOfEquivalentValueRange (param $0 i32) (param $1 i64) (result i64)
  (local $2 i32)
  (local $3 i64)
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getBucketIndex
  local.set $2
  i64.const 1
  local.get $0
  i32.load offset=112
  local.get $2
  i32.add
  i64.extend_i32_s
  i64.shl
  local.set $3
  local.get $3
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#nextNonEquivalentValue (param $0 i32) (param $1 i64) (result i64)
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#lowestEquivalentValue
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#sizeOfEquivalentValueRange
  i64.add
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#highestEquivalentValue (param $0 i32) (param $1 i64) (result i64)
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#nextNonEquivalentValue
  i64.const 1
  i64.sub
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#reachedIterationLevel (param $0 i32) (result i32)
  (local $1 i64)
  local.get $0
  i32.load offset=4
  local.get $0
  i32.load offset=16
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtIndex
  local.set $1
  local.get $1
  i64.const 0
  i64.ne
  if (result i32)
   local.get $0
   i32.load
   local.get $0
   i32.load offset=16
   i32.ne
  else
   i32.const 0
  end
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getValueIteratedTo (param $0 i32) (result i64)
  local.get $0
  i32.load offset=4
  local.get $0
  i64.load offset=24
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#highestEquivalentValue
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getPercentileIteratedTo (param $0 i32) (result f64)
  f64.const 100
  local.get $0
  i64.load offset=56
  f64.convert_i64_u
  f64.mul
  local.get $0
  i64.load offset=72
  f64.convert_i64_u
  f64.div
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#incrementIterationLevel (param $0 i32)
  local.get $0
  local.get $0
  i32.load offset=16
  i32.store
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#incrementSubBucket (param $0 i32)
  local.get $0
  i32.const 1
  i32.store8 offset=88
  local.get $0
  local.get $0
  i32.load offset=16
  i32.const 1
  i32.add
  i32.store offset=16
  local.get $0
  local.get $0
  i32.load offset=4
  local.get $0
  i32.load offset=16
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#valueFromIndex
  i64.store offset=24
  local.get $0
  local.get $0
  i32.load offset=4
  local.get $0
  i32.load offset=16
  i32.const 1
  i32.add
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#valueFromIndex
  i64.store offset=32
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#next (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i64)
  loop $while-continue|0
   local.get $0
   call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#exhaustedSubBuckets
   i32.eqz
   local.set $1
   local.get $1
   if
    local.get $0
    local.get $0
    i32.load offset=4
    local.get $0
    i32.load offset=16
    call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtIndex
    i64.store offset=80
    local.get $0
    i32.load8_u offset=88
    if
     local.get $0
     local.get $0
     i64.load offset=56
     local.get $0
     i64.load offset=80
     i64.add
     i64.store offset=56
     local.get $0
     local.get $0
     i64.load offset=64
     local.get $0
     i64.load offset=80
     local.get $0
     i32.load offset=4
     local.get $0
     i64.load offset=24
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#highestEquivalentValue
     i64.mul
     i64.add
     i64.store offset=64
     local.get $0
     i32.const 0
     i32.store8 offset=88
    end
    local.get $0
    call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#reachedIterationLevel
    if
     local.get $0
     call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getValueIteratedTo
     local.set $2
     local.get $0
     i32.load offset=92
     local.get $2
     i64.store
     local.get $0
     i32.load offset=92
     local.get $0
     i64.load offset=40
     i64.store offset=8
     local.get $0
     i32.load offset=92
     local.get $0
     i64.load offset=80
     i64.store offset=16
     local.get $0
     i32.load offset=92
     local.get $0
     i64.load offset=56
     local.get $0
     i64.load offset=48
     i64.sub
     i64.store offset=24
     local.get $0
     i32.load offset=92
     local.get $0
     i64.load offset=56
     i64.store offset=32
     local.get $0
     i32.load offset=92
     local.get $0
     i64.load offset=64
     i64.store offset=40
     local.get $0
     i32.load offset=92
     f64.const 100
     local.get $0
     i64.load offset=56
     f64.convert_i64_u
     f64.mul
     local.get $0
     i64.load offset=72
     f64.convert_i64_u
     f64.div
     f64.store offset=48
     local.get $0
     i32.load offset=92
     local.get $0
     call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getPercentileIteratedTo
     f64.store offset=56
     local.get $0
     local.get $2
     i64.store offset=40
     local.get $0
     local.get $0
     i64.load offset=56
     i64.store offset=48
     local.get $0
     call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#incrementIterationLevel
     local.get $0
     i32.load offset=4
     i64.load offset=168
     local.get $0
     i64.load offset=8
     i64.ne
     if
      i32.const 11744
      i32.const 11648
      i32.const 128
      i32.const 11
      call $~lib/builtins/abort
      unreachable
     end
     local.get $0
     i32.load offset=92
     call $~lib/rt/pure/__retain
     return
    end
    local.get $0
    call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#incrementSubBucket
    br $while-continue|0
   end
  end
  i32.const 11840
  i32.const 11648
  i32.const 134
  i32.const 5
  call $~lib/builtins/abort
  unreachable
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#medianEquivalentValue (param $0 i32) (param $1 i64) (result i64)
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#lowestEquivalentValue
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#sizeOfEquivalentValueRange
  i64.const 1
  i64.shr_u
  i64.add
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getMean (param $0 i32) (result f64)
  (local $1 i64)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  i64.load offset=168
  i64.const 0
  i64.eq
  if
   f64.const 0
   return
  end
  local.get $0
  i32.load offset=100
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#reset
  i64.const 0
  local.set $1
  loop $while-continue|0
   local.get $0
   i32.load offset=100
   call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#hasNext
   local.set $2
   local.get $2
   if
    local.get $0
    i32.load offset=100
    call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#next
    local.set $3
    local.get $1
    local.get $0
    local.get $3
    i64.load
    call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#medianEquivalentValue
    local.get $3
    i64.load offset=16
    i64.mul
    i64.add
    local.set $1
    local.get $3
    call $~lib/rt/pure/__release
    br $while-continue|0
   end
  end
  local.get $1
  f64.convert_i64_u
  f64.const 1
  f64.mul
  local.get $0
  i64.load offset=168
  f64.convert_i64_u
  f64.div
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#computeStdDeviation (param $0 i32) (param $1 f64) (result f64)
  (local $2 f64)
  (local $3 i32)
  (local $4 i32)
  (local $5 f64)
  (local $6 f64)
  local.get $0
  i64.load offset=168
  i64.const 0
  i64.eq
  if
   f64.const 0
   return
  end
  f64.const 0
  local.set $2
  local.get $0
  i32.load offset=100
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#reset
  loop $while-continue|0
   local.get $0
   i32.load offset=100
   call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#hasNext
   local.set $3
   local.get $3
   if
    local.get $0
    i32.load offset=100
    call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#next
    local.set $4
    local.get $0
    local.get $4
    i64.load
    call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#medianEquivalentValue
    f64.convert_i64_u
    local.get $1
    f64.sub
    local.set $5
    local.get $2
    local.get $5
    local.get $5
    f64.mul
    local.get $4
    i64.load offset=24
    f64.convert_i64_u
    f64.mul
    f64.add
    local.set $2
    local.get $4
    call $~lib/rt/pure/__release
    br $while-continue|0
   end
  end
  local.get $2
  local.get $0
  i64.load offset=168
  f64.convert_i64_u
  f64.div
  local.set $6
  local.get $6
  f64.sqrt
  local.set $6
  local.get $6
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getStdDeviation (param $0 i32) (result f64)
  (local $1 f64)
  local.get $0
  i64.load offset=168
  i64.const 0
  i64.eq
  if
   f64.const 0
   return
  end
  local.get $0
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getMean
  local.set $1
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#computeStdDeviation
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#get:stdDeviation (param $0 i32) (result f64)
  local.get $0
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getStdDeviation
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#get:mean (param $0 i32) (result f64)
  local.get $0
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getMean
 )
 (func $assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>#get:estimatedFootprintInBytes (param $0 i32) (result i32)
  i32.const 4
  local.get $0
  i32.load
  i32.load offset=8
  i32.add
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#get:estimatedFootprintInBytes (param $0 i32) (result i32)
  i32.const 176
  local.get $0
  i32.load offset=160
  call $assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>#get:estimatedFootprintInBytes
  i32.add
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#get:estimatedFootprintInBytes (param $0 i32) (result f64)
  i32.const 4
  local.get $0
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#get:estimatedFootprintInBytes
  i32.add
  f64.convert_i32_u
 )
 (func $~lib/typedarray/Uint64Array#get:length (param $0 i32) (result i32)
  local.get $0
  i32.load offset=8
  i32.const 3
  i32.shr_u
 )
 (func $~lib/typedarray/Uint64Array#set<~lib/typedarray/Uint64Array> (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  call $~lib/rt/pure/__retain
  local.set $5
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $4
  local.get $2
  local.set $3
  i32.const 0
  drop
  local.get $3
  i32.const 0
  i32.lt_s
  if
   i32.const 12160
   i32.const 12224
   i32.const 1774
   i32.const 19
   call $~lib/builtins/abort
   unreachable
  end
  local.get $4
  call $~lib/typedarray/Uint64Array#get:length
  local.get $3
  i32.add
  local.get $5
  call $~lib/typedarray/Uint64Array#get:length
  i32.gt_s
  if
   i32.const 12160
   i32.const 12224
   i32.const 1775
   i32.const 47
   call $~lib/builtins/abort
   unreachable
  end
  i32.const 1
  i32.const 1
  i32.eq
  if (result i32)
   i32.const 3
   i32.const 3
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   i32.const 0
   if (result i32)
    i32.const 0
   else
    i32.const 0
   end
   i32.eqz
  else
   i32.const 0
  end
  drop
  local.get $5
  i32.load offset=4
  local.get $3
  i32.const 3
  i32.shl
  i32.add
  local.get $4
  i32.load offset=4
  local.get $4
  i32.load offset=8
  call $~lib/memory/memory.copy
  local.get $4
  call $~lib/rt/pure/__release
  local.get $5
  call $~lib/rt/pure/__release
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>#resize (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  i32.const 0
  local.get $1
  call $assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>#constructor
  local.set $2
  local.get $2
  i32.load
  local.get $0
  i32.load
  i32.const 0
  call $~lib/typedarray/Uint64Array#set<~lib/typedarray/Uint64Array>
  local.get $2
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#resize (param $0 i32) (param $1 i64)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#establishSize
  local.get $0
  local.tee $2
  local.get $0
  i32.load offset=160
  local.get $0
  i32.load offset=52
  call $assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>#resize
  local.set $3
  local.get $2
  i32.load offset=160
  call $~lib/rt/pure/__release
  local.get $3
  i32.store offset=160
 )
 (func $assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>#__set (param $0 i32) (param $1 i32) (param $2 i64)
  local.get $0
  i32.load
  local.get $1
  local.get $2
  call $~lib/typedarray/Uint64Array#__uset
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#addToCountAtIndex (param $0 i32) (param $1 i32) (param $2 i64)
  (local $3 i64)
  (local $4 i64)
  local.get $0
  i32.load offset=160
  local.get $1
  call $assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>#__get
  local.set $3
  local.get $3
  local.get $2
  i64.add
  local.set $4
  local.get $4
  i64.const 0
  i64.lt_u
  if
   i32.const 0
   i32.const 8992
   i32.const 611
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i32.load offset=160
  local.get $1
  local.get $4
  call $assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>#__set
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#handleRecordException (param $0 i32) (param $1 i64) (param $2 i64)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  local.get $0
  i32.load8_u offset=8
  i32.eqz
  if
   i32.const 12032
   local.get $2
   i32.const 10
   call $~lib/number/U64#toString
   local.tee $3
   call $~lib/string/String.__concat
   local.tee $4
   i32.const 12064
   call $~lib/string/String.__concat
   local.tee $5
   i32.const 8992
   i32.const 225
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#resize
  local.get $0
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#countsArrayIndex
  local.set $5
  local.get $0
  local.get $5
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#addToCountAtIndex
  local.get $0
  local.get $0
  local.get $0
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#valueFromIndex
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#highestEquivalentValue
  i64.store offset=16
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#incrementCountAtIndex (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i64)
  (local $4 i32)
  (local $5 i32)
  local.get $0
  i32.load offset=160
  local.get $1
  call $assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>#__get
  local.set $2
  local.get $2
  i64.const 1
  i64.add
  local.set $3
  local.get $3
  i64.const 0
  i64.lt_u
  if
   local.get $3
   i32.const 10
   call $~lib/number/U64#toString
   local.tee $4
   i32.const 12288
   call $~lib/string/String.__concat
   local.tee $5
   i32.const 8992
   i32.const 593
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i32.load offset=160
  local.get $1
  local.get $3
  call $assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>#__set
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#updatedMaxValue (param $0 i32) (param $1 i64)
  (local $2 i64)
  local.get $1
  local.get $0
  i64.load offset=136
  i64.add
  local.set $2
  local.get $0
  local.get $2
  i64.store offset=144
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#updateMinNonZeroValue (param $0 i32) (param $1 i64)
  (local $2 i64)
  local.get $1
  local.get $0
  i64.load offset=136
  i64.le_u
  if
   return
  end
  local.get $1
  local.get $0
  i64.load offset=136
  i64.const -1
  i64.xor
  i64.and
  local.set $2
  local.get $0
  local.get $2
  i64.store offset=152
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#updateMinAndMax (param $0 i32) (param $1 i64)
  local.get $1
  local.get $0
  i64.load offset=144
  i64.gt_u
  if
   local.get $0
   local.get $1
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#updatedMaxValue
  end
  local.get $1
  local.get $0
  i64.load offset=152
  i64.lt_u
  if (result i32)
   local.get $1
   i64.const 0
   i64.ne
  else
   i32.const 0
  end
  if
   local.get $0
   local.get $1
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#updateMinNonZeroValue
  end
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#incrementTotalCount (param $0 i32)
  local.get $0
  local.get $0
  i64.load offset=168
  i64.const 1
  i64.add
  i64.store offset=168
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordSingleValue (param $0 i32) (param $1 i64)
  (local $2 i32)
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#countsArrayIndex
  local.set $2
  local.get $2
  local.get $0
  i32.load offset=52
  i32.ge_s
  if
   local.get $0
   i64.const 1
   local.get $1
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#handleRecordException
  else
   local.get $0
   local.get $2
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#incrementCountAtIndex
  end
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#updateMinAndMax
  local.get $0
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#incrementTotalCount
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordValue (param $0 i32) (param $1 f64)
  local.get $0
  i32.load
  local.get $1
  i64.trunc_f64_u
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordSingleValue
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordCountAtValue (param $0 i32) (param $1 i64) (param $2 i64)
  (local $3 i32)
  local.get $0
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#countsArrayIndex
  local.set $3
  local.get $3
  local.get $0
  i32.load offset=52
  i32.ge_s
  if
   local.get $0
   local.get $1
   local.get $2
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#handleRecordException
  else
   local.get $0
   local.get $3
   local.get $1
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#addToCountAtIndex
  end
  local.get $0
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#updateMinAndMax
  local.get $0
  local.get $0
  i64.load offset=168
  local.get $1
  i64.add
  i64.store offset=168
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordValueWithCount (param $0 i32) (param $1 f64) (param $2 f64)
  local.get $0
  i32.load
  local.get $2
  i64.trunc_f64_u
  local.get $1
  i64.trunc_f64_u
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordCountAtValue
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordSingleValueWithExpectedInterval (param $0 i32) (param $1 i64) (param $2 i64)
  (local $3 i64)
  (local $4 i32)
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordSingleValue
  local.get $1
  local.get $2
  i64.lt_u
  if (result i32)
   i32.const 1
  else
   local.get $2
   i64.const 0
   i64.eq
  end
  if
   return
  end
  local.get $1
  local.get $2
  i64.sub
  local.set $3
  loop $for-loop|0
   local.get $3
   local.get $2
   i64.ge_u
   local.set $4
   local.get $4
   if
    local.get $0
    local.get $3
    call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordSingleValue
    local.get $3
    local.get $2
    i64.sub
    local.set $3
    br $for-loop|0
   end
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordValueWithExpectedInterval (param $0 i32) (param $1 f64) (param $2 f64)
  local.get $0
  i32.load
  local.get $1
  i64.trunc_f64_u
  local.get $2
  i64.trunc_f64_u
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordSingleValueWithExpectedInterval
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getValueAtPercentile (param $0 i32) (param $1 f64) (result i64)
  (local $2 f64)
  (local $3 f64)
  (local $4 i64)
  (local $5 i64)
  (local $6 i32)
  (local $7 i32)
  (local $8 i64)
  local.get $1
  f64.const 100
  f64.min
  local.set $2
  local.get $2
  f64.const 100
  f64.div
  local.get $0
  i64.load offset=168
  f64.convert_i64_u
  f64.mul
  local.set $3
  local.get $3
  local.get $3
  i32.const 1
  global.set $~argumentsLength
  global.get $assembly/ulp/ulp
  call_indirect (type $f64_=>_f64)
  f64.sub
  f64.ceil
  f64.const 1
  f64.max
  i64.trunc_f64_u
  local.set $4
  i64.const 0
  local.set $5
  i32.const 0
  local.set $6
  loop $for-loop|0
   local.get $6
   local.get $0
   i32.load offset=52
   i32.lt_s
   local.set $7
   local.get $7
   if
    local.get $5
    local.get $0
    local.get $6
    call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtIndex
    i64.add
    local.set $5
    local.get $5
    local.get $4
    i64.ge_u
    if
     local.get $0
     local.get $6
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#valueFromIndex
     local.set $8
     local.get $1
     f64.const 0
     f64.eq
     if (result i64)
      local.get $0
      local.get $8
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#lowestEquivalentValue
     else
      local.get $0
      local.get $8
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#highestEquivalentValue
     end
     return
    end
    local.get $6
    i32.const 1
    i32.add
    local.set $6
    br $for-loop|0
   end
  end
  i64.const 0
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getValueAtPercentile (param $0 i32) (param $1 f64) (result f64)
  local.get $0
  i32.load
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getValueAtPercentile
  f64.convert_i64_u
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#reset (param $0 i32) (param $1 i32)
  local.get $0
  local.get $0
  i32.load offset=28
  local.get $1
  call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#doReset
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#hasNext (param $0 i32) (result i32)
  local.get $0
  i32.load offset=28
  i64.load offset=168
  local.get $0
  i64.load offset=32
  i64.ne
  if
   i32.const 0
   i32.const 12528
   i32.const 138
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i64.load offset=80
  local.get $0
  i64.load offset=96
  i64.lt_u
  if
   i32.const 1
   return
  end
  local.get $0
  i32.load8_u offset=24
  i32.eqz
  if (result i32)
   local.get $0
   i64.load offset=96
   i64.const 0
   i64.gt_u
  else
   i32.const 0
  end
  if
   local.get $0
   f64.const 100
   f64.store offset=8
   local.get $0
   i32.const 1
   i32.store8 offset=24
   i32.const 1
   return
  end
  i32.const 0
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#exhaustedSubBuckets (param $0 i32) (result i32)
  local.get $0
  i32.load offset=40
  local.get $0
  i32.load offset=28
  i32.load offset=52
  i32.ge_s
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#reachedIterationLevel (param $0 i32) (result i32)
  (local $1 f64)
  local.get $0
  i64.load offset=104
  i64.const 0
  i64.eq
  if
   i32.const 0
   return
  end
  f64.const 100
  local.get $0
  i64.load offset=80
  f64.convert_i64_u
  f64.mul
  local.get $0
  i64.load offset=96
  f64.convert_i64_u
  f64.div
  local.set $1
  local.get $1
  local.get $0
  f64.load offset=8
  f64.ge
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getValueIteratedTo (param $0 i32) (result i64)
  local.get $0
  i32.load offset=28
  local.get $0
  i64.load offset=48
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#highestEquivalentValue
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getPercentileIteratedTo (param $0 i32) (result f64)
  local.get $0
  f64.load offset=8
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#incrementIterationLevel (param $0 i32)
  (local $1 f64)
  local.get $0
  local.get $0
  f64.load offset=8
  f64.store offset=16
  local.get $0
  i32.load
  f64.convert_i32_s
  f64.const 2
  f64.const 100
  f64.const 100
  local.get $0
  f64.load offset=8
  f64.sub
  f64.div
  call $~lib/math/NativeMath.log2
  f64.floor
  f64.const 1
  f64.add
  call $~lib/math/NativeMath.pow
  f64.mul
  local.set $1
  local.get $0
  local.get $0
  f64.load offset=8
  f64.const 100
  local.get $1
  f64.div
  f64.add
  f64.store offset=8
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#incrementSubBucket (param $0 i32)
  local.get $0
  i32.const 1
  i32.store8 offset=112
  local.get $0
  local.get $0
  i32.load offset=40
  i32.const 1
  i32.add
  i32.store offset=40
  local.get $0
  local.get $0
  i32.load offset=28
  local.get $0
  i32.load offset=40
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#valueFromIndex
  i64.store offset=48
  local.get $0
  local.get $0
  i32.load offset=28
  local.get $0
  i32.load offset=40
  i32.const 1
  i32.add
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#valueFromIndex
  i64.store offset=56
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#next (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i64)
  loop $while-continue|0
   local.get $0
   call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#exhaustedSubBuckets
   i32.eqz
   local.set $1
   local.get $1
   if
    local.get $0
    local.get $0
    i32.load offset=28
    local.get $0
    i32.load offset=40
    call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtIndex
    i64.store offset=104
    local.get $0
    i32.load8_u offset=112
    if
     local.get $0
     local.get $0
     i64.load offset=80
     local.get $0
     i64.load offset=104
     i64.add
     i64.store offset=80
     local.get $0
     local.get $0
     i64.load offset=88
     local.get $0
     i64.load offset=104
     local.get $0
     i32.load offset=28
     local.get $0
     i64.load offset=48
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#highestEquivalentValue
     i64.mul
     i64.add
     i64.store offset=88
     local.get $0
     i32.const 0
     i32.store8 offset=112
    end
    local.get $0
    call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#reachedIterationLevel
    if
     local.get $0
     call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getValueIteratedTo
     local.set $2
     local.get $0
     i32.load offset=116
     local.get $2
     i64.store
     local.get $0
     i32.load offset=116
     local.get $0
     i64.load offset=64
     i64.store offset=8
     local.get $0
     i32.load offset=116
     local.get $0
     i64.load offset=104
     i64.store offset=16
     local.get $0
     i32.load offset=116
     local.get $0
     i64.load offset=80
     local.get $0
     i64.load offset=72
     i64.sub
     i64.store offset=24
     local.get $0
     i32.load offset=116
     local.get $0
     i64.load offset=80
     i64.store offset=32
     local.get $0
     i32.load offset=116
     local.get $0
     i64.load offset=88
     i64.store offset=40
     local.get $0
     i32.load offset=116
     f64.const 100
     local.get $0
     i64.load offset=80
     f64.convert_i64_u
     f64.mul
     local.get $0
     i64.load offset=96
     f64.convert_i64_u
     f64.div
     f64.store offset=48
     local.get $0
     i32.load offset=116
     local.get $0
     call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getPercentileIteratedTo
     f64.store offset=56
     local.get $0
     local.get $2
     i64.store offset=64
     local.get $0
     local.get $0
     i64.load offset=80
     i64.store offset=72
     local.get $0
     call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#incrementIterationLevel
     local.get $0
     i32.load offset=28
     i64.load offset=168
     local.get $0
     i64.load offset=32
     i64.ne
     if
      i32.const 11744
      i32.const 12528
      i32.const 187
      i32.const 11
      call $~lib/builtins/abort
      unreachable
     end
     local.get $0
     i32.load offset=116
     call $~lib/rt/pure/__retain
     return
    end
    local.get $0
    call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#incrementSubBucket
    br $while-continue|0
   end
  end
  i32.const 11840
  i32.const 12528
  i32.const 193
  i32.const 5
  call $~lib/builtins/abort
  unreachable
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#outputPercentileDistribution (param $0 i32) (param $1 i32) (param $2 f64) (result i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  (local $15 i32)
  (local $16 i32)
  (local $17 i32)
  (local $18 i32)
  (local $19 i32)
  (local $20 i32)
  (local $21 i32)
  (local $22 i32)
  (local $23 i32)
  (local $24 i32)
  (local $25 i32)
  (local $26 f64)
  (local $27 i32)
  (local $28 i32)
  (local $29 i32)
  (local $30 i32)
  (local $31 i32)
  (local $32 i32)
  (local $33 i32)
  (local $34 i32)
  (local $35 i32)
  (local $36 i32)
  (local $37 i32)
  (local $38 i32)
  (local $39 i32)
  (local $40 i32)
  i32.const 352
  local.set $3
  local.get $3
  i32.const 12384
  call $~lib/string/String.__concat
  local.tee $4
  local.tee $5
  local.get $3
  local.tee $6
  i32.ne
  if
   local.get $5
   call $~lib/rt/pure/__retain
   local.set $5
   local.get $6
   call $~lib/rt/pure/__release
  end
  local.get $5
  local.set $3
  local.get $0
  i32.load offset=96
  call $~lib/rt/pure/__retain
  local.set $5
  local.get $5
  local.get $1
  call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#reset
  i32.const 0
  i32.const 12
  local.get $0
  i32.load8_u offset=32
  call $assembly/formatters/FloatFormatter#constructor
  local.set $6
  i32.const 0
  i32.const 2
  i32.const 12
  call $assembly/formatters/FloatFormatter#constructor
  local.set $7
  i32.const 0
  i32.const 10
  call $assembly/formatters/IntegerFormatter#constructor
  local.set $8
  i32.const 0
  i32.const 14
  i32.const 2
  call $assembly/formatters/FloatFormatter#constructor
  local.set $9
  loop $while-continue|0
   local.get $5
   call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#hasNext
   local.set $10
   local.get $10
   if
    local.get $5
    call $assembly/PercentileIterator/PercentileIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#next
    local.set $11
    local.get $11
    f64.load offset=56
    f64.const 100
    f64.lt
    if
     local.get $3
     local.get $6
     local.get $11
     i64.load
     f64.convert_i64_u
     local.get $2
     f64.div
     call $assembly/formatters/FloatFormatter#format
     local.tee $12
     i32.const 224
     call $~lib/string/String.__concat
     local.tee $13
     local.get $7
     local.get $11
     f64.load offset=56
     f64.const 100
     f64.div
     call $assembly/formatters/FloatFormatter#format
     local.tee $14
     call $~lib/string/String.__concat
     local.tee $15
     i32.const 224
     call $~lib/string/String.__concat
     local.tee $16
     local.get $8
     local.get $11
     i64.load offset=32
     call $assembly/formatters/IntegerFormatter#format
     local.tee $17
     call $~lib/string/String.__concat
     local.tee $18
     i32.const 224
     call $~lib/string/String.__concat
     local.tee $19
     local.get $9
     f64.const 1
     f64.const 1
     local.get $11
     f64.load offset=56
     f64.const 100
     f64.div
     f64.sub
     f64.div
     call $assembly/formatters/FloatFormatter#format
     local.tee $20
     call $~lib/string/String.__concat
     local.tee $21
     i32.const 12640
     call $~lib/string/String.__concat
     local.tee $22
     call $~lib/string/String.__concat
     local.tee $23
     local.tee $24
     local.get $3
     local.tee $25
     i32.ne
     if
      local.get $24
      call $~lib/rt/pure/__retain
      local.set $24
      local.get $25
      call $~lib/rt/pure/__release
     end
     local.get $24
     local.set $3
     local.get $12
     call $~lib/rt/pure/__release
     local.get $13
     call $~lib/rt/pure/__release
     local.get $14
     call $~lib/rt/pure/__release
     local.get $15
     call $~lib/rt/pure/__release
     local.get $16
     call $~lib/rt/pure/__release
     local.get $17
     call $~lib/rt/pure/__release
     local.get $18
     call $~lib/rt/pure/__release
     local.get $19
     call $~lib/rt/pure/__release
     local.get $20
     call $~lib/rt/pure/__release
     local.get $21
     call $~lib/rt/pure/__release
     local.get $22
     call $~lib/rt/pure/__release
     local.get $23
     call $~lib/rt/pure/__release
    else
     local.get $3
     local.get $6
     local.get $11
     i64.load
     f64.convert_i64_u
     local.get $2
     f64.div
     call $assembly/formatters/FloatFormatter#format
     local.tee $23
     i32.const 224
     call $~lib/string/String.__concat
     local.tee $22
     local.get $7
     local.get $11
     f64.load offset=56
     f64.const 100
     f64.div
     call $assembly/formatters/FloatFormatter#format
     local.tee $21
     call $~lib/string/String.__concat
     local.tee $20
     i32.const 224
     call $~lib/string/String.__concat
     local.tee $19
     local.get $8
     local.get $11
     i64.load offset=32
     call $assembly/formatters/IntegerFormatter#format
     local.tee $18
     call $~lib/string/String.__concat
     local.tee $17
     i32.const 12640
     call $~lib/string/String.__concat
     local.tee $16
     call $~lib/string/String.__concat
     local.tee $15
     local.tee $25
     local.get $3
     local.tee $14
     i32.ne
     if
      local.get $25
      call $~lib/rt/pure/__retain
      local.set $25
      local.get $14
      call $~lib/rt/pure/__release
     end
     local.get $25
     local.set $3
     local.get $23
     call $~lib/rt/pure/__release
     local.get $22
     call $~lib/rt/pure/__release
     local.get $21
     call $~lib/rt/pure/__release
     local.get $20
     call $~lib/rt/pure/__release
     local.get $19
     call $~lib/rt/pure/__release
     local.get $18
     call $~lib/rt/pure/__release
     local.get $17
     call $~lib/rt/pure/__release
     local.get $16
     call $~lib/rt/pure/__release
     local.get $15
     call $~lib/rt/pure/__release
    end
    local.get $11
    call $~lib/rt/pure/__release
    br $while-continue|0
   end
  end
  i32.const 0
  i32.const 12
  local.get $0
  i32.load8_u offset=32
  call $assembly/formatters/FloatFormatter#constructor
  local.set $10
  local.get $0
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getMean
  local.set $26
  local.get $10
  local.get $26
  local.get $2
  f64.div
  call $assembly/formatters/FloatFormatter#format
  local.set $15
  local.get $10
  local.get $0
  local.get $26
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#computeStdDeviation
  local.get $2
  f64.div
  call $assembly/formatters/FloatFormatter#format
  local.set $16
  local.get $10
  local.get $0
  i64.load offset=144
  f64.convert_i64_u
  local.get $2
  f64.div
  call $assembly/formatters/FloatFormatter#format
  local.set $17
  i32.const 0
  i32.const 12
  call $assembly/formatters/IntegerFormatter#constructor
  local.set $18
  local.get $18
  local.get $0
  i64.load offset=168
  call $assembly/formatters/IntegerFormatter#format
  local.set $19
  local.get $18
  local.get $0
  i64.load offset=40
  call $assembly/formatters/IntegerFormatter#format
  local.set $20
  local.get $18
  local.get $0
  i32.load offset=48
  i64.extend_i32_s
  call $assembly/formatters/IntegerFormatter#format
  local.set $21
  local.get $3
  i32.const 12672
  local.get $15
  call $~lib/string/String#toString
  local.tee $22
  call $~lib/string/String.__concat
  local.tee $23
  i32.const 12720
  call $~lib/string/String.__concat
  local.tee $25
  local.get $16
  call $~lib/string/String#toString
  local.tee $14
  call $~lib/string/String.__concat
  local.tee $13
  i32.const 12784
  call $~lib/string/String.__concat
  local.tee $12
  local.get $17
  call $~lib/string/String#toString
  local.tee $24
  call $~lib/string/String.__concat
  local.tee $27
  i32.const 12832
  call $~lib/string/String.__concat
  local.tee $28
  local.get $19
  call $~lib/string/String#toString
  local.tee $29
  call $~lib/string/String.__concat
  local.tee $30
  i32.const 12896
  call $~lib/string/String.__concat
  local.tee $31
  local.get $20
  call $~lib/string/String#toString
  local.tee $32
  call $~lib/string/String.__concat
  local.tee $33
  i32.const 12944
  call $~lib/string/String.__concat
  local.tee $34
  local.get $21
  call $~lib/string/String#toString
  local.tee $35
  call $~lib/string/String.__concat
  local.tee $36
  i32.const 13008
  call $~lib/string/String.__concat
  local.tee $37
  call $~lib/string/String.__concat
  local.tee $38
  local.tee $39
  local.get $3
  local.tee $40
  i32.ne
  if
   local.get $39
   call $~lib/rt/pure/__retain
   local.set $39
   local.get $40
   call $~lib/rt/pure/__release
  end
  local.get $39
  local.set $3
  local.get $3
  local.set $39
  local.get $4
  call $~lib/rt/pure/__release
  local.get $5
  call $~lib/rt/pure/__release
  local.get $6
  call $~lib/rt/pure/__release
  local.get $7
  call $~lib/rt/pure/__release
  local.get $8
  call $~lib/rt/pure/__release
  local.get $9
  call $~lib/rt/pure/__release
  local.get $10
  call $~lib/rt/pure/__release
  local.get $15
  call $~lib/rt/pure/__release
  local.get $16
  call $~lib/rt/pure/__release
  local.get $17
  call $~lib/rt/pure/__release
  local.get $18
  call $~lib/rt/pure/__release
  local.get $19
  call $~lib/rt/pure/__release
  local.get $20
  call $~lib/rt/pure/__release
  local.get $21
  call $~lib/rt/pure/__release
  local.get $22
  call $~lib/rt/pure/__release
  local.get $23
  call $~lib/rt/pure/__release
  local.get $25
  call $~lib/rt/pure/__release
  local.get $14
  call $~lib/rt/pure/__release
  local.get $13
  call $~lib/rt/pure/__release
  local.get $12
  call $~lib/rt/pure/__release
  local.get $24
  call $~lib/rt/pure/__release
  local.get $27
  call $~lib/rt/pure/__release
  local.get $28
  call $~lib/rt/pure/__release
  local.get $29
  call $~lib/rt/pure/__release
  local.get $30
  call $~lib/rt/pure/__release
  local.get $31
  call $~lib/rt/pure/__release
  local.get $32
  call $~lib/rt/pure/__release
  local.get $33
  call $~lib/rt/pure/__release
  local.get $34
  call $~lib/rt/pure/__release
  local.get $35
  call $~lib/rt/pure/__release
  local.get $36
  call $~lib/rt/pure/__release
  local.get $37
  call $~lib/rt/pure/__release
  local.get $38
  call $~lib/rt/pure/__release
  local.get $39
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#outputPercentileDistribution (param $0 i32) (param $1 f64) (param $2 f64) (result i32)
  local.get $0
  i32.load
  local.get $1
  i32.trunc_f64_s
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#outputPercentileDistribution
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordValueWithCountAndExpectedInterval (param $0 i32) (param $1 i64) (param $2 i64) (param $3 i64)
  (local $4 i64)
  (local $5 i32)
  local.get $0
  local.get $2
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordCountAtValue
  local.get $3
  i64.const 0
  i64.le_u
  if (result i32)
   i32.const 1
  else
   local.get $1
   local.get $3
   i64.le_u
  end
  if
   return
  end
  local.get $1
  local.get $3
  i64.sub
  local.set $4
  loop $for-loop|0
   local.get $4
   local.get $3
   i64.ge_u
   local.set $5
   local.get $5
   if
    local.get $0
    local.get $2
    local.get $4
    call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordCountAtValue
    local.get $4
    local.get $3
    i64.sub
    local.set $4
    br $for-loop|0
   end
  end
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#addWhileCorrectingForCoordinatedOmission (param $0 i32) (param $1 i32) (param $2 i64)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  call $~lib/rt/pure/__retain
  local.set $3
  i32.const 0
  local.get $1
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#constructor
  local.set $4
  loop $while-continue|0
   local.get $4
   call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#hasNext
   local.set $5
   local.get $5
   if
    local.get $4
    call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#next
    local.set $6
    local.get $3
    local.get $6
    i64.load
    local.get $6
    i64.load offset=16
    local.get $2
    call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordValueWithCountAndExpectedInterval
    local.get $6
    call $~lib/rt/pure/__release
    br $while-continue|0
   end
  end
  local.get $3
  call $~lib/rt/pure/__release
  local.get $4
  call $~lib/rt/pure/__release
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#copyCorrectedForCoordinatedOmission (param $0 i32) (param $1 i64) (result i32)
  (local $2 i32)
  i32.const 0
  local.get $0
  i64.load offset=24
  local.get $0
  i64.load offset=16
  local.get $0
  i32.load8_u offset=32
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#constructor
  local.set $2
  local.get $2
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#addWhileCorrectingForCoordinatedOmission
  local.get $2
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#copyCorrectedForCoordinatedOmission (param $0 i32) (param $1 f64) (result i32)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  i32.load
  local.get $1
  i64.trunc_f64_u
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#copyCorrectedForCoordinatedOmission
  local.set $2
  i32.const 0
  f64.const 0
  f64.const 0
  f64.const 0
  i32.const 0
  local.get $2
  call $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#constructor
  local.set $3
  local.get $2
  call $~lib/rt/pure/__release
  local.get $3
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#add<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i64)
  (local $4 i32)
  (local $5 i32)
  (local $6 i64)
  (local $7 i64)
  (local $8 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $0
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#valueFromIndex
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#highestEquivalentValue
  local.set $2
  local.get $2
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 13040
    i32.const 8992
    i32.const 639
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   i64.const 0
   local.set $3
   i32.const 0
   local.set $4
   loop $for-loop|0
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtIndex
     local.set $6
     local.get $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $4
      local.get $6
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#addToCountAtIndex
      local.get $3
      local.get $6
      i64.add
      local.set $3
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $3
   i64.add
   i64.store offset=168
   local.get $0
   local.get $0
   i64.load offset=144
   local.tee $6
   local.get $1
   i64.load offset=144
   local.tee $7
   local.get $6
   local.get $7
   i64.gt_u
   select
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#updatedMaxValue
   local.get $0
   local.get $0
   i64.load offset=152
   local.tee $6
   local.get $1
   i64.load offset=152
   local.tee $7
   local.get $6
   local.get $7
   i64.lt_u
   select
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#updateMinNonZeroValue
  else
   local.get $1
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex
   local.set $4
   local.get $1
   local.get $4
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtIndex
   local.set $3
   local.get $0
   local.get $3
   local.get $1
   local.get $4
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#valueFromIndex
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordCountAtValue
   i32.const 0
   local.set $5
   loop $for-loop|1
    local.get $5
    local.get $4
    i32.lt_s
    local.set $8
    local.get $8
    if
     local.get $1
     local.get $5
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtIndex
     local.set $3
     local.get $3
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $3
      local.get $1
      local.get $5
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#valueFromIndex
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordCountAtValue
     end
     local.get $5
     i32.const 1
     i32.add
     local.set $5
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=64
  local.tee $3
  local.get $1
  i64.load offset=64
  local.tee $6
  local.get $3
  local.get $6
  i64.lt_u
  select
  i64.store offset=64
  local.get $0
  local.get $0
  i64.load offset=72
  local.tee $3
  local.get $1
  i64.load offset=72
  local.tee $6
  local.get $3
  local.get $6
  i64.gt_u
  select
  i64.store offset=72
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#addHistogram8 (param $0 i32) (param $1 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#add<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#add<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i64)
  (local $4 i32)
  (local $5 i32)
  (local $6 i64)
  (local $7 i64)
  (local $8 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $0
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#valueFromIndex
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#highestEquivalentValue
  local.set $2
  local.get $2
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 13040
    i32.const 8992
    i32.const 639
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   i64.const 0
   local.set $3
   i32.const 0
   local.set $4
   loop $for-loop|0
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtIndex
     local.set $6
     local.get $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $4
      local.get $6
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#addToCountAtIndex
      local.get $3
      local.get $6
      i64.add
      local.set $3
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $3
   i64.add
   i64.store offset=168
   local.get $0
   local.get $0
   i64.load offset=144
   local.tee $6
   local.get $1
   i64.load offset=144
   local.tee $7
   local.get $6
   local.get $7
   i64.gt_u
   select
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#updatedMaxValue
   local.get $0
   local.get $0
   i64.load offset=152
   local.tee $6
   local.get $1
   i64.load offset=152
   local.tee $7
   local.get $6
   local.get $7
   i64.lt_u
   select
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#updateMinNonZeroValue
  else
   local.get $1
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#countsArrayIndex
   local.set $4
   local.get $1
   local.get $4
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtIndex
   local.set $3
   local.get $0
   local.get $3
   local.get $1
   local.get $4
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#valueFromIndex
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordCountAtValue
   i32.const 0
   local.set $5
   loop $for-loop|1
    local.get $5
    local.get $4
    i32.lt_s
    local.set $8
    local.get $8
    if
     local.get $1
     local.get $5
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtIndex
     local.set $3
     local.get $3
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $3
      local.get $1
      local.get $5
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#valueFromIndex
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordCountAtValue
     end
     local.get $5
     i32.const 1
     i32.add
     local.set $5
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=64
  local.tee $3
  local.get $1
  i64.load offset=64
  local.tee $6
  local.get $3
  local.get $6
  i64.lt_u
  select
  i64.store offset=64
  local.get $0
  local.get $0
  i64.load offset=72
  local.tee $3
  local.get $1
  i64.load offset=72
  local.tee $6
  local.get $3
  local.get $6
  i64.gt_u
  select
  i64.store offset=72
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#addHistogram16 (param $0 i32) (param $1 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#add<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#add<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i64)
  (local $4 i32)
  (local $5 i32)
  (local $6 i64)
  (local $7 i64)
  (local $8 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $0
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#valueFromIndex
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#highestEquivalentValue
  local.set $2
  local.get $2
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 13040
    i32.const 8992
    i32.const 639
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   i64.const 0
   local.set $3
   i32.const 0
   local.set $4
   loop $for-loop|0
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtIndex
     local.set $6
     local.get $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $4
      local.get $6
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#addToCountAtIndex
      local.get $3
      local.get $6
      i64.add
      local.set $3
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $3
   i64.add
   i64.store offset=168
   local.get $0
   local.get $0
   i64.load offset=144
   local.tee $6
   local.get $1
   i64.load offset=144
   local.tee $7
   local.get $6
   local.get $7
   i64.gt_u
   select
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#updatedMaxValue
   local.get $0
   local.get $0
   i64.load offset=152
   local.tee $6
   local.get $1
   i64.load offset=152
   local.tee $7
   local.get $6
   local.get $7
   i64.lt_u
   select
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#updateMinNonZeroValue
  else
   local.get $1
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#countsArrayIndex
   local.set $4
   local.get $1
   local.get $4
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtIndex
   local.set $3
   local.get $0
   local.get $3
   local.get $1
   local.get $4
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#valueFromIndex
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordCountAtValue
   i32.const 0
   local.set $5
   loop $for-loop|1
    local.get $5
    local.get $4
    i32.lt_s
    local.set $8
    local.get $8
    if
     local.get $1
     local.get $5
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtIndex
     local.set $3
     local.get $3
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $3
      local.get $1
      local.get $5
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#valueFromIndex
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordCountAtValue
     end
     local.get $5
     i32.const 1
     i32.add
     local.set $5
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=64
  local.tee $3
  local.get $1
  i64.load offset=64
  local.tee $6
  local.get $3
  local.get $6
  i64.lt_u
  select
  i64.store offset=64
  local.get $0
  local.get $0
  i64.load offset=72
  local.tee $3
  local.get $1
  i64.load offset=72
  local.tee $6
  local.get $3
  local.get $6
  i64.gt_u
  select
  i64.store offset=72
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#addHistogram32 (param $0 i32) (param $1 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#add<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#add<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i64)
  (local $4 i32)
  (local $5 i32)
  (local $6 i64)
  (local $7 i64)
  (local $8 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $0
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#valueFromIndex
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#highestEquivalentValue
  local.set $2
  local.get $2
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 13040
    i32.const 8992
    i32.const 639
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   i64.const 0
   local.set $3
   i32.const 0
   local.set $4
   loop $for-loop|0
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtIndex
     local.set $6
     local.get $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $4
      local.get $6
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#addToCountAtIndex
      local.get $3
      local.get $6
      i64.add
      local.set $3
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $3
   i64.add
   i64.store offset=168
   local.get $0
   local.get $0
   i64.load offset=144
   local.tee $6
   local.get $1
   i64.load offset=144
   local.tee $7
   local.get $6
   local.get $7
   i64.gt_u
   select
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#updatedMaxValue
   local.get $0
   local.get $0
   i64.load offset=152
   local.tee $6
   local.get $1
   i64.load offset=152
   local.tee $7
   local.get $6
   local.get $7
   i64.lt_u
   select
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#updateMinNonZeroValue
  else
   local.get $1
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#countsArrayIndex
   local.set $4
   local.get $1
   local.get $4
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtIndex
   local.set $3
   local.get $0
   local.get $3
   local.get $1
   local.get $4
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#valueFromIndex
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordCountAtValue
   i32.const 0
   local.set $5
   loop $for-loop|1
    local.get $5
    local.get $4
    i32.lt_s
    local.set $8
    local.get $8
    if
     local.get $1
     local.get $5
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtIndex
     local.set $3
     local.get $3
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $3
      local.get $1
      local.get $5
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#valueFromIndex
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordCountAtValue
     end
     local.get $5
     i32.const 1
     i32.add
     local.set $5
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=64
  local.tee $3
  local.get $1
  i64.load offset=64
  local.tee $6
  local.get $3
  local.get $6
  i64.lt_u
  select
  i64.store offset=64
  local.get $0
  local.get $0
  i64.load offset=72
  local.tee $3
  local.get $1
  i64.load offset=72
  local.tee $6
  local.get $3
  local.get $6
  i64.gt_u
  select
  i64.store offset=72
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#addHistogram64 (param $0 i32) (param $1 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#add<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#add<assembly/packedarray/PackedArray/PackedArray,u64> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i64)
  (local $4 i32)
  (local $5 i32)
  (local $6 i64)
  (local $7 i64)
  (local $8 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $0
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#valueFromIndex
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#highestEquivalentValue
  local.set $2
  local.get $2
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 13040
    i32.const 8992
    i32.const 639
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   i64.const 0
   local.set $3
   i32.const 0
   local.set $4
   loop $for-loop|0
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtIndex
     local.set $6
     local.get $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $4
      local.get $6
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#addToCountAtIndex
      local.get $3
      local.get $6
      i64.add
      local.set $3
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $3
   i64.add
   i64.store offset=168
   local.get $0
   local.get $0
   i64.load offset=144
   local.tee $6
   local.get $1
   i64.load offset=144
   local.tee $7
   local.get $6
   local.get $7
   i64.gt_u
   select
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#updatedMaxValue
   local.get $0
   local.get $0
   i64.load offset=152
   local.tee $6
   local.get $1
   i64.load offset=152
   local.tee $7
   local.get $6
   local.get $7
   i64.lt_u
   select
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#updateMinNonZeroValue
  else
   local.get $1
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#countsArrayIndex
   local.set $4
   local.get $1
   local.get $4
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtIndex
   local.set $3
   local.get $0
   local.get $3
   local.get $1
   local.get $4
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#valueFromIndex
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordCountAtValue
   i32.const 0
   local.set $5
   loop $for-loop|1
    local.get $5
    local.get $4
    i32.lt_s
    local.set $8
    local.get $8
    if
     local.get $1
     local.get $5
     call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtIndex
     local.set $3
     local.get $3
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $3
      local.get $1
      local.get $5
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#valueFromIndex
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordCountAtValue
     end
     local.get $5
     i32.const 1
     i32.add
     local.set $5
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=64
  local.tee $3
  local.get $1
  i64.load offset=64
  local.tee $6
  local.get $3
  local.get $6
  i64.lt_u
  select
  i64.store offset=64
  local.get $0
  local.get $0
  i64.load offset=72
  local.tee $3
  local.get $1
  i64.load offset=72
  local.tee $6
  local.get $3
  local.get $6
  i64.gt_u
  select
  i64.store offset=72
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#addPackedHistogram (param $0 i32) (param $1 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#add<assembly/packedarray/PackedArray/PackedArray,u64>
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtValue (param $0 i32) (param $1 i64) (result i64)
  (local $2 i32)
  (local $3 i32)
  i32.const 0
  local.tee $2
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#countsArrayIndex
  local.tee $3
  local.get $2
  local.get $3
  i32.gt_s
  select
  local.tee $2
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $3
  local.get $2
  local.get $3
  i32.lt_s
  select
  local.set $2
  local.get $0
  local.get $2
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtIndex
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#establishInternalTackingValues (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i64)
  (local $5 i32)
  (local $6 i32)
  (local $7 i64)
  local.get $0
  i64.const 0
  i64.store offset=144
  local.get $0
  global.get $~lib/builtins/u64.MAX_VALUE
  i64.store offset=152
  i32.const -1
  local.set $2
  i32.const -1
  local.set $3
  i64.const 0
  local.set $4
  i32.const 0
  local.set $5
  loop $for-loop|0
   local.get $5
   local.get $1
   i32.lt_s
   local.set $6
   local.get $6
   if
    local.get $0
    local.get $5
    call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtIndex
    local.set $7
    local.get $7
    i64.const 0
    i64.gt_u
    if
     local.get $4
     local.get $7
     i64.add
     local.set $4
     local.get $5
     local.set $2
     local.get $3
     i32.const -1
     i32.eq
     if (result i32)
      local.get $5
      i32.const 0
      i32.ne
     else
      i32.const 0
     end
     if
      local.get $5
      local.set $3
     end
    end
    local.get $5
    i32.const 1
    i32.add
    local.set $5
    br $for-loop|0
   end
  end
  local.get $2
  i32.const 0
  i32.ge_s
  if
   local.get $0
   local.get $0
   local.get $0
   local.get $2
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#valueFromIndex
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#highestEquivalentValue
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#updatedMaxValue
  end
  local.get $3
  i32.const 0
  i32.ge_s
  if
   local.get $0
   local.get $0
   local.get $3
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#valueFromIndex
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#updateMinNonZeroValue
  end
  local.get $0
  local.get $4
  i64.store offset=168
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#establishInternalTackingValues@varargs (param $0 i32) (param $1 i32)
  block $1of1
   block $0of1
    block $outOfRange
     global.get $~argumentsLength
     br_table $0of1 $1of1 $outOfRange
    end
    unreachable
   end
   local.get $0
   i32.load offset=52
   local.set $1
  end
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#establishInternalTackingValues
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i64)
  (local $4 i32)
  (local $5 i32)
  (local $6 i64)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  (local $15 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#valueFromIndex
  local.set $2
  local.get $2
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 13040
    i32.const 8992
    i32.const 748
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   i64.const 0
   local.set $3
   i32.const 0
   local.set $4
   loop $for-loop|0
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtIndex
     local.set $6
     local.get $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $4
      i64.const 0
      local.get $6
      i64.sub
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#addToCountAtIndex
      local.get $3
      local.get $6
      i64.add
      local.set $3
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $3
   i64.sub
   i64.store offset=168
  else
   i32.const 0
   local.set $4
   loop $for-loop|1
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtIndex
     local.set $3
     local.get $3
     i64.const 0
     i64.gt_u
     if
      local.get $1
      local.get $4
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#valueFromIndex
      local.set $6
      local.get $0
      local.get $6
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtValue
      local.get $3
      i64.lt_u
      if
       i32.const 13648
       local.get $3
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $7
       call $~lib/string/String.__concat
       local.tee $8
       i32.const 13712
       call $~lib/string/String.__concat
       local.tee $9
       local.get $6
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $10
       call $~lib/string/String.__concat
       local.tee $11
       i32.const 13760
       call $~lib/string/String.__concat
       local.tee $12
       local.get $0
       local.get $6
       call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtValue
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $13
       call $~lib/string/String.__concat
       local.tee $14
       i32.const 13840
       call $~lib/string/String.__concat
       local.tee $15
       i32.const 8992
       i32.const 777
       i32.const 13
       call $~lib/builtins/abort
       unreachable
      end
      local.get $0
      i64.const 0
      local.get $3
      i64.sub
      local.get $6
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordCountAtValue
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=144
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtValue
  i64.const 0
  i64.le_u
  if (result i32)
   i32.const 1
  else
   local.get $0
   local.get $0
   i64.load offset=152
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtValue
   i64.const 0
   i64.le_u
  end
  if
   local.get $0
   i32.const 0
   global.set $~argumentsLength
   i32.const 0
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#establishInternalTackingValues@varargs
  end
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#subtractHistogram8 (param $0 i32) (param $1 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i64)
  (local $4 i32)
  (local $5 i32)
  (local $6 i64)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  (local $15 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#valueFromIndex
  local.set $2
  local.get $2
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 13040
    i32.const 8992
    i32.const 748
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   i64.const 0
   local.set $3
   i32.const 0
   local.set $4
   loop $for-loop|0
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtIndex
     local.set $6
     local.get $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $4
      i64.const 0
      local.get $6
      i64.sub
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#addToCountAtIndex
      local.get $3
      local.get $6
      i64.add
      local.set $3
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $3
   i64.sub
   i64.store offset=168
  else
   i32.const 0
   local.set $4
   loop $for-loop|1
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtIndex
     local.set $3
     local.get $3
     i64.const 0
     i64.gt_u
     if
      local.get $1
      local.get $4
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#valueFromIndex
      local.set $6
      local.get $0
      local.get $6
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtValue
      local.get $3
      i64.lt_u
      if
       i32.const 13648
       local.get $3
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $7
       call $~lib/string/String.__concat
       local.tee $8
       i32.const 13712
       call $~lib/string/String.__concat
       local.tee $9
       local.get $6
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $10
       call $~lib/string/String.__concat
       local.tee $11
       i32.const 13760
       call $~lib/string/String.__concat
       local.tee $12
       local.get $0
       local.get $6
       call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtValue
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $13
       call $~lib/string/String.__concat
       local.tee $14
       i32.const 13840
       call $~lib/string/String.__concat
       local.tee $15
       i32.const 8992
       i32.const 777
       i32.const 13
       call $~lib/builtins/abort
       unreachable
      end
      local.get $0
      i64.const 0
      local.get $3
      i64.sub
      local.get $6
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordCountAtValue
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=144
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtValue
  i64.const 0
  i64.le_u
  if (result i32)
   i32.const 1
  else
   local.get $0
   local.get $0
   i64.load offset=152
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtValue
   i64.const 0
   i64.le_u
  end
  if
   local.get $0
   i32.const 0
   global.set $~argumentsLength
   i32.const 0
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#establishInternalTackingValues@varargs
  end
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#subtractHistogram16 (param $0 i32) (param $1 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i64)
  (local $4 i32)
  (local $5 i32)
  (local $6 i64)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  (local $15 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#valueFromIndex
  local.set $2
  local.get $2
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 13040
    i32.const 8992
    i32.const 748
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   i64.const 0
   local.set $3
   i32.const 0
   local.set $4
   loop $for-loop|0
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtIndex
     local.set $6
     local.get $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $4
      i64.const 0
      local.get $6
      i64.sub
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#addToCountAtIndex
      local.get $3
      local.get $6
      i64.add
      local.set $3
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $3
   i64.sub
   i64.store offset=168
  else
   i32.const 0
   local.set $4
   loop $for-loop|1
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtIndex
     local.set $3
     local.get $3
     i64.const 0
     i64.gt_u
     if
      local.get $1
      local.get $4
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#valueFromIndex
      local.set $6
      local.get $0
      local.get $6
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtValue
      local.get $3
      i64.lt_u
      if
       i32.const 13648
       local.get $3
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $7
       call $~lib/string/String.__concat
       local.tee $8
       i32.const 13712
       call $~lib/string/String.__concat
       local.tee $9
       local.get $6
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $10
       call $~lib/string/String.__concat
       local.tee $11
       i32.const 13760
       call $~lib/string/String.__concat
       local.tee $12
       local.get $0
       local.get $6
       call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtValue
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $13
       call $~lib/string/String.__concat
       local.tee $14
       i32.const 13840
       call $~lib/string/String.__concat
       local.tee $15
       i32.const 8992
       i32.const 777
       i32.const 13
       call $~lib/builtins/abort
       unreachable
      end
      local.get $0
      i64.const 0
      local.get $3
      i64.sub
      local.get $6
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordCountAtValue
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=144
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtValue
  i64.const 0
  i64.le_u
  if (result i32)
   i32.const 1
  else
   local.get $0
   local.get $0
   i64.load offset=152
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtValue
   i64.const 0
   i64.le_u
  end
  if
   local.get $0
   i32.const 0
   global.set $~argumentsLength
   i32.const 0
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#establishInternalTackingValues@varargs
  end
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#subtractHistogram32 (param $0 i32) (param $1 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i64)
  (local $4 i32)
  (local $5 i32)
  (local $6 i64)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  (local $15 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#valueFromIndex
  local.set $2
  local.get $2
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 13040
    i32.const 8992
    i32.const 748
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   i64.const 0
   local.set $3
   i32.const 0
   local.set $4
   loop $for-loop|0
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtIndex
     local.set $6
     local.get $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $4
      i64.const 0
      local.get $6
      i64.sub
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#addToCountAtIndex
      local.get $3
      local.get $6
      i64.add
      local.set $3
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $3
   i64.sub
   i64.store offset=168
  else
   i32.const 0
   local.set $4
   loop $for-loop|1
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtIndex
     local.set $3
     local.get $3
     i64.const 0
     i64.gt_u
     if
      local.get $1
      local.get $4
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#valueFromIndex
      local.set $6
      local.get $0
      local.get $6
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtValue
      local.get $3
      i64.lt_u
      if
       i32.const 13648
       local.get $3
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $7
       call $~lib/string/String.__concat
       local.tee $8
       i32.const 13712
       call $~lib/string/String.__concat
       local.tee $9
       local.get $6
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $10
       call $~lib/string/String.__concat
       local.tee $11
       i32.const 13760
       call $~lib/string/String.__concat
       local.tee $12
       local.get $0
       local.get $6
       call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtValue
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $13
       call $~lib/string/String.__concat
       local.tee $14
       i32.const 13840
       call $~lib/string/String.__concat
       local.tee $15
       i32.const 8992
       i32.const 777
       i32.const 13
       call $~lib/builtins/abort
       unreachable
      end
      local.get $0
      i64.const 0
      local.get $3
      i64.sub
      local.get $6
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordCountAtValue
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=144
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtValue
  i64.const 0
  i64.le_u
  if (result i32)
   i32.const 1
  else
   local.get $0
   local.get $0
   i64.load offset=152
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtValue
   i64.const 0
   i64.le_u
  end
  if
   local.get $0
   i32.const 0
   global.set $~argumentsLength
   i32.const 0
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#establishInternalTackingValues@varargs
  end
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#subtractHistogram64 (param $0 i32) (param $1 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#subtract<assembly/packedarray/PackedArray/PackedArray,u64> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i64)
  (local $4 i32)
  (local $5 i32)
  (local $6 i64)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  (local $15 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#valueFromIndex
  local.set $2
  local.get $2
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 13040
    i32.const 8992
    i32.const 748
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   i64.const 0
   local.set $3
   i32.const 0
   local.set $4
   loop $for-loop|0
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtIndex
     local.set $6
     local.get $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $4
      i64.const 0
      local.get $6
      i64.sub
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#addToCountAtIndex
      local.get $3
      local.get $6
      i64.add
      local.set $3
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $3
   i64.sub
   i64.store offset=168
  else
   i32.const 0
   local.set $4
   loop $for-loop|1
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtIndex
     local.set $3
     local.get $3
     i64.const 0
     i64.gt_u
     if
      local.get $1
      local.get $4
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#valueFromIndex
      local.set $6
      local.get $0
      local.get $6
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtValue
      local.get $3
      i64.lt_u
      if
       i32.const 13648
       local.get $3
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $7
       call $~lib/string/String.__concat
       local.tee $8
       i32.const 13712
       call $~lib/string/String.__concat
       local.tee $9
       local.get $6
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $10
       call $~lib/string/String.__concat
       local.tee $11
       i32.const 13760
       call $~lib/string/String.__concat
       local.tee $12
       local.get $0
       local.get $6
       call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtValue
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $13
       call $~lib/string/String.__concat
       local.tee $14
       i32.const 13840
       call $~lib/string/String.__concat
       local.tee $15
       i32.const 8992
       i32.const 777
       i32.const 13
       call $~lib/builtins/abort
       unreachable
      end
      local.get $0
      i64.const 0
      local.get $3
      i64.sub
      local.get $6
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#recordCountAtValue
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=144
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtValue
  i64.const 0
  i64.le_u
  if (result i32)
   i32.const 1
  else
   local.get $0
   local.get $0
   i64.load offset=152
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtValue
   i64.const 0
   i64.le_u
  end
  if
   local.get $0
   i32.const 0
   global.set $~argumentsLength
   i32.const 0
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#establishInternalTackingValues@varargs
  end
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#subtractPackedHistogram (param $0 i32) (param $1 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#subtract<assembly/packedarray/PackedArray/PackedArray,u64>
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/encoding/fillBufferFromCountsArray<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64> (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i64)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  (local $15 i32)
  (local $16 i32)
  (local $17 i32)
  local.get $0
  call $~lib/rt/pure/__retain
  local.set $0
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $0
  i64.load offset=144
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#countsArrayIndex
  i32.const 1
  i32.add
  local.set $2
  i32.const 0
  local.set $3
  loop $while-continue|0
   local.get $3
   local.get $2
   i32.lt_s
   local.set $4
   local.get $4
   if
    local.get $0
    local.get $3
    local.tee $5
    i32.const 1
    i32.add
    local.set $3
    local.get $5
    call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtIndex
    local.set $6
    local.get $6
    i64.const 0
    i64.lt_u
    if
     i32.const 13872
     local.get $6
     i32.const 10
     call $~lib/number/U64#toString
     local.tee $5
     call $~lib/string/String.__concat
     local.tee $7
     i32.const 14000
     call $~lib/string/String.__concat
     local.tee $8
     local.get $3
     i32.const 10
     call $~lib/number/I32#toString
     local.tee $9
     call $~lib/string/String.__concat
     local.tee $10
     i32.const 14048
     call $~lib/string/String.__concat
     local.tee $11
     local.get $0
     local.get $0
     local.get $3
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#valueFromIndex
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#lowestEquivalentValue
     i32.const 10
     call $~lib/number/U64#toString
     local.tee $12
     call $~lib/string/String.__concat
     local.tee $13
     i32.const 14144
     call $~lib/string/String.__concat
     local.tee $14
     local.get $0
     local.get $0
     local.get $3
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#valueFromIndex
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#nextNonEquivalentValue
     i32.const 10
     call $~lib/number/U64#toString
     local.tee $15
     call $~lib/string/String.__concat
     local.tee $16
     i32.const 13840
     call $~lib/string/String.__concat
     local.tee $17
     i32.const 14176
     i32.const 31
     i32.const 7
     call $~lib/builtins/abort
     unreachable
    end
    i32.const 0
    local.set $17
    local.get $6
    i64.const 0
    i64.eq
    if
     i32.const 1
     local.set $17
     loop $while-continue|1
      local.get $3
      local.get $2
      i32.lt_s
      if (result i32)
       local.get $0
       local.get $3
       call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtIndex
       i64.const 0
       i64.eq
      else
       i32.const 0
      end
      local.set $16
      local.get $16
      if
       local.get $17
       i32.const 1
       i32.add
       local.set $17
       local.get $3
       i32.const 1
       i32.add
       local.set $3
       br $while-continue|1
      end
     end
    end
    local.get $17
    i32.const 1
    i32.gt_s
    if
     local.get $1
     i32.const 0
     local.get $17
     i32.sub
     i64.extend_i32_s
     call $assembly/ZigZagEncoding/ZigZagEncoding.encode
    else
     local.get $1
     local.get $6
     call $assembly/ZigZagEncoding/ZigZagEncoding.encode
    end
    br $while-continue|0
   end
  end
  local.get $0
  call $~lib/rt/pure/__release
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/encoding/encodeIntoByteBuffer<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64> (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  local.get $0
  call $~lib/rt/pure/__retain
  local.set $0
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $1
  i32.load
  local.set $2
  local.get $1
  global.get $assembly/encoding/encodingCookie
  call $assembly/ByteBuffer/ByteBuffer#putInt32
  local.get $1
  i32.const 0
  call $assembly/ByteBuffer/ByteBuffer#putInt32
  local.get $1
  i32.const 1
  call $assembly/ByteBuffer/ByteBuffer#putInt32
  local.get $1
  local.get $0
  i32.load8_u offset=32
  call $assembly/ByteBuffer/ByteBuffer#putInt32
  local.get $1
  local.get $0
  i64.load offset=24
  call $assembly/ByteBuffer/ByteBuffer#putInt64
  local.get $1
  local.get $0
  i64.load offset=16
  call $assembly/ByteBuffer/ByteBuffer#putInt64
  local.get $1
  i64.const 1
  call $assembly/ByteBuffer/ByteBuffer#putInt64
  local.get $1
  i32.load
  local.set $3
  local.get $0
  local.get $1
  call $assembly/encoding/fillBufferFromCountsArray<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>
  local.get $1
  i32.load
  local.set $4
  local.get $1
  local.get $2
  i32.const 4
  i32.add
  i32.store
  local.get $1
  local.get $4
  local.get $3
  i32.sub
  call $assembly/ByteBuffer/ByteBuffer#putInt32
  local.get $1
  local.get $4
  i32.store
  local.get $4
  local.get $2
  i32.sub
  local.set $5
  local.get $0
  call $~lib/rt/pure/__release
  local.get $1
  call $~lib/rt/pure/__release
  local.get $5
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#encode (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  i32.const 1024
  call $assembly/ByteBuffer/ByteBuffer.allocate
  local.set $1
  local.get $0
  local.get $1
  call $assembly/encoding/encodeIntoByteBuffer<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>
  drop
  local.get $1
  i32.load offset=4
  i32.const 0
  local.get $1
  i32.load
  call $~lib/typedarray/Uint8Array#slice
  local.set $2
  local.get $1
  call $~lib/rt/pure/__release
  local.get $2
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#encode (param $0 i32) (result i32)
  local.get $0
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#encode
 )
 (func $~lib/typedarray/Uint64Array#fill (param $0 i32) (param $1 i64) (param $2 i32) (param $3 i32) (result i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i64)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  local.get $0
  call $~lib/rt/pure/__retain
  local.set $7
  local.get $1
  local.set $6
  local.get $2
  local.set $5
  local.get $3
  local.set $4
  local.get $7
  i32.load offset=4
  local.set $8
  local.get $7
  call $~lib/typedarray/Uint64Array#get:length
  local.set $9
  local.get $5
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $9
   local.get $5
   i32.add
   local.tee $10
   i32.const 0
   local.tee $11
   local.get $10
   local.get $11
   i32.gt_s
   select
  else
   local.get $5
   local.tee $10
   local.get $9
   local.tee $11
   local.get $10
   local.get $11
   i32.lt_s
   select
  end
  local.set $5
  local.get $4
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $9
   local.get $4
   i32.add
   local.tee $10
   i32.const 0
   local.tee $11
   local.get $10
   local.get $11
   i32.gt_s
   select
  else
   local.get $4
   local.tee $10
   local.get $9
   local.tee $11
   local.get $10
   local.get $11
   i32.lt_s
   select
  end
  local.set $4
  i32.const 8
  i32.const 1
  i32.eq
  drop
  loop $for-loop|0
   local.get $5
   local.get $4
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $8
    local.get $5
    i32.const 3
    i32.shl
    i32.add
    local.get $6
    i64.store
    local.get $5
    i32.const 1
    i32.add
    local.set $5
    br $for-loop|0
   end
  end
  local.get $7
 )
 (func $assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>#clear (param $0 i32)
  local.get $0
  i32.load
  i64.const 0
  i32.const 0
  global.get $~lib/builtins/i32.MAX_VALUE
  call $~lib/typedarray/Uint64Array#fill
  call $~lib/rt/pure/__release
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#clearCounts (param $0 i32)
  local.get $0
  i32.load offset=160
  call $assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>#clear
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#reset (param $0 i32)
  local.get $0
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#clearCounts
  local.get $0
  i64.const 0
  i64.store offset=168
  local.get $0
  i64.const 0
  i64.store offset=64
  local.get $0
  i64.const 0
  i64.store offset=72
  local.get $0
  i64.const 0
  i64.store offset=144
  local.get $0
  global.get $~lib/number/U64.MAX_VALUE
  i64.store offset=152
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#reset (param $0 i32)
  local.get $0
  i32.load
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#reset
 )
 (func $assembly/AbstractHistogramBase/AbstractHistogramBase<assembly/packedarray/PackedArray/PackedArray,u64>#constructor (param $0 i32) (result i32)
  local.get $0
  i32.eqz
  if
   i32.const 104
   i32.const 45
   call $~lib/rt/tlsf/__alloc
   call $~lib/rt/pure/__retain
   local.set $0
  end
  local.get $0
  f64.const 0
  f64.store
  local.get $0
  i32.const 0
  i32.store8 offset=8
  local.get $0
  i64.const 0
  i64.store offset=16
  local.get $0
  i64.const 0
  i64.store offset=24
  local.get $0
  i32.const 0
  i32.store8 offset=32
  local.get $0
  i64.const 0
  i64.store offset=40
  local.get $0
  i32.const 0
  i32.store offset=48
  local.get $0
  i32.const 0
  i32.store offset=52
  local.get $0
  i64.const 0
  i64.store offset=56
  local.get $0
  global.get $~lib/builtins/u64.MAX_VALUE
  i64.store offset=64
  local.get $0
  i64.const 0
  i64.store offset=72
  local.get $0
  global.get $assembly/AbstractHistogramBase/NO_TAG
  call $~lib/rt/pure/__retain
  i32.store offset=80
  local.get $0
  f64.const 1
  f64.store offset=88
  local.get $0
  i32.const 0
  i32.store offset=96
  local.get $0
  i32.const 0
  i32.store offset=100
  local.get $0
  f64.const 0
  f64.store
  local.get $0
  i64.const 0
  i64.store offset=16
  local.get $0
  i64.const 0
  i64.store offset=24
  local.get $0
  i32.const 0
  i32.store8 offset=32
  local.get $0
  i64.const 0
  i64.store offset=40
  local.get $0
  i32.const 0
  i32.store offset=48
  local.get $0
  i32.const 0
  i32.store offset=52
  local.get $0
  i64.const 0
  i64.store offset=56
  local.get $0
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getBucketsNeededToCoverValue (param $0 i32) (param $1 i64) (result i32)
  (local $2 i64)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  i32.load offset=48
  i64.extend_i32_s
  local.get $0
  i32.load offset=112
  i64.extend_i32_s
  i64.shl
  local.set $2
  i32.const 1
  local.set $3
  loop $while-continue|0
   local.get $2
   local.get $1
   i64.le_u
   local.set $4
   local.get $4
   if
    local.get $2
    global.get $~lib/builtins/u64.MAX_VALUE
    i64.const 1
    i64.shr_u
    i64.gt_u
    if
     local.get $3
     i32.const 1
     i32.add
     return
    end
    local.get $2
    i64.const 1
    i64.shl
    local.set $2
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $while-continue|0
   end
  end
  local.get $3
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getLengthForNumberOfBuckets (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  local.get $1
  i32.const 1
  i32.add
  local.get $0
  i32.load offset=48
  i32.const 1
  i32.shr_s
  i32.mul
  local.set $2
  local.get $2
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#determineArrayLengthNeeded (param $0 i32) (param $1 i64) (result i32)
  (local $2 i32)
  local.get $1
  i64.const 2
  local.get $0
  i64.load offset=24
  i64.mul
  i64.lt_u
  if
   i32.const 11440
   i32.const 8992
   i32.const 160
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getBucketsNeededToCoverValue
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getLengthForNumberOfBuckets
  local.set $2
  local.get $2
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#establishSize (param $0 i32) (param $1 i64)
  local.get $0
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#determineArrayLengthNeeded
  i32.store offset=52
  local.get $0
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getBucketsNeededToCoverValue
  i64.extend_i32_s
  i64.store offset=40
  local.get $0
  local.get $1
  i64.store offset=16
 )
 (func $~lib/arraybuffer/ArrayBuffer#constructor (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 1073741808
  i32.gt_u
  if
   i32.const 256
   i32.const 11584
   i32.const 49
   i32.const 43
   call $~lib/builtins/abort
   unreachable
  end
  local.get $1
  i32.const 0
  call $~lib/rt/tlsf/__alloc
  local.set $2
  local.get $2
  i32.const 0
  local.get $1
  call $~lib/memory/memory.fill
  local.get $2
  call $~lib/rt/pure/__retain
  local.set $3
  local.get $0
  call $~lib/rt/pure/__release
  local.get $3
 )
 (func $assembly/packedarray/PackedArrayContext/PackedArrayContext#determineTopLevelShiftForVirtualLength (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  local.get $1
  f64.convert_i32_s
  call $~lib/math/NativeMath.log2
  f64.ceil
  i32.trunc_f64_s
  local.set $2
  local.get $2
  i32.const 3
  i32.sub
  local.set $3
  local.get $3
  f64.convert_i32_s
  f64.const 4
  f64.div
  f64.ceil
  i32.trunc_f64_s
  i32.const 4
  i32.mul
  local.set $4
  local.get $4
  local.tee $5
  i32.const 8
  local.tee $6
  local.get $5
  local.get $6
  i32.gt_s
  select
  local.set $4
  local.get $4
  i32.const 4
  i32.sub
  i32.const 3
  i32.add
  local.set $5
  local.get $5
 )
 (func $assembly/packedarray/PackedArrayContext/PackedArrayContext#setVirtualLength (param $0 i32) (param $1 i32)
  local.get $0
  i32.load8_u
  i32.eqz
  if
   i32.const 14240
   i32.const 13408
   i32.const 440
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  local.get $0
  local.get $1
  call $assembly/packedarray/PackedArrayContext/PackedArrayContext#determineTopLevelShiftForVirtualLength
  i32.store offset=32
  local.get $0
  local.get $1
  i32.store offset=28
 )
 (func $assembly/packedarray/PackedArrayContext/PackedArrayContext#init (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  i32.load8_u
  i32.eqz
  if
   local.get $0
   local.get $1
   i32.store offset=28
   return
  end
  local.get $0
  global.get $assembly/packedarray/PackedArrayContext/SET_0_START_INDEX
  i32.const 8
  i32.add
  i32.store offset=24
  i32.const 0
  local.set $2
  loop $for-loop|0
   local.get $2
   global.get $assembly/packedarray/PackedArrayContext/NUMBER_OF_SETS
   i32.lt_s
   local.set $3
   local.get $3
   if
    local.get $0
    global.get $assembly/packedarray/PackedArrayContext/SET_0_START_INDEX
    local.get $2
    i32.add
    i32.const 0
    call $assembly/packedarray/PackedArrayContext/PackedArrayContext#setAtShortIndex
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|0
   end
  end
  local.get $0
  local.get $1
  call $assembly/packedarray/PackedArrayContext/PackedArrayContext#setVirtualLength
 )
 (func $assembly/packedarray/PackedArrayContext/PackedArrayContext#constructor (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  (local $3 f64)
  (local $4 f64)
  (local $5 i32)
  (local $6 i32)
  local.get $0
  i32.eqz
  if
   i32.const 36
   i32.const 42
   call $~lib/rt/tlsf/__alloc
   call $~lib/rt/pure/__retain
   local.set $0
  end
  local.get $0
  i32.const 0
  i32.store8
  local.get $0
  i32.const 0
  i32.store offset=4
  local.get $0
  i32.const 0
  i32.store offset=8
  local.get $0
  i32.const 0
  i32.store offset=12
  local.get $0
  i32.const 0
  i32.store offset=16
  local.get $0
  i32.const 0
  i32.store offset=20
  local.get $0
  i32.const 0
  i32.store offset=24
  local.get $0
  i32.const 0
  i32.store offset=28
  local.get $0
  global.get $~lib/builtins/i32.MAX_VALUE
  i32.store offset=32
  local.get $0
  local.get $2
  f64.convert_i32_s
  local.set $4
  global.get $assembly/packedarray/PackedArrayContext/MINIMUM_INITIAL_PACKED_ARRAY_CAPACITY
  f64.convert_i32_s
  local.set $3
  local.get $4
  local.get $3
  f64.max
  i32.trunc_f64_s
  i32.store offset=4
  local.get $0
  local.get $0
  i32.load offset=4
  f64.convert_i32_s
  global.get $assembly/packedarray/PackedArrayContext/MAX_SUPPORTED_PACKED_COUNTS_ARRAY_LENGTH
  f64.le
  i32.store8
  local.get $0
  i32.load8_u
  i32.eqz
  if
   local.get $0
   local.get $1
   i32.store offset=4
  end
  local.get $0
  local.tee $5
  i32.const 0
  local.get $0
  i32.load offset=4
  i32.const 8
  i32.mul
  call $~lib/arraybuffer/ArrayBuffer#constructor
  local.set $6
  local.get $5
  i32.load offset=8
  call $~lib/rt/pure/__release
  local.get $6
  i32.store offset=8
  local.get $0
  local.get $0
  i32.load offset=8
  call $assembly/packedarray/PackedArrayContext/PackedArrayContext#initArrayViews
  local.get $0
  local.get $1
  call $assembly/packedarray/PackedArrayContext/PackedArrayContext#init
  local.get $0
 )
 (func $assembly/packedarray/PackedArray/PackedArray#constructor (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  i32.eqz
  if
   i32.const 4
   i32.const 41
   call $~lib/rt/tlsf/__alloc
   call $~lib/rt/pure/__retain
   local.set $0
  end
  local.get $0
  i32.const 0
  i32.store
  local.get $0
  local.tee $3
  i32.const 0
  local.get $1
  local.get $2
  call $assembly/packedarray/PackedArrayContext/PackedArrayContext#constructor
  local.set $4
  local.get $3
  i32.load
  call $~lib/rt/pure/__release
  local.get $4
  i32.store
  local.get $0
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/packedarray/PackedArray/PackedArray,u64>#resetIterator (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.tee $2
  local.get $1
  local.tee $3
  local.get $2
  i32.load offset=28
  local.tee $4
  i32.ne
  if
   local.get $3
   call $~lib/rt/pure/__retain
   local.set $3
   local.get $4
   call $~lib/rt/pure/__release
  end
  local.get $3
  i32.store offset=28
  local.get $0
  local.get $1
  i64.load offset=168
  i64.store offset=32
  local.get $0
  local.get $1
  i64.load offset=168
  i64.store offset=96
  local.get $0
  i32.const 0
  i32.store offset=40
  local.get $0
  i64.const 0
  i64.store offset=48
  local.get $0
  i64.const 1
  local.get $1
  i32.load offset=112
  i64.extend_i32_s
  i64.shl
  i64.store offset=56
  local.get $0
  i64.const 0
  i64.store offset=64
  local.get $0
  i64.const 0
  i64.store offset=72
  local.get $0
  i64.const 0
  i64.store offset=80
  local.get $0
  i64.const 0
  i64.store offset=88
  local.get $0
  i64.const 0
  i64.store offset=104
  local.get $0
  i32.const 1
  i32.store8 offset=112
  local.get $0
  i32.load offset=116
  call $assembly/HistogramIterationValue/HistogramIterationValue#reset
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/packedarray/PackedArray/PackedArray,u64>#doReset (param $0 i32) (param $1 i32) (param $2 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $1
  call $assembly/PercentileIterator/PercentileIterator<assembly/packedarray/PackedArray/PackedArray,u64>#resetIterator
  local.get $0
  local.get $2
  i32.store
  local.get $0
  f64.const 0
  f64.store offset=8
  local.get $0
  f64.const 0
  f64.store offset=16
  local.get $0
  i32.const 0
  i32.store8 offset=24
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/packedarray/PackedArray/PackedArray,u64>#constructor (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  i32.eqz
  if
   i32.const 120
   i32.const 46
   call $~lib/rt/tlsf/__alloc
   call $~lib/rt/pure/__retain
   local.set $0
  end
  local.get $0
  i32.const 0
  i32.store
  local.get $0
  f64.const 0
  f64.store offset=8
  local.get $0
  f64.const 0
  f64.store offset=16
  local.get $0
  i32.const 0
  i32.store8 offset=24
  local.get $0
  i32.const 0
  i32.store offset=28
  local.get $0
  i64.const 0
  i64.store offset=32
  local.get $0
  i32.const 0
  i32.store offset=40
  local.get $0
  i64.const 0
  i64.store offset=48
  local.get $0
  i64.const 0
  i64.store offset=56
  local.get $0
  i64.const 0
  i64.store offset=64
  local.get $0
  i64.const 0
  i64.store offset=72
  local.get $0
  i64.const 0
  i64.store offset=80
  local.get $0
  i64.const 0
  i64.store offset=88
  local.get $0
  i64.const 0
  i64.store offset=96
  local.get $0
  i64.const 0
  i64.store offset=104
  local.get $0
  i32.const 0
  i32.store8 offset=112
  local.get $0
  i32.const 0
  call $assembly/HistogramIterationValue/HistogramIterationValue#constructor
  i32.store offset=116
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  i32.const 0
  i32.store
  local.get $0
  f64.const 0
  f64.store offset=8
  local.get $0
  f64.const 0
  f64.store offset=16
  local.get $0
  i32.const 0
  i32.store8 offset=24
  local.get $0
  local.get $1
  local.get $2
  call $assembly/PercentileIterator/PercentileIterator<assembly/packedarray/PackedArray/PackedArray,u64>#doReset
  local.get $1
  call $~lib/rt/pure/__release
  local.get $0
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/packedarray/PackedArray/PackedArray,u64>#resetIterator (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.tee $2
  local.get $1
  local.tee $3
  local.get $2
  i32.load offset=4
  local.tee $4
  i32.ne
  if
   local.get $3
   call $~lib/rt/pure/__retain
   local.set $3
   local.get $4
   call $~lib/rt/pure/__release
  end
  local.get $3
  i32.store offset=4
  local.get $0
  local.get $1
  i64.load offset=168
  i64.store offset=8
  local.get $0
  local.get $1
  i64.load offset=168
  i64.store offset=72
  local.get $0
  i32.const 0
  i32.store offset=16
  local.get $0
  i64.const 0
  i64.store offset=24
  local.get $0
  i64.const 1
  local.get $1
  i32.load offset=112
  i64.extend_i32_s
  i64.shl
  i64.store offset=32
  local.get $0
  i64.const 0
  i64.store offset=40
  local.get $0
  i64.const 0
  i64.store offset=48
  local.get $0
  i64.const 0
  i64.store offset=56
  local.get $0
  i64.const 0
  i64.store offset=64
  local.get $0
  i64.const 0
  i64.store offset=80
  local.get $0
  i32.const 1
  i32.store8 offset=88
  local.get $0
  i32.load offset=92
  call $assembly/HistogramIterationValue/HistogramIterationValue#reset
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/packedarray/PackedArray/PackedArray,u64>#doReset (param $0 i32) (param $1 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $1
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/packedarray/PackedArray/PackedArray,u64>#resetIterator
  local.get $0
  i32.const -1
  i32.store
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/packedarray/PackedArray/PackedArray,u64>#constructor (param $0 i32) (param $1 i32) (result i32)
  local.get $0
  i32.eqz
  if
   i32.const 96
   i32.const 47
   call $~lib/rt/tlsf/__alloc
   call $~lib/rt/pure/__retain
   local.set $0
  end
  local.get $0
  i32.const 0
  i32.store
  local.get $0
  i32.const 0
  i32.store offset=4
  local.get $0
  i64.const 0
  i64.store offset=8
  local.get $0
  i32.const 0
  i32.store offset=16
  local.get $0
  i64.const 0
  i64.store offset=24
  local.get $0
  i64.const 0
  i64.store offset=32
  local.get $0
  i64.const 0
  i64.store offset=40
  local.get $0
  i64.const 0
  i64.store offset=48
  local.get $0
  i64.const 0
  i64.store offset=56
  local.get $0
  i64.const 0
  i64.store offset=64
  local.get $0
  i64.const 0
  i64.store offset=72
  local.get $0
  i64.const 0
  i64.store offset=80
  local.get $0
  i32.const 0
  i32.store8 offset=88
  local.get $0
  i32.const 0
  call $assembly/HistogramIterationValue/HistogramIterationValue#constructor
  i32.store offset=92
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $1
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/packedarray/PackedArray/PackedArray,u64>#doReset
  local.get $1
  call $~lib/rt/pure/__release
  local.get $0
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#init (param $0 i32) (param $1 i64) (param $2 i64) (param $3 i32) (param $4 f64)
  (local $5 i64)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  local.get $0
  local.get $1
  i64.store offset=24
  local.get $0
  local.get $2
  i64.store offset=16
  local.get $0
  local.get $3
  i32.store8 offset=32
  local.get $0
  local.get $4
  f64.store offset=88
  i32.const 2
  i64.extend_i32_s
  f64.const 10
  local.get $3
  f64.convert_i32_u
  call $~lib/math/NativeMath.pow
  i64.trunc_f64_u
  i64.mul
  local.set $5
  local.get $0
  local.get $1
  f64.convert_i64_u
  call $~lib/math/NativeMath.log2
  f64.floor
  i32.trunc_f64_s
  i32.store offset=112
  local.get $0
  i64.const 1
  local.get $0
  i32.load offset=112
  i64.extend_i32_s
  i64.shl
  i64.const 1
  i64.sub
  i64.store offset=136
  local.get $5
  f64.convert_i64_u
  call $~lib/math/NativeMath.log2
  f64.ceil
  i32.trunc_f64_s
  local.set $6
  local.get $0
  local.get $6
  i32.const 1
  i32.sub
  i32.store offset=108
  local.get $0
  i32.const 1
  local.get $6
  i32.shl
  i32.store offset=48
  local.get $0
  local.get $0
  i32.load offset=48
  i32.const 1
  i32.shr_s
  i32.store offset=116
  local.get $0
  local.get $0
  i32.load offset=48
  i64.extend_i32_s
  i64.const 1
  i64.sub
  local.get $0
  i32.load offset=112
  i64.extend_i32_s
  i64.shl
  i64.store offset=128
  local.get $0
  local.get $2
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#establishSize
  local.get $0
  local.tee $8
  i32.const 0
  local.get $0
  i32.load offset=52
  global.get $assembly/packedarray/PackedArrayContext/MINIMUM_INITIAL_PACKED_ARRAY_CAPACITY
  call $assembly/packedarray/PackedArray/PackedArray#constructor
  local.tee $7
  local.tee $9
  local.get $8
  i32.load offset=160
  local.tee $10
  i32.ne
  if
   local.get $9
   call $~lib/rt/pure/__retain
   local.set $9
   local.get $10
   call $~lib/rt/pure/__release
  end
  local.get $9
  i32.store offset=160
  local.get $0
  i32.const 64
  local.get $0
  i32.load offset=112
  i32.sub
  local.get $0
  i32.load offset=108
  i32.sub
  i32.const 1
  i32.sub
  i32.store offset=104
  local.get $0
  local.tee $10
  i32.const 0
  local.get $0
  i32.const 1
  call $assembly/PercentileIterator/PercentileIterator<assembly/packedarray/PackedArray/PackedArray,u64>#constructor
  local.set $9
  local.get $10
  i32.load offset=96
  call $~lib/rt/pure/__release
  local.get $9
  i32.store offset=96
  local.get $0
  local.tee $8
  i32.const 0
  local.get $0
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/packedarray/PackedArray/PackedArray,u64>#constructor
  local.set $9
  local.get $8
  i32.load offset=100
  call $~lib/rt/pure/__release
  local.get $9
  i32.store offset=100
  local.get $7
  call $~lib/rt/pure/__release
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#constructor (param $0 i32) (param $1 i64) (param $2 i64) (param $3 i32) (result i32)
  (local $4 f64)
  local.get $0
  i32.eqz
  if
   i32.const 176
   i32.const 44
   call $~lib/rt/tlsf/__alloc
   call $~lib/rt/pure/__retain
   local.set $0
  end
  local.get $0
  i32.const 0
  i32.store offset=104
  local.get $0
  i32.const 0
  i32.store offset=108
  local.get $0
  i32.const 0
  i32.store offset=112
  local.get $0
  i32.const 0
  i32.store offset=116
  local.get $0
  i64.const 0
  i64.store offset=120
  local.get $0
  i64.const 0
  i64.store offset=128
  local.get $0
  i64.const 0
  i64.store offset=136
  local.get $0
  i64.const 0
  i64.store offset=144
  local.get $0
  global.get $~lib/number/U64.MAX_VALUE
  i64.store offset=152
  local.get $0
  i32.const 0
  i32.store offset=160
  local.get $0
  i64.const 0
  i64.store offset=168
  local.get $0
  call $assembly/AbstractHistogramBase/AbstractHistogramBase<assembly/packedarray/PackedArray/PackedArray,u64>#constructor
  local.set $0
  local.get $1
  i64.const 1
  i64.lt_u
  if
   i32.const 8896
   i32.const 8992
   i32.const 61
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $2
  i64.const 2
  local.get $1
  i64.mul
  i64.lt_u
  if
   i32.const 9056
   i32.const 8992
   i32.const 64
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $3
  i32.const 255
  i32.and
  i32.const 0
  i32.lt_u
  if (result i32)
   i32.const 1
  else
   local.get $3
   i32.const 255
   i32.and
   i32.const 5
   i32.gt_u
  end
  if
   i32.const 9264
   i32.const 8992
   i32.const 72
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  global.get $assembly/AbstractHistogramBase/AbstractHistogramBase.identityBuilder
  local.tee $4
  f64.const 1
  f64.add
  global.set $assembly/AbstractHistogramBase/AbstractHistogramBase.identityBuilder
  local.get $4
  f64.store
  local.get $0
  local.get $1
  local.get $2
  local.get $3
  f64.const 1
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#init
  local.get $0
 )
 (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#constructor (param $0 i32) (param $1 f64) (param $2 f64) (param $3 f64) (param $4 i32) (param $5 i32) (result i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  local.get $0
  i32.eqz
  if
   i32.const 4
   i32.const 43
   call $~lib/rt/tlsf/__alloc
   call $~lib/rt/pure/__retain
   local.set $0
  end
  local.get $0
  i32.const 0
  i32.store
  local.get $5
  call $~lib/rt/pure/__retain
  local.set $5
  local.get $5
  if
   local.get $0
   local.tee $6
   local.get $5
   local.tee $7
   local.get $6
   i32.load
   local.tee $8
   i32.ne
   if
    local.get $7
    call $~lib/rt/pure/__retain
    local.set $7
    local.get $8
    call $~lib/rt/pure/__release
   end
   local.get $7
   i32.store
  else
   local.get $0
   local.tee $8
   i32.const 0
   local.get $1
   i64.trunc_f64_u
   local.get $2
   i64.trunc_f64_u
   local.get $3
   i32.trunc_f64_u
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#constructor
   local.set $7
   local.get $8
   i32.load
   call $~lib/rt/pure/__release
   local.get $7
   i32.store
   local.get $0
   i32.load
   local.get $4
   i32.store8 offset=8
  end
  local.get $5
  call $~lib/rt/pure/__release
  local.get $0
 )
 (func $assembly/index/PackedHistogram#constructor (param $0 i32) (param $1 f64) (param $2 f64) (param $3 f64) (param $4 i32) (param $5 i32) (result i32)
  local.get $0
  i32.eqz
  if
   i32.const 4
   i32.const 40
   call $~lib/rt/tlsf/__alloc
   call $~lib/rt/pure/__retain
   local.set $0
  end
  local.get $0
  local.get $1
  local.get $2
  local.get $3
  local.get $4
  local.get $5
  call $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#constructor
  local.set $0
  local.get $0
 )
 (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#get:_histogram (param $0 i32) (result i32)
  local.get $0
  i32.load
  call $~lib/rt/pure/__retain
 )
 (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#set:_histogram (param $0 i32) (param $1 i32)
  (local $2 i32)
  local.get $0
  local.get $1
  local.get $0
  i32.load
  local.tee $2
  i32.ne
  if
   local.get $1
   call $~lib/rt/pure/__retain
   drop
   local.get $2
   call $~lib/rt/pure/__release
  end
  local.get $1
  i32.store
 )
 (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#get:autoResize (param $0 i32) (result i32)
  local.get $0
  i32.load
  i32.load8_u offset=8
 )
 (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#set:autoResize (param $0 i32) (param $1 i32)
  local.get $0
  i32.load
  local.get $1
  i32.store8 offset=8
 )
 (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#get:highestTrackableValue (param $0 i32) (result f64)
  local.get $0
  i32.load
  i64.load offset=16
  f64.convert_i64_u
 )
 (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#set:highestTrackableValue (param $0 i32) (param $1 f64)
  local.get $0
  i32.load
  local.get $1
  i64.trunc_f64_u
  i64.store offset=16
 )
 (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#get:startTimeStampMsec (param $0 i32) (result f64)
  local.get $0
  i32.load
  i64.load offset=64
  f64.convert_i64_u
 )
 (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#set:startTimeStampMsec (param $0 i32) (param $1 f64)
  local.get $0
  i32.load
  local.get $1
  i64.trunc_f64_u
  i64.store offset=64
 )
 (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#get:endTimeStampMsec (param $0 i32) (result f64)
  local.get $0
  i32.load
  i64.load offset=72
  f64.convert_i64_u
 )
 (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#set:endTimeStampMsec (param $0 i32) (param $1 f64)
  local.get $0
  i32.load
  local.get $1
  i64.trunc_f64_u
  i64.store offset=72
 )
 (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#get:minNonZeroValue (param $0 i32) (result f64)
  local.get $0
  i32.load
  i64.load offset=152
  f64.convert_i64_u
 )
 (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#get:maxValue (param $0 i32) (result f64)
  local.get $0
  i32.load
  i64.load offset=144
  f64.convert_i64_u
 )
 (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#get:totalCount (param $0 i32) (result f64)
  local.get $0
  i32.load
  i64.load offset=168
  f64.convert_i64_u
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/packedarray/PackedArray/PackedArray,u64>#reset (param $0 i32)
  local.get $0
  local.get $0
  i32.load offset=4
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/packedarray/PackedArray/PackedArray,u64>#doReset
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/packedarray/PackedArray/PackedArray,u64>#hasNext (param $0 i32) (result i32)
  local.get $0
  i32.load offset=4
  i64.load offset=168
  local.get $0
  i64.load offset=8
  i64.ne
  if
   i32.const 0
   i32.const 11648
   i32.const 87
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i64.load offset=56
  local.get $0
  i64.load offset=72
  i64.lt_u
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/packedarray/PackedArray/PackedArray,u64>#exhaustedSubBuckets (param $0 i32) (result i32)
  local.get $0
  i32.load offset=16
  local.get $0
  i32.load offset=4
  i32.load offset=52
  i32.ge_s
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#lowestEquivalentValue (param $0 i32) (param $1 i64) (result i64)
  (local $2 i32)
  (local $3 i32)
  (local $4 i64)
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getBucketIndex
  local.set $2
  local.get $0
  local.get $1
  local.get $2
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getSubBucketIndex
  local.set $3
  local.get $0
  local.get $2
  local.get $3
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#valueFromIndexes
  local.set $4
  local.get $4
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#sizeOfEquivalentValueRange (param $0 i32) (param $1 i64) (result i64)
  (local $2 i32)
  (local $3 i64)
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getBucketIndex
  local.set $2
  i64.const 1
  local.get $0
  i32.load offset=112
  local.get $2
  i32.add
  i64.extend_i32_s
  i64.shl
  local.set $3
  local.get $3
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#nextNonEquivalentValue (param $0 i32) (param $1 i64) (result i64)
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#lowestEquivalentValue
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#sizeOfEquivalentValueRange
  i64.add
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#highestEquivalentValue (param $0 i32) (param $1 i64) (result i64)
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#nextNonEquivalentValue
  i64.const 1
  i64.sub
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/packedarray/PackedArray/PackedArray,u64>#reachedIterationLevel (param $0 i32) (result i32)
  (local $1 i64)
  local.get $0
  i32.load offset=4
  local.get $0
  i32.load offset=16
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtIndex
  local.set $1
  local.get $1
  i64.const 0
  i64.ne
  if (result i32)
   local.get $0
   i32.load
   local.get $0
   i32.load offset=16
   i32.ne
  else
   i32.const 0
  end
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/packedarray/PackedArray/PackedArray,u64>#getValueIteratedTo (param $0 i32) (result i64)
  local.get $0
  i32.load offset=4
  local.get $0
  i64.load offset=24
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#highestEquivalentValue
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/packedarray/PackedArray/PackedArray,u64>#getPercentileIteratedTo (param $0 i32) (result f64)
  f64.const 100
  local.get $0
  i64.load offset=56
  f64.convert_i64_u
  f64.mul
  local.get $0
  i64.load offset=72
  f64.convert_i64_u
  f64.div
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/packedarray/PackedArray/PackedArray,u64>#incrementIterationLevel (param $0 i32)
  local.get $0
  local.get $0
  i32.load offset=16
  i32.store
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/packedarray/PackedArray/PackedArray,u64>#incrementSubBucket (param $0 i32)
  local.get $0
  i32.const 1
  i32.store8 offset=88
  local.get $0
  local.get $0
  i32.load offset=16
  i32.const 1
  i32.add
  i32.store offset=16
  local.get $0
  local.get $0
  i32.load offset=4
  local.get $0
  i32.load offset=16
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#valueFromIndex
  i64.store offset=24
  local.get $0
  local.get $0
  i32.load offset=4
  local.get $0
  i32.load offset=16
  i32.const 1
  i32.add
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#valueFromIndex
  i64.store offset=32
 )
 (func $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/packedarray/PackedArray/PackedArray,u64>#next (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i64)
  loop $while-continue|0
   local.get $0
   call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/packedarray/PackedArray/PackedArray,u64>#exhaustedSubBuckets
   i32.eqz
   local.set $1
   local.get $1
   if
    local.get $0
    local.get $0
    i32.load offset=4
    local.get $0
    i32.load offset=16
    call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtIndex
    i64.store offset=80
    local.get $0
    i32.load8_u offset=88
    if
     local.get $0
     local.get $0
     i64.load offset=56
     local.get $0
     i64.load offset=80
     i64.add
     i64.store offset=56
     local.get $0
     local.get $0
     i64.load offset=64
     local.get $0
     i64.load offset=80
     local.get $0
     i32.load offset=4
     local.get $0
     i64.load offset=24
     call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#highestEquivalentValue
     i64.mul
     i64.add
     i64.store offset=64
     local.get $0
     i32.const 0
     i32.store8 offset=88
    end
    local.get $0
    call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/packedarray/PackedArray/PackedArray,u64>#reachedIterationLevel
    if
     local.get $0
     call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/packedarray/PackedArray/PackedArray,u64>#getValueIteratedTo
     local.set $2
     local.get $0
     i32.load offset=92
     local.get $2
     i64.store
     local.get $0
     i32.load offset=92
     local.get $0
     i64.load offset=40
     i64.store offset=8
     local.get $0
     i32.load offset=92
     local.get $0
     i64.load offset=80
     i64.store offset=16
     local.get $0
     i32.load offset=92
     local.get $0
     i64.load offset=56
     local.get $0
     i64.load offset=48
     i64.sub
     i64.store offset=24
     local.get $0
     i32.load offset=92
     local.get $0
     i64.load offset=56
     i64.store offset=32
     local.get $0
     i32.load offset=92
     local.get $0
     i64.load offset=64
     i64.store offset=40
     local.get $0
     i32.load offset=92
     f64.const 100
     local.get $0
     i64.load offset=56
     f64.convert_i64_u
     f64.mul
     local.get $0
     i64.load offset=72
     f64.convert_i64_u
     f64.div
     f64.store offset=48
     local.get $0
     i32.load offset=92
     local.get $0
     call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/packedarray/PackedArray/PackedArray,u64>#getPercentileIteratedTo
     f64.store offset=56
     local.get $0
     local.get $2
     i64.store offset=40
     local.get $0
     local.get $0
     i64.load offset=56
     i64.store offset=48
     local.get $0
     call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/packedarray/PackedArray/PackedArray,u64>#incrementIterationLevel
     local.get $0
     i32.load offset=4
     i64.load offset=168
     local.get $0
     i64.load offset=8
     i64.ne
     if
      i32.const 11744
      i32.const 11648
      i32.const 128
      i32.const 11
      call $~lib/builtins/abort
      unreachable
     end
     local.get $0
     i32.load offset=92
     call $~lib/rt/pure/__retain
     return
    end
    local.get $0
    call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/packedarray/PackedArray/PackedArray,u64>#incrementSubBucket
    br $while-continue|0
   end
  end
  i32.const 11840
  i32.const 11648
  i32.const 134
  i32.const 5
  call $~lib/builtins/abort
  unreachable
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#medianEquivalentValue (param $0 i32) (param $1 i64) (result i64)
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#lowestEquivalentValue
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#sizeOfEquivalentValueRange
  i64.const 1
  i64.shr_u
  i64.add
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getMean (param $0 i32) (result f64)
  (local $1 i64)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  i64.load offset=168
  i64.const 0
  i64.eq
  if
   f64.const 0
   return
  end
  local.get $0
  i32.load offset=100
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/packedarray/PackedArray/PackedArray,u64>#reset
  i64.const 0
  local.set $1
  loop $while-continue|0
   local.get $0
   i32.load offset=100
   call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/packedarray/PackedArray/PackedArray,u64>#hasNext
   local.set $2
   local.get $2
   if
    local.get $0
    i32.load offset=100
    call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/packedarray/PackedArray/PackedArray,u64>#next
    local.set $3
    local.get $1
    local.get $0
    local.get $3
    i64.load
    call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#medianEquivalentValue
    local.get $3
    i64.load offset=16
    i64.mul
    i64.add
    local.set $1
    local.get $3
    call $~lib/rt/pure/__release
    br $while-continue|0
   end
  end
  local.get $1
  f64.convert_i64_u
  f64.const 1
  f64.mul
  local.get $0
  i64.load offset=168
  f64.convert_i64_u
  f64.div
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#computeStdDeviation (param $0 i32) (param $1 f64) (result f64)
  (local $2 f64)
  (local $3 i32)
  (local $4 i32)
  (local $5 f64)
  (local $6 f64)
  local.get $0
  i64.load offset=168
  i64.const 0
  i64.eq
  if
   f64.const 0
   return
  end
  f64.const 0
  local.set $2
  local.get $0
  i32.load offset=100
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/packedarray/PackedArray/PackedArray,u64>#reset
  loop $while-continue|0
   local.get $0
   i32.load offset=100
   call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/packedarray/PackedArray/PackedArray,u64>#hasNext
   local.set $3
   local.get $3
   if
    local.get $0
    i32.load offset=100
    call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/packedarray/PackedArray/PackedArray,u64>#next
    local.set $4
    local.get $0
    local.get $4
    i64.load
    call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#medianEquivalentValue
    f64.convert_i64_u
    local.get $1
    f64.sub
    local.set $5
    local.get $2
    local.get $5
    local.get $5
    f64.mul
    local.get $4
    i64.load offset=24
    f64.convert_i64_u
    f64.mul
    f64.add
    local.set $2
    local.get $4
    call $~lib/rt/pure/__release
    br $while-continue|0
   end
  end
  local.get $2
  local.get $0
  i64.load offset=168
  f64.convert_i64_u
  f64.div
  local.set $6
  local.get $6
  f64.sqrt
  local.set $6
  local.get $6
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getStdDeviation (param $0 i32) (result f64)
  (local $1 f64)
  local.get $0
  i64.load offset=168
  i64.const 0
  i64.eq
  if
   f64.const 0
   return
  end
  local.get $0
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getMean
  local.set $1
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#computeStdDeviation
 )
 (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#get:stdDeviation (param $0 i32) (result f64)
  local.get $0
  i32.load
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getStdDeviation
 )
 (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#get:mean (param $0 i32) (result f64)
  local.get $0
  i32.load
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getMean
 )
 (func $assembly/packedarray/PackedArray/PackedArray#getPhysicalLength (param $0 i32) (result i32)
  local.get $0
  i32.load
  i32.load offset=4
 )
 (func $assembly/packedarray/PackedArray/PackedArray#get:estimatedFootprintInBytes (param $0 i32) (result i32)
  i32.const 4
  local.get $0
  call $assembly/packedarray/PackedArray/PackedArray#getPhysicalLength
  i32.add
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#get:estimatedFootprintInBytes (param $0 i32) (result i32)
  i32.const 176
  local.get $0
  i32.load offset=160
  call $assembly/packedarray/PackedArray/PackedArray#get:estimatedFootprintInBytes
  i32.add
 )
 (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#get:estimatedFootprintInBytes (param $0 i32) (result f64)
  i32.const 4
  local.get $0
  i32.load
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#get:estimatedFootprintInBytes
  i32.add
  f64.convert_i32_u
 )
 (func $assembly/packedarray/PackedArrayContext/PackedArrayContext#getVirtualLength (param $0 i32) (result i32)
  local.get $0
  i32.load offset=28
 )
 (func $assembly/packedarray/PackedArray/PackedArray#length (param $0 i32) (result i32)
  local.get $0
  i32.load
  call $assembly/packedarray/PackedArrayContext/PackedArrayContext#getVirtualLength
 )
 (func $assembly/packedarray/PackedArrayContext/PackedArrayContext#getTopLevelShift (param $0 i32) (result i32)
  local.get $0
  i32.load offset=32
 )
 (func $assembly/packedarray/PackedArrayContext/PackedArrayContext#copyEntriesAtLevelFromOther (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (param $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $4
  global.get $assembly/packedarray/PackedArrayContext/LEAF_LEVEL_SHIFT
  i32.eq
  local.set $5
  local.get $1
  local.get $2
  call $assembly/packedarray/PackedArrayContext/PackedArrayContext#getPackedSlotIndicators
  local.set $6
  local.get $6
  i64.extend_i32_u
  i32.const 1
  global.set $~argumentsLength
  global.get $assembly/packedarray/bitcount/bitCount
  call_indirect (type $i64_=>_i32)
  local.set $7
  global.get $assembly/packedarray/PackedArrayContext/NON_LEAF_ENTRY_HEADER_SIZE_IN_SHORTS
  local.get $7
  i32.const 255
  i32.and
  i32.add
  local.set $8
  local.get $0
  local.get $8
  i32.const 65535
  i32.and
  call $assembly/packedarray/PackedArrayContext/PackedArrayContext#newEntry
  local.set $9
  local.get $0
  local.get $3
  local.get $9
  call $assembly/packedarray/PackedArrayContext/PackedArrayContext#setAtShortIndex
  local.get $0
  local.get $9
  global.get $assembly/packedarray/PackedArrayContext/NON_LEAF_ENTRY_SLOT_INDICATORS_OFFSET
  i32.add
  local.get $6
  call $assembly/packedarray/PackedArrayContext/PackedArrayContext#setAtShortIndex
  i32.const 0
  local.set $10
  loop $for-loop|1
   local.get $10
   i32.const 255
   i32.and
   local.get $7
   i32.const 255
   i32.and
   i32.lt_u
   local.set $13
   local.get $13
   if
    local.get $5
    if
     local.get $0
     call $assembly/packedarray/PackedArrayContext/PackedArrayContext#newLeafEntry
     local.set $12
     local.get $0
     local.get $9
     local.get $10
     i32.const 255
     i32.and
     local.get $12
     call $assembly/packedarray/PackedArrayContext/PackedArrayContext#setIndexAtEntrySlot
     local.get $1
     local.get $2
     local.get $10
     i32.const 255
     i32.and
     call $assembly/packedarray/PackedArrayContext/PackedArrayContext#getIndexAtEntrySlot
     local.set $14
     local.get $0
     i32.load offset=20
     local.get $12
     local.get $1
     i32.load offset=20
     local.get $14
     call $~lib/typedarray/Uint64Array#__get
     call $~lib/typedarray/Uint64Array#__set
    else
     local.get $1
     local.get $2
     local.get $10
     i32.const 255
     i32.and
     call $assembly/packedarray/PackedArrayContext/PackedArrayContext#getIndexAtEntrySlot
     local.set $14
     local.get $0
     local.get $1
     local.get $14
     local.get $9
     global.get $assembly/packedarray/PackedArrayContext/NON_LEAF_ENTRY_HEADER_SIZE_IN_SHORTS
     i32.add
     local.get $10
     i32.const 255
     i32.and
     i32.add
     local.get $4
     i32.const 4
     i32.sub
     call $assembly/packedarray/PackedArrayContext/PackedArrayContext#copyEntriesAtLevelFromOther
    end
    local.get $10
    i32.const 1
    i32.add
    local.set $10
    br $for-loop|1
   end
  end
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/packedarray/PackedArrayContext/PackedArrayContext#populateEquivalentEntriesWithEntriesFromOther (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  i32.load offset=28
  local.get $1
  call $assembly/packedarray/PackedArrayContext/PackedArrayContext#getVirtualLength
  i32.lt_s
  if
   i32.const 14720
   i32.const 13408
   i32.const 476
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  i32.const 0
  local.set $2
  loop $for-loop|0
   local.get $2
   global.get $assembly/packedarray/PackedArrayContext/NUMBER_OF_SETS
   i32.lt_s
   local.set $3
   local.get $3
   if
    block $for-continue|0
     local.get $1
     global.get $assembly/packedarray/PackedArrayContext/SET_0_START_INDEX
     local.get $2
     i32.add
     call $assembly/packedarray/PackedArrayContext/PackedArrayContext#getAtShortIndex
     local.set $4
     local.get $4
     i32.const 0
     i32.eq
     if
      br $for-continue|0
     end
     global.get $assembly/packedarray/PackedArrayContext/SET_0_START_INDEX
     local.get $2
     i32.add
     local.set $5
     local.get $0
     i32.load offset=32
     local.set $6
     loop $for-loop|1
      local.get $6
      local.get $1
      i32.load offset=32
      i32.gt_s
      local.set $7
      local.get $7
      if
       local.get $0
       i32.const 2
       call $assembly/packedarray/PackedArrayContext/PackedArrayContext#newEntry
       local.set $8
       local.get $0
       local.get $5
       local.get $8
       call $assembly/packedarray/PackedArrayContext/PackedArrayContext#setAtShortIndex
       local.get $0
       local.get $8
       i32.const 1
       call $assembly/packedarray/PackedArrayContext/PackedArrayContext#setPackedSlotIndicators
       local.get $8
       global.get $assembly/packedarray/PackedArrayContext/NON_LEAF_ENTRY_HEADER_SIZE_IN_SHORTS
       i32.add
       local.set $5
       local.get $6
       i32.const 4
       i32.sub
       local.set $6
       br $for-loop|1
      end
     end
     local.get $0
     local.get $1
     local.get $4
     local.get $5
     local.get $1
     i32.load offset=32
     call $assembly/packedarray/PackedArrayContext/PackedArrayContext#copyEntriesAtLevelFromOther
    end
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|0
   end
  end
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/packedarray/PackedArrayContext/PackedArrayContext#copyAndIncreaseSize (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  (local $3 i32)
  i32.const 0
  local.get $2
  local.get $1
  call $assembly/packedarray/PackedArrayContext/PackedArrayContext#constructor
  local.set $3
  local.get $0
  i32.load8_u
  if
   local.get $3
   local.get $0
   call $assembly/packedarray/PackedArrayContext/PackedArrayContext#populateEquivalentEntriesWithEntriesFromOther
  end
  local.get $3
 )
 (func $assembly/packedarray/PackedArray/PackedArray#setVirtualLength (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  local.get $1
  local.get $0
  call $assembly/packedarray/PackedArray/PackedArray#length
  i32.lt_s
  if
   i32.const 14400
   local.get $1
   i32.const 10
   call $~lib/number/I32#toString
   local.tee $2
   call $~lib/string/String.__concat
   local.tee $3
   i32.const 14512
   call $~lib/string/String.__concat
   local.tee $4
   local.get $0
   call $assembly/packedarray/PackedArray/PackedArray#length
   i32.const 10
   call $~lib/number/I32#toString
   local.tee $5
   call $~lib/string/String.__concat
   local.tee $6
   i32.const 14624
   i32.const 49
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i32.load
  call $~lib/rt/pure/__retain
  local.set $6
  local.get $6
  i32.load8_u
  if (result i32)
   local.get $6
   local.get $1
   call $assembly/packedarray/PackedArrayContext/PackedArrayContext#determineTopLevelShiftForVirtualLength
   local.get $6
   call $assembly/packedarray/PackedArrayContext/PackedArrayContext#getTopLevelShift
   i32.eq
  else
   i32.const 0
  end
  if
   local.get $6
   local.get $1
   call $assembly/packedarray/PackedArrayContext/PackedArrayContext#setVirtualLength
   local.get $6
   call $~lib/rt/pure/__release
   return
  end
  local.get $0
  local.tee $2
  local.get $6
  local.get $0
  call $assembly/packedarray/PackedArray/PackedArray#getPhysicalLength
  local.get $1
  call $assembly/packedarray/PackedArrayContext/PackedArrayContext#copyAndIncreaseSize
  local.set $3
  local.get $2
  i32.load
  call $~lib/rt/pure/__release
  local.get $3
  i32.store
  local.get $6
  call $~lib/rt/pure/__release
 )
 (func $assembly/packedarray/PackedArray/PackedArray#resize (param $0 i32) (param $1 i32) (result i32)
  local.get $0
  local.get $1
  call $assembly/packedarray/PackedArray/PackedArray#setVirtualLength
  local.get $0
  call $~lib/rt/pure/__retain
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#resize (param $0 i32) (param $1 i64)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#establishSize
  local.get $0
  local.tee $2
  local.get $0
  i32.load offset=160
  local.get $0
  i32.load offset=52
  call $assembly/packedarray/PackedArray/PackedArray#resize
  local.set $3
  local.get $2
  i32.load offset=160
  call $~lib/rt/pure/__release
  local.get $3
  i32.store offset=160
 )
 (func $assembly/packedarray/PackedArrayContext/PackedArrayContext#setAtUnpackedIndex (param $0 i32) (param $1 i32) (param $2 i64)
  local.get $0
  i32.load offset=20
  local.get $1
  local.get $2
  call $~lib/typedarray/Uint64Array#__set
 )
 (func $~lib/typedarray/Uint8Array#__set (param $0 i32) (param $1 i32) (param $2 i32)
  local.get $1
  local.get $0
  i32.load offset=8
  i32.ge_u
  if
   i32.const 12160
   i32.const 12224
   i32.const 163
   i32.const 45
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i32.load offset=4
  local.get $1
  i32.add
  local.get $2
  i32.store8
 )
 (func $assembly/packedarray/PackedArrayContext/PackedArrayContext#setAtByteIndex (param $0 i32) (param $1 i32) (param $2 i32)
  local.get $0
  i32.load offset=12
  local.get $1
  local.get $2
  i32.const 255
  i32.and
  call $~lib/typedarray/Uint8Array#__set
 )
 (func $assembly/packedarray/PackedArray/PackedArray#set (param $0 i32) (param $1 i32) (param $2 i64)
  (local $3 i32)
  (local $4 i64)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  i32.const 0
  local.set $3
  local.get $2
  local.set $4
  i32.const 0
  local.set $5
  loop $for-loop|1
   local.get $5
   i32.const 255
   i32.and
   global.get $assembly/packedarray/PackedArray/NUMBER_OF_SETS
   i32.lt_u
   local.set $8
   local.get $8
   if
    block $for-continue|1
     local.get $0
     i32.load
     i32.load8_u
     i32.eqz
     if
      local.get $0
      i32.load
      local.get $1
      local.get $2
      call $assembly/packedarray/PackedArrayContext/PackedArrayContext#setAtUnpackedIndex
      return
     end
     local.get $4
     i64.const 0
     i64.eq
     if
      local.get $0
      i32.load
      local.get $5
      i32.const 255
      i32.and
      local.get $1
      i32.const 0
      call $assembly/packedarray/PackedArrayContext/PackedArrayContext#getPackedIndex
      local.set $7
      local.get $7
      i32.const 0
      i32.lt_s
      if
       return
      end
     end
     local.get $0
     i32.load
     local.get $5
     i32.const 255
     i32.and
     local.get $1
     i32.const 1
     call $assembly/packedarray/PackedArrayContext/PackedArrayContext#getPackedIndex
     local.set $7
     local.get $4
     i64.const 255
     i64.and
     i32.wrap_i64
     local.set $9
     local.get $4
     i64.const 8
     i64.shr_u
     local.set $4
     local.get $5
     i32.const 255
     i32.and
     local.get $3
     i32.const 255
     i32.and
     i32.lt_u
     if
      br $for-continue|1
     end
     local.get $0
     i32.load
     local.get $7
     local.get $9
     call $assembly/packedarray/PackedArrayContext/PackedArrayContext#setAtByteIndex
     local.get $3
     i32.const 1
     i32.add
     local.set $3
    end
    local.get $5
    i32.const 1
    i32.add
    local.set $5
    br $for-loop|1
   end
  end
 )
 (func $assembly/packedarray/PackedArray/PackedArray#__set (param $0 i32) (param $1 i32) (param $2 i64)
  local.get $0
  local.get $1
  local.get $2
  call $assembly/packedarray/PackedArray/PackedArray#set
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#addToCountAtIndex (param $0 i32) (param $1 i32) (param $2 i64)
  (local $3 i64)
  (local $4 i64)
  local.get $0
  i32.load offset=160
  local.get $1
  call $assembly/packedarray/PackedArray/PackedArray#__get
  local.set $3
  local.get $3
  local.get $2
  i64.add
  local.set $4
  local.get $4
  i64.const 0
  i64.lt_u
  if
   i32.const 0
   i32.const 8992
   i32.const 611
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i32.load offset=160
  local.get $1
  local.get $4
  call $assembly/packedarray/PackedArray/PackedArray#__set
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#handleRecordException (param $0 i32) (param $1 i64) (param $2 i64)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  local.get $0
  i32.load8_u offset=8
  i32.eqz
  if
   i32.const 12032
   local.get $2
   i32.const 10
   call $~lib/number/U64#toString
   local.tee $3
   call $~lib/string/String.__concat
   local.tee $4
   i32.const 12064
   call $~lib/string/String.__concat
   local.tee $5
   i32.const 8992
   i32.const 225
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  local.get $2
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#resize
  local.get $0
  local.get $2
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#countsArrayIndex
  local.set $5
  local.get $0
  local.get $5
  local.get $1
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#addToCountAtIndex
  local.get $0
  local.get $0
  local.get $0
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#valueFromIndex
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#highestEquivalentValue
  i64.store offset=16
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#incrementCountAtIndex (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i64)
  (local $4 i32)
  (local $5 i32)
  local.get $0
  i32.load offset=160
  local.get $1
  call $assembly/packedarray/PackedArray/PackedArray#__get
  local.set $2
  local.get $2
  i64.const 1
  i64.add
  local.set $3
  local.get $3
  i64.const 0
  i64.lt_u
  if
   local.get $3
   i32.const 10
   call $~lib/number/U64#toString
   local.tee $4
   i32.const 12288
   call $~lib/string/String.__concat
   local.tee $5
   i32.const 8992
   i32.const 593
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i32.load offset=160
  local.get $1
  local.get $3
  call $assembly/packedarray/PackedArray/PackedArray#__set
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#updatedMaxValue (param $0 i32) (param $1 i64)
  (local $2 i64)
  local.get $1
  local.get $0
  i64.load offset=136
  i64.add
  local.set $2
  local.get $0
  local.get $2
  i64.store offset=144
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#updateMinNonZeroValue (param $0 i32) (param $1 i64)
  (local $2 i64)
  local.get $1
  local.get $0
  i64.load offset=136
  i64.le_u
  if
   return
  end
  local.get $1
  local.get $0
  i64.load offset=136
  i64.const -1
  i64.xor
  i64.and
  local.set $2
  local.get $0
  local.get $2
  i64.store offset=152
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#updateMinAndMax (param $0 i32) (param $1 i64)
  local.get $1
  local.get $0
  i64.load offset=144
  i64.gt_u
  if
   local.get $0
   local.get $1
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#updatedMaxValue
  end
  local.get $1
  local.get $0
  i64.load offset=152
  i64.lt_u
  if (result i32)
   local.get $1
   i64.const 0
   i64.ne
  else
   i32.const 0
  end
  if
   local.get $0
   local.get $1
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#updateMinNonZeroValue
  end
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#incrementTotalCount (param $0 i32)
  local.get $0
  local.get $0
  i64.load offset=168
  i64.const 1
  i64.add
  i64.store offset=168
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#recordSingleValue (param $0 i32) (param $1 i64)
  (local $2 i32)
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#countsArrayIndex
  local.set $2
  local.get $2
  local.get $0
  i32.load offset=52
  i32.ge_s
  if
   local.get $0
   i64.const 1
   local.get $1
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#handleRecordException
  else
   local.get $0
   local.get $2
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#incrementCountAtIndex
  end
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#updateMinAndMax
  local.get $0
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#incrementTotalCount
 )
 (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#recordValue (param $0 i32) (param $1 f64)
  local.get $0
  i32.load
  local.get $1
  i64.trunc_f64_u
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#recordSingleValue
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#recordCountAtValue (param $0 i32) (param $1 i64) (param $2 i64)
  (local $3 i32)
  local.get $0
  local.get $2
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#countsArrayIndex
  local.set $3
  local.get $3
  local.get $0
  i32.load offset=52
  i32.ge_s
  if
   local.get $0
   local.get $1
   local.get $2
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#handleRecordException
  else
   local.get $0
   local.get $3
   local.get $1
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#addToCountAtIndex
  end
  local.get $0
  local.get $2
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#updateMinAndMax
  local.get $0
  local.get $0
  i64.load offset=168
  local.get $1
  i64.add
  i64.store offset=168
 )
 (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#recordValueWithCount (param $0 i32) (param $1 f64) (param $2 f64)
  local.get $0
  i32.load
  local.get $2
  i64.trunc_f64_u
  local.get $1
  i64.trunc_f64_u
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#recordCountAtValue
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#recordSingleValueWithExpectedInterval (param $0 i32) (param $1 i64) (param $2 i64)
  (local $3 i64)
  (local $4 i32)
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#recordSingleValue
  local.get $1
  local.get $2
  i64.lt_u
  if (result i32)
   i32.const 1
  else
   local.get $2
   i64.const 0
   i64.eq
  end
  if
   return
  end
  local.get $1
  local.get $2
  i64.sub
  local.set $3
  loop $for-loop|0
   local.get $3
   local.get $2
   i64.ge_u
   local.set $4
   local.get $4
   if
    local.get $0
    local.get $3
    call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#recordSingleValue
    local.get $3
    local.get $2
    i64.sub
    local.set $3
    br $for-loop|0
   end
  end
 )
 (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#recordValueWithExpectedInterval (param $0 i32) (param $1 f64) (param $2 f64)
  local.get $0
  i32.load
  local.get $1
  i64.trunc_f64_u
  local.get $2
  i64.trunc_f64_u
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#recordSingleValueWithExpectedInterval
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getValueAtPercentile (param $0 i32) (param $1 f64) (result i64)
  (local $2 f64)
  (local $3 f64)
  (local $4 i64)
  (local $5 i64)
  (local $6 i32)
  (local $7 i32)
  (local $8 i64)
  local.get $1
  f64.const 100
  f64.min
  local.set $2
  local.get $2
  f64.const 100
  f64.div
  local.get $0
  i64.load offset=168
  f64.convert_i64_u
  f64.mul
  local.set $3
  local.get $3
  local.get $3
  i32.const 1
  global.set $~argumentsLength
  global.get $assembly/ulp/ulp
  call_indirect (type $f64_=>_f64)
  f64.sub
  f64.ceil
  f64.const 1
  f64.max
  i64.trunc_f64_u
  local.set $4
  i64.const 0
  local.set $5
  i32.const 0
  local.set $6
  loop $for-loop|0
   local.get $6
   local.get $0
   i32.load offset=52
   i32.lt_s
   local.set $7
   local.get $7
   if
    local.get $5
    local.get $0
    local.get $6
    call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtIndex
    i64.add
    local.set $5
    local.get $5
    local.get $4
    i64.ge_u
    if
     local.get $0
     local.get $6
     call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#valueFromIndex
     local.set $8
     local.get $1
     f64.const 0
     f64.eq
     if (result i64)
      local.get $0
      local.get $8
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#lowestEquivalentValue
     else
      local.get $0
      local.get $8
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#highestEquivalentValue
     end
     return
    end
    local.get $6
    i32.const 1
    i32.add
    local.set $6
    br $for-loop|0
   end
  end
  i64.const 0
 )
 (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#getValueAtPercentile (param $0 i32) (param $1 f64) (result f64)
  local.get $0
  i32.load
  local.get $1
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getValueAtPercentile
  f64.convert_i64_u
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/packedarray/PackedArray/PackedArray,u64>#reset (param $0 i32) (param $1 i32)
  local.get $0
  local.get $0
  i32.load offset=28
  local.get $1
  call $assembly/PercentileIterator/PercentileIterator<assembly/packedarray/PackedArray/PackedArray,u64>#doReset
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/packedarray/PackedArray/PackedArray,u64>#hasNext (param $0 i32) (result i32)
  local.get $0
  i32.load offset=28
  i64.load offset=168
  local.get $0
  i64.load offset=32
  i64.ne
  if
   i32.const 0
   i32.const 12528
   i32.const 138
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i64.load offset=80
  local.get $0
  i64.load offset=96
  i64.lt_u
  if
   i32.const 1
   return
  end
  local.get $0
  i32.load8_u offset=24
  i32.eqz
  if (result i32)
   local.get $0
   i64.load offset=96
   i64.const 0
   i64.gt_u
  else
   i32.const 0
  end
  if
   local.get $0
   f64.const 100
   f64.store offset=8
   local.get $0
   i32.const 1
   i32.store8 offset=24
   i32.const 1
   return
  end
  i32.const 0
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/packedarray/PackedArray/PackedArray,u64>#exhaustedSubBuckets (param $0 i32) (result i32)
  local.get $0
  i32.load offset=40
  local.get $0
  i32.load offset=28
  i32.load offset=52
  i32.ge_s
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/packedarray/PackedArray/PackedArray,u64>#reachedIterationLevel (param $0 i32) (result i32)
  (local $1 f64)
  local.get $0
  i64.load offset=104
  i64.const 0
  i64.eq
  if
   i32.const 0
   return
  end
  f64.const 100
  local.get $0
  i64.load offset=80
  f64.convert_i64_u
  f64.mul
  local.get $0
  i64.load offset=96
  f64.convert_i64_u
  f64.div
  local.set $1
  local.get $1
  local.get $0
  f64.load offset=8
  f64.ge
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/packedarray/PackedArray/PackedArray,u64>#getValueIteratedTo (param $0 i32) (result i64)
  local.get $0
  i32.load offset=28
  local.get $0
  i64.load offset=48
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#highestEquivalentValue
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/packedarray/PackedArray/PackedArray,u64>#getPercentileIteratedTo (param $0 i32) (result f64)
  local.get $0
  f64.load offset=8
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/packedarray/PackedArray/PackedArray,u64>#incrementIterationLevel (param $0 i32)
  (local $1 f64)
  local.get $0
  local.get $0
  f64.load offset=8
  f64.store offset=16
  local.get $0
  i32.load
  f64.convert_i32_s
  f64.const 2
  f64.const 100
  f64.const 100
  local.get $0
  f64.load offset=8
  f64.sub
  f64.div
  call $~lib/math/NativeMath.log2
  f64.floor
  f64.const 1
  f64.add
  call $~lib/math/NativeMath.pow
  f64.mul
  local.set $1
  local.get $0
  local.get $0
  f64.load offset=8
  f64.const 100
  local.get $1
  f64.div
  f64.add
  f64.store offset=8
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/packedarray/PackedArray/PackedArray,u64>#incrementSubBucket (param $0 i32)
  local.get $0
  i32.const 1
  i32.store8 offset=112
  local.get $0
  local.get $0
  i32.load offset=40
  i32.const 1
  i32.add
  i32.store offset=40
  local.get $0
  local.get $0
  i32.load offset=28
  local.get $0
  i32.load offset=40
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#valueFromIndex
  i64.store offset=48
  local.get $0
  local.get $0
  i32.load offset=28
  local.get $0
  i32.load offset=40
  i32.const 1
  i32.add
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#valueFromIndex
  i64.store offset=56
 )
 (func $assembly/PercentileIterator/PercentileIterator<assembly/packedarray/PackedArray/PackedArray,u64>#next (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i64)
  loop $while-continue|0
   local.get $0
   call $assembly/PercentileIterator/PercentileIterator<assembly/packedarray/PackedArray/PackedArray,u64>#exhaustedSubBuckets
   i32.eqz
   local.set $1
   local.get $1
   if
    local.get $0
    local.get $0
    i32.load offset=28
    local.get $0
    i32.load offset=40
    call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtIndex
    i64.store offset=104
    local.get $0
    i32.load8_u offset=112
    if
     local.get $0
     local.get $0
     i64.load offset=80
     local.get $0
     i64.load offset=104
     i64.add
     i64.store offset=80
     local.get $0
     local.get $0
     i64.load offset=88
     local.get $0
     i64.load offset=104
     local.get $0
     i32.load offset=28
     local.get $0
     i64.load offset=48
     call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#highestEquivalentValue
     i64.mul
     i64.add
     i64.store offset=88
     local.get $0
     i32.const 0
     i32.store8 offset=112
    end
    local.get $0
    call $assembly/PercentileIterator/PercentileIterator<assembly/packedarray/PackedArray/PackedArray,u64>#reachedIterationLevel
    if
     local.get $0
     call $assembly/PercentileIterator/PercentileIterator<assembly/packedarray/PackedArray/PackedArray,u64>#getValueIteratedTo
     local.set $2
     local.get $0
     i32.load offset=116
     local.get $2
     i64.store
     local.get $0
     i32.load offset=116
     local.get $0
     i64.load offset=64
     i64.store offset=8
     local.get $0
     i32.load offset=116
     local.get $0
     i64.load offset=104
     i64.store offset=16
     local.get $0
     i32.load offset=116
     local.get $0
     i64.load offset=80
     local.get $0
     i64.load offset=72
     i64.sub
     i64.store offset=24
     local.get $0
     i32.load offset=116
     local.get $0
     i64.load offset=80
     i64.store offset=32
     local.get $0
     i32.load offset=116
     local.get $0
     i64.load offset=88
     i64.store offset=40
     local.get $0
     i32.load offset=116
     f64.const 100
     local.get $0
     i64.load offset=80
     f64.convert_i64_u
     f64.mul
     local.get $0
     i64.load offset=96
     f64.convert_i64_u
     f64.div
     f64.store offset=48
     local.get $0
     i32.load offset=116
     local.get $0
     call $assembly/PercentileIterator/PercentileIterator<assembly/packedarray/PackedArray/PackedArray,u64>#getPercentileIteratedTo
     f64.store offset=56
     local.get $0
     local.get $2
     i64.store offset=64
     local.get $0
     local.get $0
     i64.load offset=80
     i64.store offset=72
     local.get $0
     call $assembly/PercentileIterator/PercentileIterator<assembly/packedarray/PackedArray/PackedArray,u64>#incrementIterationLevel
     local.get $0
     i32.load offset=28
     i64.load offset=168
     local.get $0
     i64.load offset=32
     i64.ne
     if
      i32.const 11744
      i32.const 12528
      i32.const 187
      i32.const 11
      call $~lib/builtins/abort
      unreachable
     end
     local.get $0
     i32.load offset=116
     call $~lib/rt/pure/__retain
     return
    end
    local.get $0
    call $assembly/PercentileIterator/PercentileIterator<assembly/packedarray/PackedArray/PackedArray,u64>#incrementSubBucket
    br $while-continue|0
   end
  end
  i32.const 11840
  i32.const 12528
  i32.const 193
  i32.const 5
  call $~lib/builtins/abort
  unreachable
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#outputPercentileDistribution (param $0 i32) (param $1 i32) (param $2 f64) (result i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  (local $15 i32)
  (local $16 i32)
  (local $17 i32)
  (local $18 i32)
  (local $19 i32)
  (local $20 i32)
  (local $21 i32)
  (local $22 i32)
  (local $23 i32)
  (local $24 i32)
  (local $25 i32)
  (local $26 f64)
  (local $27 i32)
  (local $28 i32)
  (local $29 i32)
  (local $30 i32)
  (local $31 i32)
  (local $32 i32)
  (local $33 i32)
  (local $34 i32)
  (local $35 i32)
  (local $36 i32)
  (local $37 i32)
  (local $38 i32)
  (local $39 i32)
  (local $40 i32)
  i32.const 352
  local.set $3
  local.get $3
  i32.const 12384
  call $~lib/string/String.__concat
  local.tee $4
  local.tee $5
  local.get $3
  local.tee $6
  i32.ne
  if
   local.get $5
   call $~lib/rt/pure/__retain
   local.set $5
   local.get $6
   call $~lib/rt/pure/__release
  end
  local.get $5
  local.set $3
  local.get $0
  i32.load offset=96
  call $~lib/rt/pure/__retain
  local.set $5
  local.get $5
  local.get $1
  call $assembly/PercentileIterator/PercentileIterator<assembly/packedarray/PackedArray/PackedArray,u64>#reset
  i32.const 0
  i32.const 12
  local.get $0
  i32.load8_u offset=32
  call $assembly/formatters/FloatFormatter#constructor
  local.set $6
  i32.const 0
  i32.const 2
  i32.const 12
  call $assembly/formatters/FloatFormatter#constructor
  local.set $7
  i32.const 0
  i32.const 10
  call $assembly/formatters/IntegerFormatter#constructor
  local.set $8
  i32.const 0
  i32.const 14
  i32.const 2
  call $assembly/formatters/FloatFormatter#constructor
  local.set $9
  loop $while-continue|0
   local.get $5
   call $assembly/PercentileIterator/PercentileIterator<assembly/packedarray/PackedArray/PackedArray,u64>#hasNext
   local.set $10
   local.get $10
   if
    local.get $5
    call $assembly/PercentileIterator/PercentileIterator<assembly/packedarray/PackedArray/PackedArray,u64>#next
    local.set $11
    local.get $11
    f64.load offset=56
    f64.const 100
    f64.lt
    if
     local.get $3
     local.get $6
     local.get $11
     i64.load
     f64.convert_i64_u
     local.get $2
     f64.div
     call $assembly/formatters/FloatFormatter#format
     local.tee $12
     i32.const 224
     call $~lib/string/String.__concat
     local.tee $13
     local.get $7
     local.get $11
     f64.load offset=56
     f64.const 100
     f64.div
     call $assembly/formatters/FloatFormatter#format
     local.tee $14
     call $~lib/string/String.__concat
     local.tee $15
     i32.const 224
     call $~lib/string/String.__concat
     local.tee $16
     local.get $8
     local.get $11
     i64.load offset=32
     call $assembly/formatters/IntegerFormatter#format
     local.tee $17
     call $~lib/string/String.__concat
     local.tee $18
     i32.const 224
     call $~lib/string/String.__concat
     local.tee $19
     local.get $9
     f64.const 1
     f64.const 1
     local.get $11
     f64.load offset=56
     f64.const 100
     f64.div
     f64.sub
     f64.div
     call $assembly/formatters/FloatFormatter#format
     local.tee $20
     call $~lib/string/String.__concat
     local.tee $21
     i32.const 12640
     call $~lib/string/String.__concat
     local.tee $22
     call $~lib/string/String.__concat
     local.tee $23
     local.tee $24
     local.get $3
     local.tee $25
     i32.ne
     if
      local.get $24
      call $~lib/rt/pure/__retain
      local.set $24
      local.get $25
      call $~lib/rt/pure/__release
     end
     local.get $24
     local.set $3
     local.get $12
     call $~lib/rt/pure/__release
     local.get $13
     call $~lib/rt/pure/__release
     local.get $14
     call $~lib/rt/pure/__release
     local.get $15
     call $~lib/rt/pure/__release
     local.get $16
     call $~lib/rt/pure/__release
     local.get $17
     call $~lib/rt/pure/__release
     local.get $18
     call $~lib/rt/pure/__release
     local.get $19
     call $~lib/rt/pure/__release
     local.get $20
     call $~lib/rt/pure/__release
     local.get $21
     call $~lib/rt/pure/__release
     local.get $22
     call $~lib/rt/pure/__release
     local.get $23
     call $~lib/rt/pure/__release
    else
     local.get $3
     local.get $6
     local.get $11
     i64.load
     f64.convert_i64_u
     local.get $2
     f64.div
     call $assembly/formatters/FloatFormatter#format
     local.tee $23
     i32.const 224
     call $~lib/string/String.__concat
     local.tee $22
     local.get $7
     local.get $11
     f64.load offset=56
     f64.const 100
     f64.div
     call $assembly/formatters/FloatFormatter#format
     local.tee $21
     call $~lib/string/String.__concat
     local.tee $20
     i32.const 224
     call $~lib/string/String.__concat
     local.tee $19
     local.get $8
     local.get $11
     i64.load offset=32
     call $assembly/formatters/IntegerFormatter#format
     local.tee $18
     call $~lib/string/String.__concat
     local.tee $17
     i32.const 12640
     call $~lib/string/String.__concat
     local.tee $16
     call $~lib/string/String.__concat
     local.tee $15
     local.tee $25
     local.get $3
     local.tee $14
     i32.ne
     if
      local.get $25
      call $~lib/rt/pure/__retain
      local.set $25
      local.get $14
      call $~lib/rt/pure/__release
     end
     local.get $25
     local.set $3
     local.get $23
     call $~lib/rt/pure/__release
     local.get $22
     call $~lib/rt/pure/__release
     local.get $21
     call $~lib/rt/pure/__release
     local.get $20
     call $~lib/rt/pure/__release
     local.get $19
     call $~lib/rt/pure/__release
     local.get $18
     call $~lib/rt/pure/__release
     local.get $17
     call $~lib/rt/pure/__release
     local.get $16
     call $~lib/rt/pure/__release
     local.get $15
     call $~lib/rt/pure/__release
    end
    local.get $11
    call $~lib/rt/pure/__release
    br $while-continue|0
   end
  end
  i32.const 0
  i32.const 12
  local.get $0
  i32.load8_u offset=32
  call $assembly/formatters/FloatFormatter#constructor
  local.set $10
  local.get $0
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getMean
  local.set $26
  local.get $10
  local.get $26
  local.get $2
  f64.div
  call $assembly/formatters/FloatFormatter#format
  local.set $15
  local.get $10
  local.get $0
  local.get $26
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#computeStdDeviation
  local.get $2
  f64.div
  call $assembly/formatters/FloatFormatter#format
  local.set $16
  local.get $10
  local.get $0
  i64.load offset=144
  f64.convert_i64_u
  local.get $2
  f64.div
  call $assembly/formatters/FloatFormatter#format
  local.set $17
  i32.const 0
  i32.const 12
  call $assembly/formatters/IntegerFormatter#constructor
  local.set $18
  local.get $18
  local.get $0
  i64.load offset=168
  call $assembly/formatters/IntegerFormatter#format
  local.set $19
  local.get $18
  local.get $0
  i64.load offset=40
  call $assembly/formatters/IntegerFormatter#format
  local.set $20
  local.get $18
  local.get $0
  i32.load offset=48
  i64.extend_i32_s
  call $assembly/formatters/IntegerFormatter#format
  local.set $21
  local.get $3
  i32.const 12672
  local.get $15
  call $~lib/string/String#toString
  local.tee $22
  call $~lib/string/String.__concat
  local.tee $23
  i32.const 12720
  call $~lib/string/String.__concat
  local.tee $25
  local.get $16
  call $~lib/string/String#toString
  local.tee $14
  call $~lib/string/String.__concat
  local.tee $13
  i32.const 12784
  call $~lib/string/String.__concat
  local.tee $12
  local.get $17
  call $~lib/string/String#toString
  local.tee $24
  call $~lib/string/String.__concat
  local.tee $27
  i32.const 12832
  call $~lib/string/String.__concat
  local.tee $28
  local.get $19
  call $~lib/string/String#toString
  local.tee $29
  call $~lib/string/String.__concat
  local.tee $30
  i32.const 12896
  call $~lib/string/String.__concat
  local.tee $31
  local.get $20
  call $~lib/string/String#toString
  local.tee $32
  call $~lib/string/String.__concat
  local.tee $33
  i32.const 12944
  call $~lib/string/String.__concat
  local.tee $34
  local.get $21
  call $~lib/string/String#toString
  local.tee $35
  call $~lib/string/String.__concat
  local.tee $36
  i32.const 13008
  call $~lib/string/String.__concat
  local.tee $37
  call $~lib/string/String.__concat
  local.tee $38
  local.tee $39
  local.get $3
  local.tee $40
  i32.ne
  if
   local.get $39
   call $~lib/rt/pure/__retain
   local.set $39
   local.get $40
   call $~lib/rt/pure/__release
  end
  local.get $39
  local.set $3
  local.get $3
  local.set $39
  local.get $4
  call $~lib/rt/pure/__release
  local.get $5
  call $~lib/rt/pure/__release
  local.get $6
  call $~lib/rt/pure/__release
  local.get $7
  call $~lib/rt/pure/__release
  local.get $8
  call $~lib/rt/pure/__release
  local.get $9
  call $~lib/rt/pure/__release
  local.get $10
  call $~lib/rt/pure/__release
  local.get $15
  call $~lib/rt/pure/__release
  local.get $16
  call $~lib/rt/pure/__release
  local.get $17
  call $~lib/rt/pure/__release
  local.get $18
  call $~lib/rt/pure/__release
  local.get $19
  call $~lib/rt/pure/__release
  local.get $20
  call $~lib/rt/pure/__release
  local.get $21
  call $~lib/rt/pure/__release
  local.get $22
  call $~lib/rt/pure/__release
  local.get $23
  call $~lib/rt/pure/__release
  local.get $25
  call $~lib/rt/pure/__release
  local.get $14
  call $~lib/rt/pure/__release
  local.get $13
  call $~lib/rt/pure/__release
  local.get $12
  call $~lib/rt/pure/__release
  local.get $24
  call $~lib/rt/pure/__release
  local.get $27
  call $~lib/rt/pure/__release
  local.get $28
  call $~lib/rt/pure/__release
  local.get $29
  call $~lib/rt/pure/__release
  local.get $30
  call $~lib/rt/pure/__release
  local.get $31
  call $~lib/rt/pure/__release
  local.get $32
  call $~lib/rt/pure/__release
  local.get $33
  call $~lib/rt/pure/__release
  local.get $34
  call $~lib/rt/pure/__release
  local.get $35
  call $~lib/rt/pure/__release
  local.get $36
  call $~lib/rt/pure/__release
  local.get $37
  call $~lib/rt/pure/__release
  local.get $38
  call $~lib/rt/pure/__release
  local.get $39
 )
 (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#outputPercentileDistribution (param $0 i32) (param $1 f64) (param $2 f64) (result i32)
  local.get $0
  i32.load
  local.get $1
  i32.trunc_f64_s
  local.get $2
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#outputPercentileDistribution
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#recordValueWithCountAndExpectedInterval (param $0 i32) (param $1 i64) (param $2 i64) (param $3 i64)
  (local $4 i64)
  (local $5 i32)
  local.get $0
  local.get $2
  local.get $1
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#recordCountAtValue
  local.get $3
  i64.const 0
  i64.le_u
  if (result i32)
   i32.const 1
  else
   local.get $1
   local.get $3
   i64.le_u
  end
  if
   return
  end
  local.get $1
  local.get $3
  i64.sub
  local.set $4
  loop $for-loop|0
   local.get $4
   local.get $3
   i64.ge_u
   local.set $5
   local.get $5
   if
    local.get $0
    local.get $2
    local.get $4
    call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#recordCountAtValue
    local.get $4
    local.get $3
    i64.sub
    local.set $4
    br $for-loop|0
   end
  end
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#addWhileCorrectingForCoordinatedOmission (param $0 i32) (param $1 i32) (param $2 i64)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  call $~lib/rt/pure/__retain
  local.set $3
  i32.const 0
  local.get $1
  call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/packedarray/PackedArray/PackedArray,u64>#constructor
  local.set $4
  loop $while-continue|0
   local.get $4
   call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/packedarray/PackedArray/PackedArray,u64>#hasNext
   local.set $5
   local.get $5
   if
    local.get $4
    call $assembly/RecordedValuesIterator/RecordedValuesIterator<assembly/packedarray/PackedArray/PackedArray,u64>#next
    local.set $6
    local.get $3
    local.get $6
    i64.load
    local.get $6
    i64.load offset=16
    local.get $2
    call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#recordValueWithCountAndExpectedInterval
    local.get $6
    call $~lib/rt/pure/__release
    br $while-continue|0
   end
  end
  local.get $3
  call $~lib/rt/pure/__release
  local.get $4
  call $~lib/rt/pure/__release
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#copyCorrectedForCoordinatedOmission (param $0 i32) (param $1 i64) (result i32)
  (local $2 i32)
  i32.const 0
  local.get $0
  i64.load offset=24
  local.get $0
  i64.load offset=16
  local.get $0
  i32.load8_u offset=32
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#constructor
  local.set $2
  local.get $2
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#addWhileCorrectingForCoordinatedOmission
  local.get $2
 )
 (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#copyCorrectedForCoordinatedOmission (param $0 i32) (param $1 f64) (result i32)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  i32.load
  local.get $1
  i64.trunc_f64_u
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#copyCorrectedForCoordinatedOmission
  local.set $2
  i32.const 0
  f64.const 0
  f64.const 0
  f64.const 0
  i32.const 0
  local.get $2
  call $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#constructor
  local.set $3
  local.get $2
  call $~lib/rt/pure/__release
  local.get $3
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#add<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i64)
  (local $4 i32)
  (local $5 i32)
  (local $6 i64)
  (local $7 i64)
  (local $8 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $0
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#valueFromIndex
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#highestEquivalentValue
  local.set $2
  local.get $2
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 13040
    i32.const 8992
    i32.const 639
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   i64.const 0
   local.set $3
   i32.const 0
   local.set $4
   loop $for-loop|0
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtIndex
     local.set $6
     local.get $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $4
      local.get $6
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#addToCountAtIndex
      local.get $3
      local.get $6
      i64.add
      local.set $3
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $3
   i64.add
   i64.store offset=168
   local.get $0
   local.get $0
   i64.load offset=144
   local.tee $6
   local.get $1
   i64.load offset=144
   local.tee $7
   local.get $6
   local.get $7
   i64.gt_u
   select
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#updatedMaxValue
   local.get $0
   local.get $0
   i64.load offset=152
   local.tee $6
   local.get $1
   i64.load offset=152
   local.tee $7
   local.get $6
   local.get $7
   i64.lt_u
   select
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#updateMinNonZeroValue
  else
   local.get $1
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#countsArrayIndex
   local.set $4
   local.get $1
   local.get $4
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtIndex
   local.set $3
   local.get $0
   local.get $3
   local.get $1
   local.get $4
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#valueFromIndex
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#recordCountAtValue
   i32.const 0
   local.set $5
   loop $for-loop|1
    local.get $5
    local.get $4
    i32.lt_s
    local.set $8
    local.get $8
    if
     local.get $1
     local.get $5
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtIndex
     local.set $3
     local.get $3
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $3
      local.get $1
      local.get $5
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#valueFromIndex
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#recordCountAtValue
     end
     local.get $5
     i32.const 1
     i32.add
     local.set $5
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=64
  local.tee $3
  local.get $1
  i64.load offset=64
  local.tee $6
  local.get $3
  local.get $6
  i64.lt_u
  select
  i64.store offset=64
  local.get $0
  local.get $0
  i64.load offset=72
  local.tee $3
  local.get $1
  i64.load offset=72
  local.tee $6
  local.get $3
  local.get $6
  i64.gt_u
  select
  i64.store offset=72
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#addHistogram8 (param $0 i32) (param $1 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#add<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#add<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i64)
  (local $4 i32)
  (local $5 i32)
  (local $6 i64)
  (local $7 i64)
  (local $8 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $0
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#valueFromIndex
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#highestEquivalentValue
  local.set $2
  local.get $2
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 13040
    i32.const 8992
    i32.const 639
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   i64.const 0
   local.set $3
   i32.const 0
   local.set $4
   loop $for-loop|0
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtIndex
     local.set $6
     local.get $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $4
      local.get $6
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#addToCountAtIndex
      local.get $3
      local.get $6
      i64.add
      local.set $3
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $3
   i64.add
   i64.store offset=168
   local.get $0
   local.get $0
   i64.load offset=144
   local.tee $6
   local.get $1
   i64.load offset=144
   local.tee $7
   local.get $6
   local.get $7
   i64.gt_u
   select
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#updatedMaxValue
   local.get $0
   local.get $0
   i64.load offset=152
   local.tee $6
   local.get $1
   i64.load offset=152
   local.tee $7
   local.get $6
   local.get $7
   i64.lt_u
   select
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#updateMinNonZeroValue
  else
   local.get $1
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#countsArrayIndex
   local.set $4
   local.get $1
   local.get $4
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtIndex
   local.set $3
   local.get $0
   local.get $3
   local.get $1
   local.get $4
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#valueFromIndex
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#recordCountAtValue
   i32.const 0
   local.set $5
   loop $for-loop|1
    local.get $5
    local.get $4
    i32.lt_s
    local.set $8
    local.get $8
    if
     local.get $1
     local.get $5
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtIndex
     local.set $3
     local.get $3
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $3
      local.get $1
      local.get $5
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#valueFromIndex
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#recordCountAtValue
     end
     local.get $5
     i32.const 1
     i32.add
     local.set $5
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=64
  local.tee $3
  local.get $1
  i64.load offset=64
  local.tee $6
  local.get $3
  local.get $6
  i64.lt_u
  select
  i64.store offset=64
  local.get $0
  local.get $0
  i64.load offset=72
  local.tee $3
  local.get $1
  i64.load offset=72
  local.tee $6
  local.get $3
  local.get $6
  i64.gt_u
  select
  i64.store offset=72
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#addHistogram16 (param $0 i32) (param $1 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#add<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#add<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i64)
  (local $4 i32)
  (local $5 i32)
  (local $6 i64)
  (local $7 i64)
  (local $8 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $0
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#valueFromIndex
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#highestEquivalentValue
  local.set $2
  local.get $2
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 13040
    i32.const 8992
    i32.const 639
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   i64.const 0
   local.set $3
   i32.const 0
   local.set $4
   loop $for-loop|0
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtIndex
     local.set $6
     local.get $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $4
      local.get $6
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#addToCountAtIndex
      local.get $3
      local.get $6
      i64.add
      local.set $3
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $3
   i64.add
   i64.store offset=168
   local.get $0
   local.get $0
   i64.load offset=144
   local.tee $6
   local.get $1
   i64.load offset=144
   local.tee $7
   local.get $6
   local.get $7
   i64.gt_u
   select
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#updatedMaxValue
   local.get $0
   local.get $0
   i64.load offset=152
   local.tee $6
   local.get $1
   i64.load offset=152
   local.tee $7
   local.get $6
   local.get $7
   i64.lt_u
   select
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#updateMinNonZeroValue
  else
   local.get $1
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#countsArrayIndex
   local.set $4
   local.get $1
   local.get $4
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtIndex
   local.set $3
   local.get $0
   local.get $3
   local.get $1
   local.get $4
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#valueFromIndex
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#recordCountAtValue
   i32.const 0
   local.set $5
   loop $for-loop|1
    local.get $5
    local.get $4
    i32.lt_s
    local.set $8
    local.get $8
    if
     local.get $1
     local.get $5
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtIndex
     local.set $3
     local.get $3
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $3
      local.get $1
      local.get $5
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#valueFromIndex
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#recordCountAtValue
     end
     local.get $5
     i32.const 1
     i32.add
     local.set $5
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=64
  local.tee $3
  local.get $1
  i64.load offset=64
  local.tee $6
  local.get $3
  local.get $6
  i64.lt_u
  select
  i64.store offset=64
  local.get $0
  local.get $0
  i64.load offset=72
  local.tee $3
  local.get $1
  i64.load offset=72
  local.tee $6
  local.get $3
  local.get $6
  i64.gt_u
  select
  i64.store offset=72
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#addHistogram32 (param $0 i32) (param $1 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#add<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#add<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i64)
  (local $4 i32)
  (local $5 i32)
  (local $6 i64)
  (local $7 i64)
  (local $8 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $0
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#valueFromIndex
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#highestEquivalentValue
  local.set $2
  local.get $2
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 13040
    i32.const 8992
    i32.const 639
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   i64.const 0
   local.set $3
   i32.const 0
   local.set $4
   loop $for-loop|0
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtIndex
     local.set $6
     local.get $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $4
      local.get $6
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#addToCountAtIndex
      local.get $3
      local.get $6
      i64.add
      local.set $3
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $3
   i64.add
   i64.store offset=168
   local.get $0
   local.get $0
   i64.load offset=144
   local.tee $6
   local.get $1
   i64.load offset=144
   local.tee $7
   local.get $6
   local.get $7
   i64.gt_u
   select
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#updatedMaxValue
   local.get $0
   local.get $0
   i64.load offset=152
   local.tee $6
   local.get $1
   i64.load offset=152
   local.tee $7
   local.get $6
   local.get $7
   i64.lt_u
   select
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#updateMinNonZeroValue
  else
   local.get $1
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#countsArrayIndex
   local.set $4
   local.get $1
   local.get $4
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtIndex
   local.set $3
   local.get $0
   local.get $3
   local.get $1
   local.get $4
   call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#valueFromIndex
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#recordCountAtValue
   i32.const 0
   local.set $5
   loop $for-loop|1
    local.get $5
    local.get $4
    i32.lt_s
    local.set $8
    local.get $8
    if
     local.get $1
     local.get $5
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtIndex
     local.set $3
     local.get $3
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $3
      local.get $1
      local.get $5
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#valueFromIndex
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#recordCountAtValue
     end
     local.get $5
     i32.const 1
     i32.add
     local.set $5
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=64
  local.tee $3
  local.get $1
  i64.load offset=64
  local.tee $6
  local.get $3
  local.get $6
  i64.lt_u
  select
  i64.store offset=64
  local.get $0
  local.get $0
  i64.load offset=72
  local.tee $3
  local.get $1
  i64.load offset=72
  local.tee $6
  local.get $3
  local.get $6
  i64.gt_u
  select
  i64.store offset=72
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#addHistogram64 (param $0 i32) (param $1 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#add<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#add<assembly/packedarray/PackedArray/PackedArray,u64> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i64)
  (local $4 i32)
  (local $5 i32)
  (local $6 i64)
  (local $7 i64)
  (local $8 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $0
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#valueFromIndex
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#highestEquivalentValue
  local.set $2
  local.get $2
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 13040
    i32.const 8992
    i32.const 639
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   i64.const 0
   local.set $3
   i32.const 0
   local.set $4
   loop $for-loop|0
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtIndex
     local.set $6
     local.get $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $4
      local.get $6
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#addToCountAtIndex
      local.get $3
      local.get $6
      i64.add
      local.set $3
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $3
   i64.add
   i64.store offset=168
   local.get $0
   local.get $0
   i64.load offset=144
   local.tee $6
   local.get $1
   i64.load offset=144
   local.tee $7
   local.get $6
   local.get $7
   i64.gt_u
   select
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#updatedMaxValue
   local.get $0
   local.get $0
   i64.load offset=152
   local.tee $6
   local.get $1
   i64.load offset=152
   local.tee $7
   local.get $6
   local.get $7
   i64.lt_u
   select
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#updateMinNonZeroValue
  else
   local.get $1
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#countsArrayIndex
   local.set $4
   local.get $1
   local.get $4
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtIndex
   local.set $3
   local.get $0
   local.get $3
   local.get $1
   local.get $4
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#valueFromIndex
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#recordCountAtValue
   i32.const 0
   local.set $5
   loop $for-loop|1
    local.get $5
    local.get $4
    i32.lt_s
    local.set $8
    local.get $8
    if
     local.get $1
     local.get $5
     call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtIndex
     local.set $3
     local.get $3
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $3
      local.get $1
      local.get $5
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#valueFromIndex
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#recordCountAtValue
     end
     local.get $5
     i32.const 1
     i32.add
     local.set $5
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=64
  local.tee $3
  local.get $1
  i64.load offset=64
  local.tee $6
  local.get $3
  local.get $6
  i64.lt_u
  select
  i64.store offset=64
  local.get $0
  local.get $0
  i64.load offset=72
  local.tee $3
  local.get $1
  i64.load offset=72
  local.tee $6
  local.get $3
  local.get $6
  i64.gt_u
  select
  i64.store offset=72
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#addPackedHistogram (param $0 i32) (param $1 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#add<assembly/packedarray/PackedArray/PackedArray,u64>
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtValue (param $0 i32) (param $1 i64) (result i64)
  (local $2 i32)
  (local $3 i32)
  i32.const 0
  local.tee $2
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#countsArrayIndex
  local.tee $3
  local.get $2
  local.get $3
  i32.gt_s
  select
  local.tee $2
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  local.tee $3
  local.get $2
  local.get $3
  i32.lt_s
  select
  local.set $2
  local.get $0
  local.get $2
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtIndex
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#establishInternalTackingValues (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i64)
  (local $5 i32)
  (local $6 i32)
  (local $7 i64)
  local.get $0
  i64.const 0
  i64.store offset=144
  local.get $0
  global.get $~lib/builtins/u64.MAX_VALUE
  i64.store offset=152
  i32.const -1
  local.set $2
  i32.const -1
  local.set $3
  i64.const 0
  local.set $4
  i32.const 0
  local.set $5
  loop $for-loop|0
   local.get $5
   local.get $1
   i32.lt_s
   local.set $6
   local.get $6
   if
    local.get $0
    local.get $5
    call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtIndex
    local.set $7
    local.get $7
    i64.const 0
    i64.gt_u
    if
     local.get $4
     local.get $7
     i64.add
     local.set $4
     local.get $5
     local.set $2
     local.get $3
     i32.const -1
     i32.eq
     if (result i32)
      local.get $5
      i32.const 0
      i32.ne
     else
      i32.const 0
     end
     if
      local.get $5
      local.set $3
     end
    end
    local.get $5
    i32.const 1
    i32.add
    local.set $5
    br $for-loop|0
   end
  end
  local.get $2
  i32.const 0
  i32.ge_s
  if
   local.get $0
   local.get $0
   local.get $0
   local.get $2
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#valueFromIndex
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#highestEquivalentValue
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#updatedMaxValue
  end
  local.get $3
  i32.const 0
  i32.ge_s
  if
   local.get $0
   local.get $0
   local.get $3
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#valueFromIndex
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#updateMinNonZeroValue
  end
  local.get $0
  local.get $4
  i64.store offset=168
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#establishInternalTackingValues@varargs (param $0 i32) (param $1 i32)
  block $1of1
   block $0of1
    block $outOfRange
     global.get $~argumentsLength
     br_table $0of1 $1of1 $outOfRange
    end
    unreachable
   end
   local.get $0
   i32.load offset=52
   local.set $1
  end
  local.get $0
  local.get $1
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#establishInternalTackingValues
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i64)
  (local $4 i32)
  (local $5 i32)
  (local $6 i64)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  (local $15 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#valueFromIndex
  local.set $2
  local.get $2
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 13040
    i32.const 8992
    i32.const 748
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   i64.const 0
   local.set $3
   i32.const 0
   local.set $4
   loop $for-loop|0
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtIndex
     local.set $6
     local.get $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $4
      i64.const 0
      local.get $6
      i64.sub
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#addToCountAtIndex
      local.get $3
      local.get $6
      i64.add
      local.set $3
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $3
   i64.sub
   i64.store offset=168
  else
   i32.const 0
   local.set $4
   loop $for-loop|1
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#getCountAtIndex
     local.set $3
     local.get $3
     i64.const 0
     i64.gt_u
     if
      local.get $1
      local.get $4
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#valueFromIndex
      local.set $6
      local.get $0
      local.get $6
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtValue
      local.get $3
      i64.lt_u
      if
       i32.const 13648
       local.get $3
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $7
       call $~lib/string/String.__concat
       local.tee $8
       i32.const 13712
       call $~lib/string/String.__concat
       local.tee $9
       local.get $6
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $10
       call $~lib/string/String.__concat
       local.tee $11
       i32.const 13760
       call $~lib/string/String.__concat
       local.tee $12
       local.get $0
       local.get $6
       call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtValue
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $13
       call $~lib/string/String.__concat
       local.tee $14
       i32.const 13840
       call $~lib/string/String.__concat
       local.tee $15
       i32.const 8992
       i32.const 777
       i32.const 13
       call $~lib/builtins/abort
       unreachable
      end
      local.get $0
      i64.const 0
      local.get $3
      i64.sub
      local.get $6
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#recordCountAtValue
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=144
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtValue
  i64.const 0
  i64.le_u
  if (result i32)
   i32.const 1
  else
   local.get $0
   local.get $0
   i64.load offset=152
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtValue
   i64.const 0
   i64.le_u
  end
  if
   local.get $0
   i32.const 0
   global.set $~argumentsLength
   i32.const 0
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#establishInternalTackingValues@varargs
  end
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#subtractHistogram8 (param $0 i32) (param $1 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i64)
  (local $4 i32)
  (local $5 i32)
  (local $6 i64)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  (local $15 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#valueFromIndex
  local.set $2
  local.get $2
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 13040
    i32.const 8992
    i32.const 748
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   i64.const 0
   local.set $3
   i32.const 0
   local.set $4
   loop $for-loop|0
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtIndex
     local.set $6
     local.get $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $4
      i64.const 0
      local.get $6
      i64.sub
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#addToCountAtIndex
      local.get $3
      local.get $6
      i64.add
      local.set $3
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $3
   i64.sub
   i64.store offset=168
  else
   i32.const 0
   local.set $4
   loop $for-loop|1
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#getCountAtIndex
     local.set $3
     local.get $3
     i64.const 0
     i64.gt_u
     if
      local.get $1
      local.get $4
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#valueFromIndex
      local.set $6
      local.get $0
      local.get $6
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtValue
      local.get $3
      i64.lt_u
      if
       i32.const 13648
       local.get $3
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $7
       call $~lib/string/String.__concat
       local.tee $8
       i32.const 13712
       call $~lib/string/String.__concat
       local.tee $9
       local.get $6
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $10
       call $~lib/string/String.__concat
       local.tee $11
       i32.const 13760
       call $~lib/string/String.__concat
       local.tee $12
       local.get $0
       local.get $6
       call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtValue
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $13
       call $~lib/string/String.__concat
       local.tee $14
       i32.const 13840
       call $~lib/string/String.__concat
       local.tee $15
       i32.const 8992
       i32.const 777
       i32.const 13
       call $~lib/builtins/abort
       unreachable
      end
      local.get $0
      i64.const 0
      local.get $3
      i64.sub
      local.get $6
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#recordCountAtValue
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=144
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtValue
  i64.const 0
  i64.le_u
  if (result i32)
   i32.const 1
  else
   local.get $0
   local.get $0
   i64.load offset=152
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtValue
   i64.const 0
   i64.le_u
  end
  if
   local.get $0
   i32.const 0
   global.set $~argumentsLength
   i32.const 0
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#establishInternalTackingValues@varargs
  end
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#subtractHistogram16 (param $0 i32) (param $1 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i64)
  (local $4 i32)
  (local $5 i32)
  (local $6 i64)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  (local $15 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#valueFromIndex
  local.set $2
  local.get $2
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 13040
    i32.const 8992
    i32.const 748
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   i64.const 0
   local.set $3
   i32.const 0
   local.set $4
   loop $for-loop|0
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtIndex
     local.set $6
     local.get $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $4
      i64.const 0
      local.get $6
      i64.sub
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#addToCountAtIndex
      local.get $3
      local.get $6
      i64.add
      local.set $3
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $3
   i64.sub
   i64.store offset=168
  else
   i32.const 0
   local.set $4
   loop $for-loop|1
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#getCountAtIndex
     local.set $3
     local.get $3
     i64.const 0
     i64.gt_u
     if
      local.get $1
      local.get $4
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#valueFromIndex
      local.set $6
      local.get $0
      local.get $6
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtValue
      local.get $3
      i64.lt_u
      if
       i32.const 13648
       local.get $3
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $7
       call $~lib/string/String.__concat
       local.tee $8
       i32.const 13712
       call $~lib/string/String.__concat
       local.tee $9
       local.get $6
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $10
       call $~lib/string/String.__concat
       local.tee $11
       i32.const 13760
       call $~lib/string/String.__concat
       local.tee $12
       local.get $0
       local.get $6
       call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtValue
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $13
       call $~lib/string/String.__concat
       local.tee $14
       i32.const 13840
       call $~lib/string/String.__concat
       local.tee $15
       i32.const 8992
       i32.const 777
       i32.const 13
       call $~lib/builtins/abort
       unreachable
      end
      local.get $0
      i64.const 0
      local.get $3
      i64.sub
      local.get $6
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#recordCountAtValue
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=144
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtValue
  i64.const 0
  i64.le_u
  if (result i32)
   i32.const 1
  else
   local.get $0
   local.get $0
   i64.load offset=152
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtValue
   i64.const 0
   i64.le_u
  end
  if
   local.get $0
   i32.const 0
   global.set $~argumentsLength
   i32.const 0
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#establishInternalTackingValues@varargs
  end
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#subtractHistogram32 (param $0 i32) (param $1 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i64)
  (local $4 i32)
  (local $5 i32)
  (local $6 i64)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  (local $15 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#valueFromIndex
  local.set $2
  local.get $2
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 13040
    i32.const 8992
    i32.const 748
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   i64.const 0
   local.set $3
   i32.const 0
   local.set $4
   loop $for-loop|0
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtIndex
     local.set $6
     local.get $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $4
      i64.const 0
      local.get $6
      i64.sub
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#addToCountAtIndex
      local.get $3
      local.get $6
      i64.add
      local.set $3
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $3
   i64.sub
   i64.store offset=168
  else
   i32.const 0
   local.set $4
   loop $for-loop|1
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#getCountAtIndex
     local.set $3
     local.get $3
     i64.const 0
     i64.gt_u
     if
      local.get $1
      local.get $4
      call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#valueFromIndex
      local.set $6
      local.get $0
      local.get $6
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtValue
      local.get $3
      i64.lt_u
      if
       i32.const 13648
       local.get $3
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $7
       call $~lib/string/String.__concat
       local.tee $8
       i32.const 13712
       call $~lib/string/String.__concat
       local.tee $9
       local.get $6
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $10
       call $~lib/string/String.__concat
       local.tee $11
       i32.const 13760
       call $~lib/string/String.__concat
       local.tee $12
       local.get $0
       local.get $6
       call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtValue
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $13
       call $~lib/string/String.__concat
       local.tee $14
       i32.const 13840
       call $~lib/string/String.__concat
       local.tee $15
       i32.const 8992
       i32.const 777
       i32.const 13
       call $~lib/builtins/abort
       unreachable
      end
      local.get $0
      i64.const 0
      local.get $3
      i64.sub
      local.get $6
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#recordCountAtValue
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=144
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtValue
  i64.const 0
  i64.le_u
  if (result i32)
   i32.const 1
  else
   local.get $0
   local.get $0
   i64.load offset=152
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtValue
   i64.const 0
   i64.le_u
  end
  if
   local.get $0
   i32.const 0
   global.set $~argumentsLength
   i32.const 0
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#establishInternalTackingValues@varargs
  end
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#subtractHistogram64 (param $0 i32) (param $1 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#subtract<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#subtract<assembly/packedarray/PackedArray/PackedArray,u64> (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i64)
  (local $4 i32)
  (local $5 i32)
  (local $6 i64)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  (local $15 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $0
  i32.load offset=52
  i32.const 1
  i32.sub
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#valueFromIndex
  local.set $2
  local.get $2
  local.get $1
  i64.load offset=144
  i64.lt_u
  if
   local.get $0
   i32.load8_u offset=8
   i32.eqz
   if
    i32.const 13040
    i32.const 8992
    i32.const 748
    i32.const 9
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i64.load offset=144
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#resize
  end
  local.get $0
  i64.load offset=40
  local.get $1
  i64.load offset=40
  i64.eq
  if (result i32)
   local.get $0
   i32.load offset=48
   local.get $1
   i32.load offset=48
   i32.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load offset=112
   local.get $1
   i32.load offset=112
   i32.eq
  else
   i32.const 0
  end
  if
   i64.const 0
   local.set $3
   i32.const 0
   local.set $4
   loop $for-loop|0
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtIndex
     local.set $6
     local.get $6
     i64.const 0
     i64.gt_u
     if
      local.get $0
      local.get $4
      i64.const 0
      local.get $6
      i64.sub
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#addToCountAtIndex
      local.get $3
      local.get $6
      i64.add
      local.set $3
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|0
    end
   end
   local.get $0
   local.get $0
   i64.load offset=168
   local.get $3
   i64.sub
   i64.store offset=168
  else
   i32.const 0
   local.set $4
   loop $for-loop|1
    local.get $4
    local.get $1
    i32.load offset=52
    i32.lt_s
    local.set $5
    local.get $5
    if
     local.get $1
     local.get $4
     call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtIndex
     local.set $3
     local.get $3
     i64.const 0
     i64.gt_u
     if
      local.get $1
      local.get $4
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#valueFromIndex
      local.set $6
      local.get $0
      local.get $6
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtValue
      local.get $3
      i64.lt_u
      if
       i32.const 13648
       local.get $3
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $7
       call $~lib/string/String.__concat
       local.tee $8
       i32.const 13712
       call $~lib/string/String.__concat
       local.tee $9
       local.get $6
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $10
       call $~lib/string/String.__concat
       local.tee $11
       i32.const 13760
       call $~lib/string/String.__concat
       local.tee $12
       local.get $0
       local.get $6
       call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtValue
       i32.const 10
       call $~lib/number/U64#toString
       local.tee $13
       call $~lib/string/String.__concat
       local.tee $14
       i32.const 13840
       call $~lib/string/String.__concat
       local.tee $15
       i32.const 8992
       i32.const 777
       i32.const 13
       call $~lib/builtins/abort
       unreachable
      end
      local.get $0
      i64.const 0
      local.get $3
      i64.sub
      local.get $6
      call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#recordCountAtValue
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|1
    end
   end
  end
  local.get $0
  local.get $0
  i64.load offset=144
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtValue
  i64.const 0
  i64.le_u
  if (result i32)
   i32.const 1
  else
   local.get $0
   local.get $0
   i64.load offset=152
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtValue
   i64.const 0
   i64.le_u
  end
  if
   local.get $0
   i32.const 0
   global.set $~argumentsLength
   i32.const 0
   call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#establishInternalTackingValues@varargs
  end
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#subtractPackedHistogram (param $0 i32) (param $1 i32)
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  i32.load
  local.get $1
  i32.load
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#subtract<assembly/packedarray/PackedArray/PackedArray,u64>
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/encoding/fillBufferFromCountsArray<assembly/packedarray/PackedArray/PackedArray,u64> (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i64)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  (local $15 i32)
  (local $16 i32)
  (local $17 i32)
  local.get $0
  call $~lib/rt/pure/__retain
  local.set $0
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $0
  local.get $0
  i64.load offset=144
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#countsArrayIndex
  i32.const 1
  i32.add
  local.set $2
  i32.const 0
  local.set $3
  loop $while-continue|0
   local.get $3
   local.get $2
   i32.lt_s
   local.set $4
   local.get $4
   if
    local.get $0
    local.get $3
    local.tee $5
    i32.const 1
    i32.add
    local.set $3
    local.get $5
    call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtIndex
    local.set $6
    local.get $6
    i64.const 0
    i64.lt_u
    if
     i32.const 13872
     local.get $6
     i32.const 10
     call $~lib/number/U64#toString
     local.tee $5
     call $~lib/string/String.__concat
     local.tee $7
     i32.const 14000
     call $~lib/string/String.__concat
     local.tee $8
     local.get $3
     i32.const 10
     call $~lib/number/I32#toString
     local.tee $9
     call $~lib/string/String.__concat
     local.tee $10
     i32.const 14048
     call $~lib/string/String.__concat
     local.tee $11
     local.get $0
     local.get $0
     local.get $3
     call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#valueFromIndex
     call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#lowestEquivalentValue
     i32.const 10
     call $~lib/number/U64#toString
     local.tee $12
     call $~lib/string/String.__concat
     local.tee $13
     i32.const 14144
     call $~lib/string/String.__concat
     local.tee $14
     local.get $0
     local.get $0
     local.get $3
     call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#valueFromIndex
     call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#nextNonEquivalentValue
     i32.const 10
     call $~lib/number/U64#toString
     local.tee $15
     call $~lib/string/String.__concat
     local.tee $16
     i32.const 13840
     call $~lib/string/String.__concat
     local.tee $17
     i32.const 14176
     i32.const 31
     i32.const 7
     call $~lib/builtins/abort
     unreachable
    end
    i32.const 0
    local.set $17
    local.get $6
    i64.const 0
    i64.eq
    if
     i32.const 1
     local.set $17
     loop $while-continue|1
      local.get $3
      local.get $2
      i32.lt_s
      if (result i32)
       local.get $0
       local.get $3
       call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#getCountAtIndex
       i64.const 0
       i64.eq
      else
       i32.const 0
      end
      local.set $16
      local.get $16
      if
       local.get $17
       i32.const 1
       i32.add
       local.set $17
       local.get $3
       i32.const 1
       i32.add
       local.set $3
       br $while-continue|1
      end
     end
    end
    local.get $17
    i32.const 1
    i32.gt_s
    if
     local.get $1
     i32.const 0
     local.get $17
     i32.sub
     i64.extend_i32_s
     call $assembly/ZigZagEncoding/ZigZagEncoding.encode
    else
     local.get $1
     local.get $6
     call $assembly/ZigZagEncoding/ZigZagEncoding.encode
    end
    br $while-continue|0
   end
  end
  local.get $0
  call $~lib/rt/pure/__release
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $assembly/encoding/encodeIntoByteBuffer<assembly/packedarray/PackedArray/PackedArray,u64> (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  local.get $0
  call $~lib/rt/pure/__retain
  local.set $0
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $1
  i32.load
  local.set $2
  local.get $1
  global.get $assembly/encoding/encodingCookie
  call $assembly/ByteBuffer/ByteBuffer#putInt32
  local.get $1
  i32.const 0
  call $assembly/ByteBuffer/ByteBuffer#putInt32
  local.get $1
  i32.const 1
  call $assembly/ByteBuffer/ByteBuffer#putInt32
  local.get $1
  local.get $0
  i32.load8_u offset=32
  call $assembly/ByteBuffer/ByteBuffer#putInt32
  local.get $1
  local.get $0
  i64.load offset=24
  call $assembly/ByteBuffer/ByteBuffer#putInt64
  local.get $1
  local.get $0
  i64.load offset=16
  call $assembly/ByteBuffer/ByteBuffer#putInt64
  local.get $1
  i64.const 1
  call $assembly/ByteBuffer/ByteBuffer#putInt64
  local.get $1
  i32.load
  local.set $3
  local.get $0
  local.get $1
  call $assembly/encoding/fillBufferFromCountsArray<assembly/packedarray/PackedArray/PackedArray,u64>
  local.get $1
  i32.load
  local.set $4
  local.get $1
  local.get $2
  i32.const 4
  i32.add
  i32.store
  local.get $1
  local.get $4
  local.get $3
  i32.sub
  call $assembly/ByteBuffer/ByteBuffer#putInt32
  local.get $1
  local.get $4
  i32.store
  local.get $4
  local.get $2
  i32.sub
  local.set $5
  local.get $0
  call $~lib/rt/pure/__release
  local.get $1
  call $~lib/rt/pure/__release
  local.get $5
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#encode (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  i32.const 1024
  call $assembly/ByteBuffer/ByteBuffer.allocate
  local.set $1
  local.get $0
  local.get $1
  call $assembly/encoding/encodeIntoByteBuffer<assembly/packedarray/PackedArray/PackedArray,u64>
  drop
  local.get $1
  i32.load offset=4
  i32.const 0
  local.get $1
  i32.load
  call $~lib/typedarray/Uint8Array#slice
  local.set $2
  local.get $1
  call $~lib/rt/pure/__release
  local.get $2
 )
 (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#encode (param $0 i32) (result i32)
  local.get $0
  i32.load
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#encode
 )
 (func $assembly/packedarray/PackedArrayContext/PackedArrayContext#clear (param $0 i32)
  local.get $0
  i32.load offset=12
  i32.const 0
  i32.const 0
  global.get $~lib/builtins/i32.MAX_VALUE
  call $~lib/typedarray/Uint8Array#fill
  call $~lib/rt/pure/__release
  local.get $0
  local.get $0
  i32.load offset=28
  call $assembly/packedarray/PackedArrayContext/PackedArrayContext#init
 )
 (func $assembly/packedarray/PackedArray/PackedArray#clear (param $0 i32)
  local.get $0
  i32.load
  call $assembly/packedarray/PackedArrayContext/PackedArrayContext#clear
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#clearCounts (param $0 i32)
  local.get $0
  i32.load offset=160
  call $assembly/packedarray/PackedArray/PackedArray#clear
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#reset (param $0 i32)
  local.get $0
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#clearCounts
  local.get $0
  i64.const 0
  i64.store offset=168
  local.get $0
  i64.const 0
  i64.store offset=64
  local.get $0
  i64.const 0
  i64.store offset=72
  local.get $0
  i64.const 0
  i64.store offset=144
  local.get $0
  global.get $~lib/number/U64.MAX_VALUE
  i64.store offset=152
 )
 (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#reset (param $0 i32)
  local.get $0
  i32.load
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#reset
 )
 (func $assembly/ByteBuffer/ByteBuffer#getInt32 (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  i32.load offset=16
  local.get $0
  i32.load offset=4
  local.get $0
  i32.load
  local.get $0
  i32.load
  i32.const 4
  i32.add
  call $~lib/typedarray/Uint8Array#slice
  local.tee $1
  call $~lib/typedarray/Uint8Array#reverse
  local.tee $2
  i32.const 0
  call $~lib/typedarray/Uint8Array#set<~lib/typedarray/Uint8Array>
  local.get $0
  i32.load offset=12
  i32.const 0
  call $~lib/typedarray/Uint32Array#__uget
  local.set $3
  local.get $0
  local.get $0
  i32.load
  i32.const 4
  i32.add
  i32.store
  local.get $3
  local.set $4
  local.get $1
  call $~lib/rt/pure/__release
  local.get $2
  call $~lib/rt/pure/__release
  local.get $4
 )
 (func $assembly/encoding/getCookieBase (param $0 i32) (result i32)
  local.get $0
  i32.const 240
  i32.const -1
  i32.xor
  i32.and
 )
 (func $assembly/encoding/getWordSizeInBytesFromCookie (param $0 i32) (result i32)
  (local $1 i32)
  local.get $0
  call $assembly/encoding/getCookieBase
  global.get $assembly/encoding/V2EncodingCookieBase
  i32.eq
  if (result i32)
   i32.const 1
  else
   local.get $0
   call $assembly/encoding/getCookieBase
   global.get $assembly/encoding/V2CompressedEncodingCookieBase
   i32.eq
  end
  if
   global.get $assembly/encoding/V2maxWordSizeInBytes
   return
  end
  local.get $0
  i32.const 240
  i32.and
  i32.const 4
  i32.shr_u
  local.set $1
  local.get $1
  i32.const 14
  i32.and
 )
 (func $assembly/ByteBuffer/ByteBuffer#getInt64 (param $0 i32) (result i64)
  (local $1 i32)
  (local $2 i32)
  (local $3 i64)
  (local $4 i64)
  local.get $0
  i32.load offset=20
  local.get $0
  i32.load offset=4
  local.get $0
  i32.load
  local.get $0
  i32.load
  i32.const 8
  i32.add
  call $~lib/typedarray/Uint8Array#slice
  local.tee $1
  call $~lib/typedarray/Uint8Array#reverse
  local.tee $2
  i32.const 0
  call $~lib/typedarray/Uint8Array#set<~lib/typedarray/Uint8Array>
  local.get $0
  i32.load offset=8
  i32.const 0
  call $~lib/typedarray/Uint64Array#__uget
  local.set $3
  local.get $0
  local.get $0
  i32.load
  i32.const 8
  i32.add
  i32.store
  local.get $3
  local.set $4
  local.get $1
  call $~lib/rt/pure/__release
  local.get $2
  call $~lib/rt/pure/__release
  local.get $4
 )
 (func $assembly/ByteBuffer/ByteBuffer#get (param $0 i32) (result i32)
  (local $1 i32)
  local.get $0
  i32.load offset=4
  local.get $0
  i32.load
  call $~lib/typedarray/Uint8Array#__uget
  local.set $1
  local.get $0
  local.get $0
  i32.load
  i32.const 1
  i32.add
  i32.store
  local.get $1
 )
 (func $assembly/ZigZagEncoding/ZigZagEncoding.decode (param $0 i32) (result i64)
  (local $1 i64)
  (local $2 i64)
  (local $3 i64)
  local.get $0
  call $~lib/rt/pure/__retain
  local.set $0
  local.get $0
  call $assembly/ByteBuffer/ByteBuffer#get
  i64.extend_i32_u
  local.set $1
  local.get $1
  i64.const 127
  i64.and
  local.set $2
  local.get $1
  i64.const 128
  i64.and
  i64.const 0
  i64.ne
  if
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#get
   i64.extend_i32_u
   local.set $1
   local.get $2
   local.get $1
   i64.const 127
   i64.and
   i64.const 7
   i64.shl
   i64.or
   local.set $2
   local.get $1
   i64.const 128
   i64.and
   i64.const 0
   i64.ne
   if
    local.get $0
    call $assembly/ByteBuffer/ByteBuffer#get
    i64.extend_i32_u
    local.set $1
    local.get $2
    local.get $1
    i64.const 127
    i64.and
    i64.const 14
    i64.shl
    i64.or
    local.set $2
    local.get $1
    i64.const 128
    i64.and
    i64.const 0
    i64.ne
    if
     local.get $0
     call $assembly/ByteBuffer/ByteBuffer#get
     i64.extend_i32_u
     local.set $1
     local.get $2
     local.get $1
     i64.const 127
     i64.and
     i64.const 21
     i64.shl
     i64.or
     local.set $2
     local.get $1
     i64.const 128
     i64.and
     i64.const 0
     i64.ne
     if
      local.get $0
      call $assembly/ByteBuffer/ByteBuffer#get
      i64.extend_i32_u
      local.set $1
      local.get $2
      local.get $1
      i64.const 127
      i64.and
      i64.const 28
      i64.shl
      i64.or
      local.set $2
      local.get $1
      i64.const 128
      i64.and
      i64.const 0
      i64.ne
      if
       local.get $0
       call $assembly/ByteBuffer/ByteBuffer#get
       i64.extend_i32_u
       local.set $1
       local.get $2
       local.get $1
       i64.const 127
       i64.and
       i64.const 35
       i64.shl
       i64.or
       local.set $2
       local.get $1
       i64.const 128
       i64.and
       i64.const 0
       i64.ne
       if
        local.get $0
        call $assembly/ByteBuffer/ByteBuffer#get
        i64.extend_i32_u
        local.set $1
        local.get $2
        local.get $1
        i64.const 127
        i64.and
        i64.const 42
        i64.shl
        i64.or
        local.set $2
        local.get $1
        i64.const 128
        i64.and
        i64.const 0
        i64.ne
        if
         local.get $0
         call $assembly/ByteBuffer/ByteBuffer#get
         i64.extend_i32_u
         local.set $1
         local.get $2
         local.get $1
         i64.const 127
         i64.and
         i64.const 49
         i64.shl
         i64.or
         local.set $2
         local.get $1
         i64.const 128
         i64.and
         i64.const 0
         i64.ne
         if
          local.get $0
          call $assembly/ByteBuffer/ByteBuffer#get
          i64.extend_i32_u
          local.set $1
          local.get $2
          local.get $1
          i64.const 56
          i64.shl
          i64.or
          local.set $2
         end
        end
       end
      end
     end
    end
   end
  end
  local.get $2
  i64.const 1
  i64.shr_u
  i64.const 0
  local.get $2
  i64.const 1
  i64.and
  i64.sub
  i64.xor
  local.set $2
  local.get $2
  local.set $3
  local.get $0
  call $~lib/rt/pure/__release
  local.get $3
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#setCountAtIndex (param $0 i32) (param $1 i32) (param $2 i64)
  local.get $0
  i32.load offset=160
  local.get $1
  local.get $2
  i32.wrap_i64
  call $assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>#__set
 )
 (func $assembly/encoding/fillCountsArrayFromSourceBuffer<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8> (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (result i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  local.get $0
  call $~lib/rt/pure/__retain
  local.set $0
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $3
  i32.const 2
  i32.ne
  if (result i32)
   local.get $3
   i32.const 4
   i32.ne
  else
   i32.const 0
  end
  if (result i32)
   local.get $3
   i32.const 8
   i32.ne
  else
   i32.const 0
  end
  if (result i32)
   local.get $3
   global.get $assembly/encoding/V2maxWordSizeInBytes
   i32.ne
  else
   i32.const 0
  end
  if
   i32.const 15152
   global.get $assembly/encoding/V2maxWordSizeInBytes
   i32.const 10
   call $~lib/number/I32#toString
   local.tee $4
   call $~lib/string/String.__concat
   local.tee $5
   i32.const 15280
   call $~lib/string/String.__concat
   local.tee $6
   i32.const 14176
   i32.const 104
   i32.const 5
   call $~lib/builtins/abort
   unreachable
  end
  i32.const 0
  local.set $6
  local.get $1
  i32.load
  local.get $2
  i32.add
  local.set $5
  loop $while-continue|0
   local.get $1
   i32.load
   local.get $5
   i32.lt_s
   local.set $4
   local.get $4
   if
    i32.const 0
    local.set $7
    local.get $1
    call $assembly/ZigZagEncoding/ZigZagEncoding.decode
    i32.wrap_i64
    local.set $8
    local.get $8
    i32.const 0
    i32.lt_s
    if
     i32.const 0
     local.get $8
     i32.sub
     local.set $7
     local.get $6
     local.get $7
     i32.add
     local.set $6
    else
     local.get $0
     local.get $6
     local.tee $9
     i32.const 1
     i32.add
     local.set $6
     local.get $9
     local.get $8
     i64.extend_i32_s
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#setCountAtIndex
    end
    br $while-continue|0
   end
  end
  local.get $6
  local.set $4
  local.get $0
  call $~lib/rt/pure/__release
  local.get $1
  call $~lib/rt/pure/__release
  local.get $4
 )
 (func $assembly/encoding/decodeFromByteBuffer<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8> (param $0 i32) (param $1 i64) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i64)
  (local $6 i64)
  (local $7 i64)
  (local $8 i64)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  local.get $0
  call $~lib/rt/pure/__retain
  local.set $0
  local.get $0
  call $assembly/ByteBuffer/ByteBuffer#getInt32
  local.set $2
  local.get $2
  call $assembly/encoding/getCookieBase
  global.get $assembly/encoding/V2EncodingCookieBase
  i32.eq
  if
   local.get $2
   call $assembly/encoding/getWordSizeInBytesFromCookie
   global.get $assembly/encoding/V2maxWordSizeInBytes
   i32.ne
   if
    i32.const 14832
    i32.const 14176
    i32.const 153
    i32.const 7
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#getInt32
   local.set $3
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#getInt32
   drop
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#getInt32
   local.set $4
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#getInt64
   local.set $5
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#getInt64
   local.set $6
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#getInt64
   drop
  else
   i32.const 14976
   i32.const 14176
   i32.const 164
   i32.const 5
   call $~lib/builtins/abort
   unreachable
  end
  local.get $6
  local.tee $7
  local.get $1
  local.tee $8
  local.get $7
  local.get $8
  i64.gt_u
  select
  local.set $6
  i32.const 0
  local.get $5
  local.get $6
  local.get $4
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#constructor
  local.tee $9
  call $~lib/rt/pure/__retain
  local.set $10
  local.get $10
  local.get $0
  local.get $3
  global.get $assembly/encoding/V2maxWordSizeInBytes
  call $assembly/encoding/fillCountsArrayFromSourceBuffer<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>
  local.set $11
  local.get $10
  local.get $11
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#establishInternalTackingValues
  local.get $10
  local.set $12
  local.get $9
  call $~lib/rt/pure/__release
  local.get $0
  call $~lib/rt/pure/__release
  local.get $12
 )
 (func $assembly/index/decodeHistogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8> (param $0 i32) (param $1 f64) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  call $~lib/rt/pure/__retain
  local.set $0
  i32.const 0
  local.get $0
  call $assembly/ByteBuffer/ByteBuffer#constructor
  local.set $2
  local.get $2
  local.get $1
  i64.trunc_f64_u
  call $assembly/encoding/decodeFromByteBuffer<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>
  local.set $3
  i32.const 0
  f64.const 0
  f64.const 0
  f64.const 0
  i32.const 0
  local.get $3
  call $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#constructor
  local.set $4
  local.get $2
  call $~lib/rt/pure/__release
  local.get $3
  call $~lib/rt/pure/__release
  local.get $0
  call $~lib/rt/pure/__release
  local.get $4
 )
 (func $assembly/index/decodeHistogram8 (param $0 i32) (param $1 f64) (result i32)
  (local $2 i32)
  local.get $0
  call $~lib/rt/pure/__retain
  local.set $0
  local.get $0
  local.get $1
  call $assembly/index/decodeHistogram<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>
  local.set $2
  local.get $0
  call $~lib/rt/pure/__release
  local.get $2
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#setCountAtIndex (param $0 i32) (param $1 i32) (param $2 i64)
  local.get $0
  i32.load offset=160
  local.get $1
  local.get $2
  i32.wrap_i64
  call $assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>#__set
 )
 (func $assembly/encoding/fillCountsArrayFromSourceBuffer<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16> (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (result i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  local.get $0
  call $~lib/rt/pure/__retain
  local.set $0
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $3
  i32.const 2
  i32.ne
  if (result i32)
   local.get $3
   i32.const 4
   i32.ne
  else
   i32.const 0
  end
  if (result i32)
   local.get $3
   i32.const 8
   i32.ne
  else
   i32.const 0
  end
  if (result i32)
   local.get $3
   global.get $assembly/encoding/V2maxWordSizeInBytes
   i32.ne
  else
   i32.const 0
  end
  if
   i32.const 15152
   global.get $assembly/encoding/V2maxWordSizeInBytes
   i32.const 10
   call $~lib/number/I32#toString
   local.tee $4
   call $~lib/string/String.__concat
   local.tee $5
   i32.const 15280
   call $~lib/string/String.__concat
   local.tee $6
   i32.const 14176
   i32.const 104
   i32.const 5
   call $~lib/builtins/abort
   unreachable
  end
  i32.const 0
  local.set $6
  local.get $1
  i32.load
  local.get $2
  i32.add
  local.set $5
  loop $while-continue|0
   local.get $1
   i32.load
   local.get $5
   i32.lt_s
   local.set $4
   local.get $4
   if
    i32.const 0
    local.set $7
    local.get $1
    call $assembly/ZigZagEncoding/ZigZagEncoding.decode
    i32.wrap_i64
    local.set $8
    local.get $8
    i32.const 0
    i32.lt_s
    if
     i32.const 0
     local.get $8
     i32.sub
     local.set $7
     local.get $6
     local.get $7
     i32.add
     local.set $6
    else
     local.get $0
     local.get $6
     local.tee $9
     i32.const 1
     i32.add
     local.set $6
     local.get $9
     local.get $8
     i64.extend_i32_s
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#setCountAtIndex
    end
    br $while-continue|0
   end
  end
  local.get $6
  local.set $4
  local.get $0
  call $~lib/rt/pure/__release
  local.get $1
  call $~lib/rt/pure/__release
  local.get $4
 )
 (func $assembly/encoding/decodeFromByteBuffer<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16> (param $0 i32) (param $1 i64) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i64)
  (local $6 i64)
  (local $7 i64)
  (local $8 i64)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  local.get $0
  call $~lib/rt/pure/__retain
  local.set $0
  local.get $0
  call $assembly/ByteBuffer/ByteBuffer#getInt32
  local.set $2
  local.get $2
  call $assembly/encoding/getCookieBase
  global.get $assembly/encoding/V2EncodingCookieBase
  i32.eq
  if
   local.get $2
   call $assembly/encoding/getWordSizeInBytesFromCookie
   global.get $assembly/encoding/V2maxWordSizeInBytes
   i32.ne
   if
    i32.const 14832
    i32.const 14176
    i32.const 153
    i32.const 7
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#getInt32
   local.set $3
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#getInt32
   drop
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#getInt32
   local.set $4
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#getInt64
   local.set $5
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#getInt64
   local.set $6
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#getInt64
   drop
  else
   i32.const 14976
   i32.const 14176
   i32.const 164
   i32.const 5
   call $~lib/builtins/abort
   unreachable
  end
  local.get $6
  local.tee $7
  local.get $1
  local.tee $8
  local.get $7
  local.get $8
  i64.gt_u
  select
  local.set $6
  i32.const 0
  local.get $5
  local.get $6
  local.get $4
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#constructor
  local.tee $9
  call $~lib/rt/pure/__retain
  local.set $10
  local.get $10
  local.get $0
  local.get $3
  global.get $assembly/encoding/V2maxWordSizeInBytes
  call $assembly/encoding/fillCountsArrayFromSourceBuffer<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>
  local.set $11
  local.get $10
  local.get $11
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#establishInternalTackingValues
  local.get $10
  local.set $12
  local.get $9
  call $~lib/rt/pure/__release
  local.get $0
  call $~lib/rt/pure/__release
  local.get $12
 )
 (func $assembly/index/decodeHistogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16> (param $0 i32) (param $1 f64) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  call $~lib/rt/pure/__retain
  local.set $0
  i32.const 0
  local.get $0
  call $assembly/ByteBuffer/ByteBuffer#constructor
  local.set $2
  local.get $2
  local.get $1
  i64.trunc_f64_u
  call $assembly/encoding/decodeFromByteBuffer<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>
  local.set $3
  i32.const 0
  f64.const 0
  f64.const 0
  f64.const 0
  i32.const 0
  local.get $3
  call $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#constructor
  local.set $4
  local.get $2
  call $~lib/rt/pure/__release
  local.get $3
  call $~lib/rt/pure/__release
  local.get $0
  call $~lib/rt/pure/__release
  local.get $4
 )
 (func $assembly/index/decodeHistogram16 (param $0 i32) (param $1 f64) (result i32)
  (local $2 i32)
  local.get $0
  call $~lib/rt/pure/__retain
  local.set $0
  local.get $0
  local.get $1
  call $assembly/index/decodeHistogram<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>
  local.set $2
  local.get $0
  call $~lib/rt/pure/__release
  local.get $2
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#setCountAtIndex (param $0 i32) (param $1 i32) (param $2 i64)
  local.get $0
  i32.load offset=160
  local.get $1
  local.get $2
  i32.wrap_i64
  call $assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>#__set
 )
 (func $assembly/encoding/fillCountsArrayFromSourceBuffer<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32> (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (result i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  local.get $0
  call $~lib/rt/pure/__retain
  local.set $0
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $3
  i32.const 2
  i32.ne
  if (result i32)
   local.get $3
   i32.const 4
   i32.ne
  else
   i32.const 0
  end
  if (result i32)
   local.get $3
   i32.const 8
   i32.ne
  else
   i32.const 0
  end
  if (result i32)
   local.get $3
   global.get $assembly/encoding/V2maxWordSizeInBytes
   i32.ne
  else
   i32.const 0
  end
  if
   i32.const 15152
   global.get $assembly/encoding/V2maxWordSizeInBytes
   i32.const 10
   call $~lib/number/I32#toString
   local.tee $4
   call $~lib/string/String.__concat
   local.tee $5
   i32.const 15280
   call $~lib/string/String.__concat
   local.tee $6
   i32.const 14176
   i32.const 104
   i32.const 5
   call $~lib/builtins/abort
   unreachable
  end
  i32.const 0
  local.set $6
  local.get $1
  i32.load
  local.get $2
  i32.add
  local.set $5
  loop $while-continue|0
   local.get $1
   i32.load
   local.get $5
   i32.lt_s
   local.set $4
   local.get $4
   if
    i32.const 0
    local.set $7
    local.get $1
    call $assembly/ZigZagEncoding/ZigZagEncoding.decode
    i32.wrap_i64
    local.set $8
    local.get $8
    i32.const 0
    i32.lt_s
    if
     i32.const 0
     local.get $8
     i32.sub
     local.set $7
     local.get $6
     local.get $7
     i32.add
     local.set $6
    else
     local.get $0
     local.get $6
     local.tee $9
     i32.const 1
     i32.add
     local.set $6
     local.get $9
     local.get $8
     i64.extend_i32_s
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#setCountAtIndex
    end
    br $while-continue|0
   end
  end
  local.get $6
  local.set $4
  local.get $0
  call $~lib/rt/pure/__release
  local.get $1
  call $~lib/rt/pure/__release
  local.get $4
 )
 (func $assembly/encoding/decodeFromByteBuffer<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32> (param $0 i32) (param $1 i64) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i64)
  (local $6 i64)
  (local $7 i64)
  (local $8 i64)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  local.get $0
  call $~lib/rt/pure/__retain
  local.set $0
  local.get $0
  call $assembly/ByteBuffer/ByteBuffer#getInt32
  local.set $2
  local.get $2
  call $assembly/encoding/getCookieBase
  global.get $assembly/encoding/V2EncodingCookieBase
  i32.eq
  if
   local.get $2
   call $assembly/encoding/getWordSizeInBytesFromCookie
   global.get $assembly/encoding/V2maxWordSizeInBytes
   i32.ne
   if
    i32.const 14832
    i32.const 14176
    i32.const 153
    i32.const 7
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#getInt32
   local.set $3
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#getInt32
   drop
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#getInt32
   local.set $4
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#getInt64
   local.set $5
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#getInt64
   local.set $6
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#getInt64
   drop
  else
   i32.const 14976
   i32.const 14176
   i32.const 164
   i32.const 5
   call $~lib/builtins/abort
   unreachable
  end
  local.get $6
  local.tee $7
  local.get $1
  local.tee $8
  local.get $7
  local.get $8
  i64.gt_u
  select
  local.set $6
  i32.const 0
  local.get $5
  local.get $6
  local.get $4
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#constructor
  local.tee $9
  call $~lib/rt/pure/__retain
  local.set $10
  local.get $10
  local.get $0
  local.get $3
  global.get $assembly/encoding/V2maxWordSizeInBytes
  call $assembly/encoding/fillCountsArrayFromSourceBuffer<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>
  local.set $11
  local.get $10
  local.get $11
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#establishInternalTackingValues
  local.get $10
  local.set $12
  local.get $9
  call $~lib/rt/pure/__release
  local.get $0
  call $~lib/rt/pure/__release
  local.get $12
 )
 (func $assembly/index/decodeHistogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32> (param $0 i32) (param $1 f64) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  call $~lib/rt/pure/__retain
  local.set $0
  i32.const 0
  local.get $0
  call $assembly/ByteBuffer/ByteBuffer#constructor
  local.set $2
  local.get $2
  local.get $1
  i64.trunc_f64_u
  call $assembly/encoding/decodeFromByteBuffer<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>
  local.set $3
  i32.const 0
  f64.const 0
  f64.const 0
  f64.const 0
  i32.const 0
  local.get $3
  call $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#constructor
  local.set $4
  local.get $2
  call $~lib/rt/pure/__release
  local.get $3
  call $~lib/rt/pure/__release
  local.get $0
  call $~lib/rt/pure/__release
  local.get $4
 )
 (func $assembly/index/decodeHistogram32 (param $0 i32) (param $1 f64) (result i32)
  (local $2 i32)
  local.get $0
  call $~lib/rt/pure/__retain
  local.set $0
  local.get $0
  local.get $1
  call $assembly/index/decodeHistogram<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>
  local.set $2
  local.get $0
  call $~lib/rt/pure/__release
  local.get $2
 )
 (func $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#setCountAtIndex (param $0 i32) (param $1 i32) (param $2 i64)
  local.get $0
  i32.load offset=160
  local.get $1
  local.get $2
  call $assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>#__set
 )
 (func $assembly/encoding/fillCountsArrayFromSourceBuffer<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64> (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (result i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  local.get $0
  call $~lib/rt/pure/__retain
  local.set $0
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $3
  i32.const 2
  i32.ne
  if (result i32)
   local.get $3
   i32.const 4
   i32.ne
  else
   i32.const 0
  end
  if (result i32)
   local.get $3
   i32.const 8
   i32.ne
  else
   i32.const 0
  end
  if (result i32)
   local.get $3
   global.get $assembly/encoding/V2maxWordSizeInBytes
   i32.ne
  else
   i32.const 0
  end
  if
   i32.const 15152
   global.get $assembly/encoding/V2maxWordSizeInBytes
   i32.const 10
   call $~lib/number/I32#toString
   local.tee $4
   call $~lib/string/String.__concat
   local.tee $5
   i32.const 15280
   call $~lib/string/String.__concat
   local.tee $6
   i32.const 14176
   i32.const 104
   i32.const 5
   call $~lib/builtins/abort
   unreachable
  end
  i32.const 0
  local.set $6
  local.get $1
  i32.load
  local.get $2
  i32.add
  local.set $5
  loop $while-continue|0
   local.get $1
   i32.load
   local.get $5
   i32.lt_s
   local.set $4
   local.get $4
   if
    i32.const 0
    local.set $7
    local.get $1
    call $assembly/ZigZagEncoding/ZigZagEncoding.decode
    i32.wrap_i64
    local.set $8
    local.get $8
    i32.const 0
    i32.lt_s
    if
     i32.const 0
     local.get $8
     i32.sub
     local.set $7
     local.get $6
     local.get $7
     i32.add
     local.set $6
    else
     local.get $0
     local.get $6
     local.tee $9
     i32.const 1
     i32.add
     local.set $6
     local.get $9
     local.get $8
     i64.extend_i32_s
     call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#setCountAtIndex
    end
    br $while-continue|0
   end
  end
  local.get $6
  local.set $4
  local.get $0
  call $~lib/rt/pure/__release
  local.get $1
  call $~lib/rt/pure/__release
  local.get $4
 )
 (func $assembly/encoding/decodeFromByteBuffer<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64> (param $0 i32) (param $1 i64) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i64)
  (local $6 i64)
  (local $7 i64)
  (local $8 i64)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  local.get $0
  call $~lib/rt/pure/__retain
  local.set $0
  local.get $0
  call $assembly/ByteBuffer/ByteBuffer#getInt32
  local.set $2
  local.get $2
  call $assembly/encoding/getCookieBase
  global.get $assembly/encoding/V2EncodingCookieBase
  i32.eq
  if
   local.get $2
   call $assembly/encoding/getWordSizeInBytesFromCookie
   global.get $assembly/encoding/V2maxWordSizeInBytes
   i32.ne
   if
    i32.const 14832
    i32.const 14176
    i32.const 153
    i32.const 7
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#getInt32
   local.set $3
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#getInt32
   drop
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#getInt32
   local.set $4
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#getInt64
   local.set $5
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#getInt64
   local.set $6
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#getInt64
   drop
  else
   i32.const 14976
   i32.const 14176
   i32.const 164
   i32.const 5
   call $~lib/builtins/abort
   unreachable
  end
  local.get $6
  local.tee $7
  local.get $1
  local.tee $8
  local.get $7
  local.get $8
  i64.gt_u
  select
  local.set $6
  i32.const 0
  local.get $5
  local.get $6
  local.get $4
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#constructor
  local.tee $9
  call $~lib/rt/pure/__retain
  local.set $10
  local.get $10
  local.get $0
  local.get $3
  global.get $assembly/encoding/V2maxWordSizeInBytes
  call $assembly/encoding/fillCountsArrayFromSourceBuffer<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>
  local.set $11
  local.get $10
  local.get $11
  call $assembly/Histogram/Histogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#establishInternalTackingValues
  local.get $10
  local.set $12
  local.get $9
  call $~lib/rt/pure/__release
  local.get $0
  call $~lib/rt/pure/__release
  local.get $12
 )
 (func $assembly/index/decodeHistogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64> (param $0 i32) (param $1 f64) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  call $~lib/rt/pure/__retain
  local.set $0
  i32.const 0
  local.get $0
  call $assembly/ByteBuffer/ByteBuffer#constructor
  local.set $2
  local.get $2
  local.get $1
  i64.trunc_f64_u
  call $assembly/encoding/decodeFromByteBuffer<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>
  local.set $3
  i32.const 0
  f64.const 0
  f64.const 0
  f64.const 0
  i32.const 0
  local.get $3
  call $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#constructor
  local.set $4
  local.get $2
  call $~lib/rt/pure/__release
  local.get $3
  call $~lib/rt/pure/__release
  local.get $0
  call $~lib/rt/pure/__release
  local.get $4
 )
 (func $assembly/index/decodeHistogram64 (param $0 i32) (param $1 f64) (result i32)
  (local $2 i32)
  local.get $0
  call $~lib/rt/pure/__retain
  local.set $0
  local.get $0
  local.get $1
  call $assembly/index/decodeHistogram<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>
  local.set $2
  local.get $0
  call $~lib/rt/pure/__release
  local.get $2
 )
 (func $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#setCountAtIndex (param $0 i32) (param $1 i32) (param $2 i64)
  local.get $0
  i32.load offset=160
  local.get $1
  local.get $2
  call $assembly/packedarray/PackedArray/PackedArray#__set
 )
 (func $assembly/encoding/fillCountsArrayFromSourceBuffer<assembly/packedarray/PackedArray/PackedArray,u64> (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (result i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  local.get $0
  call $~lib/rt/pure/__retain
  local.set $0
  local.get $1
  call $~lib/rt/pure/__retain
  local.set $1
  local.get $3
  i32.const 2
  i32.ne
  if (result i32)
   local.get $3
   i32.const 4
   i32.ne
  else
   i32.const 0
  end
  if (result i32)
   local.get $3
   i32.const 8
   i32.ne
  else
   i32.const 0
  end
  if (result i32)
   local.get $3
   global.get $assembly/encoding/V2maxWordSizeInBytes
   i32.ne
  else
   i32.const 0
  end
  if
   i32.const 15152
   global.get $assembly/encoding/V2maxWordSizeInBytes
   i32.const 10
   call $~lib/number/I32#toString
   local.tee $4
   call $~lib/string/String.__concat
   local.tee $5
   i32.const 15280
   call $~lib/string/String.__concat
   local.tee $6
   i32.const 14176
   i32.const 104
   i32.const 5
   call $~lib/builtins/abort
   unreachable
  end
  i32.const 0
  local.set $6
  local.get $1
  i32.load
  local.get $2
  i32.add
  local.set $5
  loop $while-continue|0
   local.get $1
   i32.load
   local.get $5
   i32.lt_s
   local.set $4
   local.get $4
   if
    i32.const 0
    local.set $7
    local.get $1
    call $assembly/ZigZagEncoding/ZigZagEncoding.decode
    i32.wrap_i64
    local.set $8
    local.get $8
    i32.const 0
    i32.lt_s
    if
     i32.const 0
     local.get $8
     i32.sub
     local.set $7
     local.get $6
     local.get $7
     i32.add
     local.set $6
    else
     local.get $0
     local.get $6
     local.tee $9
     i32.const 1
     i32.add
     local.set $6
     local.get $9
     local.get $8
     i64.extend_i32_s
     call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#setCountAtIndex
    end
    br $while-continue|0
   end
  end
  local.get $6
  local.set $4
  local.get $0
  call $~lib/rt/pure/__release
  local.get $1
  call $~lib/rt/pure/__release
  local.get $4
 )
 (func $assembly/encoding/decodeFromByteBuffer<assembly/packedarray/PackedArray/PackedArray,u64> (param $0 i32) (param $1 i64) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i64)
  (local $6 i64)
  (local $7 i64)
  (local $8 i64)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  local.get $0
  call $~lib/rt/pure/__retain
  local.set $0
  local.get $0
  call $assembly/ByteBuffer/ByteBuffer#getInt32
  local.set $2
  local.get $2
  call $assembly/encoding/getCookieBase
  global.get $assembly/encoding/V2EncodingCookieBase
  i32.eq
  if
   local.get $2
   call $assembly/encoding/getWordSizeInBytesFromCookie
   global.get $assembly/encoding/V2maxWordSizeInBytes
   i32.ne
   if
    i32.const 14832
    i32.const 14176
    i32.const 153
    i32.const 7
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#getInt32
   local.set $3
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#getInt32
   drop
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#getInt32
   local.set $4
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#getInt64
   local.set $5
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#getInt64
   local.set $6
   local.get $0
   call $assembly/ByteBuffer/ByteBuffer#getInt64
   drop
  else
   i32.const 14976
   i32.const 14176
   i32.const 164
   i32.const 5
   call $~lib/builtins/abort
   unreachable
  end
  local.get $6
  local.tee $7
  local.get $1
  local.tee $8
  local.get $7
  local.get $8
  i64.gt_u
  select
  local.set $6
  i32.const 0
  local.get $5
  local.get $6
  local.get $4
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#constructor
  local.tee $9
  call $~lib/rt/pure/__retain
  local.set $10
  local.get $10
  local.get $0
  local.get $3
  global.get $assembly/encoding/V2maxWordSizeInBytes
  call $assembly/encoding/fillCountsArrayFromSourceBuffer<assembly/packedarray/PackedArray/PackedArray,u64>
  local.set $11
  local.get $10
  local.get $11
  call $assembly/Histogram/Histogram<assembly/packedarray/PackedArray/PackedArray,u64>#establishInternalTackingValues
  local.get $10
  local.set $12
  local.get $9
  call $~lib/rt/pure/__release
  local.get $0
  call $~lib/rt/pure/__release
  local.get $12
 )
 (func $assembly/index/decodeHistogram<assembly/packedarray/PackedArray/PackedArray,u64> (param $0 i32) (param $1 f64) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  call $~lib/rt/pure/__retain
  local.set $0
  i32.const 0
  local.get $0
  call $assembly/ByteBuffer/ByteBuffer#constructor
  local.set $2
  local.get $2
  local.get $1
  i64.trunc_f64_u
  call $assembly/encoding/decodeFromByteBuffer<assembly/packedarray/PackedArray/PackedArray,u64>
  local.set $3
  i32.const 0
  f64.const 0
  f64.const 0
  f64.const 0
  i32.const 0
  local.get $3
  call $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#constructor
  local.set $4
  local.get $2
  call $~lib/rt/pure/__release
  local.get $3
  call $~lib/rt/pure/__release
  local.get $0
  call $~lib/rt/pure/__release
  local.get $4
 )
 (func $assembly/index/decodePackedHistogram (param $0 i32) (param $1 f64) (result i32)
  (local $2 i32)
  local.get $0
  call $~lib/rt/pure/__retain
  local.set $0
  local.get $0
  local.get $1
  call $assembly/index/decodeHistogram<assembly/packedarray/PackedArray/PackedArray,u64>
  local.set $2
  local.get $0
  call $~lib/rt/pure/__release
  local.get $2
 )
 (func $~start
  call $start:assembly/index
 )
 (func $~lib/rt/pure/markGray (param $0 i32)
  (local $1 i32)
  local.get $0
  i32.load offset=4
  local.set $1
  local.get $1
  i32.const 1879048192
  i32.and
  i32.const 268435456
  i32.ne
  if
   local.get $0
   local.get $1
   i32.const 1879048192
   i32.const -1
   i32.xor
   i32.and
   i32.const 268435456
   i32.or
   i32.store offset=4
   local.get $0
   i32.const 16
   i32.add
   i32.const 2
   call $~lib/rt/__visit_members
  end
 )
 (func $~lib/rt/tlsf/freeBlock (param $0 i32) (param $1 i32)
  (local $2 i32)
  local.get $1
  i32.load
  local.set $2
  local.get $1
  local.get $2
  i32.const 1
  i32.or
  i32.store
  local.get $0
  local.get $1
  call $~lib/rt/tlsf/insertBlock
  i32.const 0
  drop
 )
 (func $~lib/rt/pure/finalize (param $0 i32)
  i32.const 0
  drop
  global.get $~lib/rt/tlsf/ROOT
  local.get $0
  call $~lib/rt/tlsf/freeBlock
 )
 (func $~lib/rt/pure/scanBlack (param $0 i32)
  local.get $0
  local.get $0
  i32.load offset=4
  i32.const 1879048192
  i32.const -1
  i32.xor
  i32.and
  i32.const 0
  i32.or
  i32.store offset=4
  local.get $0
  i32.const 16
  i32.add
  i32.const 4
  call $~lib/rt/__visit_members
 )
 (func $~lib/rt/pure/scan (param $0 i32)
  (local $1 i32)
  local.get $0
  i32.load offset=4
  local.set $1
  local.get $1
  i32.const 1879048192
  i32.and
  i32.const 268435456
  i32.eq
  if
   local.get $1
   i32.const 268435455
   i32.and
   i32.const 0
   i32.gt_u
   if
    local.get $0
    call $~lib/rt/pure/scanBlack
   else
    local.get $0
    local.get $1
    i32.const 1879048192
    i32.const -1
    i32.xor
    i32.and
    i32.const 536870912
    i32.or
    i32.store offset=4
    local.get $0
    i32.const 16
    i32.add
    i32.const 3
    call $~lib/rt/__visit_members
   end
  end
 )
 (func $~lib/rt/pure/collectWhite (param $0 i32)
  (local $1 i32)
  local.get $0
  i32.load offset=4
  local.set $1
  local.get $1
  i32.const 1879048192
  i32.and
  i32.const 536870912
  i32.eq
  if (result i32)
   local.get $1
   i32.const -2147483648
   i32.and
   i32.eqz
  else
   i32.const 0
  end
  if
   local.get $0
   local.get $1
   i32.const 1879048192
   i32.const -1
   i32.xor
   i32.and
   i32.const 0
   i32.or
   i32.store offset=4
   local.get $0
   i32.const 16
   i32.add
   i32.const 5
   call $~lib/rt/__visit_members
   local.get $0
   call $~lib/rt/pure/finalize
  end
 )
 (func $~lib/rt/pure/__collect
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  i32.const 0
  drop
  global.get $~lib/rt/pure/ROOTS
  local.set $0
  local.get $0
  local.set $1
  local.get $1
  local.set $2
  global.get $~lib/rt/pure/CUR
  local.set $3
  loop $for-loop|0
   local.get $2
   local.get $3
   i32.lt_u
   local.set $4
   local.get $4
   if
    local.get $2
    i32.load
    local.set $5
    local.get $5
    i32.load offset=4
    local.set $6
    local.get $6
    i32.const 1879048192
    i32.and
    i32.const 805306368
    i32.eq
    if (result i32)
     local.get $6
     i32.const 268435455
     i32.and
     i32.const 0
     i32.gt_u
    else
     i32.const 0
    end
    if
     local.get $5
     call $~lib/rt/pure/markGray
     local.get $1
     local.get $5
     i32.store
     local.get $1
     i32.const 4
     i32.add
     local.set $1
    else
     local.get $6
     i32.const 1879048192
     i32.and
     i32.const 0
     i32.eq
     if (result i32)
      local.get $6
      i32.const 268435455
      i32.and
      i32.eqz
     else
      i32.const 0
     end
     if
      local.get $5
      call $~lib/rt/pure/finalize
     else
      local.get $5
      local.get $6
      i32.const -2147483648
      i32.const -1
      i32.xor
      i32.and
      i32.store offset=4
     end
    end
    local.get $2
    i32.const 4
    i32.add
    local.set $2
    br $for-loop|0
   end
  end
  local.get $1
  global.set $~lib/rt/pure/CUR
  local.get $0
  local.set $3
  loop $for-loop|1
   local.get $3
   local.get $1
   i32.lt_u
   local.set $2
   local.get $2
   if
    local.get $3
    i32.load
    call $~lib/rt/pure/scan
    local.get $3
    i32.const 4
    i32.add
    local.set $3
    br $for-loop|1
   end
  end
  local.get $0
  local.set $3
  loop $for-loop|2
   local.get $3
   local.get $1
   i32.lt_u
   local.set $2
   local.get $2
   if
    local.get $3
    i32.load
    local.set $4
    local.get $4
    local.get $4
    i32.load offset=4
    i32.const -2147483648
    i32.const -1
    i32.xor
    i32.and
    i32.store offset=4
    local.get $4
    call $~lib/rt/pure/collectWhite
    local.get $3
    i32.const 4
    i32.add
    local.set $3
    br $for-loop|2
   end
  end
  local.get $0
  global.set $~lib/rt/pure/CUR
 )
 (func $~lib/rt/__typeinfo (param $0 i32) (result i32)
  (local $1 i32)
  global.get $~lib/rt/__rtti_base
  local.set $1
  local.get $0
  local.get $1
  i32.load
  i32.gt_u
  if
   i32.const 12160
   i32.const 15312
   i32.const 22
   i32.const 28
   call $~lib/builtins/abort
   unreachable
  end
  local.get $1
  i32.const 4
  i32.add
  local.get $0
  i32.const 8
  i32.mul
  i32.add
  i32.load
 )
 (func $~lib/rt/tlsf/checkUsedBlock (param $0 i32) (result i32)
  (local $1 i32)
  local.get $0
  i32.const 16
  i32.sub
  local.set $1
  local.get $0
  i32.const 0
  i32.ne
  if (result i32)
   local.get $0
   i32.const 15
   i32.and
   i32.eqz
  else
   i32.const 0
  end
  if (result i32)
   local.get $1
   i32.load
   i32.const 1
   i32.and
   i32.eqz
  else
   i32.const 0
  end
  if (result i32)
   local.get $1
   i32.load offset=4
   i32.const 268435455
   i32.const -1
   i32.xor
   i32.and
   i32.eqz
  else
   i32.const 0
  end
  i32.eqz
  if
   i32.const 0
   i32.const 32
   i32.const 580
   i32.const 3
   call $~lib/builtins/abort
   unreachable
  end
  local.get $1
 )
 (func $~lib/rt/tlsf/__free (param $0 i32)
  call $~lib/rt/tlsf/maybeInitialize
  local.get $0
  call $~lib/rt/tlsf/checkUsedBlock
  call $~lib/rt/tlsf/freeBlock
 )
 (func $~lib/rt/pure/growRoots
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  global.get $~lib/rt/pure/ROOTS
  local.set $0
  global.get $~lib/rt/pure/CUR
  local.get $0
  i32.sub
  local.set $1
  local.get $1
  i32.const 2
  i32.mul
  local.tee $2
  i32.const 64
  i32.const 2
  i32.shl
  local.tee $3
  local.get $2
  local.get $3
  i32.gt_u
  select
  local.set $4
  local.get $4
  i32.const 0
  call $~lib/rt/tlsf/__alloc
  local.set $5
  i32.const 0
  drop
  local.get $5
  local.get $0
  local.get $1
  call $~lib/memory/memory.copy
  local.get $0
  if
   i32.const 0
   drop
   local.get $0
   call $~lib/rt/tlsf/__free
  end
  local.get $5
  global.set $~lib/rt/pure/ROOTS
  local.get $5
  local.get $1
  i32.add
  global.set $~lib/rt/pure/CUR
  local.get $5
  local.get $4
  i32.add
  global.set $~lib/rt/pure/END
 )
 (func $~lib/rt/pure/appendRoot (param $0 i32)
  (local $1 i32)
  global.get $~lib/rt/pure/CUR
  local.set $1
  local.get $1
  global.get $~lib/rt/pure/END
  i32.ge_u
  if
   call $~lib/rt/pure/growRoots
   global.get $~lib/rt/pure/CUR
   local.set $1
  end
  local.get $1
  local.get $0
  i32.store
  local.get $1
  i32.const 4
  i32.add
  global.set $~lib/rt/pure/CUR
 )
 (func $~lib/rt/pure/decrement (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load offset=4
  local.set $1
  local.get $1
  i32.const 268435455
  i32.and
  local.set $2
  i32.const 0
  drop
  i32.const 1
  drop
  local.get $0
  i32.load
  i32.const 1
  i32.and
  i32.eqz
  i32.eqz
  if
   i32.const 0
   i32.const 144
   i32.const 122
   i32.const 14
   call $~lib/builtins/abort
   unreachable
  end
  local.get $2
  i32.const 1
  i32.eq
  if
   local.get $0
   i32.const 16
   i32.add
   i32.const 1
   call $~lib/rt/__visit_members
   i32.const 0
   drop
   local.get $1
   i32.const -2147483648
   i32.and
   i32.eqz
   if
    local.get $0
    call $~lib/rt/pure/finalize
   else
    local.get $0
    i32.const -2147483648
    i32.const 0
    i32.or
    i32.const 0
    i32.or
    i32.store offset=4
   end
  else
   i32.const 1
   drop
   local.get $2
   i32.const 0
   i32.gt_u
   i32.eqz
   if
    i32.const 0
    i32.const 144
    i32.const 136
    i32.const 16
    call $~lib/builtins/abort
    unreachable
   end
   i32.const 0
   drop
   local.get $0
   i32.load offset=8
   call $~lib/rt/__typeinfo
   i32.const 32
   i32.and
   i32.eqz
   if
    local.get $0
    i32.const -2147483648
    i32.const 805306368
    i32.or
    local.get $2
    i32.const 1
    i32.sub
    i32.or
    i32.store offset=4
    local.get $1
    i32.const -2147483648
    i32.and
    i32.eqz
    if
     local.get $0
     call $~lib/rt/pure/appendRoot
    end
   else
    local.get $0
    local.get $1
    i32.const 268435455
    i32.const -1
    i32.xor
    i32.and
    local.get $2
    i32.const 1
    i32.sub
    i32.or
    i32.store offset=4
   end
  end
 )
 (func $~lib/rt/pure/__visit (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  global.get $~lib/heap/__heap_base
  i32.lt_u
  if
   return
  end
  i32.const 0
  drop
  local.get $0
  i32.const 16
  i32.sub
  local.set $2
  block $break|0
   block $case5|0
    block $case4|0
     block $case3|0
      block $case2|0
       block $case1|0
        block $case0|0
         local.get $1
         local.set $3
         local.get $3
         i32.const 1
         i32.eq
         br_if $case0|0
         local.get $3
         i32.const 2
         i32.eq
         br_if $case1|0
         local.get $3
         i32.const 3
         i32.eq
         br_if $case2|0
         local.get $3
         i32.const 4
         i32.eq
         br_if $case3|0
         local.get $3
         i32.const 5
         i32.eq
         br_if $case4|0
         br $case5|0
        end
        local.get $2
        call $~lib/rt/pure/decrement
        br $break|0
       end
       i32.const 1
       drop
       local.get $2
       i32.load offset=4
       i32.const 268435455
       i32.and
       i32.const 0
       i32.gt_u
       i32.eqz
       if
        i32.const 0
        i32.const 144
        i32.const 79
        i32.const 20
        call $~lib/builtins/abort
        unreachable
       end
       local.get $2
       local.get $2
       i32.load offset=4
       i32.const 1
       i32.sub
       i32.store offset=4
       local.get $2
       call $~lib/rt/pure/markGray
       br $break|0
      end
      local.get $2
      call $~lib/rt/pure/scan
      br $break|0
     end
     local.get $2
     i32.load offset=4
     local.set $3
     local.get $3
     i32.const 268435455
     i32.const -1
     i32.xor
     i32.and
     local.get $3
     i32.const 1
     i32.add
     i32.const 268435455
     i32.const -1
     i32.xor
     i32.and
     i32.eq
     i32.eqz
     if
      i32.const 0
      i32.const 144
      i32.const 90
      i32.const 9
      call $~lib/builtins/abort
      unreachable
     end
     local.get $2
     local.get $3
     i32.const 1
     i32.add
     i32.store offset=4
     local.get $3
     i32.const 1879048192
     i32.and
     i32.const 0
     i32.ne
     if
      local.get $2
      call $~lib/rt/pure/scanBlack
     end
     br $break|0
    end
    local.get $2
    call $~lib/rt/pure/collectWhite
    br $break|0
   end
   i32.const 1
   drop
   i32.const 0
   i32.eqz
   if
    i32.const 0
    i32.const 144
    i32.const 101
    i32.const 27
    call $~lib/builtins/abort
    unreachable
   end
  end
 )
 (func $~lib/array/Array<~lib/string/String>#__visit_impl (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  i32.const 1
  drop
  local.get $0
  i32.load offset=4
  local.set $2
  local.get $2
  local.get $0
  i32.load offset=12
  i32.const 2
  i32.shl
  i32.add
  local.set $3
  loop $while-continue|0
   local.get $2
   local.get $3
   i32.lt_u
   local.set $4
   local.get $4
   if
    local.get $2
    i32.load
    local.set $5
    local.get $5
    if
     local.get $5
     local.get $1
     call $~lib/rt/pure/__visit
    end
    local.get $2
    i32.const 4
    i32.add
    local.set $2
    br $while-continue|0
   end
  end
  local.get $0
  i32.load
  local.get $1
  call $~lib/rt/pure/__visit
 )
 (func $~lib/rt/__visit_members (param $0 i32) (param $1 i32)
  (local $2 i32)
  block $block$11$break
   block $switch$1$default
    block $switch$1$case$50
     block $switch$1$case$44
      block $switch$1$case$22
       block $switch$1$case$14
        block $switch$1$case$12
         block $switch$1$case$11
          block $switch$1$case$10
           block $switch$1$case$5
            block $switch$1$case$4
             block $switch$1$case$2
              local.get $0
              i32.const 8
              i32.sub
              i32.load
              br_table $switch$1$case$2 $switch$1$case$2 $switch$1$case$4 $switch$1$case$5 $switch$1$case$4 $switch$1$case$4 $switch$1$case$4 $switch$1$case$4 $switch$1$case$10 $switch$1$case$11 $switch$1$case$12 $switch$1$case$2 $switch$1$case$14 $switch$1$case$4 $switch$1$case$2 $switch$1$case$2 $switch$1$case$4 $switch$1$case$4 $switch$1$case$4 $switch$1$case$4 $switch$1$case$22 $switch$1$case$11 $switch$1$case$12 $switch$1$case$14 $switch$1$case$4 $switch$1$case$4 $switch$1$case$4 $switch$1$case$4 $switch$1$case$22 $switch$1$case$11 $switch$1$case$12 $switch$1$case$14 $switch$1$case$4 $switch$1$case$4 $switch$1$case$4 $switch$1$case$4 $switch$1$case$22 $switch$1$case$11 $switch$1$case$12 $switch$1$case$14 $switch$1$case$4 $switch$1$case$4 $switch$1$case$44 $switch$1$case$4 $switch$1$case$22 $switch$1$case$11 $switch$1$case$12 $switch$1$case$14 $switch$1$case$50 $switch$1$default
             end
             return
            end
            local.get $0
            i32.load
            local.tee $2
            if
             local.get $2
             local.get $1
             call $~lib/rt/pure/__visit
            end
            return
           end
           local.get $0
           local.get $1
           call $~lib/array/Array<~lib/string/String>#__visit_impl
           return
          end
          local.get $0
          i32.load offset=160
          local.tee $2
          if
           local.get $2
           local.get $1
           call $~lib/rt/pure/__visit
          end
          br $block$11$break
         end
         br $block$11$break
        end
        local.get $0
        i32.load offset=28
        local.tee $2
        if
         local.get $2
         local.get $1
         call $~lib/rt/pure/__visit
        end
        local.get $0
        i32.load offset=116
        local.tee $2
        if
         local.get $2
         local.get $1
         call $~lib/rt/pure/__visit
        end
        return
       end
       local.get $0
       i32.load offset=4
       local.tee $2
       if
        local.get $2
        local.get $1
        call $~lib/rt/pure/__visit
       end
       local.get $0
       i32.load offset=92
       local.tee $2
       if
        local.get $2
        local.get $1
        call $~lib/rt/pure/__visit
       end
       return
      end
      local.get $0
      i32.load offset=160
      local.tee $2
      if
       local.get $2
       local.get $1
       call $~lib/rt/pure/__visit
      end
      local.get $0
      i32.load offset=80
      local.tee $2
      if
       local.get $2
       local.get $1
       call $~lib/rt/pure/__visit
      end
      local.get $0
      i32.load offset=96
      local.tee $2
      if
       local.get $2
       local.get $1
       call $~lib/rt/pure/__visit
      end
      local.get $0
      i32.load offset=100
      local.tee $2
      if
       local.get $2
       local.get $1
       call $~lib/rt/pure/__visit
      end
      return
     end
     local.get $0
     i32.load offset=8
     local.tee $2
     if
      local.get $2
      local.get $1
      call $~lib/rt/pure/__visit
     end
     local.get $0
     i32.load offset=12
     local.tee $2
     if
      local.get $2
      local.get $1
      call $~lib/rt/pure/__visit
     end
     local.get $0
     i32.load offset=16
     local.tee $2
     if
      local.get $2
      local.get $1
      call $~lib/rt/pure/__visit
     end
     local.get $0
     i32.load offset=20
     local.tee $2
     if
      local.get $2
      local.get $1
      call $~lib/rt/pure/__visit
     end
     return
    end
    local.get $0
    i32.load offset=4
    local.tee $2
    if
     local.get $2
     local.get $1
     call $~lib/rt/pure/__visit
    end
    local.get $0
    i32.load offset=8
    local.tee $2
    if
     local.get $2
     local.get $1
     call $~lib/rt/pure/__visit
    end
    local.get $0
    i32.load offset=12
    local.tee $2
    if
     local.get $2
     local.get $1
     call $~lib/rt/pure/__visit
    end
    local.get $0
    i32.load offset=16
    local.tee $2
    if
     local.get $2
     local.get $1
     call $~lib/rt/pure/__visit
    end
    local.get $0
    i32.load offset=20
    local.tee $2
    if
     local.get $2
     local.get $1
     call $~lib/rt/pure/__visit
    end
    return
   end
   unreachable
  end
  local.get $0
  i32.load offset=80
  local.tee $2
  if
   local.get $2
   local.get $1
   call $~lib/rt/pure/__visit
  end
  local.get $0
  i32.load offset=96
  local.tee $2
  if
   local.get $2
   local.get $1
   call $~lib/rt/pure/__visit
  end
  local.get $0
  i32.load offset=100
  local.tee $2
  if
   local.get $2
   local.get $1
   call $~lib/rt/pure/__visit
  end
  return
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#constructor@varargs (param $0 i32) (param $1 f64) (param $2 f64) (param $3 f64) (param $4 i32) (param $5 i32) (result i32)
  block $1of1
   block $0of1
    block $outOfRange
     global.get $~argumentsLength
     i32.const 4
     i32.sub
     br_table $0of1 $1of1 $outOfRange
    end
    unreachable
   end
   i32.const 0
   local.set $5
  end
  local.get $0
  local.get $1
  local.get $2
  local.get $3
  local.get $4
  local.get $5
  call $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint8Array,u8>,u8>#constructor
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#constructor@varargs (param $0 i32) (param $1 f64) (param $2 f64) (param $3 f64) (param $4 i32) (param $5 i32) (result i32)
  block $1of1
   block $0of1
    block $outOfRange
     global.get $~argumentsLength
     i32.const 4
     i32.sub
     br_table $0of1 $1of1 $outOfRange
    end
    unreachable
   end
   i32.const 0
   local.set $5
  end
  local.get $0
  local.get $1
  local.get $2
  local.get $3
  local.get $4
  local.get $5
  call $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint16Array,u16>,u16>#constructor
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#constructor@varargs (param $0 i32) (param $1 f64) (param $2 f64) (param $3 f64) (param $4 i32) (param $5 i32) (result i32)
  block $1of1
   block $0of1
    block $outOfRange
     global.get $~argumentsLength
     i32.const 4
     i32.sub
     br_table $0of1 $1of1 $outOfRange
    end
    unreachable
   end
   i32.const 0
   local.set $5
  end
  local.get $0
  local.get $1
  local.get $2
  local.get $3
  local.get $4
  local.get $5
  call $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint32Array,u32>,u32>#constructor
 )
 (func $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#constructor@varargs (param $0 i32) (param $1 f64) (param $2 f64) (param $3 f64) (param $4 i32) (param $5 i32) (result i32)
  block $1of1
   block $0of1
    block $outOfRange
     global.get $~argumentsLength
     i32.const 4
     i32.sub
     br_table $0of1 $1of1 $outOfRange
    end
    unreachable
   end
   i32.const 0
   local.set $5
  end
  local.get $0
  local.get $1
  local.get $2
  local.get $3
  local.get $4
  local.get $5
  call $assembly/index/HistogramAdapter<assembly/Histogram/Storage<~lib/typedarray/Uint64Array,u64>,u64>#constructor
 )
 (func $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#constructor@varargs (param $0 i32) (param $1 f64) (param $2 f64) (param $3 f64) (param $4 i32) (param $5 i32) (result i32)
  block $1of1
   block $0of1
    block $outOfRange
     global.get $~argumentsLength
     i32.const 4
     i32.sub
     br_table $0of1 $1of1 $outOfRange
    end
    unreachable
   end
   i32.const 0
   local.set $5
  end
  local.get $0
  local.get $1
  local.get $2
  local.get $3
  local.get $4
  local.get $5
  call $assembly/index/HistogramAdapter<assembly/packedarray/PackedArray/PackedArray,u64>#constructor
 )
 (func $~setArgumentsLength (param $0 i32)
  local.get $0
  global.set $~argumentsLength
 )
)
