{"version":3,"file":"http.js","sources":["../src/backends/browser_xhr.ts","../src/enums.ts","../src/headers.ts","../src/base_response_options.ts","../src/interfaces.ts","../src/http_utils.ts","../src/url_search_params.ts","../src/body.ts","../src/static_response.ts","../src/backends/browser_jsonp.ts","../src/backends/jsonp_backend.ts","../src/backends/xhr_backend.ts","../src/base_request_options.ts","../src/static_request.ts","../src/http.ts","../src/http_module.ts","../src/version.ts","../http.ts"],"names":["getDOM","ArrayBuffer","Blob"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\n\n/**\n * A backend for http that uses the `XMLHttpRequest` browser API.\n *\n * Take care not to evaluate this in non-browser contexts.\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\n@Injectable()\nexport class BrowserXhr {\n  constructor() {}\n  build(): any { return <any>(new XMLHttpRequest()); }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Supported http methods.\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nexport enum RequestMethod {\n  Get,\n  Post,\n  Put,\n  Delete,\n  Options,\n  Head,\n  Patch\n}\n\n/**\n * All possible states in which a connection can be, based on\n * [States](http://www.w3.org/TR/XMLHttpRequest/#states) from the `XMLHttpRequest` spec, but with an\n * additional \"CANCELLED\" state.\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nexport enum ReadyState {\n  Unsent,\n  Open,\n  HeadersReceived,\n  Loading,\n  Done,\n  Cancelled\n}\n\n/**\n * Acceptable response types to be associated with a {@link Response}, based on\n * [ResponseType](https://fetch.spec.whatwg.org/#responsetype) from the Fetch spec.\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nexport enum ResponseType {\n  Basic,\n  Cors,\n  Default,\n  Error,\n  Opaque\n}\n\n/**\n * Supported content type to be automatically associated with a {@link Request}.\n * @deprecated see https://angular.io/guide/http\n */\nexport enum ContentType {\n  NONE,\n  JSON,\n  FORM,\n  FORM_DATA,\n  TEXT,\n  BLOB,\n  ARRAY_BUFFER\n}\n\n/**\n * Define which buffer to use to store the response\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nexport enum ResponseContentType {\n  Text,\n  Json,\n  ArrayBuffer,\n  Blob\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as\n * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).\n *\n * The only known difference between this `Headers` implementation and the spec is the\n * lack of an `entries` method.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * import {Headers} from '@angular/http';\n *\n * var firstHeaders = new Headers();\n * firstHeaders.append('Content-Type', 'image/jpeg');\n * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'\n *\n * // Create headers from Plain Old JavaScript Object\n * var secondHeaders = new Headers({\n *   'X-My-Custom-Header': 'Angular'\n * });\n * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'\n *\n * var thirdHeaders = new Headers(secondHeaders);\n * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nexport class Headers {\n  /** @internal header names are lower case */\n  _headers: Map<string, string[]> = new Map();\n  /** @internal map lower case names to actual names */\n  _normalizedNames: Map<string, string> = new Map();\n\n  // TODO(vicb): any -> string|string[]\n  constructor(headers?: Headers|{[name: string]: any}|null) {\n    if (!headers) {\n      return;\n    }\n\n    if (headers instanceof Headers) {\n      headers.forEach((values: string[], name: string) => {\n        values.forEach(value => this.append(name, value));\n      });\n      return;\n    }\n\n    Object.keys(headers).forEach((name: string) => {\n      const values: string[] = Array.isArray(headers[name]) ? headers[name] : [headers[name]];\n      this.delete(name);\n      values.forEach(value => this.append(name, value));\n    });\n  }\n\n  /**\n   * Returns a new Headers instance from the given DOMString of Response Headers\n   */\n  static fromResponseHeaderString(headersString: string): Headers {\n    const headers = new Headers();\n\n    headersString.split('\\n').forEach(line => {\n      const index = line.indexOf(':');\n      if (index > 0) {\n        const name = line.slice(0, index);\n        const value = line.slice(index + 1).trim();\n        headers.set(name, value);\n      }\n    });\n\n    return headers;\n  }\n\n  /**\n   * Appends a header to existing list of header values for a given header name.\n   */\n  append(name: string, value: string): void {\n    const values = this.getAll(name);\n\n    if (values === null) {\n      this.set(name, value);\n    } else {\n      values.push(value);\n    }\n  }\n\n  /**\n   * Deletes all header values for the given name.\n   */\n  delete (name: string): void {\n    const lcName = name.toLowerCase();\n    this._normalizedNames.delete(lcName);\n    this._headers.delete(lcName);\n  }\n\n  forEach(fn: (values: string[], name: string|undefined, headers: Map<string, string[]>) => void):\n      void {\n    this._headers.forEach(\n        (values, lcName) => fn(values, this._normalizedNames.get(lcName), this._headers));\n  }\n\n  /**\n   * Returns first header that matches given name.\n   */\n  get(name: string): string|null {\n    const values = this.getAll(name);\n\n    if (values === null) {\n      return null;\n    }\n\n    return values.length > 0 ? values[0] : null;\n  }\n\n  /**\n   * Checks for existence of header by given name.\n   */\n  has(name: string): boolean { return this._headers.has(name.toLowerCase()); }\n\n  /**\n   * Returns the names of the headers\n   */\n  keys(): string[] { return Array.from(this._normalizedNames.values()); }\n\n  /**\n   * Sets or overrides header value for given name.\n   */\n  set(name: string, value: string|string[]): void {\n    if (Array.isArray(value)) {\n      if (value.length) {\n        this._headers.set(name.toLowerCase(), [value.join(',')]);\n      }\n    } else {\n      this._headers.set(name.toLowerCase(), [value]);\n    }\n    this.mayBeSetNormalizedName(name);\n  }\n\n  /**\n   * Returns values of all headers.\n   */\n  values(): string[][] { return Array.from(this._headers.values()); }\n\n  /**\n   * Returns string of all headers.\n   */\n  // TODO(vicb): returns {[name: string]: string[]}\n  toJSON(): {[name: string]: any} {\n    const serialized: {[name: string]: string[]} = {};\n\n    this._headers.forEach((values: string[], name: string) => {\n      const split: string[] = [];\n      values.forEach(v => split.push(...v.split(',')));\n      serialized[this._normalizedNames.get(name) !] = split;\n    });\n\n    return serialized;\n  }\n\n  /**\n   * Returns list of header values for a given name.\n   */\n  getAll(name: string): string[]|null {\n    return this.has(name) ? this._headers.get(name.toLowerCase()) || null : null;\n  }\n\n  /**\n   * This method is not implemented.\n   */\n  entries() { throw new Error('\"entries\" method is not implemented on Headers class'); }\n\n  private mayBeSetNormalizedName(name: string): void {\n    const lcName = name.toLowerCase();\n\n    if (!this._normalizedNames.has(lcName)) {\n      this._normalizedNames.set(lcName, name);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\n\nimport {ResponseType} from './enums';\nimport {Headers} from './headers';\nimport {ResponseOptionsArgs} from './interfaces';\n\n\n/**\n * Creates a response options object to be optionally provided when instantiating a\n * {@link Response}.\n *\n * This class is based on the `ResponseInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#responseinit).\n *\n * All values are null by default. Typical defaults can be found in the\n * {@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.\n *\n * This class may be used in tests to build {@link Response Responses} for\n * mock responses (see {@link MockBackend}).\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * import {ResponseOptions, Response} from '@angular/http';\n *\n * var options = new ResponseOptions({\n *   body: '{\"name\":\"Jeff\"}'\n * });\n * var res = new Response(options);\n *\n * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nexport class ResponseOptions {\n  // TODO: FormData | Blob\n  /**\n   * String, Object, ArrayBuffer or Blob representing the body of the {@link Response}.\n   */\n  body: string|Object|ArrayBuffer|Blob|null;\n  /**\n   * Http {@link http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html status code}\n   * associated with the response.\n   */\n  status: number|null;\n  /**\n   * Response {@link Headers headers}\n   */\n  headers: Headers|null;\n  /**\n   * @internal\n   */\n  statusText: string|null;\n  /**\n   * @internal\n   */\n  type: ResponseType|null;\n  url: string|null;\n  constructor(opts: ResponseOptionsArgs = {}) {\n    const {body, status, headers, statusText, type, url} = opts;\n    this.body = body != null ? body : null;\n    this.status = status != null ? status : null;\n    this.headers = headers != null ? headers : null;\n    this.statusText = statusText != null ? statusText : null;\n    this.type = type != null ? type : null;\n    this.url = url != null ? url : null;\n  }\n\n  /**\n   * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n   * override\n   * existing values. This method will not change the values of the instance on which it is being\n   * called.\n   *\n   * This may be useful when sharing a base `ResponseOptions` object inside tests,\n   * where certain properties may change from test to test.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * ```typescript\n   * import {ResponseOptions, Response} from '@angular/http';\n   *\n   * var options = new ResponseOptions({\n   *   body: {name: 'Jeff'}\n   * });\n   * var res = new Response(options.merge({\n   *   url: 'https://google.com'\n   * }));\n   * console.log('options.url:', options.url); // null\n   * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n   * console.log('res.url:', res.url); // https://google.com\n   * ```\n   */\n  merge(options?: ResponseOptionsArgs): ResponseOptions {\n    return new ResponseOptions({\n      body: options && options.body != null ? options.body : this.body,\n      status: options && options.status != null ? options.status : this.status,\n      headers: options && options.headers != null ? options.headers : this.headers,\n      statusText: options && options.statusText != null ? options.statusText : this.statusText,\n      type: options && options.type != null ? options.type : this.type,\n      url: options && options.url != null ? options.url : this.url,\n    });\n  }\n}\n\n/**\n * Subclass of {@link ResponseOptions}, with default values.\n *\n * Default values:\n *  * status: 200\n *  * headers: empty {@link Headers} object\n *\n * This class could be extended and bound to the {@link ResponseOptions} class\n * when configuring an {@link Injector}, in order to override the default options\n * used by {@link Http} to create {@link Response Responses}.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * import {provide} from '@angular/core';\n * import {bootstrap} from '@angular/platform-browser/browser';\n * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from\n * '@angular/http';\n * import {App} from './myapp';\n *\n * class MyOptions extends BaseResponseOptions {\n *   headers:Headers = new Headers({network: 'github'});\n * }\n *\n * bootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);\n * ```\n *\n * The options could also be extended when manually creating a {@link Response}\n * object.\n *\n * ### Example\n *\n * ```\n * import {BaseResponseOptions, Response} from '@angular/http';\n *\n * var options = new BaseResponseOptions();\n * var res = new Response(options.merge({\n *   body: 'Angular',\n *   headers: new Headers({framework: 'angular'})\n * }));\n * console.log('res.headers.get(\"framework\"):', res.headers.get('framework')); // angular\n * console.log('res.text():', res.text()); // Angular;\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\n@Injectable()\nexport class BaseResponseOptions extends ResponseOptions {\n  constructor() {\n    super({status: 200, statusText: 'Ok', type: ResponseType.Default, headers: new Headers()});\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ReadyState, RequestMethod, ResponseContentType, ResponseType} from './enums';\nimport {Headers} from './headers';\nimport {Request} from './static_request';\nimport {URLSearchParams} from './url_search_params';\n\n/**\n * Abstract class from which real backends are derived.\n *\n * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given\n * {@link Request}.\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nexport abstract class ConnectionBackend { abstract createConnection(request: any): Connection; }\n\n/**\n * Abstract class from which real connections are derived.\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nexport abstract class Connection {\n  // TODO(issue/24571): remove '!'.\n  readyState !: ReadyState;\n  // TODO(issue/24571): remove '!'.\n  request !: Request;\n  response: any;  // TODO: generic of <Response>;\n}\n\n/**\n * An XSRFStrategy configures XSRF protection (e.g. via headers) on an HTTP request.\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nexport abstract class XSRFStrategy { abstract configureRequest(req: Request): void; }\n\n/**\n * Interface for options to construct a RequestOptions, based on\n * [RequestInit](https://fetch.spec.whatwg.org/#requestinit) from the Fetch spec.\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nexport interface RequestOptionsArgs {\n  url?: string|null;\n  method?: string|RequestMethod|null;\n  /** @deprecated from 4.0.0. Use params instead. */\n  search?: string|URLSearchParams|{[key: string]: any | any[]}|null;\n  params?: string|URLSearchParams|{[key: string]: any | any[]}|null;\n  headers?: Headers|null;\n  body?: any;\n  withCredentials?: boolean|null;\n  responseType?: ResponseContentType|null;\n}\n\n/**\n * Required structure when constructing new Request();\n */\nexport interface RequestArgs extends RequestOptionsArgs { url: string|null; }\n\n/**\n * Interface for options to construct a Response, based on\n * [ResponseInit](https://fetch.spec.whatwg.org/#responseinit) from the Fetch spec.\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nexport interface ResponseOptionsArgs {\n  body?: string|Object|FormData|ArrayBuffer|Blob|null;\n  status?: number|null;\n  statusText?: string|null;\n  headers?: Headers|null;\n  type?: ResponseType|null;\n  url?: string|null;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RequestMethod} from './enums';\n\nexport function normalizeMethodName(method: string | RequestMethod): RequestMethod {\n  if (typeof method !== 'string') return method;\n\n  switch (method.toUpperCase()) {\n    case 'GET':\n      return RequestMethod.Get;\n    case 'POST':\n      return RequestMethod.Post;\n    case 'PUT':\n      return RequestMethod.Put;\n    case 'DELETE':\n      return RequestMethod.Delete;\n    case 'OPTIONS':\n      return RequestMethod.Options;\n    case 'HEAD':\n      return RequestMethod.Head;\n    case 'PATCH':\n      return RequestMethod.Patch;\n  }\n  throw new Error(`Invalid request method. The method \"${method}\" is not supported.`);\n}\n\nexport const isSuccess = (status: number): boolean => (status >= 200 && status < 300);\n\nexport function getResponseURL(xhr: any): string|null {\n  if ('responseURL' in xhr) {\n    return xhr.responseURL;\n  }\n  if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n    return xhr.getResponseHeader('X-Request-URL');\n  }\n  return null;\n}\n\nexport function stringToArrayBuffer8(input: String): ArrayBuffer {\n  const view = new Uint8Array(input.length);\n  for (let i = 0, strLen = input.length; i < strLen; i++) {\n    view[i] = input.charCodeAt(i);\n  }\n  return view.buffer;\n}\n\n\nexport function stringToArrayBuffer(input: String): ArrayBuffer {\n  const view = new Uint16Array(input.length);\n  for (let i = 0, strLen = input.length; i < strLen; i++) {\n    view[i] = input.charCodeAt(i);\n  }\n  return view.buffer;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nfunction paramParser(rawParams: string = ''): Map<string, string[]> {\n  const map = new Map<string, string[]>();\n  if (rawParams.length > 0) {\n    const params: string[] = rawParams.split('&');\n    params.forEach((param: string) => {\n      const eqIdx = param.indexOf('=');\n      const [key, val]: string[] =\n          eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)];\n      const list = map.get(key) || [];\n      list.push(val);\n      map.set(key, list);\n    });\n  }\n  return map;\n}\n/**\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n **/\nexport class QueryEncoder {\n  encodeKey(key: string): string { return standardEncoding(key); }\n\n  encodeValue(value: string): string { return standardEncoding(value); }\n}\n\nfunction standardEncoding(v: string): string {\n  return encodeURIComponent(v)\n      .replace(/%40/gi, '@')\n      .replace(/%3A/gi, ':')\n      .replace(/%24/gi, '$')\n      .replace(/%2C/gi, ',')\n      .replace(/%3B/gi, ';')\n      .replace(/%2B/gi, '+')\n      .replace(/%3D/gi, '=')\n      .replace(/%3F/gi, '?')\n      .replace(/%2F/gi, '/');\n}\n\n/**\n * Map-like representation of url search parameters, based on\n * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,\n * with several extensions for merging URLSearchParams objects:\n *   - setAll()\n *   - appendAll()\n *   - replaceAll()\n *\n * This class accepts an optional second parameter of ${@link QueryEncoder},\n * which is used to serialize parameters before making a request. By default,\n * `QueryEncoder` encodes keys and values of parameters using `encodeURIComponent`,\n * and then un-encodes certain characters that are allowed to be part of the query\n * according to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.\n *\n * These are the characters that are not encoded: `! $ \\' ( ) * + , ; A 9 - . _ ~ ? /`\n *\n * If the set of allowed query characters is not acceptable for a particular backend,\n * `QueryEncoder` can be subclassed and provided as the 2nd argument to URLSearchParams.\n *\n * ```\n * import {URLSearchParams, QueryEncoder} from '@angular/http';\n * class MyQueryEncoder extends QueryEncoder {\n *   encodeKey(k: string): string {\n *     return myEncodingFunction(k);\n *   }\n *\n *   encodeValue(v: string): string {\n *     return myEncodingFunction(v);\n *   }\n * }\n *\n * let params = new URLSearchParams('', new MyQueryEncoder());\n * ```\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nexport class URLSearchParams {\n  paramsMap: Map<string, string[]>;\n  constructor(\n      public rawParams: string = '', private queryEncoder: QueryEncoder = new QueryEncoder()) {\n    this.paramsMap = paramParser(rawParams);\n  }\n\n  clone(): URLSearchParams {\n    const clone = new URLSearchParams('', this.queryEncoder);\n    clone.appendAll(this);\n    return clone;\n  }\n\n  has(param: string): boolean { return this.paramsMap.has(param); }\n\n  get(param: string): string|null {\n    const storedParam = this.paramsMap.get(param);\n\n    return Array.isArray(storedParam) ? storedParam[0] : null;\n  }\n\n  getAll(param: string): string[] { return this.paramsMap.get(param) || []; }\n\n  set(param: string, val: string) {\n    if (val === void 0 || val === null) {\n      this.delete(param);\n      return;\n    }\n    const list = this.paramsMap.get(param) || [];\n    list.length = 0;\n    list.push(val);\n    this.paramsMap.set(param, list);\n  }\n\n  // A merge operation\n  // For each name-values pair in `searchParams`, perform `set(name, values[0])`\n  //\n  // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4], c=[8], b=[7]\"\n  //\n  // TODO(@caitp): document this better\n  setAll(searchParams: URLSearchParams) {\n    searchParams.paramsMap.forEach((value, param) => {\n      const list = this.paramsMap.get(param) || [];\n      list.length = 0;\n      list.push(value[0]);\n      this.paramsMap.set(param, list);\n    });\n  }\n\n  append(param: string, val: string): void {\n    if (val === void 0 || val === null) return;\n    const list = this.paramsMap.get(param) || [];\n    list.push(val);\n    this.paramsMap.set(param, list);\n  }\n\n  // A merge operation\n  // For each name-values pair in `searchParams`, perform `append(name, value)`\n  // for each value in `values`.\n  //\n  // E.g: \"a=[1,2], c=[8]\" + \"a=[3,4], b=[7]\" = \"a=[1,2,3,4], c=[8], b=[7]\"\n  //\n  // TODO(@caitp): document this better\n  appendAll(searchParams: URLSearchParams) {\n    searchParams.paramsMap.forEach((value, param) => {\n      const list = this.paramsMap.get(param) || [];\n      for (let i = 0; i < value.length; ++i) {\n        list.push(value[i]);\n      }\n      this.paramsMap.set(param, list);\n    });\n  }\n\n\n  // A merge operation\n  // For each name-values pair in `searchParams`, perform `delete(name)`,\n  // followed by `set(name, values)`\n  //\n  // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4,5,6], c=[8], b=[7]\"\n  //\n  // TODO(@caitp): document this better\n  replaceAll(searchParams: URLSearchParams) {\n    searchParams.paramsMap.forEach((value, param) => {\n      const list = this.paramsMap.get(param) || [];\n      list.length = 0;\n      for (let i = 0; i < value.length; ++i) {\n        list.push(value[i]);\n      }\n      this.paramsMap.set(param, list);\n    });\n  }\n\n  toString(): string {\n    const paramsList: string[] = [];\n    this.paramsMap.forEach((values, k) => {\n      values.forEach(\n          v => paramsList.push(\n              this.queryEncoder.encodeKey(k) + '=' + this.queryEncoder.encodeValue(v)));\n    });\n    return paramsList.join('&');\n  }\n\n  delete (param: string): void { this.paramsMap.delete(param); }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {stringToArrayBuffer} from './http_utils';\nimport {URLSearchParams} from './url_search_params';\n\n\n/**\n * HTTP request body used by both {@link Request} and {@link Response}\n * https://fetch.spec.whatwg.org/#body\n */\nexport abstract class Body {\n  /**\n   * @internal\n   */\n  protected _body: any;\n\n  /**\n   * Attempts to return body as parsed `JSON` object, or raises an exception.\n   */\n  json(): any {\n    if (typeof this._body === 'string') {\n      return JSON.parse(<string>this._body);\n    }\n\n    if (this._body instanceof ArrayBuffer) {\n      return JSON.parse(this.text());\n    }\n\n    return this._body;\n  }\n\n  /**\n   * Returns the body as a string, presuming `toString()` can be called on the response body.\n   *\n   * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the\n   * bytes in the buffer will be interpreted. Valid values are:\n   *\n   * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters\n   *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.\n   *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken\n   *   into consideration. This is the default behavior to avoid breaking apps, but should be\n   *   considered deprecated.\n   *\n   * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).\n   */\n  text(encodingHint: 'legacy'|'iso-8859' = 'legacy'): string {\n    if (this._body instanceof URLSearchParams) {\n      return this._body.toString();\n    }\n\n    if (this._body instanceof ArrayBuffer) {\n      switch (encodingHint) {\n        case 'legacy':\n          return String.fromCharCode.apply(null, new Uint16Array(this._body as ArrayBuffer));\n        case 'iso-8859':\n          return String.fromCharCode.apply(null, new Uint8Array(this._body as ArrayBuffer));\n        default:\n          throw new Error(`Invalid value for encodingHint: ${encodingHint}`);\n      }\n    }\n\n    if (this._body == null) {\n      return '';\n    }\n\n    if (typeof this._body === 'object') {\n      return JSON.stringify(this._body, null, 2);\n    }\n\n    return this._body.toString();\n  }\n\n  /**\n   * Return the body as an ArrayBuffer\n   */\n  arrayBuffer(): ArrayBuffer {\n    if (this._body instanceof ArrayBuffer) {\n      return <ArrayBuffer>this._body;\n    }\n\n    return stringToArrayBuffer(this.text());\n  }\n\n  /**\n    * Returns the request's body as a Blob, assuming that body exists.\n    */\n  blob(): Blob {\n    if (this._body instanceof Blob) {\n      return <Blob>this._body;\n    }\n\n    if (this._body instanceof ArrayBuffer) {\n      return new Blob([this._body]);\n    }\n\n    throw new Error('The request body isn\\'t either a blob or an array buffer');\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n\nimport {ResponseOptions} from './base_response_options';\nimport {Body} from './body';\nimport {ResponseType} from './enums';\nimport {Headers} from './headers';\n\n\n/**\n * Creates `Response` instances from provided values.\n *\n * Though this object isn't\n * usually instantiated by end-users, it is the primary object interacted with when it comes time to\n * add data to a view.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * http.request('my-friends.txt').subscribe(response => this.friends = response.text());\n * ```\n *\n * The Response's interface is inspired by the Response constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body\n * can be accessed many times. There are other differences in the implementation, but this is the\n * most significant.\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nexport class Response extends Body {\n  /**\n   * One of \"basic\", \"cors\", \"default\", \"error\", or \"opaque\".\n   *\n   * Defaults to \"default\".\n   */\n  type: ResponseType;\n  /**\n   * True if the response's status is within 200-299\n   */\n  ok: boolean;\n  /**\n   * URL of response.\n   *\n   * Defaults to empty string.\n   */\n  url: string;\n  /**\n   * Status code returned by server.\n   *\n   * Defaults to 200.\n   */\n  status: number;\n  /**\n   * Text representing the corresponding reason phrase to the `status`, as defined in [ietf rfc 2616\n   * section 6.1.1](https://tools.ietf.org/html/rfc2616#section-6.1.1)\n   *\n   * Defaults to \"OK\"\n   */\n  statusText: string|null;\n  /**\n   * Non-standard property\n   *\n   * Denotes how many of the response body's bytes have been loaded, for example if the response is\n   * the result of a progress event.\n   */\n  // TODO(issue/24571): remove '!'.\n  bytesLoaded !: number;\n  /**\n   * Non-standard property\n   *\n   * Denotes how many bytes are expected in the final response body.\n   */\n  // TODO(issue/24571): remove '!'.\n  totalBytes !: number;\n  /**\n   * Headers object based on the `Headers` class in the [Fetch\n   * Spec](https://fetch.spec.whatwg.org/#headers-class).\n   */\n  headers: Headers|null;\n\n  constructor(responseOptions: ResponseOptions) {\n    super();\n    this._body = responseOptions.body;\n    this.status = responseOptions.status !;\n    this.ok = (this.status >= 200 && this.status <= 299);\n    this.statusText = responseOptions.statusText;\n    this.headers = responseOptions.headers;\n    this.type = responseOptions.type !;\n    this.url = responseOptions.url !;\n  }\n\n  toString(): string {\n    return `Response with status: ${this.status} ${this.statusText} for URL: ${this.url}`;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\n\nlet _nextRequestId = 0;\nexport const JSONP_HOME = '__ng_jsonp__';\nlet _jsonpConnections: {[key: string]: any}|null = null;\n\nfunction _getJsonpConnections(): {[key: string]: any} {\n  const w: {[key: string]: any} = typeof window == 'object' ? window : {};\n  if (_jsonpConnections === null) {\n    _jsonpConnections = w[JSONP_HOME] = {};\n  }\n  return _jsonpConnections;\n}\n\n// Make sure not to evaluate this in a non-browser environment!\n@Injectable()\nexport class BrowserJsonp {\n  // Construct a <script> element with the specified URL\n  build(url: string): any {\n    const node = document.createElement('script');\n    node.src = url;\n    return node;\n  }\n\n  nextRequestID(): string { return `__req${_nextRequestId++}`; }\n\n  requestCallback(id: string): string { return `${JSONP_HOME}.${id}.finished`; }\n\n  exposeConnection(id: string, connection: any) {\n    const connections = _getJsonpConnections();\n    connections[id] = connection;\n  }\n\n  removeConnection(id: string) {\n    const connections = _getJsonpConnections();\n    connections[id] = null;\n  }\n\n  // Attach the <script> element to the DOM\n  send(node: any) { document.body.appendChild(<Node>(node)); }\n\n  // Remove <script> element from the DOM\n  cleanup(node: any) {\n    if (node.parentNode) {\n      node.parentNode.removeChild(<Node>(node));\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Observable, Observer} from 'rxjs';\n\nimport {ResponseOptions} from '../base_response_options';\nimport {ReadyState, RequestMethod, ResponseType} from '../enums';\nimport {Connection, ConnectionBackend} from '../interfaces';\nimport {Request} from '../static_request';\nimport {Response} from '../static_response';\n\nimport {BrowserJsonp} from './browser_jsonp';\n\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';\n\n/**\n * Base class for an in-flight JSONP request.\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nexport class JSONPConnection implements Connection {\n  // TODO(issue/24571): remove '!'.\n  private _id !: string;\n  // TODO(issue/24571): remove '!'.\n  private _script !: Element;\n  private _responseData: any;\n  private _finished: boolean = false;\n\n  /**\n   * The {@link ReadyState} of this request.\n   */\n  // TODO(issue/24571): remove '!'.\n  readyState !: ReadyState;\n\n  /**\n   * The outgoing HTTP request.\n   */\n  request: Request;\n\n  /**\n   * An observable that completes with the response, when the request is finished.\n   */\n  response: Observable<Response>;\n\n  /** @internal */\n  constructor(\n      req: Request, private _dom: BrowserJsonp, private baseResponseOptions?: ResponseOptions) {\n    if (req.method !== RequestMethod.Get) {\n      throw new TypeError(JSONP_ERR_WRONG_METHOD);\n    }\n    this.request = req;\n    this.response = new Observable<Response>((responseObserver: Observer<Response>) => {\n\n      this.readyState = ReadyState.Loading;\n      const id = this._id = _dom.nextRequestID();\n\n      _dom.exposeConnection(id, this);\n\n      // Workaround Dart\n      // url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);\n      const callback = _dom.requestCallback(this._id);\n      let url: string = req.url;\n      if (url.indexOf('=JSONP_CALLBACK&') > -1) {\n        url = url.replace('=JSONP_CALLBACK&', `=${callback}&`);\n      } else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {\n        url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + `=${callback}`;\n      }\n\n      const script = this._script = _dom.build(url);\n\n      const onLoad = (event: Event) => {\n        if (this.readyState === ReadyState.Cancelled) return;\n        this.readyState = ReadyState.Done;\n        _dom.cleanup(script);\n        if (!this._finished) {\n          let responseOptions =\n              new ResponseOptions({body: JSONP_ERR_NO_CALLBACK, type: ResponseType.Error, url});\n          if (baseResponseOptions) {\n            responseOptions = baseResponseOptions.merge(responseOptions);\n          }\n          responseObserver.error(new Response(responseOptions));\n          return;\n        }\n\n        let responseOptions = new ResponseOptions({body: this._responseData, url});\n        if (this.baseResponseOptions) {\n          responseOptions = this.baseResponseOptions.merge(responseOptions);\n        }\n\n        responseObserver.next(new Response(responseOptions));\n        responseObserver.complete();\n      };\n\n      const onError = (error: Error) => {\n        if (this.readyState === ReadyState.Cancelled) return;\n        this.readyState = ReadyState.Done;\n        _dom.cleanup(script);\n        let responseOptions = new ResponseOptions({body: error.message, type: ResponseType.Error});\n        if (baseResponseOptions) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        responseObserver.error(new Response(responseOptions));\n      };\n\n      script.addEventListener('load', onLoad);\n      script.addEventListener('error', onError);\n\n      _dom.send(script);\n\n      return () => {\n        this.readyState = ReadyState.Cancelled;\n        script.removeEventListener('load', onLoad);\n        script.removeEventListener('error', onError);\n        this._dom.cleanup(script);\n      };\n    });\n  }\n\n  /**\n   * Callback called when the JSONP request completes, to notify the application\n   * of the new data.\n   */\n  finished(data?: any) {\n    // Don't leak connections\n    this._finished = true;\n    this._dom.removeConnection(this._id);\n    if (this.readyState === ReadyState.Cancelled) return;\n    this._responseData = data;\n  }\n}\n\n/**\n * A {@link ConnectionBackend} that uses the JSONP strategy of making requests.\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\n@Injectable()\nexport class JSONPBackend extends ConnectionBackend {\n  /** @internal */\n  constructor(private _browserJSONP: BrowserJsonp, private _baseResponseOptions: ResponseOptions) {\n    super();\n  }\n\n  createConnection(request: Request): JSONPConnection {\n    return new JSONPConnection(request, this._browserJSONP, this._baseResponseOptions);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {ÉµgetDOM as getDOM} from '@angular/platform-browser';\nimport {Observable, Observer} from 'rxjs';\nimport {ResponseOptions} from '../base_response_options';\nimport {ContentType, ReadyState, RequestMethod, ResponseContentType, ResponseType} from '../enums';\nimport {Headers} from '../headers';\nimport {getResponseURL, isSuccess} from '../http_utils';\nimport {Connection, ConnectionBackend, XSRFStrategy} from '../interfaces';\nimport {Request} from '../static_request';\nimport {Response} from '../static_response';\nimport {BrowserXhr} from './browser_xhr';\n\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n\n/**\n * Creates connections using `XMLHttpRequest`. Given a fully-qualified\n * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the\n * request.\n *\n * This class would typically not be created or interacted with directly inside applications, though\n * the {@link MockConnection} may be interacted with in tests.\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nexport class XHRConnection implements Connection {\n  request: Request;\n  /**\n   * Response {@link EventEmitter} which emits a single {@link Response} value on load event of\n   * `XMLHttpRequest`.\n   */\n  response: Observable<Response>;\n  // TODO(issue/24571): remove '!'.\n  readyState !: ReadyState;\n  constructor(req: Request, browserXHR: BrowserXhr, baseResponseOptions?: ResponseOptions) {\n    this.request = req;\n    this.response = new Observable<Response>((responseObserver: Observer<Response>) => {\n      const _xhr: XMLHttpRequest = browserXHR.build();\n      _xhr.open(RequestMethod[req.method].toUpperCase(), req.url);\n      if (req.withCredentials != null) {\n        _xhr.withCredentials = req.withCredentials;\n      }\n      // load event handler\n      const onLoad = () => {\n        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n        let status: number = _xhr.status === 1223 ? 204 : _xhr.status;\n\n        let body: any = null;\n\n        // HTTP 204 means no content\n        if (status !== 204) {\n          // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n          // response/responseType properties were introduced in ResourceLoader Level2 spec\n          // (supported by IE10)\n          body = (typeof _xhr.response === 'undefined') ? _xhr.responseText : _xhr.response;\n\n          // Implicitly strip a potential XSSI prefix.\n          if (typeof body === 'string') {\n            body = body.replace(XSSI_PREFIX, '');\n          }\n        }\n\n        // fix status code when it is 0 (0 status is undocumented).\n        // Occurs when accessing file resources or on Android 4.1 stock browser\n        // while retrieving files from application cache.\n        if (status === 0) {\n          status = body ? 200 : 0;\n        }\n\n        const headers: Headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());\n        // IE 9 does not provide the way to get URL of response\n        const url = getResponseURL(_xhr) || req.url;\n        const statusText: string = _xhr.statusText || 'OK';\n\n        let responseOptions = new ResponseOptions({body, status, headers, statusText, url});\n        if (baseResponseOptions != null) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        const response = new Response(responseOptions);\n        response.ok = isSuccess(status);\n        if (response.ok) {\n          responseObserver.next(response);\n          // TODO(gdi2290): defer complete if array buffer until done\n          responseObserver.complete();\n          return;\n        }\n        responseObserver.error(response);\n      };\n      // error event handler\n      const onError = (err: ErrorEvent) => {\n        let responseOptions = new ResponseOptions({\n          body: err,\n          type: ResponseType.Error,\n          status: _xhr.status,\n          statusText: _xhr.statusText,\n        });\n        if (baseResponseOptions != null) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        responseObserver.error(new Response(responseOptions));\n      };\n\n      this.setDetectedContentType(req, _xhr);\n\n      if (req.headers == null) {\n        req.headers = new Headers();\n      }\n      if (!req.headers.has('Accept')) {\n        req.headers.append('Accept', 'application/json, text/plain, */*');\n      }\n      req.headers.forEach((values, name) => _xhr.setRequestHeader(name !, values.join(',')));\n\n      // Select the correct buffer type to store the response\n      if (req.responseType != null && _xhr.responseType != null) {\n        switch (req.responseType) {\n          case ResponseContentType.ArrayBuffer:\n            _xhr.responseType = 'arraybuffer';\n            break;\n          case ResponseContentType.Json:\n            _xhr.responseType = 'json';\n            break;\n          case ResponseContentType.Text:\n            _xhr.responseType = 'text';\n            break;\n          case ResponseContentType.Blob:\n            _xhr.responseType = 'blob';\n            break;\n          default:\n            throw new Error('The selected responseType is not supported');\n        }\n      }\n\n      _xhr.addEventListener('load', onLoad);\n      _xhr.addEventListener('error', onError);\n\n      _xhr.send(this.request.getBody());\n\n      return () => {\n        _xhr.removeEventListener('load', onLoad);\n        _xhr.removeEventListener('error', onError);\n        _xhr.abort();\n      };\n    });\n  }\n\n  setDetectedContentType(req: any /** TODO Request */, _xhr: any /** XMLHttpRequest */) {\n    // Skip if a custom Content-Type header is provided\n    if (req.headers != null && req.headers.get('Content-Type') != null) {\n      return;\n    }\n\n    // Set the detected content type\n    switch (req.contentType) {\n      case ContentType.NONE:\n        break;\n      case ContentType.JSON:\n        _xhr.setRequestHeader('content-type', 'application/json');\n        break;\n      case ContentType.FORM:\n        _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        break;\n      case ContentType.TEXT:\n        _xhr.setRequestHeader('content-type', 'text/plain');\n        break;\n      case ContentType.BLOB:\n        const blob = req.blob();\n        if (blob.type) {\n          _xhr.setRequestHeader('content-type', blob.type);\n        }\n        break;\n    }\n  }\n}\n\n/**\n * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application\n * using a cookie. See https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\n * for more information on XSRF.\n *\n * Applications can configure custom cookie and header names by binding an instance of this class\n * with different `cookieName` and `headerName` values. See the main HTTP documentation for more\n * details.\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nexport class CookieXSRFStrategy implements XSRFStrategy {\n  constructor(\n      private _cookieName: string = 'XSRF-TOKEN', private _headerName: string = 'X-XSRF-TOKEN') {}\n\n  configureRequest(req: Request): void {\n    const xsrfToken = getDOM().getCookie(this._cookieName);\n    if (xsrfToken) {\n      req.headers.set(this._headerName, xsrfToken);\n    }\n  }\n}\n\n/**\n * Creates {@link XHRConnection} instances.\n *\n * This class would typically not be used by end users, but could be\n * overridden if a different backend implementation should be used,\n * such as in a node backend.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '@angular/http';\n * @Component({\n *   viewProviders: [\n *     HTTP_PROVIDERS,\n *     {provide: Http, useFactory: (backend, options) => {\n *       return new Http(backend, options);\n *     }, deps: [MyNodeBackend, BaseRequestOptions]}]\n * })\n * class MyComponent {\n *   constructor(http:Http) {\n *     http.request('people.json').subscribe(res => this.people = res.json());\n *   }\n * }\n * ```\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\n@Injectable()\nexport class XHRBackend implements ConnectionBackend {\n  constructor(\n      private _browserXHR: BrowserXhr, private _baseResponseOptions: ResponseOptions,\n      private _xsrfStrategy: XSRFStrategy) {}\n\n  createConnection(request: Request): XHRConnection {\n    this._xsrfStrategy.configureRequest(request);\n    return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\n\nimport {RequestMethod, ResponseContentType} from './enums';\nimport {Headers} from './headers';\nimport {normalizeMethodName} from './http_utils';\nimport {RequestOptionsArgs} from './interfaces';\nimport {URLSearchParams} from './url_search_params';\n\n\n/**\n * Creates a request options object to be optionally provided when instantiating a\n * {@link Request}.\n *\n * This class is based on the `RequestInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#requestinit).\n *\n * All values are null by default. Typical defaults can be found in the {@link BaseRequestOptions}\n * class, which sub-classes `RequestOptions`.\n *\n * ```typescript\n * import {RequestOptions, Request, RequestMethod} from '@angular/http';\n *\n * const options = new RequestOptions({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * });\n * const req = new Request(options);\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // https://google.com\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nexport class RequestOptions {\n  /**\n   * Http method with which to execute a {@link Request}.\n   * Acceptable methods are defined in the {@link RequestMethod} enum.\n   */\n  method: RequestMethod|string|null;\n  /**\n   * {@link Headers} to be attached to a {@link Request}.\n   */\n  headers: Headers|null;\n  /**\n   * Body to be used when creating a {@link Request}.\n   */\n  body: any;\n  /**\n   * Url with which to perform a {@link Request}.\n   */\n  url: string|null;\n  /**\n   * Search parameters to be included in a {@link Request}.\n   */\n  params: URLSearchParams;\n  /**\n   * @deprecated from 4.0.0. Use params instead.\n   */\n  get search(): URLSearchParams { return this.params; }\n  /**\n   * @deprecated from 4.0.0. Use params instead.\n   */\n  set search(params: URLSearchParams) { this.params = params; }\n  /**\n   * Enable use credentials for a {@link Request}.\n   */\n  withCredentials: boolean|null;\n  /*\n   * Select a buffer to store the response, such as ArrayBuffer, Blob, Json (or Document)\n   */\n  responseType: ResponseContentType|null;\n\n  // TODO(Dzmitry): remove search when this.search is removed\n  constructor(opts: RequestOptionsArgs = {}) {\n    const {method, headers, body, url, search, params, withCredentials, responseType} = opts;\n    this.method = method != null ? normalizeMethodName(method) : null;\n    this.headers = headers != null ? headers : null;\n    this.body = body != null ? body : null;\n    this.url = url != null ? url : null;\n    this.params = this._mergeSearchParams(params || search);\n    this.withCredentials = withCredentials != null ? withCredentials : null;\n    this.responseType = responseType != null ? responseType : null;\n  }\n\n  /**\n   * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n   * existing values. This method will not change the values of the instance on which it is being\n   * called.\n   *\n   * Note that `headers` and `search` will override existing values completely if present in\n   * the `options` object. If these values should be merged, it should be done prior to calling\n   * `merge` on the `RequestOptions` instance.\n   *\n   * ```typescript\n   * import {RequestOptions, Request, RequestMethod} from '@angular/http';\n   *\n   * const options = new RequestOptions({\n   *   method: RequestMethod.Post\n   * });\n   * const req = new Request(options.merge({\n   *   url: 'https://google.com'\n   * }));\n   * console.log('req.method:', RequestMethod[req.method]); // Post\n   * console.log('options.url:', options.url); // null\n   * console.log('req.url:', req.url); // https://google.com\n   * ```\n   */\n  merge(options?: RequestOptionsArgs): RequestOptions {\n    return new RequestOptions({\n      method: options && options.method != null ? options.method : this.method,\n      headers: options && options.headers != null ? options.headers : new Headers(this.headers),\n      body: options && options.body != null ? options.body : this.body,\n      url: options && options.url != null ? options.url : this.url,\n      params: options && this._mergeSearchParams(options.params || options.search),\n      withCredentials: options && options.withCredentials != null ? options.withCredentials :\n                                                                    this.withCredentials,\n      responseType: options && options.responseType != null ? options.responseType :\n                                                              this.responseType\n    });\n  }\n\n  private _mergeSearchParams(params?: string|URLSearchParams|{[key: string]: any | any[]}|\n                             null): URLSearchParams {\n    if (!params) return this.params;\n\n    if (params instanceof URLSearchParams) {\n      return params.clone();\n    }\n\n    if (typeof params === 'string') {\n      return new URLSearchParams(params);\n    }\n\n    return this._parseParams(params);\n  }\n\n  private _parseParams(objParams: {[key: string]: any | any[]} = {}): URLSearchParams {\n    const params = new URLSearchParams();\n    Object.keys(objParams).forEach((key: string) => {\n      const value: any|any[] = objParams[key];\n      if (Array.isArray(value)) {\n        value.forEach((item: any) => this._appendParam(key, item, params));\n      } else {\n        this._appendParam(key, value, params);\n      }\n    });\n    return params;\n  }\n\n  private _appendParam(key: string, value: any, params: URLSearchParams): void {\n    if (typeof value !== 'string') {\n      value = JSON.stringify(value);\n    }\n    params.append(key, value);\n  }\n}\n\n/**\n * Subclass of {@link RequestOptions}, with default values.\n *\n * Default values:\n *  * method: {@link RequestMethod RequestMethod.Get}\n *  * headers: empty {@link Headers} object\n *\n * This class could be extended and bound to the {@link RequestOptions} class\n * when configuring an {@link Injector}, in order to override the default options\n * used by {@link Http} to create and send {@link Request Requests}.\n *\n * ```typescript\n * import {BaseRequestOptions, RequestOptions} from '@angular/http';\n *\n * class MyOptions extends BaseRequestOptions {\n *   search: string = 'coreTeam=true';\n * }\n *\n * {provide: RequestOptions, useClass: MyOptions};\n * ```\n *\n * The options could also be extended when manually creating a {@link Request}\n * object.\n *\n * ```\n * import {BaseRequestOptions, Request, RequestMethod} from '@angular/http';\n *\n * const options = new BaseRequestOptions();\n * const req = new Request(options.merge({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * }));\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // null\n * console.log('req.url:', req.url); // https://google.com\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\n@Injectable()\nexport class BaseRequestOptions extends RequestOptions {\n  constructor() { super({method: RequestMethod.Get, headers: new Headers()}); }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Body} from './body';\nimport {ContentType, RequestMethod, ResponseContentType} from './enums';\nimport {Headers} from './headers';\nimport {normalizeMethodName} from './http_utils';\nimport {RequestArgs} from './interfaces';\nimport {URLSearchParams} from './url_search_params';\n\n\n// TODO(jeffbcross): properly implement body accessors\n/**\n * Creates `Request` instances from provided values.\n *\n * The Request's interface is inspired by the Request constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#request-class),\n * but is considered a static value whose body can be accessed many times. There are other\n * differences in the implementation, but this is the most significant.\n *\n * `Request` instances are typically created by higher-level classes, like {@link Http} and\n * {@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.\n * One such example is when creating services that wrap higher-level services, like {@link Http},\n * where it may be useful to generate a `Request` with arbitrary headers and search params.\n *\n * ```typescript\n * import {Injectable, Injector} from '@angular/core';\n * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '@angular/http';\n *\n * @Injectable()\n * class AutoAuthenticator {\n *   constructor(public http:Http) {}\n *   request(url:string) {\n *     return this.http.request(new Request({\n *       method: RequestMethod.Get,\n *       url: url,\n *       search: 'password=123'\n *     }));\n *   }\n * }\n *\n * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);\n * var authenticator = injector.get(AutoAuthenticator);\n * authenticator.request('people.json').subscribe(res => {\n *   //URL should have included '?password=123'\n *   console.log('people', res.json());\n * });\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nexport class Request extends Body {\n  /**\n   * Http method with which to perform the request.\n   */\n  method: RequestMethod;\n  /**\n   * {@link Headers} instance\n   */\n  headers: Headers;\n  /** Url of the remote resource */\n  url: string;\n  /** Type of the request body **/\n  private contentType: ContentType;\n  /** Enable use credentials */\n  withCredentials: boolean;\n  /** Buffer to store the response */\n  responseType: ResponseContentType;\n  constructor(requestOptions: RequestArgs) {\n    super();\n    // TODO: assert that url is present\n    const url = requestOptions.url;\n    this.url = requestOptions.url !;\n    const paramsArg = requestOptions.params || requestOptions.search;\n    if (paramsArg) {\n      let params: string;\n      if (typeof paramsArg === 'object' && !(paramsArg instanceof URLSearchParams)) {\n        params = urlEncodeParams(paramsArg).toString();\n      } else {\n        params = paramsArg.toString();\n      }\n      if (params.length > 0) {\n        let prefix = '?';\n        if (this.url.indexOf('?') != -1) {\n          prefix = (this.url[this.url.length - 1] == '&') ? '' : '&';\n        }\n        // TODO: just delete search-query-looking string in url?\n        this.url = url + prefix + params;\n      }\n    }\n    this._body = requestOptions.body;\n    this.method = normalizeMethodName(requestOptions.method !);\n    // TODO(jeffbcross): implement behavior\n    // Defaults to 'omit', consistent with browser\n    this.headers = new Headers(requestOptions.headers);\n    this.contentType = this.detectContentType();\n    this.withCredentials = requestOptions.withCredentials !;\n    this.responseType = requestOptions.responseType !;\n  }\n\n  /**\n   * Returns the content type enum based on header options.\n   */\n  detectContentType(): ContentType {\n    switch (this.headers.get('content-type')) {\n      case 'application/json':\n        return ContentType.JSON;\n      case 'application/x-www-form-urlencoded':\n        return ContentType.FORM;\n      case 'multipart/form-data':\n        return ContentType.FORM_DATA;\n      case 'text/plain':\n      case 'text/html':\n        return ContentType.TEXT;\n      case 'application/octet-stream':\n        return this._body instanceof ArrayBuffer ? ContentType.ARRAY_BUFFER : ContentType.BLOB;\n      default:\n        return this.detectContentTypeFromBody();\n    }\n  }\n\n  /**\n   * Returns the content type of request's body based on its type.\n   */\n  detectContentTypeFromBody(): ContentType {\n    if (this._body == null) {\n      return ContentType.NONE;\n    } else if (this._body instanceof URLSearchParams) {\n      return ContentType.FORM;\n    } else if (this._body instanceof FormData) {\n      return ContentType.FORM_DATA;\n    } else if (this._body instanceof Blob) {\n      return ContentType.BLOB;\n    } else if (this._body instanceof ArrayBuffer) {\n      return ContentType.ARRAY_BUFFER;\n    } else if (this._body && typeof this._body === 'object') {\n      return ContentType.JSON;\n    } else {\n      return ContentType.TEXT;\n    }\n  }\n\n  /**\n   * Returns the request's body according to its type. If body is undefined, return\n   * null.\n   */\n  getBody(): any {\n    switch (this.contentType) {\n      case ContentType.JSON:\n        return this.text();\n      case ContentType.FORM:\n        return this.text();\n      case ContentType.FORM_DATA:\n        return this._body;\n      case ContentType.TEXT:\n        return this.text();\n      case ContentType.BLOB:\n        return this.blob();\n      case ContentType.ARRAY_BUFFER:\n        return this.arrayBuffer();\n      default:\n        return null;\n    }\n  }\n}\n\nfunction urlEncodeParams(params: {[key: string]: any}): URLSearchParams {\n  const searchParams = new URLSearchParams();\n  Object.keys(params).forEach(key => {\n    const value = params[key];\n    if (value && Array.isArray(value)) {\n      value.forEach(element => searchParams.append(key, element.toString()));\n    } else {\n      searchParams.append(key, value.toString());\n    }\n  });\n  return searchParams;\n}\n\nconst noop = function() {};\nconst w = typeof window == 'object' ? window : noop;\nconst FormData = (w as any /** TODO #9100 */)['FormData'] || noop;\nconst Blob = (w as any /** TODO #9100 */)['Blob'] || noop;\nexport const ArrayBuffer: ArrayBufferConstructor =\n    (w as any /** TODO #9100 */)['ArrayBuffer'] || noop;\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs';\n\nimport {BaseRequestOptions, RequestOptions} from './base_request_options';\nimport {RequestMethod} from './enums';\nimport {ConnectionBackend, RequestArgs, RequestOptionsArgs} from './interfaces';\nimport {Request} from './static_request';\nimport {Response} from './static_response';\n\nfunction httpRequest(backend: ConnectionBackend, request: Request): Observable<Response> {\n  return backend.createConnection(request).response;\n}\n\nfunction mergeOptions(\n    defaultOpts: BaseRequestOptions, providedOpts: RequestOptionsArgs | undefined,\n    method: RequestMethod, url: string): RequestArgs {\n  const newOptions = defaultOpts;\n  if (providedOpts) {\n    // Hack so Dart can used named parameters\n    return newOptions.merge(new RequestOptions({\n      method: providedOpts.method || method,\n      url: providedOpts.url || url,\n      search: providedOpts.search,\n      params: providedOpts.params,\n      headers: providedOpts.headers,\n      body: providedOpts.body,\n      withCredentials: providedOpts.withCredentials,\n      responseType: providedOpts.responseType\n    })) as RequestArgs;\n  }\n\n  return newOptions.merge(new RequestOptions({method, url})) as RequestArgs;\n}\n\n/**\n * Performs http requests using `XMLHttpRequest` as the default backend.\n *\n * `Http` is available as an injectable class, with methods to perform http requests. Calling\n * `request` returns an `Observable` which will emit a single {@link Response} when a\n * response is received.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * import {Http, HTTP_PROVIDERS} from '@angular/http';\n * import {map} from 'rxjs/operators';\n *\n * @Component({\n *   selector: 'http-app',\n *   viewProviders: [HTTP_PROVIDERS],\n *   templateUrl: 'people.html'\n * })\n * class PeopleComponent {\n *   constructor(http: Http) {\n *     http.get('people.json')\n *       // Call map on the response observable to get the parsed people object\n *       .pipe(map(res => res.json()))\n *       // Subscribe to the observable to get the parsed people object and attach it to the\n *       // component\n *       .subscribe(people => this.people = people);\n *   }\n * }\n * ```\n *\n *\n * ### Example\n *\n * ```\n * http.get('people.json').subscribe((res:Response) => this.people = res.json());\n * ```\n *\n * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a \"Backend\" (\n * {@link XHRBackend} in this case), which could be mocked with dependency injection by replacing\n * the {@link XHRBackend} provider, as in the following example:\n *\n * ### Example\n *\n * ```typescript\n * import {BaseRequestOptions, Http} from '@angular/http';\n * import {MockBackend} from '@angular/http/testing';\n * var injector = Injector.resolveAndCreate([\n *   BaseRequestOptions,\n *   MockBackend,\n *   {provide: Http, useFactory:\n *       function(backend, defaultOptions) {\n *         return new Http(backend, defaultOptions);\n *       },\n *       deps: [MockBackend, BaseRequestOptions]}\n * ]);\n * var http = injector.get(Http);\n * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\n@Injectable()\nexport class Http {\n  constructor(protected _backend: ConnectionBackend, protected _defaultOptions: RequestOptions) {}\n\n  /**\n   * Performs any type of http request. First argument is required, and can either be a url or\n   * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}\n   * object can be provided as the 2nd argument. The options object will be merged with the values\n   * of {@link BaseRequestOptions} before performing the request.\n   */\n  request(url: string|Request, options?: RequestOptionsArgs): Observable<Response> {\n    let responseObservable: any;\n    if (typeof url === 'string') {\n      responseObservable = httpRequest(\n          this._backend,\n          new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, <string>url)));\n    } else if (url instanceof Request) {\n      responseObservable = httpRequest(this._backend, url);\n    } else {\n      throw new Error('First argument must be a url string or Request instance.');\n    }\n    return responseObservable;\n  }\n\n  /**\n   * Performs a request with `get` http method.\n   */\n  get(url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(\n        new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));\n  }\n\n  /**\n   * Performs a request with `post` http method.\n   */\n  post(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(new Request(mergeOptions(\n        this._defaultOptions.merge(new RequestOptions({body: body})), options, RequestMethod.Post,\n        url)));\n  }\n\n  /**\n   * Performs a request with `put` http method.\n   */\n  put(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(new Request(mergeOptions(\n        this._defaultOptions.merge(new RequestOptions({body: body})), options, RequestMethod.Put,\n        url)));\n  }\n\n  /**\n   * Performs a request with `delete` http method.\n   */\n  delete (url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(\n        new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Delete, url)));\n  }\n\n  /**\n   * Performs a request with `patch` http method.\n   */\n  patch(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(new Request(mergeOptions(\n        this._defaultOptions.merge(new RequestOptions({body: body})), options, RequestMethod.Patch,\n        url)));\n  }\n\n  /**\n   * Performs a request with `head` http method.\n   */\n  head(url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(\n        new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Head, url)));\n  }\n\n  /**\n   * Performs a request with `options` http method.\n   */\n  options(url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(\n        new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Options, url)));\n  }\n}\n\n\n/**\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\n@Injectable()\nexport class Jsonp extends Http {\n  constructor(backend: ConnectionBackend, defaultOptions: RequestOptions) {\n    super(backend, defaultOptions);\n  }\n\n  /**\n   * Performs any type of http request. First argument is required, and can either be a url or\n   * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}\n   * object can be provided as the 2nd argument. The options object will be merged with the values\n   * of {@link BaseRequestOptions} before performing the request.\n   *\n   * @security Regular XHR is the safest alternative to JSONP for most applications, and is\n   * supported by all current browsers. Because JSONP creates a `<script>` element with\n   * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n   * source could expose your application to XSS risks. Data exposed by JSONP may also be\n   * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n   * future security issues (e.g. content sniffing).  For more detail, see the\n   * [Security Guide](http://g.co/ng/security).\n   */\n  request(url: string|Request, options?: RequestOptionsArgs): Observable<Response> {\n    let responseObservable: any;\n    if (typeof url === 'string') {\n      url =\n          new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, <string>url));\n    }\n    if (url instanceof Request) {\n      if (url.method !== RequestMethod.Get) {\n        throw new Error('JSONP requests must use GET request method.');\n      }\n      responseObservable = httpRequest(this._backend, url);\n    } else {\n      throw new Error('First argument must be a url string or Request instance.');\n    }\n    return responseObservable;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * The http module provides services to perform http requests. To get started, see the {@link Http}\n * class.\n */\nimport {NgModule} from '@angular/core';\n\nimport {BrowserJsonp} from './backends/browser_jsonp';\nimport {BrowserXhr} from './backends/browser_xhr';\nimport {JSONPBackend} from './backends/jsonp_backend';\nimport {CookieXSRFStrategy, XHRBackend} from './backends/xhr_backend';\nimport {BaseRequestOptions, RequestOptions} from './base_request_options';\nimport {BaseResponseOptions, ResponseOptions} from './base_response_options';\nimport {Http, Jsonp} from './http';\nimport {XSRFStrategy} from './interfaces';\n\n\nexport function _createDefaultCookieXSRFStrategy() {\n  return new CookieXSRFStrategy();\n}\n\nexport function httpFactory(xhrBackend: XHRBackend, requestOptions: RequestOptions): Http {\n  return new Http(xhrBackend, requestOptions);\n}\n\nexport function jsonpFactory(jsonpBackend: JSONPBackend, requestOptions: RequestOptions): Jsonp {\n  return new Jsonp(jsonpBackend, requestOptions);\n}\n\n\n/**\n * The module that includes http's providers\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\n@NgModule({\n  providers: [\n    // TODO(pascal): use factory type annotations once supported in DI\n    // issue: https://github.com/angular/angular/issues/3183\n    {provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions]},\n    BrowserXhr,\n    {provide: RequestOptions, useClass: BaseRequestOptions},\n    {provide: ResponseOptions, useClass: BaseResponseOptions},\n    XHRBackend,\n    {provide: XSRFStrategy, useFactory: _createDefaultCookieXSRFStrategy},\n  ],\n})\nexport class HttpModule {\n}\n\n/**\n * The module that includes jsonp's providers\n *\n * @deprecated see https://angular.io/api/common/http/HttpClient#jsonp\n * @publicApi\n */\n@NgModule({\n  providers: [\n    // TODO(pascal): use factory type annotations once supported in DI\n    // issue: https://github.com/angular/angular/issues/3183\n    {provide: Jsonp, useFactory: jsonpFactory, deps: [JSONPBackend, RequestOptions]},\n    BrowserJsonp,\n    {provide: RequestOptions, useClass: BaseRequestOptions},\n    {provide: ResponseOptions, useClass: BaseResponseOptions},\n    JSONPBackend,\n  ],\n})\nexport class JsonpModule {\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common package.\n */\n\nimport {Version} from '@angular/core';\n/**\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nexport const VERSION = new Version('7.2.16');\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {BrowserJsonp as Éµangular_packages_http_http_e} from './src/backends/browser_jsonp';\nexport {Body as Éµangular_packages_http_http_f} from './src/body';\nexport {_createDefaultCookieXSRFStrategy as Éµangular_packages_http_http_a,httpFactory as Éµangular_packages_http_http_b,jsonpFactory as Éµangular_packages_http_http_c} from './src/http_module';\nexport {RequestArgs as Éµangular_packages_http_http_d} from './src/interfaces';"]}