{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, Input, ContentChildren, Directive, NgModule } from '@angular/core';\nimport { setLines, MatLine, MatLineModule, MatCommonModule } from '@angular/material/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport * as i1 from '@angular/cdk/bidi';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\n\nconst _c0 = [\"*\"];\nconst _c1 = [[[\"\", \"mat-grid-avatar\", \"\"], [\"\", \"matGridAvatar\", \"\"]], [[\"\", \"mat-line\", \"\"], [\"\", \"matLine\", \"\"]], \"*\"];\nconst _c2 = [\"[mat-grid-avatar], [matGridAvatar]\", \"[mat-line], [matLine]\", \"*\"];\nconst _c3 = \".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}.mat-grid-tile-content{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}\\n\";\n\nclass TileCoordinator {\n  constructor() {\n    /** Index at which the search for the next gap will start. */\n    this.columnIndex = 0;\n    /** The current row index. */\n\n    this.rowIndex = 0;\n  }\n  /** Gets the total number of rows occupied by tiles */\n\n\n  get rowCount() {\n    return this.rowIndex + 1;\n  }\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n\n\n  get rowspan() {\n    const lastRowMax = Math.max(...this.tracker); // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n  /**\n   * Updates the tile positions.\n   * @param numColumns Amount of columns in the grid.\n   * @param tiles Tiles to be positioned.\n   */\n\n\n  update(numColumns, tiles) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n  /** Calculates the row and col position of a tile. */\n\n\n  _trackTile(tile) {\n    // Find a gap large enough for this tile.\n    const gapStartIndex = this._findMatchingGap(tile.colspan); // Place tile in the resulting gap.\n\n\n    this._markTilePosition(gapStartIndex, tile); // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n\n\n    this.columnIndex = gapStartIndex + tile.colspan;\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n  /** Finds the next available space large enough to fit the tile. */\n\n\n  _findMatchingGap(tileCols) {\n    if (tileCols > this.tracker.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` + `grid with cols=\"${this.tracker.length}\".`);\n    } // Start index is inclusive, end index is exclusive.\n\n\n    let gapStartIndex = -1;\n    let gapEndIndex = -1; // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex); // If there are no more empty spaces in this row at all, move on to the next row.\n\n      if (gapStartIndex == -1) {\n        this._nextRow();\n\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex); // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n\n      this.columnIndex = gapStartIndex + 1; // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while (gapEndIndex - gapStartIndex < tileCols || gapEndIndex == 0); // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n\n\n    return Math.max(gapStartIndex, 0);\n  }\n  /** Move \"down\" to the next row. */\n\n\n  _nextRow() {\n    this.columnIndex = 0;\n    this.rowIndex++; // Decrement all spaces by one to reflect moving down one row.\n\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n\n\n  _findGapEndIndex(gapStartIndex) {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    } // The gap ends with the end of the row.\n\n\n    return this.tracker.length;\n  }\n  /** Update the tile tracker to account for the given tile in the given space. */\n\n\n  _markTilePosition(start, tile) {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n\n}\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\n\n\nclass TilePosition {\n  constructor(row, col) {\n    this.row = row;\n    this.col = col;\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\n\n\nconst MAT_GRID_LIST = new InjectionToken('MAT_GRID_LIST');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nclass MatGridTile {\n  constructor(_element, _gridList) {\n    this._element = _element;\n    this._gridList = _gridList;\n    this._rowspan = 1;\n    this._colspan = 1;\n  }\n  /** Amount of rows that the grid tile takes up. */\n\n\n  get rowspan() {\n    return this._rowspan;\n  }\n\n  set rowspan(value) {\n    this._rowspan = Math.round(coerceNumberProperty(value));\n  }\n  /** Amount of columns that the grid tile takes up. */\n\n\n  get colspan() {\n    return this._colspan;\n  }\n\n  set colspan(value) {\n    this._colspan = Math.round(coerceNumberProperty(value));\n  }\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n\n\n  _setStyle(property, value) {\n    this._element.nativeElement.style[property] = value;\n  }\n\n}\n\nMatGridTile.ɵfac = function MatGridTile_Factory(t) {\n  return new (t || MatGridTile)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(MAT_GRID_LIST, 8));\n};\n\nMatGridTile.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatGridTile,\n  selectors: [[\"mat-grid-tile\"]],\n  hostAttrs: [1, \"mat-grid-tile\"],\n  hostVars: 2,\n  hostBindings: function MatGridTile_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵattribute(\"rowspan\", ctx.rowspan)(\"colspan\", ctx.colspan);\n    }\n  },\n  inputs: {\n    rowspan: \"rowspan\",\n    colspan: \"colspan\"\n  },\n  exportAs: [\"matGridTile\"],\n  ngContentSelectors: _c0,\n  decls: 2,\n  vars: 0,\n  consts: [[1, \"mat-grid-tile-content\"]],\n  template: function MatGridTile_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵprojection(1);\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}.mat-grid-tile-content{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatGridTile, [{\n    type: Component,\n    args: [{\n      selector: 'mat-grid-tile',\n      exportAs: 'matGridTile',\n      host: {\n        'class': 'mat-grid-tile',\n        // Ensures that the \"rowspan\" and \"colspan\" input value is reflected in\n        // the DOM. This is needed for the grid-tile harness.\n        '[attr.rowspan]': 'rowspan',\n        '[attr.colspan]': 'colspan'\n      },\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: \"<div class=\\\"mat-grid-tile-content\\\">\\n  <ng-content></ng-content>\\n</div>\\n\",\n      styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}.mat-grid-tile-content{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_GRID_LIST]\n      }]\n    }];\n  }, {\n    rowspan: [{\n      type: Input\n    }],\n    colspan: [{\n      type: Input\n    }]\n  });\n})();\n\nclass MatGridTileText {\n  constructor(_element) {\n    this._element = _element;\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n}\n\nMatGridTileText.ɵfac = function MatGridTileText_Factory(t) {\n  return new (t || MatGridTileText)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nMatGridTileText.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatGridTileText,\n  selectors: [[\"mat-grid-tile-header\"], [\"mat-grid-tile-footer\"]],\n  contentQueries: function MatGridTileText_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, MatLine, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._lines = _t);\n    }\n  },\n  ngContentSelectors: _c2,\n  decls: 4,\n  vars: 0,\n  consts: [[1, \"mat-grid-list-text\"]],\n  template: function MatGridTileText_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef(_c1);\n      i0.ɵɵprojection(0);\n      i0.ɵɵelementStart(1, \"div\", 0);\n      i0.ɵɵprojection(2, 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵprojection(3, 2);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatGridTileText, [{\n    type: Component,\n    args: [{\n      selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      template: \"<ng-content select=\\\"[mat-grid-avatar], [matGridAvatar]\\\"></ng-content>\\n<div class=\\\"mat-grid-list-text\\\"><ng-content select=\\\"[mat-line], [matLine]\\\"></ng-content></div>\\n<ng-content></ng-content>\\n\"\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, {\n    _lines: [{\n      type: ContentChildren,\n      args: [MatLine, {\n        descendants: true\n      }]\n    }]\n  });\n})();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n\n\nclass MatGridAvatarCssMatStyler {}\n\nMatGridAvatarCssMatStyler.ɵfac = function MatGridAvatarCssMatStyler_Factory(t) {\n  return new (t || MatGridAvatarCssMatStyler)();\n};\n\nMatGridAvatarCssMatStyler.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatGridAvatarCssMatStyler,\n  selectors: [[\"\", \"mat-grid-avatar\", \"\"], [\"\", \"matGridAvatar\", \"\"]],\n  hostAttrs: [1, \"mat-grid-avatar\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatGridAvatarCssMatStyler, [{\n    type: Directive,\n    args: [{\n      selector: '[mat-grid-avatar], [matGridAvatar]',\n      host: {\n        'class': 'mat-grid-avatar'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n\n\nclass MatGridTileHeaderCssMatStyler {}\n\nMatGridTileHeaderCssMatStyler.ɵfac = function MatGridTileHeaderCssMatStyler_Factory(t) {\n  return new (t || MatGridTileHeaderCssMatStyler)();\n};\n\nMatGridTileHeaderCssMatStyler.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatGridTileHeaderCssMatStyler,\n  selectors: [[\"mat-grid-tile-header\"]],\n  hostAttrs: [1, \"mat-grid-tile-header\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatGridTileHeaderCssMatStyler, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-grid-tile-header',\n      host: {\n        'class': 'mat-grid-tile-header'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n\n\nclass MatGridTileFooterCssMatStyler {}\n\nMatGridTileFooterCssMatStyler.ɵfac = function MatGridTileFooterCssMatStyler_Factory(t) {\n  return new (t || MatGridTileFooterCssMatStyler)();\n};\n\nMatGridTileFooterCssMatStyler.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatGridTileFooterCssMatStyler,\n  selectors: [[\"mat-grid-tile-footer\"]],\n  hostAttrs: [1, \"mat-grid-tile-footer\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatGridTileFooterCssMatStyler, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-grid-tile-footer',\n      host: {\n        'class': 'mat-grid-tile-footer'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\n\n\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\n\nclass TileStyler {\n  constructor() {\n    this._rows = 0;\n    this._rowspan = 0;\n  }\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n\n\n  init(gutterSize, tracker, cols, direction) {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n\n\n  getBaseTileSize(sizePercent, gutterFraction) {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n\n\n  getTilePosition(baseSize, offset) {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n\n\n  getTileSize(baseSize, span) {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n\n\n  setStyle(tile, rowIndex, colIndex) {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols; // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n  /** Sets the horizontal placement of the tile in the list. */\n\n\n  setColStyles(tile, colIndex, percentWidth, gutterWidth) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth); // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n\n\n  getGutterSpan() {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n\n\n  getTileSpan(tileHeight) {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n\n\n  getComputedHeight() {\n    return null;\n  }\n\n}\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\n\n\nclass FixedTileStyler extends TileStyler {\n  constructor(fixedRowHeight) {\n    super();\n    this.fixedRowHeight = fixedRowHeight;\n  }\n\n  init(gutterSize, tracker, cols, direction) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n\n  setRowStyles(tile, rowIndex) {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight() {\n    return ['height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)];\n  }\n\n  reset(list) {\n    list._setListStyle(['height', null]);\n\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n\n        tile._setStyle('height', null);\n      });\n    }\n  }\n\n}\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\n\n\nclass RatioTileStyler extends TileStyler {\n  constructor(value) {\n    super();\n\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile, rowIndex, percentWidth, gutterWidth) {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth); // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight() {\n    return ['paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)];\n  }\n\n  reset(list) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  _parseRatio(value) {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n\n}\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\n\n\nclass FitTileStyler extends TileStyler {\n  setRowStyles(tile, rowIndex) {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan; // Fraction of the horizontal gutter size that each column takes up.\n\n    let gutterHeightPerTile = (this._rows - 1) / this._rows; // Base vertical size of a column.\n\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n\n        tile._setStyle('height', null);\n      });\n    }\n  }\n\n}\n/** Wraps a CSS string in a calc function */\n\n\nfunction calc(exp) {\n  return `calc(${exp})`;\n}\n/** Appends pixels to a CSS string if no units are given. */\n\n\nfunction normalizeUnits(value) {\n  return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\n\nconst MAT_FIT_MODE = 'fit';\n\nclass MatGridList {\n  constructor(_element, _dir) {\n    this._element = _element;\n    this._dir = _dir;\n    /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n\n    this._gutter = '1px';\n  }\n  /** Amount of columns in the grid list. */\n\n\n  get cols() {\n    return this._cols;\n  }\n\n  set cols(value) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n  /** Size of the grid list's gutter in pixels. */\n\n\n  get gutterSize() {\n    return this._gutter;\n  }\n\n  set gutterSize(value) {\n    this._gutter = `${value == null ? '' : value}`;\n  }\n  /** Set internal representation of row height from the user-provided value. */\n\n\n  get rowHeight() {\n    return this._rowHeight;\n  }\n\n  set rowHeight(value) {\n    const newValue = `${value == null ? '' : value}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n\n    this._checkRowHeight();\n  }\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n\n\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n  /** Throw a friendly error if cols property is missing */\n\n\n  _checkCols() {\n    if (!this.cols && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` + `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n  /** Default to equal width:height if rowHeight property is missing */\n\n\n  _checkRowHeight() {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n\n\n  _setTileStyler(rowHeight) {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n  /** Computes and applies the size and position for all children grid tiles. */\n\n\n  _layoutTiles() {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n\n    const tracker = this._tileCoordinator;\n\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    this._tileCoordinator.update(this.cols, tiles);\n\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n  /** Sets style on the main grid-list element, given the style name and value. */\n\n\n  _setListStyle(style) {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n\n}\n\nMatGridList.ɵfac = function MatGridList_Factory(t) {\n  return new (t || MatGridList)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.Directionality, 8));\n};\n\nMatGridList.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatGridList,\n  selectors: [[\"mat-grid-list\"]],\n  contentQueries: function MatGridList_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, MatGridTile, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._tiles = _t);\n    }\n  },\n  hostAttrs: [1, \"mat-grid-list\"],\n  hostVars: 1,\n  hostBindings: function MatGridList_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵattribute(\"cols\", ctx.cols);\n    }\n  },\n  inputs: {\n    cols: \"cols\",\n    gutterSize: \"gutterSize\",\n    rowHeight: \"rowHeight\"\n  },\n  exportAs: [\"matGridList\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: MAT_GRID_LIST,\n    useExisting: MatGridList\n  }])],\n  ngContentSelectors: _c0,\n  decls: 2,\n  vars: 0,\n  template: function MatGridList_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵelementStart(0, \"div\");\n      i0.ɵɵprojection(1);\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [_c3],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatGridList, [{\n    type: Component,\n    args: [{\n      selector: 'mat-grid-list',\n      exportAs: 'matGridList',\n      host: {\n        'class': 'mat-grid-list',\n        // Ensures that the \"cols\" input value is reflected in the DOM. This is\n        // needed for the grid-list harness.\n        '[attr.cols]': 'cols'\n      },\n      providers: [{\n        provide: MAT_GRID_LIST,\n        useExisting: MatGridList\n      }],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      template: \"<div>\\n  <ng-content></ng-content>\\n</div>\",\n      styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}.mat-grid-tile-content{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i1.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    _tiles: [{\n      type: ContentChildren,\n      args: [MatGridTile, {\n        descendants: true\n      }]\n    }],\n    cols: [{\n      type: Input\n    }],\n    gutterSize: [{\n      type: Input\n    }],\n    rowHeight: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nclass MatGridListModule {}\n\nMatGridListModule.ɵfac = function MatGridListModule_Factory(t) {\n  return new (t || MatGridListModule)();\n};\n\nMatGridListModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatGridListModule\n});\nMatGridListModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[MatLineModule, MatCommonModule], MatLineModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatGridListModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatLineModule, MatCommonModule],\n      exports: [MatGridList, MatGridTile, MatGridTileText, MatLineModule, MatCommonModule, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler],\n      declarations: [MatGridList, MatGridTile, MatGridTileText, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Privately exported for the grid-list harness.\n\n\nconst ɵTileCoordinator = TileCoordinator;\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatGridAvatarCssMatStyler, MatGridList, MatGridListModule, MatGridTile, MatGridTileFooterCssMatStyler, MatGridTileHeaderCssMatStyler, MatGridTileText, ɵTileCoordinator };","map":{"version":3,"sources":["/Users/kacylombard/Desktop/TutorCare/TutorCare/tutorcare-core/client/node_modules/@angular/material/fesm2015/grid-list.mjs"],"names":["i0","InjectionToken","Component","ViewEncapsulation","ChangeDetectionStrategy","Optional","Inject","Input","ContentChildren","Directive","NgModule","setLines","MatLine","MatLineModule","MatCommonModule","coerceNumberProperty","i1","TileCoordinator","constructor","columnIndex","rowIndex","rowCount","rowspan","lastRowMax","Math","max","tracker","update","numColumns","tiles","Array","fill","length","positions","map","tile","_trackTile","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","ngDevMode","Error","gapEndIndex","_nextRow","indexOf","_findGapEndIndex","i","start","row","col","MAT_GRID_LIST","MatGridTile","_element","_gridList","_rowspan","_colspan","value","round","_setStyle","property","nativeElement","style","ɵfac","ElementRef","ɵcmp","type","args","selector","exportAs","host","encapsulation","None","changeDetection","OnPush","template","styles","undefined","decorators","MatGridTileText","ngAfterContentInit","_lines","descendants","MatGridAvatarCssMatStyler","ɵdir","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","cssCalcAllowedValue","TileStyler","_rows","init","gutterSize","cols","direction","_gutterSize","normalizeUnits","_cols","_direction","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","offset","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","test","reset","list","_setListStyle","_tiles","forEach","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","split","parseFloat","FitTileStyler","gutterHeightPerTile","exp","match","MAT_FIT_MODE","MatGridList","_dir","_gutter","rowHeight","_rowHeight","newValue","_setTileStyler","ngOnInit","_checkCols","_checkRowHeight","ngAfterContentChecked","_layoutTiles","_tileStyler","_tileCoordinator","filter","index","pos","Directionality","provide","useExisting","providers","MatGridListModule","ɵmod","ɵinj","imports","exports","declarations","ɵTileCoordinator"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, Input, ContentChildren, Directive, NgModule } from '@angular/core';\nimport { setLines, MatLine, MatLineModule, MatCommonModule } from '@angular/material/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport * as i1 from '@angular/cdk/bidi';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nclass TileCoordinator {\n    constructor() {\n        /** Index at which the search for the next gap will start. */\n        this.columnIndex = 0;\n        /** The current row index. */\n        this.rowIndex = 0;\n    }\n    /** Gets the total number of rows occupied by tiles */\n    get rowCount() {\n        return this.rowIndex + 1;\n    }\n    /**\n     * Gets the total span of rows occupied by tiles.\n     * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n     */\n    get rowspan() {\n        const lastRowMax = Math.max(...this.tracker);\n        // if any of the tiles has a rowspan that pushes it beyond the total row count,\n        // add the difference to the rowcount\n        return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n    }\n    /**\n     * Updates the tile positions.\n     * @param numColumns Amount of columns in the grid.\n     * @param tiles Tiles to be positioned.\n     */\n    update(numColumns, tiles) {\n        this.columnIndex = 0;\n        this.rowIndex = 0;\n        this.tracker = new Array(numColumns);\n        this.tracker.fill(0, 0, this.tracker.length);\n        this.positions = tiles.map(tile => this._trackTile(tile));\n    }\n    /** Calculates the row and col position of a tile. */\n    _trackTile(tile) {\n        // Find a gap large enough for this tile.\n        const gapStartIndex = this._findMatchingGap(tile.colspan);\n        // Place tile in the resulting gap.\n        this._markTilePosition(gapStartIndex, tile);\n        // The next time we look for a gap, the search will start at columnIndex, which should be\n        // immediately after the tile that has just been placed.\n        this.columnIndex = gapStartIndex + tile.colspan;\n        return new TilePosition(this.rowIndex, gapStartIndex);\n    }\n    /** Finds the next available space large enough to fit the tile. */\n    _findMatchingGap(tileCols) {\n        if (tileCols > this.tracker.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                `grid with cols=\"${this.tracker.length}\".`);\n        }\n        // Start index is inclusive, end index is exclusive.\n        let gapStartIndex = -1;\n        let gapEndIndex = -1;\n        // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n        do {\n            // If we've reached the end of the row, go to the next row.\n            if (this.columnIndex + tileCols > this.tracker.length) {\n                this._nextRow();\n                gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n                gapEndIndex = this._findGapEndIndex(gapStartIndex);\n                continue;\n            }\n            gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n            // If there are no more empty spaces in this row at all, move on to the next row.\n            if (gapStartIndex == -1) {\n                this._nextRow();\n                gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n                gapEndIndex = this._findGapEndIndex(gapStartIndex);\n                continue;\n            }\n            gapEndIndex = this._findGapEndIndex(gapStartIndex);\n            // If a gap large enough isn't found, we want to start looking immediately after the current\n            // gap on the next iteration.\n            this.columnIndex = gapStartIndex + 1;\n            // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n            // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n        } while (gapEndIndex - gapStartIndex < tileCols || gapEndIndex == 0);\n        // If we still didn't manage to find a gap, ensure that the index is\n        // at least zero so the tile doesn't get pulled out of the grid.\n        return Math.max(gapStartIndex, 0);\n    }\n    /** Move \"down\" to the next row. */\n    _nextRow() {\n        this.columnIndex = 0;\n        this.rowIndex++;\n        // Decrement all spaces by one to reflect moving down one row.\n        for (let i = 0; i < this.tracker.length; i++) {\n            this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n        }\n    }\n    /**\n     * Finds the end index (exclusive) of a gap given the index from which to start looking.\n     * The gap ends when a non-zero value is found.\n     */\n    _findGapEndIndex(gapStartIndex) {\n        for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n            if (this.tracker[i] != 0) {\n                return i;\n            }\n        }\n        // The gap ends with the end of the row.\n        return this.tracker.length;\n    }\n    /** Update the tile tracker to account for the given tile in the given space. */\n    _markTilePosition(start, tile) {\n        for (let i = 0; i < tile.colspan; i++) {\n            this.tracker[start + i] = tile.rowspan;\n        }\n    }\n}\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nclass TilePosition {\n    constructor(row, col) {\n        this.row = row;\n        this.col = col;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nconst MAT_GRID_LIST = new InjectionToken('MAT_GRID_LIST');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatGridTile {\n    constructor(_element, _gridList) {\n        this._element = _element;\n        this._gridList = _gridList;\n        this._rowspan = 1;\n        this._colspan = 1;\n    }\n    /** Amount of rows that the grid tile takes up. */\n    get rowspan() {\n        return this._rowspan;\n    }\n    set rowspan(value) {\n        this._rowspan = Math.round(coerceNumberProperty(value));\n    }\n    /** Amount of columns that the grid tile takes up. */\n    get colspan() {\n        return this._colspan;\n    }\n    set colspan(value) {\n        this._colspan = Math.round(coerceNumberProperty(value));\n    }\n    /**\n     * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n     * \"Changed after checked\" errors that would occur with HostBinding.\n     */\n    _setStyle(property, value) {\n        this._element.nativeElement.style[property] = value;\n    }\n}\nMatGridTile.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatGridTile, deps: [{ token: i0.ElementRef }, { token: MAT_GRID_LIST, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatGridTile.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: MatGridTile, selector: \"mat-grid-tile\", inputs: { rowspan: \"rowspan\", colspan: \"colspan\" }, host: { properties: { \"attr.rowspan\": \"rowspan\", \"attr.colspan\": \"colspan\" }, classAttribute: \"mat-grid-tile\" }, exportAs: [\"matGridTile\"], ngImport: i0, template: \"<div class=\\\"mat-grid-tile-content\\\">\\n  <ng-content></ng-content>\\n</div>\\n\", styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}.mat-grid-tile-content{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatGridTile, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-grid-tile', exportAs: 'matGridTile', host: {\n                        'class': 'mat-grid-tile',\n                        // Ensures that the \"rowspan\" and \"colspan\" input value is reflected in\n                        // the DOM. This is needed for the grid-tile harness.\n                        '[attr.rowspan]': 'rowspan',\n                        '[attr.colspan]': 'colspan',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: \"<div class=\\\"mat-grid-tile-content\\\">\\n  <ng-content></ng-content>\\n</div>\\n\", styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}.mat-grid-tile-content{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_GRID_LIST]\n                    }] }];\n    }, propDecorators: { rowspan: [{\n                type: Input\n            }], colspan: [{\n                type: Input\n            }] } });\nclass MatGridTileText {\n    constructor(_element) {\n        this._element = _element;\n    }\n    ngAfterContentInit() {\n        setLines(this._lines, this._element);\n    }\n}\nMatGridTileText.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatGridTileText, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nMatGridTileText.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: MatGridTileText, selector: \"mat-grid-tile-header, mat-grid-tile-footer\", queries: [{ propertyName: \"_lines\", predicate: MatLine, descendants: true }], ngImport: i0, template: \"<ng-content select=\\\"[mat-grid-avatar], [matGridAvatar]\\\"></ng-content>\\n<div class=\\\"mat-grid-list-text\\\"><ng-content select=\\\"[mat-line], [matLine]\\\"></ng-content></div>\\n<ng-content></ng-content>\\n\", changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatGridTileText, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-grid-tile-header, mat-grid-tile-footer', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: \"<ng-content select=\\\"[mat-grid-avatar], [matGridAvatar]\\\"></ng-content>\\n<div class=\\\"mat-grid-list-text\\\"><ng-content select=\\\"[mat-line], [matLine]\\\"></ng-content></div>\\n<ng-content></ng-content>\\n\" }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { _lines: [{\n                type: ContentChildren,\n                args: [MatLine, { descendants: true }]\n            }] } });\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nclass MatGridAvatarCssMatStyler {\n}\nMatGridAvatarCssMatStyler.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatGridAvatarCssMatStyler, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatGridAvatarCssMatStyler.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.0\", type: MatGridAvatarCssMatStyler, selector: \"[mat-grid-avatar], [matGridAvatar]\", host: { classAttribute: \"mat-grid-avatar\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatGridAvatarCssMatStyler, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-grid-avatar], [matGridAvatar]',\n                    host: { 'class': 'mat-grid-avatar' },\n                }]\n        }] });\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nclass MatGridTileHeaderCssMatStyler {\n}\nMatGridTileHeaderCssMatStyler.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatGridTileHeaderCssMatStyler, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatGridTileHeaderCssMatStyler.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.0\", type: MatGridTileHeaderCssMatStyler, selector: \"mat-grid-tile-header\", host: { classAttribute: \"mat-grid-tile-header\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatGridTileHeaderCssMatStyler, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-grid-tile-header',\n                    host: { 'class': 'mat-grid-tile-header' },\n                }]\n        }] });\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nclass MatGridTileFooterCssMatStyler {\n}\nMatGridTileFooterCssMatStyler.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatGridTileFooterCssMatStyler, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatGridTileFooterCssMatStyler.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.0\", type: MatGridTileFooterCssMatStyler, selector: \"mat-grid-tile-footer\", host: { classAttribute: \"mat-grid-tile-footer\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatGridTileFooterCssMatStyler, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-grid-tile-footer',\n                    host: { 'class': 'mat-grid-tile-footer' },\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nclass TileStyler {\n    constructor() {\n        this._rows = 0;\n        this._rowspan = 0;\n    }\n    /**\n     * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n     * because these properties haven't been calculated by that point.\n     *\n     * @param gutterSize Size of the grid's gutter.\n     * @param tracker Instance of the TileCoordinator.\n     * @param cols Amount of columns in the grid.\n     * @param direction Layout direction of the grid.\n     */\n    init(gutterSize, tracker, cols, direction) {\n        this._gutterSize = normalizeUnits(gutterSize);\n        this._rows = tracker.rowCount;\n        this._rowspan = tracker.rowspan;\n        this._cols = cols;\n        this._direction = direction;\n    }\n    /**\n     * Computes the amount of space a single 1x1 tile would take up (width or height).\n     * Used as a basis for other calculations.\n     * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n     * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n     * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n     */\n    getBaseTileSize(sizePercent, gutterFraction) {\n        // Take the base size percent (as would be if evenly dividing the size between cells),\n        // and then subtracting the size of one gutter. However, since there are no gutters on the\n        // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n        // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n        // edge evenly among the cells).\n        return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n    }\n    /**\n     * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n     * @param offset Number of tiles that have already been rendered in the row/column.\n     * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @return Position of the tile as a CSS calc() expression.\n     */\n    getTilePosition(baseSize, offset) {\n        // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n        // row/column (offset).\n        return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n    }\n    /**\n     * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n     * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @param span The tile's rowspan or colspan.\n     * @return Size of the tile as a CSS calc() expression.\n     */\n    getTileSize(baseSize, span) {\n        return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n    }\n    /**\n     * Sets the style properties to be applied to a tile for the given row and column index.\n     * @param tile Tile to which to apply the styling.\n     * @param rowIndex Index of the tile's row.\n     * @param colIndex Index of the tile's column.\n     */\n    setStyle(tile, rowIndex, colIndex) {\n        // Percent of the available horizontal space that one column takes up.\n        let percentWidthPerTile = 100 / this._cols;\n        // Fraction of the vertical gutter size that each column takes up.\n        // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n        let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n        this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n        this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    }\n    /** Sets the horizontal placement of the tile in the list. */\n    setColStyles(tile, colIndex, percentWidth, gutterWidth) {\n        // Base horizontal size of a column.\n        let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n        // The width and horizontal position of each tile is always calculated the same way, but the\n        // height and vertical position depends on the rowMode.\n        let side = this._direction === 'rtl' ? 'right' : 'left';\n        tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n        tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n    }\n    /**\n     * Calculates the total size taken up by gutters across one axis of a list.\n     */\n    getGutterSpan() {\n        return `${this._gutterSize} * (${this._rowspan} - 1)`;\n    }\n    /**\n     * Calculates the total size taken up by tiles across one axis of a list.\n     * @param tileHeight Height of the tile.\n     */\n    getTileSpan(tileHeight) {\n        return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n    }\n    /**\n     * Calculates the computed height and returns the correct style property to set.\n     * This method can be implemented by each type of TileStyler.\n     * @docs-private\n     */\n    getComputedHeight() {\n        return null;\n    }\n}\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nclass FixedTileStyler extends TileStyler {\n    constructor(fixedRowHeight) {\n        super();\n        this.fixedRowHeight = fixedRowHeight;\n    }\n    init(gutterSize, tracker, cols, direction) {\n        super.init(gutterSize, tracker, cols, direction);\n        this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n        if (!cssCalcAllowedValue.test(this.fixedRowHeight) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n        }\n    }\n    setRowStyles(tile, rowIndex) {\n        tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n        tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n    }\n    getComputedHeight() {\n        return ['height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)];\n    }\n    reset(list) {\n        list._setListStyle(['height', null]);\n        if (list._tiles) {\n            list._tiles.forEach(tile => {\n                tile._setStyle('top', null);\n                tile._setStyle('height', null);\n            });\n        }\n    }\n}\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nclass RatioTileStyler extends TileStyler {\n    constructor(value) {\n        super();\n        this._parseRatio(value);\n    }\n    setRowStyles(tile, rowIndex, percentWidth, gutterWidth) {\n        let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n        this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n        // Use padding-top and margin-top to maintain the given aspect ratio, as\n        // a percentage-based value for these properties is applied versus the *width* of the\n        // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n        tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n        tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n    }\n    getComputedHeight() {\n        return [\n            'paddingBottom',\n            calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`),\n        ];\n    }\n    reset(list) {\n        list._setListStyle(['paddingBottom', null]);\n        list._tiles.forEach(tile => {\n            tile._setStyle('marginTop', null);\n            tile._setStyle('paddingTop', null);\n        });\n    }\n    _parseRatio(value) {\n        const ratioParts = value.split(':');\n        if (ratioParts.length !== 2 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n        }\n        this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n    }\n}\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nclass FitTileStyler extends TileStyler {\n    setRowStyles(tile, rowIndex) {\n        // Percent of the available vertical space that one row takes up.\n        let percentHeightPerTile = 100 / this._rowspan;\n        // Fraction of the horizontal gutter size that each column takes up.\n        let gutterHeightPerTile = (this._rows - 1) / this._rows;\n        // Base vertical size of a column.\n        let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n        tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n        tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n    }\n    reset(list) {\n        if (list._tiles) {\n            list._tiles.forEach(tile => {\n                tile._setStyle('top', null);\n                tile._setStyle('height', null);\n            });\n        }\n    }\n}\n/** Wraps a CSS string in a calc function */\nfunction calc(exp) {\n    return `calc(${exp})`;\n}\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value) {\n    return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\nconst MAT_FIT_MODE = 'fit';\nclass MatGridList {\n    constructor(_element, _dir) {\n        this._element = _element;\n        this._dir = _dir;\n        /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n        this._gutter = '1px';\n    }\n    /** Amount of columns in the grid list. */\n    get cols() {\n        return this._cols;\n    }\n    set cols(value) {\n        this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n    }\n    /** Size of the grid list's gutter in pixels. */\n    get gutterSize() {\n        return this._gutter;\n    }\n    set gutterSize(value) {\n        this._gutter = `${value == null ? '' : value}`;\n    }\n    /** Set internal representation of row height from the user-provided value. */\n    get rowHeight() {\n        return this._rowHeight;\n    }\n    set rowHeight(value) {\n        const newValue = `${value == null ? '' : value}`;\n        if (newValue !== this._rowHeight) {\n            this._rowHeight = newValue;\n            this._setTileStyler(this._rowHeight);\n        }\n    }\n    ngOnInit() {\n        this._checkCols();\n        this._checkRowHeight();\n    }\n    /**\n     * The layout calculation is fairly cheap if nothing changes, so there's little cost\n     * to run it frequently.\n     */\n    ngAfterContentChecked() {\n        this._layoutTiles();\n    }\n    /** Throw a friendly error if cols property is missing */\n    _checkCols() {\n        if (!this.cols && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`mat-grid-list: must pass in number of columns. ` + `Example: <mat-grid-list cols=\"3\">`);\n        }\n    }\n    /** Default to equal width:height if rowHeight property is missing */\n    _checkRowHeight() {\n        if (!this._rowHeight) {\n            this._setTileStyler('1:1');\n        }\n    }\n    /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n    _setTileStyler(rowHeight) {\n        if (this._tileStyler) {\n            this._tileStyler.reset(this);\n        }\n        if (rowHeight === MAT_FIT_MODE) {\n            this._tileStyler = new FitTileStyler();\n        }\n        else if (rowHeight && rowHeight.indexOf(':') > -1) {\n            this._tileStyler = new RatioTileStyler(rowHeight);\n        }\n        else {\n            this._tileStyler = new FixedTileStyler(rowHeight);\n        }\n    }\n    /** Computes and applies the size and position for all children grid tiles. */\n    _layoutTiles() {\n        if (!this._tileCoordinator) {\n            this._tileCoordinator = new TileCoordinator();\n        }\n        const tracker = this._tileCoordinator;\n        const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n        const direction = this._dir ? this._dir.value : 'ltr';\n        this._tileCoordinator.update(this.cols, tiles);\n        this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n        tiles.forEach((tile, index) => {\n            const pos = tracker.positions[index];\n            this._tileStyler.setStyle(tile, pos.row, pos.col);\n        });\n        this._setListStyle(this._tileStyler.getComputedHeight());\n    }\n    /** Sets style on the main grid-list element, given the style name and value. */\n    _setListStyle(style) {\n        if (style) {\n            this._element.nativeElement.style[style[0]] = style[1];\n        }\n    }\n}\nMatGridList.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatGridList, deps: [{ token: i0.ElementRef }, { token: i1.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatGridList.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: MatGridList, selector: \"mat-grid-list\", inputs: { cols: \"cols\", gutterSize: \"gutterSize\", rowHeight: \"rowHeight\" }, host: { properties: { \"attr.cols\": \"cols\" }, classAttribute: \"mat-grid-list\" }, providers: [\n        {\n            provide: MAT_GRID_LIST,\n            useExisting: MatGridList,\n        },\n    ], queries: [{ propertyName: \"_tiles\", predicate: MatGridTile, descendants: true }], exportAs: [\"matGridList\"], ngImport: i0, template: \"<div>\\n  <ng-content></ng-content>\\n</div>\", styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}.mat-grid-tile-content{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatGridList, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-grid-list', exportAs: 'matGridList', host: {\n                        'class': 'mat-grid-list',\n                        // Ensures that the \"cols\" input value is reflected in the DOM. This is\n                        // needed for the grid-list harness.\n                        '[attr.cols]': 'cols',\n                    }, providers: [\n                        {\n                            provide: MAT_GRID_LIST,\n                            useExisting: MatGridList,\n                        },\n                    ], changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: \"<div>\\n  <ng-content></ng-content>\\n</div>\", styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}.mat-grid-tile-content{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i1.Directionality, decorators: [{\n                        type: Optional\n                    }] }];\n    }, propDecorators: { _tiles: [{\n                type: ContentChildren,\n                args: [MatGridTile, { descendants: true }]\n            }], cols: [{\n                type: Input\n            }], gutterSize: [{\n                type: Input\n            }], rowHeight: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatGridListModule {\n}\nMatGridListModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatGridListModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatGridListModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatGridListModule, declarations: [MatGridList,\n        MatGridTile,\n        MatGridTileText,\n        MatGridTileHeaderCssMatStyler,\n        MatGridTileFooterCssMatStyler,\n        MatGridAvatarCssMatStyler], imports: [MatLineModule, MatCommonModule], exports: [MatGridList,\n        MatGridTile,\n        MatGridTileText,\n        MatLineModule,\n        MatCommonModule,\n        MatGridTileHeaderCssMatStyler,\n        MatGridTileFooterCssMatStyler,\n        MatGridAvatarCssMatStyler] });\nMatGridListModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatGridListModule, imports: [[MatLineModule, MatCommonModule], MatLineModule,\n        MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatGridListModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatLineModule, MatCommonModule],\n                    exports: [\n                        MatGridList,\n                        MatGridTile,\n                        MatGridTileText,\n                        MatLineModule,\n                        MatCommonModule,\n                        MatGridTileHeaderCssMatStyler,\n                        MatGridTileFooterCssMatStyler,\n                        MatGridAvatarCssMatStyler,\n                    ],\n                    declarations: [\n                        MatGridList,\n                        MatGridTile,\n                        MatGridTileText,\n                        MatGridTileHeaderCssMatStyler,\n                        MatGridTileFooterCssMatStyler,\n                        MatGridAvatarCssMatStyler,\n                    ],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Privately exported for the grid-list harness.\nconst ɵTileCoordinator = TileCoordinator;\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatGridAvatarCssMatStyler, MatGridList, MatGridListModule, MatGridTile, MatGridTileFooterCssMatStyler, MatGridTileHeaderCssMatStyler, MatGridTileText, ɵTileCoordinator };\n"]},"metadata":{},"sourceType":"module"}